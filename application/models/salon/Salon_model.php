<?php
defined('BASEPATH') or exit('No direct script access allowed');
require dirname(__DIR__,3) . '/vendor/autoload.php';
use Ratchet\Client\WebSocket;
use React\EventLoop\Factory;
use React\Socket\Connector as ReactConnector;
use React\Socket\SecureConnector;
use Ratchet\Client\Connector;

class Salon_model extends CI_Model{
    public function salon_login(){
        $this->db->select('tbl_branch.*,tbl_branch_subscription_allocation.allocation_status');
        $this->db->join('tbl_salon', 'tbl_salon.id = tbl_branch.salon_id');
        $this->db->join('tbl_branch_subscription_allocation', 'tbl_branch_subscription_allocation.id = tbl_branch.subscription_allocation_id','left');
        $this->db->where('tbl_branch.is_deleted', '0');
        $this->db->where('tbl_salon.is_deleted', '0');
        $this->db->where('tbl_branch.status', '1');
        // $this->db->where('tbl_branch_subscription_allocation.allocation_status', '1');
        // $this->db->where('tbl_branch.subscription_end >=', date('Y-m-d H:i:s'));
        // $this->db->where('tbl_branch.subscription_start <=', date('Y-m-d H:i:s'));
        $this->db->where('tbl_branch.email', $this->input->post('email'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 
        if (!empty($result)) {
            if($this->input->post('password') != $result->password){
                return '4';
            }else{
                // if($result->allocation_status != "1"){
                //     return '2';
                // }
                
                // $currentDateTime = date('Y-m-d H:i:s');
                // if (!(strtotime($result->subscription_end) >= strtotime($currentDateTime) && 
                //     strtotime($result->subscription_start) <= strtotime($currentDateTime))) {
                //     return '3';
                // }

                $this->db->where('is_deleted', '0');
                $this->db->where('branch_id',$result->id);
                $this->db->where('salon_id',$result->salon_id);
                $store = $this->db->get('tbl_store_profile');
                $store = $store->row();

                $servicable_genders = [];
                if(!empty($result)){
                    if($result->category == '1' || $result->category == '0'){
                        $servicable_genders = [$result->category];
                    }elseif($result->category == '2'){
                        $servicable_genders = ['0','1'];
                    }
                }
                
                $subscription_slugs_array = $this->get_subscription_slugs($result->subscription_id);

                $session = array(
                    'branch_id' 	=> $result->id,
                    'salon_id' 		=> $result->salon_id,
                    'branch_name' 	=> $result->branch_name,
                    'store_gender' 	=> !empty($result) ? $result->category : '',
                    'servicable_genders' 	=> implode(',',$servicable_genders),
                    'subscription_id' 	        => !empty($subscription_data) ? $subscription_data->id : '',
                    'subscription_features' 	=> !empty($subscription_data) ? $subscription_data->features : '',
                    'whatsapp_notification_features' => !empty($subscription_data) ? $subscription_data->whatsapp_notification_features : '',
                    'subscription_feature_slugs'=> !empty($subscription_slugs_array) ? implode(',',$subscription_slugs_array) : ''
                );

                $this->session->set_userdata($session);

                return '1';
            }
        } else {
            return '0';
        }
    }  
    public function get_subscription_slugs($id){
        $this->db->where('id',$id);
        $subscription_data = $this->db->get('tbl_subscription_master');
        $subscription_data = $subscription_data->row();
        
        if(!empty($subscription_data)){
            $this->db->where('is_deleted', '0');
            $this->db->where('feature !=', '51');
            $this->db->where_in('feature',explode(',',$subscription_data->features));
            $subscription_slugs = $this->db->get('tbl_subscription_feature_slug');
            $subscription_slugs = $subscription_slugs->result();
            if(!empty($subscription_slugs)){
                foreach($subscription_slugs as $subscription_slugs_result){
                    $subscription_slugs_array[] = $subscription_slugs_result->slug;
                }
            }else{
                $subscription_slugs_array = [];
            }

            if($subscription_data->whatsapp_notification_features != ""){
                $whatsapp_notification_features = explode(',',$subscription_data->whatsapp_notification_features);
                if(!empty($whatsapp_notification_features)){
                    for($i=0;$i<count($whatsapp_notification_features);$i++){
                        $subscription_slugs_array[] = $whatsapp_notification_features[$i];
                    }
                }
            }

        }else{
            $subscription_slugs_array = [];
        }
        return $subscription_slugs_array;
    }
    public function set_updated_subscription_data_ajx(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row();
        if(!empty($result)){
			$this->db->where('id',$result->subscription_id);
			$subscription_data = $this->db->get('tbl_subscription_master');
			$subscription_data = $subscription_data->row();
            
            $subscription_slugs_array = $this->get_subscription_slugs($result->subscription_id);

            $this->session->unset_userdata('subscription_id');
            $this->session->unset_userdata('subscription_features');
            $this->session->unset_userdata('subscription_feature_slugs');
            $this->session->unset_userdata('whatsapp_notification_features');
            $new_session_data = array(
                'subscription_id' 	        => !empty($subscription_data) ? $subscription_data->id : '',
                'subscription_features' 	=> !empty($subscription_data) ? $subscription_data->features : '',
                'whatsapp_notification_features' => !empty($subscription_data) ? $subscription_data->whatsapp_notification_features : '',
                'subscription_feature_slugs'=> !empty($subscription_slugs_array) ? implode(',',$subscription_slugs_array) : ''
            );
            $this->session->set_userdata($new_session_data);
            echo '1';
        }else{
            echo '0';
        }
    }
    public function set_updated_offer_data_ajx(){
        $this->db->where('is_deleted', '0');
        $this->db->where('offer_starts !=', null);
        $this->db->where('offer_ends !=', null);
        $result = $this->db->get('tbl_offers');
        $result = $result->result();
        if(!empty($result)){
            foreach($result as $row){
                $offer_ends = date('Y-m-d',strtotime($row->offer_ends));
                $validity_status = '1';
                $today = new DateTime();
                if (new DateTime($offer_ends) < $today) {
                    $validity_status = '0';
                }

                $data = array(
                    'validity_status'   => $validity_status
                );
                $this->db->where('id', $row->id);
                $this->db->update('tbl_offers',$data);
            }
            echo '1';
        }else{
            echo '0';
        }
    }
    
    public function set_updated_active_booking_rule_data_ajx(){
        $this->db->where('booking_rule_setup_status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row();
        if(!empty($result)){
            if($result->last_booking_rule_setup_activated != ""){
                $date = new DateTime($result->last_booking_rule_setup_activated);
                $date->modify('+1 day');
                $activate_from = $date->format('Y-m-d H:i:s');

                if(date('Y-m-d H:i:s') >= $activate_from){
                    $data = array(
                        'booking_rule_setup_status'         =>  '0',
                        'last_booking_rule_setup_activated' =>  null
                    );
                    $this->db->where('id', $result->id);
                    $this->db->update('tbl_branch',$data);
                    echo '1';
                }else{
                    echo '0';
                }
            }else{
                echo '0';
            }
        }else{
            echo '0';
        }
    }
    
    public function set_updated_inactive_booking_rule_data_ajx(){
        $this->db->where('booking_rule_setup_status', '0');
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row();
        if(!empty($result)){
            if($result->last_booking_rule_setup_block != ""){
                $date = new DateTime($result->last_booking_rule_setup_block);
                $date->modify('+1 day');
                $activate_from = $date->format('Y-m-d H:i:s');

                if(date('Y-m-d H:i:s') >= $activate_from){
                    $data = array(
                        'booking_rule_setup_status'     =>  '1',
                        'last_booking_rule_setup_block' =>  null
                    );
                    $this->db->where('id', $result->id);
                    $this->db->update('tbl_branch',$data);
                    echo '1';
                }else{
                    echo '0';
                }
            }else{
                echo '0';
            }
        }else{
            echo '0';
        }
    }
    public function set_short_break_lapsed_data_ajx(){
        $this->db->where('break_status', '0');
        $this->db->where('is_deleted', '0');
        $this->db->where('to <', date('Y-m-d H:i:s'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_stylist_short_breaks');
        $result = $result->result();
        $is_updated = false;
        if(!empty($result)){
            foreach($result as $row){
                if(date('Y-m-d H:i:s') > date('Y-m-d H:i:s',strtotime($row->to))){
                    $data = array(
                        'break_status'  =>  '2'
                    );
                    $this->db->where('id', $row->id);
                    $this->db->update('tbl_stylist_short_breaks',$data);

                    if(!$is_updated){
                        $is_updated = true;
                    }
                }
            }

            if($is_updated){
                echo '1';
            }else{
                echo '0';
            }
        }else{
            echo '0';
        }
    }
    public function get_user_profile(){
        $this->db->select('tbl_branch.*,tbl_subscription_master.subscription_name');
        $this->db->join('tbl_subscription_master', 'tbl_subscription_master.id = tbl_branch.subscription_id', 'left');
        $this->db->where('tbl_branch.id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_branch.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row();
        return $result;
    }
    public function get_store_category(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_store_profile');
        $result = $result->row();
        return $result;
    }
    public function get_store_category_new(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row();
        return $result;
    }
    public function get_low_stock_products(){
        $this->db->where('low_stock_alert', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('CAST(current_stock AS UNSIGNED) <= CAST(low_stock AS UNSIGNED)', NULL, FALSE);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product');
        $result = $result->result();
        return $result;
    }
    public function get_salon_all_staff(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_employee');
        return $result->num_rows();
    } 
    public function booking_payment(){
		$data = array(
			'branch_id' => $this->session->userdata('branch_id'),
			'salon_id' => $this->session->userdata('salon_id'),
			'amount' => $this->input->post('amount'),
			'stylist_id' => $this->input->post('stylist_id'),
			'service_id' => $this->input->post('service_id'),
			'customer_id' => $this->input->post('customer_id'),
			'payment_date' => $this->input->post('payment_date'),
			'payment_mode' => $this->input->post('payment_mode'),
			'booking_status' => '5',
		); 
		$data1 = array(
			'booking_status' => '5',
		); 
		if($this->input->post('id') == ""){
			$date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
			$new_arr = array_merge($data, $date);
			$existing_booking = $this->db->get_where('tbl_new_booking', array('stylist' => $data['stylist_id'], 'customer_name' => $data['customer_id']))->row();

			if ($existing_booking) {
				$this->db->where('id', $existing_booking->id);
				$this->db->update('tbl_new_booking', $data1);
			}  
			$this->db->insert('tbl_service_payment', $new_arr);
			$last_insert_id = $this->db->insert_id();
			redirect('booking-print/' . $last_insert_id);
			return 0;
		}else{
			$this->db->where('id', $this->input->post('id'));
			$this->db->update('tbl_service_payment', $data);
			$existing_booking = $this->db->get_where('tbl_new_booking', array('stylist_id' => $data['stylist_id'], 'customer_id' => $data['customer_id']))->row();
			if($existing_booking){
				$this->db->where('id', $existing_booking->id);
				$this->db->update('tbl_new_booking', $data1);
			} 
			return 1;
		}
	} 
	public function cancel_booking(){
		$data = array(
			'is_deleted' => '1',
		);
		if($this->input->post('id') == ""){
			$date = array(
				'created_on'    => date("Y-m-d H:i:s")
			);
			$new_arr = array_merge($data, $date);
			$this->db->insert('tbl_new_booking', $new_arr);
			return 0;
		}else{
			$this->db->where('id', $this->input->post('id'));
			$this->db->update('tbl_new_booking', $data);
			return 1;
		}
	} 
	public function reschedule_booking_ajax(){
		$data = array(
			'time_slot' 		=> $this->input->post('time_slot'),
			'booking_date' 		=> $this->input->post('booking_date'),
			'stylist' 			=> $this->input->post('stylist'),
		);
		if($this->input->post('id') != ""){
			$this->db->where('id', $this->input->post('id'));
			$this->db->update('tbl_new_booking', $data);
			$this->session->set_flashdata('success', 'Booking Reshedule successfully');
			if (!empty($data)) {
				echo 1;
			}else{
				echo 0;
			} 
		}
	}
	public function add_booking_notes(){
		$data = array(
			'personal_note' => $this->input->post('personal_note'),
			'note' => $this->input->post('note'),
		); 
		if ($this->input->post('id') !== "") {
			$date = array(
				'created_on'    => date("Y-m-d H:i:s")
			);
			$new_arr = array_merge($data, $date);
			$this->db->where('id', $this->input->post('id'));
			$this->db->update('tbl_new_booking', $new_arr);
			return 1;
		}
	} 
    public function get_salon_services_list_for_calender_booking(){
        $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_salon_emp_service.id', 'DESC');
    
        $result = $this->db->get();
        return $result->result();
    }
    public function get_all_salon_branch_services()
    {       
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_salon_emp_service');
        return $result->result();
    }
    public function get_all_booking_status_list(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_service_payment');
        $result = $result->result();
        return $result;
    }

    public function get_single_booking_list(){
		$this->db->select('tbl_service_payment.*, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
		$this->db->from('tbl_service_payment');
		$this->db->join('tbl_salon_customer', 'tbl_service_payment.customer_id = tbl_salon_customer.id', 'left');
		$this->db->where('tbl_service_payment.is_deleted', '0');
		$this->db->where('tbl_service_payment.id', $this->uri->segment(2));
		$this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id')); 
		$result = $this->db->get();
		$result = $result->row(); 
		return $result;
	}  
    public function get_single_product_booking_details($id){
		$this->db->select('tbl_new_booking.*, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
		$this->db->from('tbl_new_booking');
		$this->db->join('tbl_salon_customer', 'tbl_new_booking.customer_name = tbl_salon_customer.id');
		$this->db->where('tbl_new_booking.is_deleted', '0');
		$this->db->where('tbl_new_booking.booking_type', '1');
		$this->db->where('tbl_new_booking.id', $id);
		$result = $this->db->get();
		$result = $result->row(); 
		return $result;
	}  
    public function get_single_booking_details($id){
		$this->db->select('tbl_new_booking.*, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
		$this->db->from('tbl_new_booking');
		$this->db->join('tbl_salon_customer', 'tbl_new_booking.customer_name = tbl_salon_customer.id');
		$this->db->where('tbl_new_booking.is_deleted', '0');
		$this->db->where('tbl_new_booking.id', $id);
		$result = $this->db->get();
		$result = $result->row(); 
		return $result;
	} 
    public function get_single_booking_payment_details($booking_id,$id){
		$this->db->select('tbl_service_payment.*, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone,tbl_booking_payment_entry.opening_pending_amount');
		$this->db->from('tbl_service_payment');
		$this->db->join('tbl_salon_customer', 'tbl_service_payment.customer_name = tbl_salon_customer.id');
		$this->db->join('tbl_booking_payment_entry', 'tbl_booking_payment_entry.booking_payment_id = tbl_service_payment.id','left');
		$this->db->where('tbl_service_payment.is_deleted', '0');
		$this->db->where('tbl_service_payment.booking_id', $booking_id);
		$this->db->where('tbl_service_payment.id', $id);
		$result = $this->db->get();
		$result = $result->row(); 
		return $result;
	} 
    public function get_service_paid_products($service_details_id,$booking_id){
		$this->db->select('tbl_booking_services_products_details.*,tbl_product.product_name,tbl_new_booking.selected_coupon_id,tbl_new_booking.pacakge_id,tbl_new_booking.package_amount,tbl_new_booking.total_service_price,tbl_new_booking.total_product_price,tbl_new_booking.service_price,tbl_new_booking.product_price as booking_product_price,tbl_new_booking.gst_amount,tbl_new_booking.payble_price,tbl_new_booking.coupon_discount_amount,tbl_new_booking.reward_discount_amount,tbl_new_booking.booking_amount,tbl_new_booking.amount_to_paid,tbl_new_booking.is_giftcard_applied,tbl_new_booking.applied_giftcard_id,tbl_new_booking.gift_discount,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.booking_date,tbl_new_booking.note,tbl_new_booking.payment_date,tbl_new_booking.payment_mode,tbl_new_booking.payment_status,tbl_new_booking.reminder, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
		$this->db->from('tbl_booking_services_products_details');
		$this->db->join('tbl_salon_customer', 'tbl_booking_services_products_details.customer_name = tbl_salon_customer.id');
		$this->db->join('tbl_new_booking', 'tbl_booking_services_products_details.booking_id = tbl_new_booking.id');
		$this->db->join('tbl_product', 'tbl_booking_services_products_details.product_id = tbl_product.id');
		$this->db->where('tbl_booking_services_products_details.payment_status', '1');
		$this->db->where('tbl_booking_services_products_details.is_deleted', '0');
		$this->db->where('tbl_booking_services_products_details.booking_service_details_id', $service_details_id);
		$this->db->where('tbl_booking_services_products_details.booking_id', $booking_id);
		$result = $this->db->get();
		$result = $result->result(); 
		return $result;
	} 
    public function get_single_product_booking_product_details($id){
		$this->db->select('tbl_only_product_booking_details.*,tbl_product.product_name,tbl_new_booking.total_product_price,tbl_new_booking.product_price,tbl_new_booking.gst_amount,tbl_new_booking.payble_price,tbl_new_booking.booking_amount,tbl_new_booking.amount_to_paid,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.booking_date,tbl_new_booking.note,tbl_new_booking.payment_date,tbl_new_booking.payment_mode,tbl_new_booking.payment_status,tbl_new_booking.reminder, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
		$this->db->from('tbl_only_product_booking_details');
		$this->db->join('tbl_salon_customer', 'tbl_only_product_booking_details.customer_name = tbl_salon_customer.id');
		$this->db->join('tbl_product', 'tbl_only_product_booking_details.product_id = tbl_product.id');
		$this->db->join('tbl_new_booking', 'tbl_only_product_booking_details.booking_id = tbl_new_booking.id');
		$this->db->where('tbl_only_product_booking_details.payment_status', '1');
		$this->db->where('tbl_only_product_booking_details.is_deleted', '0');
		$this->db->where('tbl_new_booking.payment_status', '1');
		$this->db->where('tbl_new_booking.booking_type', '1');
		$this->db->where('tbl_only_product_booking_details.booking_id', $id);
		$result = $this->db->get();
		$result = $result->result(); 
		return $result;
	} 
    public function get_single_booking_service_details($id){
		$this->db->select('tbl_booking_services_details.*,tbl_salon_employee.full_name as stylist_name, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_new_booking.selected_coupon_id,tbl_new_booking.pacakge_id,tbl_new_booking.package_amount,tbl_new_booking.total_service_price,tbl_new_booking.total_product_price,tbl_new_booking.service_price,tbl_new_booking.product_price,tbl_new_booking.gst_amount,tbl_new_booking.payble_price,tbl_new_booking.coupon_discount_amount,tbl_new_booking.reward_discount_amount,tbl_new_booking.booking_amount,tbl_new_booking.amount_to_paid,tbl_new_booking.is_giftcard_applied,tbl_new_booking.applied_giftcard_id,tbl_new_booking.gift_discount,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.booking_date,tbl_new_booking.note,tbl_new_booking.payment_date,tbl_new_booking.payment_mode,tbl_new_booking.payment_status,tbl_new_booking.reminder, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
		$this->db->from('tbl_booking_services_details');
		$this->db->join('tbl_salon_customer', 'tbl_booking_services_details.customer_name = tbl_salon_customer.id');
		$this->db->join('tbl_salon_employee', 'tbl_booking_services_details.stylist_id = tbl_salon_employee.id');
		$this->db->join('tbl_salon_emp_service', 'tbl_booking_services_details.service_id = tbl_salon_emp_service.id');
		$this->db->join('tbl_new_booking', 'tbl_booking_services_details.booking_id = tbl_new_booking.id');
		$this->db->where('tbl_booking_services_details.payment_status', '1');
		$this->db->where('tbl_booking_services_details.is_deleted', '0');
		$this->db->where('tbl_booking_services_details.booking_id', $id);
		$result = $this->db->get();
		$result = $result->result(); 
		return $result;
	} 
    public function get_single_booking_service_details_for_bill($id,$payment_id){
		$this->db->select('tbl_booking_services_details.*,tbl_admin_service_category.sup_category_marathi,tbl_admin_service_category.sup_category as category_name, tbl_admin_sub_category.sub_category as sub_category_name, tbl_admin_sub_category.sub_category_marathi,tbl_salon_employee.full_name as stylist_name, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_new_booking.selected_coupon_id,tbl_new_booking.pacakge_id,tbl_new_booking.package_amount,tbl_new_booking.total_service_price,tbl_new_booking.total_product_price,tbl_new_booking.product_price,tbl_new_booking.gst_amount,tbl_new_booking.payble_price,tbl_new_booking.coupon_discount_amount,tbl_new_booking.reward_discount_amount,tbl_new_booking.booking_amount,tbl_new_booking.amount_to_paid,tbl_new_booking.is_giftcard_applied,tbl_new_booking.applied_giftcard_id,tbl_new_booking.gift_discount,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.booking_date,tbl_new_booking.note,tbl_new_booking.payment_date,tbl_new_booking.payment_mode,tbl_new_booking.payment_status,tbl_new_booking.reminder, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
		$this->db->join('tbl_salon_customer', 'tbl_booking_services_details.customer_name = tbl_salon_customer.id');
		$this->db->join('tbl_salon_employee', 'tbl_booking_services_details.stylist_id = tbl_salon_employee.id');
		$this->db->join('tbl_salon_emp_service', 'tbl_booking_services_details.service_id = tbl_salon_emp_service.id');
		$this->db->join('tbl_new_booking', 'tbl_booking_services_details.booking_id = tbl_new_booking.id');
		$this->db->join('tbl_admin_sub_category', 'tbl_salon_emp_service.sub_category = tbl_admin_sub_category.id');
		$this->db->join('tbl_admin_service_category', 'tbl_salon_emp_service.category = tbl_admin_service_category.id');
		$this->db->where('tbl_booking_services_details.payment_status', '1');
		$this->db->where('tbl_booking_services_details.is_deleted', '0');
		$this->db->where('tbl_booking_services_details.booking_id', $id);
		$this->db->where('tbl_booking_services_details.booking_payment_id', $payment_id);
		$result = $this->db->get('tbl_booking_services_details');
		$result = $result->result(); 
		return $result;
	} 
    public function get_single_booking_service_details_for_primary_bill($id){
		$this->db->select('tbl_booking_services_details.*,tbl_salon_employee.full_name as stylist_name, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_new_booking.selected_coupon_id,tbl_new_booking.pacakge_id,tbl_new_booking.package_amount,tbl_new_booking.total_service_price,tbl_new_booking.total_product_price,tbl_new_booking.product_price,tbl_new_booking.gst_amount,tbl_new_booking.payble_price,tbl_new_booking.coupon_discount_amount,tbl_new_booking.reward_discount_amount,tbl_new_booking.booking_amount,tbl_new_booking.amount_to_paid,tbl_new_booking.is_giftcard_applied,tbl_new_booking.applied_giftcard_id,tbl_new_booking.gift_discount,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.booking_date,tbl_new_booking.note,tbl_new_booking.payment_date,tbl_new_booking.payment_mode,tbl_new_booking.payment_status,tbl_new_booking.reminder, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
		$this->db->join('tbl_salon_customer', 'tbl_booking_services_details.customer_name = tbl_salon_customer.id');
		$this->db->join('tbl_salon_employee', 'tbl_booking_services_details.stylist_id = tbl_salon_employee.id');
		$this->db->join('tbl_salon_emp_service', 'tbl_booking_services_details.service_id = tbl_salon_emp_service.id');
		$this->db->join('tbl_new_booking', 'tbl_booking_services_details.booking_id = tbl_new_booking.id');
		$this->db->where('tbl_booking_services_details.is_deleted', '0');
		$this->db->where('tbl_booking_services_details.booking_id', $id);
		$result = $this->db->get('tbl_booking_services_details');
		$result = $result->result(); 
		return $result;
	} 
    public function get_single_product_booking_product_details_for_bill($id,$payment_id){
		$this->db->select('tbl_only_product_booking_details.*,tbl_product.product_name,tbl_new_booking.total_product_price as total_payment_product_price,tbl_new_booking.product_price,tbl_new_booking.gst_amount,tbl_new_booking.payble_price,tbl_new_booking.booking_amount,tbl_new_booking.amount_to_paid,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.booking_date,tbl_new_booking.note,tbl_new_booking.payment_date,tbl_new_booking.payment_mode,tbl_new_booking.payment_status,tbl_new_booking.reminder, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone,tbl_product_category.product_category as product_category_name,tbl_product_category.product_category_marathi,tbl_product_sub_category.product_sub_category as product_sub_category_name');
		$this->db->from('tbl_only_product_booking_details');
		$this->db->join('tbl_salon_customer', 'tbl_only_product_booking_details.customer_name = tbl_salon_customer.id');
		$this->db->join('tbl_product', 'tbl_only_product_booking_details.product_id = tbl_product.id');
		$this->db->join('tbl_new_booking', 'tbl_only_product_booking_details.booking_id = tbl_new_booking.id');
		$this->db->join('tbl_product_sub_category','tbl_product_sub_category.id = tbl_product.product_subcategory');
        $this->db->join('tbl_product_category','tbl_product_category.id = tbl_product.product_category');
        $this->db->where('tbl_only_product_booking_details.payment_status', '1');
		$this->db->where('tbl_only_product_booking_details.is_deleted', '0');
		$this->db->where('tbl_new_booking.payment_status', '1');
		$this->db->where('tbl_new_booking.booking_type', '1');
		$this->db->where('tbl_only_product_booking_details.booking_id', $id);
		$this->db->where('tbl_only_product_booking_details.booking_payment_id', $payment_id);
		$result = $this->db->get();
		$result = $result->result(); 
		return $result;
	} 
    public function get_state_list(){
        $this->db->where('country_id','101');
        $result = $this->db->get('states');
        return $result->result();
    } 
    public function get_city_ajax(){
        $this->db->where('state_id',$this->input->post('state'));
        $result = $this->db->get('cities');
        echo json_encode($result->result());
    } 
    public function get_selected_state_city($state){
        $this->db->where('state_id',$state);
        $result = $this->db->get('cities');
        return $result->result();
    }  
	public function add_salon_images($store_images){        
        $store_images_Array = explode(',',$store_images);
        for($i=0;$i<count($store_images_Array);$i++){
            $data = array(
                'image' 		=> $store_images_Array[$i],
                'salon_id' 		=> $this->session->userdata('salon_id'),
                'branch_id' 	=> $this->session->userdata('branch_id'),
				'created_on'    => date("Y-m-d H:i:s")
            ); 
            $this->db->insert('tbl_store_images', $data);
        }
        return 1;
	}
    
    public function set_onboarding_status($step_status){
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $exist = $this->db->get('tbl_branch')->row();
        if(!empty($exist)){
            $current_status = $exist->onboarding_status;
            if($current_status <= $step_status){
                $branch_data = array(
                    'onboarding_status'     =>  $step_status
                );                
                $this->db->where('id', $exist->id);
                $this->db->update('tbl_branch',$branch_data);
            }
        }
        return true;
    }
	public function store_profile($store_logo,$shopact){
        if($this->input->post('category') != ""){
            $servicable_genders = [];
            if($this->input->post('category') == '1' || $this->input->post('category') == '0'){
                $servicable_genders = [$this->input->post('category')];
            }elseif($this->input->post('category') == '2'){
                $servicable_genders = ['0','1'];
            }
            $this->session->unset_userdata('store_gender');
            $this->session->unset_userdata('servicable_genders');
            $session = array(
                'store_gender'        => $this->input->post('category'),
                'servicable_genders'  => implode(',', $servicable_genders),
            );
        
            $this->session->set_userdata($session);
        }

		$data = array(
			'branch_id' 			=> $this->input->post('branch_id'),
			'salon_id' 				=> $this->session->userdata('salon_id'),
			'branch_name' 			=> $this->input->post('branch_name'),
			'salon_number' 			=> $this->input->post('salon_number'),
			'customer_support_phone'=> $this->input->post('customer_support_phone'),
			'email' 				=> $this->input->post('email'),
			'pan' 					=> $this->input->post('pan'),
			'category' 				=> $this->input->post('category'),
			'description' 			=> $this->input->post('description'),
			'instagram_link' 		=> $this->input->post('instagram_link'),
			'facebook_link' 		=> $this->input->post('facebook_link'),
			'youtube_link' 			=> $this->input->post('youtube_link'),
			'website_link' 			=> $this->input->post('website_link'),
			'store_logo' 			=> $store_logo,
            'shopact' 				=> $shopact,
			'profile_status' 		=> '1'
		); 

        $this->set_onboarding_status('1');

        $branch_data = array(
            'salon_number' 			=> $this->input->post('salon_number'),
        );
        $this->db->where('id', $this->input->post('branch_id'));
        $this->db->update('tbl_branch', $branch_data);
        
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->input->post('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $exist = $this->db->get('tbl_store_profile')->row();
        if(empty($exist)){
			$date = array(
				'created_on'    => date("Y-m-d H:i:s")
			);
			$new_arr = array_merge($data, $date);
			$this->db->insert('tbl_store_profile', $new_arr);
			return 0;
		}else{  
			$this->db->where('id', $exist->id);
			$this->db->update('tbl_store_profile', $data);
			return 1;
		}
	} 
    public function get_salon_detail_for_profile(){
        $this->db->select('tbl_store_profile.*,tbl_salon.is_gst_applicable,tbl_salon.gst_no');
        $this->db->join('tbl_salon','tbl_salon.id = tbl_store_profile.salon_id');
        $this->db->where('tbl_store_profile.is_deleted', '0');
        $this->db->where('tbl_store_profile.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_store_profile.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_store_profile');
        return $result->row();
    } 
    public function get_salon_images(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_store_images');
        return $result->result();
    } 
    public function get_booking_review($id,$customer_id){
        $this->db->select('tbl_store_reviews.*,tbl_salon_customer.customer_phone,tbl_salon_customer.full_name,tbl_salon_customer.profile_pic');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_store_reviews.customer_id');
        $this->db->where('tbl_store_reviews.is_deleted','0');
        $this->db->order_by('tbl_store_reviews.created_on','desc');
        $this->db->where('tbl_store_reviews.booking_id', $id);
        $this->db->where('tbl_store_reviews.customer_id', $customer_id);
        $this->db->where('tbl_store_reviews.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_store_reviews.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_store_reviews');
        return $result->row();
    }
    public function get_salon_reviews(){
        $this->db->select('tbl_store_reviews.*,tbl_salon_customer.customer_phone,tbl_salon_customer.full_name,tbl_salon_customer.profile_pic');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_store_reviews.customer_id');
        $this->db->where('tbl_store_reviews.is_deleted','0');
        $this->db->order_by('tbl_store_reviews.created_on','desc');
        $this->db->where('tbl_store_reviews.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_store_reviews.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_store_reviews');
        return $result->result();
    }
    public function get_single_profile(){
        $this->db->select('tbl_branch.*,tbl_salon.is_gst_applicable,tbl_salon.gst_no');
        $this->db->join('tbl_salon','tbl_branch.salon_id = tbl_salon.id');
        $this->db->where('tbl_branch.is_deleted', '0');
        $this->db->where('tbl_branch.id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_branch.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_branch');
        return $result->row();
    }
    public function get_single_branch_profile(){
        $this->db->select('tbl_branch.*,tbl_store_profile.store_logo,tbl_store_profile.account_holder_name,tbl_store_profile.bank_name,tbl_store_profile.account_number,tbl_store_profile.account_type,tbl_store_profile.bank_branch_name,tbl_store_profile.ifsc');
        $this->db->join('tbl_store_profile','tbl_store_profile.branch_id = tbl_branch.id');
        $this->db->where('tbl_branch.is_deleted', '0');
        $this->db->where('tbl_branch.id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_branch.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        return $result->row();
    }
    public function get_single_branch_profile_details($branch_id,$salon_id){
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $branch_id);
        $this->db->where('salon_id', $salon_id);
        $result = $this->db->get('tbl_branch');
        return $result->row();
    }
    public function get_single_branch_profile_all($branch_id,$salon_id){
        $this->db->select('tbl_branch.*,tbl_store_profile.customer_support_phone,tbl_store_profile.store_logo,tbl_store_profile.account_holder_name,tbl_store_profile.bank_name,tbl_store_profile.account_number,tbl_store_profile.account_type,tbl_store_profile.bank_branch_name,tbl_store_profile.ifsc');
        $this->db->join('tbl_store_profile','tbl_store_profile.branch_id = tbl_branch.id');
        $this->db->where('tbl_branch.is_deleted', '0');
        $this->db->where('tbl_branch.id', $branch_id);
        $this->db->where('tbl_branch.salon_id', $salon_id);
        $result = $this->db->get('tbl_branch');
        return $result->row();
    }
    public function get_all_salon_profile_single_all($branch_id,$salon_id){
        $this->db->select('tbl_store_profile.*,tbl_salon.is_gst_applicable,tbl_salon.gst_no');
        $this->db->join('tbl_salon','tbl_store_profile.salon_id = tbl_salon.id');
        $this->db->where('tbl_store_profile.is_deleted', '0');
        $this->db->where('tbl_store_profile.branch_id', $branch_id);
        $this->db->where('tbl_store_profile.salon_id', $salon_id);
        $this->db->order_by('tbl_store_profile.id', 'DESC');
        $result = $this->db->get('tbl_store_profile');
        return $result->row();
    }
    public function get_all_salon_profile_single(){
        $this->db->select('tbl_store_profile.*,tbl_salon.is_gst_applicable,tbl_salon.gst_no');
        $this->db->join('tbl_salon','tbl_store_profile.salon_id = tbl_salon.id');
        $this->db->where('tbl_store_profile.is_deleted', '0');
        $this->db->where('tbl_store_profile.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_store_profile.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_store_profile.id', 'DESC');
        $result = $this->db->get('tbl_store_profile');
        return $result->row();
    }
    public function get_all_salon_profile(){
        $this->db->select('tbl_store_profile.*,tbl_salon.is_gst_applicable,tbl_salon.gst_no');
        $this->db->join('tbl_salon','tbl_store_profile.salon_id = tbl_salon.id');
        $this->db->where('tbl_store_profile.is_deleted', '0');
        $this->db->where('tbl_store_profile.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_store_profile.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_store_profile.id', 'DESC');
        $result = $this->db->get('tbl_store_profile');
        return $result->result();
    }
    public function get_salon_profile(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_store_profile');
        return $result->result();
    }
    public function get_all_work_shedule_profile(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_work_schedule_days');
        $num_entries = $result->num_rows(); 
        return ($num_entries > 125) ? 1 : 0;
    } 
    public function salon_bank_details(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_store_profile', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 				=> $branch_id,
            'salon_id' 					=> $salon_id,
            'account_holder_name' 		=> $this->input->post('account_holder_name'),
            'account_number' 			=> $this->input->post('account_number'),
            'account_type' 				=> $this->input->post('account_type'),
            'bank_branch_name' 			=> $this->input->post('bank_branch_name'),
            'bank_name' 				=> $this->input->post('bank_name'),
            'ifsc' 						=> $this->input->post('ifsc'),
            'bank_status' 				=> '1', 
        );
        $main_data = array(
            'account_holder_name' 		=> $this->input->post('account_holder_name'),
            'account_number' 			=> $this->input->post('account_number'),
            'account_type' 				=> $this->input->post('account_type'),
            'bank_branch_name' 			=> $this->input->post('bank_branch_name'),
            'bank_name' 				=> $this->input->post('bank_name'),
            'ifsc' 						=> $this->input->post('ifsc'),
        );
        $this->db->where('id',$branch_id);
        $this->db->where('salon_id',$salon_id);
        $this->db->update('tbl_branch', $main_data);
        
        $this->set_onboarding_status('3');
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_store_profile', $new_arr);
            return 0;
        }else{
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_store_profile', $data);
            return 1;
        }
    } 
    public function salon_location(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_store_profile', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 	=> $branch_id,
            'salon_id' 		=> $salon_id,
            'location' 		=> $this->input->post('location'), 
            'latitude' 		=> $this->input->post('latitude'), 
            'longitude' 	=> $this->input->post('longitude'), 
         ); 
        // echo '<pre>'; print_r($data); exit();
        $this->set_onboarding_status('4');
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_store_profile', $new_arr);
            return 0;
        }else{
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_store_profile', $data);
            return 1;
        }
     }  
    public function get_unique_holiday_ajax(){
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1'); 
        $this->db->where('holiday_date', date("Y-m-d", strtotime($this->input->post('holiday_date'))));
        if ($this->input->post('id') != '') {
            $this->db->where('id !=', $this->input->post('id'));
        }
        $result = $this->db->get('tbl_holiday');
        echo $result->num_rows();
    } 
    public function get_customer_exist_loan_ajax(){
        $this->db->where('is_deleted', '0');
        $this->db->where('employee_id', $this->input->post('emp')); 
        $this->db->where('loan_status', '0');
        if ($this->input->post('id') != '') {
            $this->db->where('id !=', $this->input->post('id'));
        }
        $result = $this->db->get('tbl_employee_loan');
        echo $result->num_rows();
    } 
    public function set_holiday(){
        $data = array(
            'branch_id'        => $this->session->userdata('branch_id'),
            'salon_id'         => $this->session->userdata('salon_id'),
            'holiday_name'     => $this->input->post('holiday_name'),
            'holiday_date'     => $this->input->post('holiday_date'),
        ); 
        if($this->input->post('hidden_id') == ''){
            $date = array(
                'created_on'     => date("Y-m-d H:i:s"),
            );
            $newarr = array_merge($data, $date);
            $this->db->insert('tbl_holiday', $newarr);
            return 1;
        }else{
            $this->db->where('id', $this->input->post('hidden_id'));
            $this->db->update('tbl_holiday', $data);
            return 0;
        }
    } 
    public function get_holiday_days_list($length, $start, $search){
        if($this->input->post('date') != ""){
            $this->db->where('DAY(holiday_date)', $this->input->post('date'));
        }
        if($this->input->post('month') != ""){
            $this->db->where('MONTH(holiday_date)', $this->input->post('month'));
        }
        if($this->input->post('year') != ""){
            $this->db->where('YEAR(holiday_date)', $this->input->post('year'));
        }
        $this->db->where('is_deleted', '0');
        if($search != ""){ 
            $this->db->or_like('holiday_name', $search); 
        }
        $this->db->order_by('holiday_date', 'DESC');
        $this->db->limit($length, $start);
        $result = $this->db->get('tbl_holiday');
        return $result->result();
    }
    public function get_holiday_days_list_count($search){
        if($this->input->post('date') != ""){
            $this->db->where('DAY(holiday_date)', $this->input->post('date'));
        }
        if($this->input->post('month') != ""){
            $this->db->where('MONTH(holiday_date)', $this->input->post('month'));
        }
        if($this->input->post('year') != ""){
            $this->db->where('YEAR(holiday_date)', $this->input->post('year'));
        }
        $this->db->where('is_deleted', '0');
        if($search != ""){ 
            $this->db->or_like('holiday_name', $search); 
        }
        $this->db->order_by('holiday_date', 'DESC');
        $result = $this->db->get('tbl_holiday');
        return $result->num_rows();
    }
    public function get_single_holiday(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_holiday');
        $result = $result->row();
        return $result;
    }
    public function get_all_holiday_list(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_holiday');
        $result = $result->result();
        return $result;
    } 
    public function set_session_stylist(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' => $branch_id,
            'salon_id' => $salon_id,
            'per_session_stylist' => $this->input->post('per_session_stylist'),
        );
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array('per_session_stylist' => $data['per_session_stylist']);
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    }  
    public function set_avg_duration(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row(); 
        $data = array(
            'branch_id' 			=> $branch_id,
            'salon_id' 				=> $salon_id,
            'session_avg_duration' 	=> $this->input->post('session_avg_duration'),
        ); 
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array('session_avg_duration' => $data['session_avg_duration']);
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    }  
    public function set_offset_session_time(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $branch_id,
            'salon_id' 				=> $salon_id,
            'offset_session_time' 	=> $this->input->post('offset_session_time'),
        );
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array(
				'offset_session_time' => $data['offset_session_time'] 
			);
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    } 
    public function set_booking_time_range(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 	=> $branch_id,
            'salon_id' 		=> $salon_id,
            'hours' 		=> $this->input->post('hours'),
            'days' 			=> $this->input->post('days'),
        );
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'hours' => $data['hours'],
                'days' 	=> $data['days']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    } 
    public function set_cancel_reward_point(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $branch_id,
            'salon_id' 				=> $salon_id,
            'reward_point_cancel' 	=> $this->input->post('reward_point_cancel'),
        );
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data,$date);
            $this->db->insert('tbl_booking_rules',$new_arr);
            return 0;
        }else{
            $update_data = array('reward_point_cancel' => $data['reward_point_cancel']);
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    }
    public function set_cancel_appoinment_time(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 				=> $branch_id,
            'salon_id' 					=> $salon_id,
            'cancel_appoinment_hours' 	=> $this->input->post('cancel_appoinment_hours'),
            'cancel_appoinment_minit' 	=> $this->input->post('cancel_appoinment_minit'), 
        );
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'cancel_appoinment_hours' => $data['cancel_appoinment_hours'],
                'cancel_appoinment_minit' => $data['cancel_appoinment_minit']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    }
    public function set_number_of_time_cancel_booking(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $branch_id,
            'salon_id' 				=> $salon_id,
            'cancel_booking_number' => $this->input->post('cancel_booking_number'),
        );
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array(
				'cancel_booking_number' => $data['cancel_booking_number']
			);
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    }
    public function set_salon_close_date(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $branch_id,
            'salon_id' 				=> $salon_id,
            'from_date' 			=> $this->input->post('from_date'),
            'to_date' 				=> $this->input->post('to_date'),
            'salon_close_reason' 	=> $this->input->post('salon_close_reason'),
            'reason_title' 			=> $this->input->post('reason_title'),
            'salon_status' 			=> '0',
        );
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'from_date' 		=> $data['from_date'],
                'to_date' 			=> $data['to_date'],
                'salon_close_reason'=> $data['salon_close_reason'],
                'reason_title' 		=> $data['reason_title'],
                'salon_status' 		=> $data['0'],
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    }
    public function set_online_price(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 		=> $branch_id,
            'salon_id' 			=> $salon_id,
            'online_price' 		=> $this->input->post('online_price'), 
        );
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array(
				'online_price' => $data['online_price']
			);
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    }
    public function check_salon_type($branch,$salon){
        $this->db->where('tbl_salon_emp_service.status', '1');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_admin_service_category.is_deleted', '0');
        $this->db->where('tbl_salon_emp_service.branch_id', $branch);
        $this->db->where('tbl_salon_emp_service.salon_id', $salon);
        $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
        $this->db->from('tbl_salon_emp_service');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
        $this->db->order_by('tbl_salon_emp_service.id', 'DESC');
        $services = $this->db->get()->num_rows();

        if($services > 0){
            $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
            $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation');
            $this->db->where('tbl_emp_designation.designation', 'Stylist');
            $this->db->where('tbl_salon_employee.is_deleted','0');
            $this->db->where('tbl_salon_employee.branch_id', $branch);
            $this->db->where('tbl_salon_employee.salon_id', $salon);
            $emps = $this->db->get('tbl_salon_employee')->result();
            if(!empty($emps)){
                foreach($emps as $emps_result){
                    $emp_services = $emps_result->service_name != "" ? explode(',', trim($emps_result->service_name, ',')) : [];
                    if(empty($emp_services)){
                        return 1;
                    }else{
                        $this->db->where('tbl_salon_emp_service.status', '1');
                        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
                        $this->db->where('tbl_admin_service_category.is_deleted', '0');
                        $this->db->where('tbl_salon_emp_service.branch_id', $branch);
                        $this->db->where('tbl_salon_emp_service.salon_id', $salon);
                        $this->db->where_in('tbl_salon_emp_service.id', $emp_services);
                        $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
                        $this->db->from('tbl_salon_emp_service');
                        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
                        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
                        $this->db->order_by('tbl_salon_emp_service.id', 'DESC');
                        $emp_services = $this->db->get()->num_rows();
                        if($emp_services < $services){
                            return 1;
                        }
                    }
                }
                return 2;
            }else{
                return 1;
            }
        }else{
            return 1;
        }
    }
    public function set_reshedule_hours(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 		=> $branch_id,
            'salon_id' 			=> $salon_id,
            'reshedule_hours' 	=> $this->input->post('reshedule_hours'),
            'reshedule_minit' 	=> $this->input->post('reshedule_minit'), 
        );
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $data);
            return 1;
        }
    } 
    public function add_salon_time(){
        // echo "<pre>";print_r($_POST);exit;
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');

		$monday = '0';
		$tuesday = '0';
		$wednesday = '0';
		$thursday = '0';
		$friday = '0';
		$saturday = '0';
		$sunday = '0';
	    if($this->input->post("Monday") == "on"){
			$monday = "1";
		}
		if($this->input->post("Tuesday") == "on"){
			$tuesday = "1";
		}
		if($this->input->post("Wednesday") == "on"){
			$wednesday = '1';
		}
		if($this->input->post("Thursday") == "on"){
            $thursday = '1';
		} 
		if($this->input->post("Friday") == "on"){
			$friday = '1';
		}
		if($this->input->post("Saturday") == "on"){
			$saturday = '1';
		}
		if($this->input->post("Sunday") == "on"){
			$sunday = '1';
		}
		$data = array(
			'branch_id'         => $branch_id,
			'salon_id'          => $salon_id,
			'is_monday'         => $monday,
			'is_tuesday'        => $tuesday,
			'is_wednesday'      => $wednesday,
			'is_thursday'       => $thursday,
			'is_friday'         => $friday,
			'is_saturday'       => $saturday,
			'is_sunday'         => $sunday,
			'from_monday'       => ($monday == '1' && $this->input->post('from_monday') != "") ? date('H:i:s',strtotime($this->input->post('from_monday'))) : null,
			'to_monday'         => ($monday == '1' && $this->input->post('to_monday') != "") ? date('H:i:s',strtotime($this->input->post('to_monday'))) : null,
			'from_tuesday'      => ($tuesday == '1' && $this->input->post('from_tuesday') != "") ? date('H:i:s',strtotime($this->input->post('from_tuesday'))) : null,
			'to_tuesday'        => ($tuesday == '1' && $this->input->post('to_tuesday') != "") ? date('H:i:s',strtotime($this->input->post('to_tuesday'))) : null,
			'from_wednesday'    => ($wednesday == '1' && $this->input->post('from_wednesday') != "") ? date('H:i:s',strtotime($this->input->post('from_wednesday'))) : null,
			'to_wednesday'      => ($wednesday == '1' && $this->input->post('to_wednesday') != "") ? date('H:i:s',strtotime($this->input->post('to_wednesday'))) : null,
			'from_thursday'     => ($thursday == '1' && $this->input->post('from_thursday') != "") ? date('H:i:s',strtotime($this->input->post('from_thursday'))) : null,
			'to_thursday'       => ($thursday == '1' && $this->input->post('to_thursday') != "") ? date('H:i:s',strtotime($this->input->post('to_thursday'))) : null,
			'from_friday'       => ($friday == '1' && $this->input->post('from_friday') != "") ? date('H:i:s',strtotime($this->input->post('from_friday'))) : null,
			'to_friday'         => ($friday == '1' && $this->input->post('to_friday') != "") ? date('H:i:s',strtotime($this->input->post('to_friday'))) : null,
			'from_saturday'     => ($saturday == '1' && $this->input->post('from_saturday') != "") ? date('H:i:s',strtotime($this->input->post('from_saturday'))) : null,
			'to_saturday'       => ($saturday == '1' && $this->input->post('to_saturday') != "") ? date('H:i:s',strtotime($this->input->post('to_saturday'))) : null,
			'from_sunday'       => ($sunday == '1' && $this->input->post('from_sunday') != "") ? date('H:i:s',strtotime($this->input->post('from_sunday'))) : null,
			'to_sunday'         => ($sunday == '1' && $this->input->post('to_sunday') != "") ? date('H:i:s',strtotime($this->input->post('to_sunday'))) : null,
		);
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_booking_rules')->row();

        $this->set_onboarding_status('2');

		if(!empty($exits_entry)){
			$this->db->where('id',$exits_entry->id);
			$this->db->update('tbl_booking_rules',$data);
		}else{
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
			$this->db->insert('tbl_booking_rules',$new_arr);
		}

        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $this->session->userdata('branch_id'),
            'salon_id' 				=> $this->session->userdata('salon_id'),
            'salon_start_time' 		=> $this->input->post('salon_start_time'),
            'salon_end_time' 		=> $this->input->post('salon_end_time'),
            'salon_status_profile' 	=> '1', 
        ); 
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $data);
            return 1;
        }
    } 
    
    public function get_salon_working_hrs(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_booking_rules')->row();
		if(!empty($exits_entry)){
            if($exits_entry->is_monday == '1' || $exits_entry->is_tuesday == '1' || $exits_entry->is_wednesday == '1' || $exits_entry->is_thursday == '1' || $exits_entry->is_friday == '1' || $exits_entry->is_saturday == '1' || $exits_entry->is_sunday == '1'){
                return true;
            }else{
                return false;
            }
		}else{
            return false;
		}
    } 
    public function get_salon_bank_details(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_branch')->row();
		if(!empty($exits_entry)){
            if($exits_entry->account_holder_name != '' || $exits_entry->bank_name != '' || $exits_entry->account_number != '' || $exits_entry->account_type != '' || $exits_entry->bank_branch_name != '' || $exits_entry->ifsc != ''){
                return true;
            }else{
                return false;
            }
		}else{
            return false;
		}
    } 
    public function get_salon_location_details(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_store_profile')->row();
		if(!empty($exits_entry)){
            if($exits_entry->location != '' || $exits_entry->latitude != '' || $exits_entry->longitude != ''){
                return true;
            }else{
                return false;
            }
		}else{
            return false;
		}
    } 
    public function get_salon_facilities(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_salon_facility_master')->row();
		if(!empty($exits_entry)){
            return true;
        }else{
            return false;
        }
    } 
    public function get_salon_shifts(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_shift_master')->result();
        return $exits_entry;  
    } 
    public function get_salon_products(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_product')->result();
        return $exits_entry;  
    } 
    public function get_salon_memberships(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_memebership')->result();
        return $exits_entry;  
    } 
    public function get_salon_rewards(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_reward_point')->result();
        return $exits_entry;  
    } 
    public function get_salon_employees(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_salon_employee')->result();
        return $exits_entry;  
    } 
    public function get_salon_courses(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_course_master')->result();
        return $exits_entry;  
    } 
    public function get_salon_automated_marketings(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_reward_point')->result();
        return $exits_entry;  
    } 
    public function get_salon_employee_incentives(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_salon_employee_incentive')->result();
        return $exits_entry;  
    } 
    public function get_salon_services(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$exits_entry = $this->db->get('tbl_salon_emp_service')->result();
        return $exits_entry;  
    } 
    public function set_salon_type(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 	=> $branch_id,
            'salon_id' 		=> $salon_id,
            'salon_type' 	=> $this->input->post('salon_type'),
        );
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'salon_type' => $data['salon_type'],
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    }
    public function set_emp_selection(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_booking_rules', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 		=> $branch_id,
            'salon_id' 			=> $salon_id,
            'emp_selection' 	=> $this->input->post('emp_selection'),
        );
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_booking_rules', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'emp_selection' => $data['emp_selection'],
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_booking_rules', $update_data);
            return 1;
        }
    } 
	public function set_slot_confirm_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $this->session->userdata('branch_id'),
            'salon_id' 				=> $this->session->userdata('salon_id'),
            'slot_confirm_sms' 		=> $this->input->post('slot_confirm_sms'),
            'slot_confirm_email' 	=> $this->input->post('slot_confirm_email'),
            'slot_confirm_whatsapp' => $this->input->post('slot_confirm_whatsapp'),
        );
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'slot_confirm_sms' 		=> $data['slot_confirm_sms'],
                'slot_confirm_email'	=> $data['slot_confirm_email'],
                'slot_confirm_whatsapp' => $data['slot_confirm_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }  
    public function set_slot_reshedule_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 				=> $this->session->userdata('branch_id'),
            'salon_id' 					=> $this->session->userdata('salon_id'),
            'slot_reshedule_sms' 		=> $this->input->post('slot_reshedule_sms'),
            'slot_reshedule_email' 		=> $this->input->post('slot_reshedule_email'),
            'slot_reshedule_whatsapp' 	=> $this->input->post('slot_reshedule_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'slot_reshedule_sms' 		=> $data['slot_reshedule_sms'],
                'slot_reshedule_email' 		=> $data['slot_reshedule_email'],
                'slot_reshedule_whatsapp' 	=> $data['slot_reshedule_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }
    public function set_slot_cancel_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $this->session->userdata('branch_id'),
            'salon_id' 				=> $this->session->userdata('salon_id'),
            'slot_cancel_sms' 		=> $this->input->post('slot_cancel_sms'),
            'slot_cancel_email' 	=> $this->input->post('slot_cancel_email'),
            'slot_cancel_whatsapp' 	=> $this->input->post('slot_cancel_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'slot_cancel_sms' 		=> $data['slot_cancel_sms'],
                'slot_cancel_email' 	=> $data['slot_cancel_email'],
                'slot_cancel_whatsapp' 	=> $data['slot_cancel_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    } 
    public function set_payment_receive_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 				=> $this->session->userdata('branch_id'),
            'salon_id' 					=> $this->session->userdata('salon_id'),
            'payment_receive_sms' 		=> $this->input->post('payment_receive_sms'),
            'payment_receive_email' 	=> $this->input->post('payment_receive_email'),
            'payment_receive_whatsapp' 	=> $this->input->post('payment_receive_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'payment_receive_sms' 		=> $data['payment_receive_sms'],
                'payment_receive_email' 	=> $data['payment_receive_email'],
                'payment_receive_whatsapp' 	=> $data['payment_receive_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }  
    public function set_birthday_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'birthday_sms' 		=> $this->input->post('birthday_sms'),
            'birthday_email' 	=> $this->input->post('birthday_email'),
            'birthday_whatsapp' => $this->input->post('birthday_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'birthday_sms' 		=> $data['birthday_sms'],
                'birthday_email' 	=> $data['birthday_email'],
                'birthday_whatsapp' => $data['birthday_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }
    public function set_anniversary_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $this->session->userdata('branch_id'),
            'salon_id' 				=> $this->session->userdata('salon_id'),
            'anniversary_sms' 		=> $this->input->post('anniversary_sms'),
            'anniversary_email'		=> $this->input->post('anniversary_email'),
            'anniversary_whatsapp' 	=> $this->input->post('anniversary_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'anniversary_sms' 		=> $data['anniversary_sms'],
                'anniversary_email' 	=> $data['anniversary_email'],
                'anniversary_whatsapp' 	=> $data['anniversary_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }
    public function set_online_slot_book_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 					=> $this->session->userdata('branch_id'),
            'salon_id' 						=> $this->session->userdata('salon_id'),
            'online_slot_confirm_sms' 		=> $this->input->post('online_slot_confirm_sms'),
            'online_slot_confirm_email' 	=> $this->input->post('online_slot_confirm_email'),
            'online_slot_confirm_whatsapp' 	=> $this->input->post('online_slot_confirm_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'online_slot_confirm_sms' 		=> $data['online_slot_confirm_sms'],
                'online_slot_confirm_email' 	=> $data['online_slot_confirm_email'],
                'online_slot_confirm_whatsapp' 	=> $data['online_slot_confirm_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }
    public function set_voucher_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'voucher_sms' 		=> $this->input->post('voucher_sms'),
            'voucher_email' 	=> $this->input->post('voucher_email'),
            'voucher_whatsapp' => $this->input->post('voucher_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'voucher_sms' 		=> $data['voucher_sms'],
                'voucher_email' 	=> $data['voucher_email'],
                'voucher_whatsapp' 	=> $data['voucher_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }
    public function set_booking_reminder_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $this->session->userdata('branch_id'),
            'salon_id' 				=> $this->session->userdata('salon_id'),
            'slot_reminder_sms' 	=> $this->input->post('slot_reminder_sms'),
            'slot_reminder_email' 	=> $this->input->post('slot_reminder_email'),
            'slot_reminder_whatsapp'=> $this->input->post('slot_reminder_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'slot_reminder_sms' 		=> $data['slot_reminder_sms'],
                'slot_reminder_email' 		=> $data['slot_reminder_email'],
                'slot_reminder_whatsapp' 	=> $data['slot_reminder_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }
    public function set_stylist_booking_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 				=> $this->session->userdata('branch_id'),
            'salon_id' 					=> $this->session->userdata('salon_id'),
            'stylist_booking_sms' 		=> $this->input->post('stylist_booking_sms'),
            'stylist_booking_email' 	=> $this->input->post('stylist_booking_email'),
            'stylist_booking_whatsapp' 	=> $this->input->post('stylist_booking_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'stylist_booking_sms' 		=> $data['stylist_booking_sms'],
                'stylist_booking_email' 	=> $data['stylist_booking_email'],
                'stylist_booking_whatsapp' 	=> $data['stylist_booking_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    } 
    public function set_feedback_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 			=> $this->session->userdata('branch_id'),
            'salon_id' 				=> $this->session->userdata('salon_id'),
            'feedback_sms' 			=> $this->input->post('feedback_sms'),
            'feedback_email' 		=> $this->input->post('feedback_email'),
            'feedback_whatsapp' 	=> $this->input->post('feedback_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'feedback_sms' 		=> $data['feedback_sms'],
                'feedback_email'	=> $data['feedback_email'],
                'feedback_whatsapp' => $data['feedback_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    }
    public function set_reward_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'reward_sms' 		=> $this->input->post('reward_sms'),
            'reward_email' 		=> $this->input->post('reward_email'),
            'reward_whatsapp' 	=> $this->input->post('reward_whatsapp'),
        );
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'reward_sms' 		=> $data['reward_sms'],
                'reward_email' 		=> $data['reward_email'],
                'reward_whatsapp' 	=> $data['reward_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    } 
    public function set_otp_message(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
        $existingEntry = $this->db->get_where('tbl_notification', array('branch_id' => $branch_id, 'salon_id' => $salon_id))->row();
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'otp_sms' 			=> $this->input->post('otp_sms'),
            'otp_email' 		=> $this->input->post('otp_email'),
            'otp_whatsapp' 		=> $this->input->post('otp_whatsapp'),
        ); 
        if(empty($existingEntry)){
            $date = array(
				'created_on' => date("Y-m-d H:i:s")
			);
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_notification', $new_arr);
            return 0;
        }else{
            $update_data = array(
                'otp_sms' 		=> $data['otp_sms'],
                'otp_email' 	=> $data['otp_email'],
                'otp_whatsapp' 	=> $data['otp_whatsapp']
            );
            $this->db->where('id', $existingEntry->id);
            $this->db->update('tbl_notification', $update_data);
            return 1;
        }
    } 
    public function get_all_notification_list(){
        $this->db->where('is_deleted','0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_notification');
        return $result->row();
    } 
    public function get_on_off_btn(){
        $this->db->where('is_deleted','0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_booking_rules');
        return $result->result();
    }
    public function get_booking_manual_btn(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_booking_rules');
        return $result->result();
    }
    public function get_salon_status(){
        $this->db->where('is_deleted','0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_booking_rules');
        return $result->result();
    }
    public function get_all_reason(){
        $this->db->where('is_deleted','0');
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_salon_close_reason');
        return $result->result();
    }
    public function get_all_shift_name(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_booking_rules');
        return $result->result();
    } 
    public function get_all_booking_rules(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id')); 
        $result = $this->db->get('tbl_booking_rules');
        return $result->row();
    }  
	public function asign_membership(){ 
        // echo '<pre>'; print_r($_POST); exit();
        $is_counter = $this->input->post('is_counter');
        $discount_in_rs = $this->input->post('discount_in_rs');
        $discount_in_per = $this->input->post('discount_in_per');
        $all_payment_mode = $this->input->post('payment_mode');
        $all_transaction_id = $this->input->post('transaction_id');
        $all_mode_amount = $this->input->post('mode_amount');

        $payment_mode_multiple = !empty($all_payment_mode) ? implode(',',$all_payment_mode) : null;
        $payment_transaction_id_multiple = !empty($all_transaction_id) ? implode(',',$all_transaction_id) : null;
        $payment_amount_multiple = !empty($all_mode_amount) ? implode(',',$all_mode_amount) : null;
        
        $payment_mode = !empty($all_payment_mode) && count($all_payment_mode) == 1 ? $all_payment_mode[0] : null;
        $transaction_id = !empty($all_transaction_id) && count($all_transaction_id) == 1 ? $all_transaction_id[0] : null;


		$this->db->where('tbl_memebership.id',$this->input->post('membership_id'));
		$membership_data = $this->db->get('tbl_memebership');
		$membership_data = $membership_data->row();

        $duration_months = $membership_data->duration;
        $membership_start = date("Y-m-d");
        $membership_end = date("Y-m-d", strtotime("+" . $duration_months . " months", strtotime($membership_start)));

        $adjust_amount = $this->input->post('adjust_amount');
        $adjust_amount_remark = $this->input->post('adjust_amount_remark');
        $amount_round_type = $this->input->post('amount_round_type');
        $rounded_bill_amount = $this->input->post('rounded_bill_amount');

        $data = array(   
			'branch_id' 				=> $this->session->userdata('branch_id'),
			'salon_id'	 				=> $this->session->userdata('salon_id'),
			'email' 					=> $this->input->post('email'),
			'address' 					=> $this->input->post('address'),
			'dob' 						=> $this->input->post('dob'),
			'state' 					=> $this->input->post('state'),
			'city' 						=> $this->input->post('city'),
			'doa' 						=> $this->input->post('doa'),
			'married_status' 			=> $this->input->post('married_status'),
			'membership_id' 			=> $this->input->post('membership_id'), 
		);  

		$customer_id = $this->input->post('id') != "" ? $this->input->post('id') : $this->input->post('customer_name');
        $this->db->where('is_deleted','0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('id',$customer_id);
		$exist = $this->db->get('tbl_salon_customer');
		$exist = $exist->row();

        if(!empty($exist)){
            $customer_id = $exist->id;
            $this->db->where('id', $customer_id);
            $this->db->update('tbl_salon_customer', $data);
        }else{
            $f_name = $this->input->post('f_name') != "" ? $this->input->post('f_name') : null;
            $l_name = $this->input->post('l_name') != "" ? $this->input->post('l_name') : null;
            $full_name = $f_name . ' ' . $l_name;

            $general_data = array(
                'f_name'                    => $f_name,
                'l_name'                    => $l_name,
                'full_name'                 => $full_name,
                // 'full_name' 				=> $this->input->post('full_name'),
                'customer_phone' 			=> ($this->input->post('customer_phone') != "" ? $this->input->post('customer_phone') : $this->input->post('selected_customer_phone')),
                'gender' 					=> $this->input->post('gender'),
            );
            $date = array(
                'created_on' => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $new_arr = array_merge($new_arr, $general_data);
            $this->db->insert('tbl_salon_customer', $new_arr);
            $customer_id = $this->db->insert_id();
        }
        
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('id',$customer_id);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $single_customer = $this->db->get('tbl_salon_customer')->row();

        if(!empty($single_customer)){ 
            $this->db->select('tbl_customer_membership_history.*, tbl_memebership.membership_name');
            $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_customer_membership_history.membership_id');
            $this->db->where('tbl_customer_membership_history.id',$single_customer->membership_pkey);
            $this->db->where('tbl_customer_membership_history.customer_id', $single_customer->id);
            $this->db->where('DATE(tbl_customer_membership_history.membership_start) <=', date('Y-m-d'));
            $this->db->where('DATE(tbl_customer_membership_history.membership_end) >=', date('Y-m-d'));
            $this->db->where('tbl_customer_membership_history.is_deleted','0');
            $this->db->where('tbl_customer_membership_history.membership_status','0');
            // $this->db->where('tbl_customer_membership_history.payment_status','1');
            $membership_details = $this->db->get('tbl_customer_membership_history')->row();
            if(empty($membership_details)){
                $salon_profile = $this->Salon_model->get_all_salon_profile_single_all($this->session->userdata('branch_id'),$this->session->userdata('salon_id'));
                $is_gst_applicable = '0';
                $gst_no = '';
                $gst_rate = '0';
                if(!empty($salon_profile)){
                    if($salon_profile->is_gst_applicable == '1'){
                        $gst_no = $salon_profile->gst_no;
                        $is_gst_applicable = '1';
                        $setup = $this->Master_model->get_backend_setups();	
                        if(!empty($setup)){
                            $gst_rate = $setup->gst_rate;
                        }
                    }
                }
                $gst_amount = (($this->input->post('price') - $this->input->post('discount_in_rs')) * ((float)$gst_rate)) / 100;

                $data1 = array(
                    'branch_id' 		=> $this->session->userdata('branch_id'),
                    'salon_id' 			=> $this->session->userdata('salon_id'),
                    'customer_id' 		=> $customer_id,
                    'membership_id' 	=> $this->input->post('membership_id'), 
                    'employee_id' 	    => $this->input->post('employee'), 
                    'membership_price' 	=> $this->input->post('price'), 
                    'discount_in_rs' 	=> $this->input->post('discount_in_rs'), 
                    'discount_in_per' 	=> $this->input->post('discount_in_per'), 
                    
                    'is_gst_applicable' => $is_gst_applicable == '1' ? $is_gst_applicable : '0', 
                    'salon_gst_no' 	    => $gst_no, 
                    'salon_gst_rate' 	=> $gst_rate, 
                    'gst_amount' 	    => $gst_amount, 

                    'service_discount' 	=> $membership_data->service_discount, 
                    'product_discount' 	=> $membership_data->product_discount, 
                    'discount_in' 		=> $membership_data->discount_in, 
                    'duration' 			=> $membership_data->duration, 
                    'duration_end' 		=> $membership_data->duration_end, 
                    'bg_color_input' 	=> $membership_data->bg_color_input, 
                    'bg_color' 			=> $membership_data->bg_color, 
                    'text_color_input' 	=> $membership_data->text_color_input, 
                    'text_color' 		=> $membership_data->text_color, 
                    'membership_start'  => $membership_start, 
                    'membership_end' 	=> $membership_end, 
                    'payment_status'    => '1',

                    'payment_mode' 	    => $payment_mode, 
                    'transaction_id'    => $transaction_id,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                    'payment_on'        => date("Y-m-d H:i:s"),
                    'payment_date'      => $this->input->post('service_date') != "" ? date("Y-m-d H:i:s",strtotime($this->input->post('service_date'))) : date("Y-m-d H:i:s"),
                    'created_on' 		=> date("Y-m-d H:i:s"),
                    'is_counter'        =>  $this->input->post('employee') == "" ? $is_counter : null
                ); 
                $this->db->insert('tbl_customer_membership_history',$data1);
                $membership_pkey = $this->db->insert_id();

                $this->db->where('id',$customer_id);
                $single = $this->db->get('tbl_salon_customer')->row();   
                
                $actual_paid_amount = $this->input->post('actual_paid_amount');             
                
                $current_total_bill_amount = $single->total_bill_amount;
                $current_total_paid_amount = $single->total_paid_amount;
                $current_current_pending_amount = $single->current_pending_amount;
                $mem_final_price = ($this->input->post('price') - $this->input->post('discount_in_rs')) + $gst_amount;
                
                $new_total_bill_amount = (float)$current_total_bill_amount + (float)$rounded_bill_amount;
                $new_total_paid_amount = (float)$current_total_paid_amount + (float)$actual_paid_amount;
                $new_current_pending_amount = ((float)$rounded_bill_amount + (float)$current_current_pending_amount) - (float)$actual_paid_amount;
        
                $update_pkey = array(
                    'total_bill_amount'         => $new_total_bill_amount,
                    'total_paid_amount'         => $new_total_paid_amount,
                    'current_pending_amount'    => number_format((float)($new_current_pending_amount), 2, '.', ''),
        
                    'membership_pkey'           => $membership_pkey,
                    'membership_id'             => $this->input->post('membership_id')
                );
                $this->db->where('id',$customer_id);
                $this->db->update('tbl_salon_customer',$update_pkey);                        
                
                $payment_data = array(
                    'payment_from' 		        => '0',
                    'branch_id' 		        => $this->session->userdata('branch_id'),
                    'salon_id' 			        => $this->session->userdata('salon_id'),
                    'customer_id' 		        => $customer_id,
                    'type' 		                => '1',
                    'membership_pkey'           => $membership_pkey,
                    'membership_id'             => $this->input->post('membership_id'),
                    'opening_pending_amount' 	=> $current_current_pending_amount,
                    'paid_amount' 		        => $actual_paid_amount,
                    'closing_pending_amount' 	=> $new_current_pending_amount,
                    'total_bill_amount' 		=> $current_total_bill_amount,
                    'total_paid_amount' 	    => $current_total_paid_amount,
                    'remark' 	                => 'Payment for membership purchase',
                    'payment_date'              => $this->input->post('service_date') != "" ? date("Y-m-d H:i:s",strtotime($this->input->post('service_date'))) : date("Y-m-d H:i:s"),

                    'payment_mode' 	            => $payment_mode, 
                    'transaction_id'            => $transaction_id,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
                    'is_counter'        =>  $this->input->post('employee') == "" ? $is_counter : null,
                    
                    'adjust_amount'                     => $adjust_amount,
                    'adjust_amount_remark'              => $adjust_amount_remark,
                    'amount_round_type'                 => $amount_round_type,
                    'rounded_bill_amount'               => $rounded_bill_amount,
                );
                $this->db->insert('tbl_booking_payment_entry', $payment_data);
                $payment_id = $this->db->insert_id();

                $data = array('payment_id'  =>  $payment_id);
                $this->db->where('id',$membership_pkey);
                $this->db->update('tbl_customer_membership_history',$data);
            }else{
                $salon_profile = $this->Salon_model->get_all_salon_profile_single_all($this->session->userdata('branch_id'),$this->session->userdata('salon_id'));
                $is_gst_applicable = '0';
                $gst_no = '';
                $gst_rate = '0';
                if(!empty($salon_profile)){
                    if($salon_profile->is_gst_applicable == '1'){
                        $gst_no = $salon_profile->gst_no;
                        $is_gst_applicable = '1';
                        $setup = $this->Master_model->get_backend_setups();	
                        if(!empty($setup)){
                            $gst_rate = $setup->gst_rate;
                        }
                    }
                }
                $gst_amount = (($this->input->post('price') - $this->input->post('discount_in_rs')) * ((float)$gst_rate)) / 100;

                $data1 = array(
                    'branch_id' 		=> $this->session->userdata('branch_id'),
                    'salon_id' 			=> $this->session->userdata('salon_id'),
                    'customer_id' 		=> $customer_id,
                    'membership_id' 	=> $this->input->post('membership_id'), 
                    'employee_id' 	    => $this->input->post('employee'), 
                    'membership_price' 	=> $this->input->post('price'), 
                    'discount_in_rs' 	=> $this->input->post('discount_in_rs'), 
                    'discount_in_per' 	=> $this->input->post('discount_in_per'), 
                    
                    'is_gst_applicable' => $is_gst_applicable == '1' ? $is_gst_applicable : '0', 
                    'salon_gst_no' 	    => $gst_no, 
                    'salon_gst_rate' 	=> $gst_rate, 
                    'gst_amount' 	    => $gst_amount, 

                    'service_discount' 	=> $membership_data->service_discount, 
                    'product_discount' 	=> $membership_data->product_discount, 
                    'discount_in' 		=> $membership_data->discount_in, 
                    'duration' 			=> $membership_data->duration, 
                    'duration_end' 		=> $membership_data->duration_end, 
                    'bg_color_input' 	=> $membership_data->bg_color_input, 
                    'bg_color' 			=> $membership_data->bg_color, 
                    'text_color_input' 	=> $membership_data->text_color_input, 
                    'text_color' 		=> $membership_data->text_color, 
                    'membership_start'  => $membership_start, 
                    'membership_end' 	=> $membership_end, 
                    'payment_status'    => '1',

                    'payment_mode' 	    => $payment_mode, 
                    'transaction_id'    => $transaction_id,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                    'payment_on'        => date("Y-m-d H:i:s"),
                    'payment_date'      => $this->input->post('service_date') != "" ? date("Y-m-d H:i:s",strtotime($this->input->post('service_date'))) : date("Y-m-d H:i:s"),
                    'created_on' 		=> date("Y-m-d H:i:s"),
                    'is_counter'        =>  $this->input->post('employee') == "" ? $is_counter : null
                ); 
                $this->db->insert('tbl_customer_membership_history',$data1);
                $membership_pkey = $this->db->insert_id();

                $this->db->where('id',$customer_id);
                $single = $this->db->get('tbl_salon_customer')->row();    
                
                $actual_paid_amount = $this->input->post('actual_paid_amount');               
                
                $current_total_bill_amount = $single->total_bill_amount;
                $current_total_paid_amount = $single->total_paid_amount;
                $current_current_pending_amount = $single->current_pending_amount;
                $mem_final_price = ($this->input->post('price') - $this->input->post('discount_in_rs')) + $gst_amount;
                
                $new_total_bill_amount = (float)$current_total_bill_amount + (float)$rounded_bill_amount;
                $new_total_paid_amount = (float)$current_total_paid_amount + (float)$actual_paid_amount;
                $new_current_pending_amount = ((float)$rounded_bill_amount + (float)$current_current_pending_amount) - (float)$actual_paid_amount;
        
                $update_pkey = array(
                    'total_bill_amount'         => $new_total_bill_amount,
                    'total_paid_amount'         => $new_total_paid_amount,
                    'current_pending_amount'    => number_format((float)($new_current_pending_amount), 2, '.', ''),
        
                    'membership_pkey'           => $membership_pkey,
                    'membership_id'             => $this->input->post('membership_id')
                );
                $this->db->where('id',$customer_id);
                $this->db->update('tbl_salon_customer',$update_pkey);                        
                
                $payment_data = array(
                    'payment_from' 		        => '0',
                    'branch_id' 		        => $this->session->userdata('branch_id'),
                    'salon_id' 			        => $this->session->userdata('salon_id'),
                    'customer_id' 		        => $customer_id,
                    'type' 		                => '1',
                    'membership_pkey'           => $membership_pkey,
                    'membership_id'             => $this->input->post('membership_id'),
                    'opening_pending_amount' 	=> $current_current_pending_amount,
                    'paid_amount' 		        => $actual_paid_amount,
                    'closing_pending_amount' 	=> $new_current_pending_amount,
                    'total_bill_amount' 		=> $current_total_bill_amount,
                    'total_paid_amount' 	    => $current_total_paid_amount,
                    'remark' 	                => 'Payment for membership purchase',
                    'payment_date'              => $this->input->post('service_date') != "" ? date("Y-m-d H:i:s",strtotime($this->input->post('service_date'))) : date("Y-m-d H:i:s"),

                    'payment_mode' 	            => $payment_mode, 
                    'transaction_id'            => $transaction_id,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
                    'is_counter'        => $this->input->post('employee') == "" ? $is_counter : null,
                    
                    'adjust_amount'                     => $adjust_amount,
                    'adjust_amount_remark'              => $adjust_amount_remark,
                    'amount_round_type'                 => $amount_round_type,
                    'rounded_bill_amount'               => $rounded_bill_amount,
                );
                $this->db->insert('tbl_booking_payment_entry', $payment_data);
                $payment_id = $this->db->insert_id();

                $data = array('payment_id'  =>  $payment_id);
                $this->db->where('id',$membership_pkey);
                $this->db->update('tbl_customer_membership_history',$data);              
                                    
                $old_membership_data = array(
                    'membership_status' =>  '2',
                    'cancel_remark'     =>  'Membership cancelled because new membership purchased',
                    'cancelled_on'      =>  date("Y-m-d H:i:s")
                );
                $this->db->where('id', $membership_details->id);
                $this->db->update('tbl_customer_membership_history', $old_membership_data);
            }
        }
        
        if($this->input->post('payment_btn') == 'generate'){
            //send WP message with receipt attached                    
            $this->db->where('id',$customer_id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('is_deleted','0');
            $customer_details = $this->db->get('tbl_salon_customer')->row();
            if($customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
                $this->db->select('tbl_customer_membership_history.*, tbl_memebership.membership_name');
                $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_customer_membership_history.membership_id');
                $this->db->where('tbl_customer_membership_history.id',$membership_pkey);
                $this->db->where('tbl_customer_membership_history.branch_id',$this->session->userdata('branch_id'));
                $this->db->where('tbl_customer_membership_history.salon_id',$this->session->userdata('salon_id'));
                $this->db->where('tbl_customer_membership_history.is_deleted','0');
                $single_details = $this->db->get('tbl_customer_membership_history')->row();
                if(!empty($single_details)){
                    $receipt_link = base_url('membership-print/' . base64_encode($membership_pkey) . '?print&mobile');
                    $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                    $finalNumber = substr($cleanedNumber, -10);
                    $finalNumber = '91' . $finalNumber;

                    $this->db->where('is_deleted','0');
                    $this->db->where('id',$this->session->userdata('branch_id'));
                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                    $branch = $this->db->get('tbl_branch')->row();
                    $visit_text = '';
                    if(!empty($branch)){
                        if($branch->branch_name != ""){
                            $visit_text .= $branch->branch_name;
                        }
                    }

                    $type = '20';
                    $message = "Hello, " . $customer_details->full_name . "!%0aCongratulations...!!!%0aYour " . $single_details->membership_name . " Membership Is Active Now\u{2705}%0a%0a\u{1F5D3}It will be valid from " . date('d M, Y',strtotime($single_details->membership_start)) . " to " . date('d M, Y',strtotime($single_details->membership_end)) . "%0a\u{1F55B}%0a%0aFollow the link for payment receipt.%0a" . $receipt_link . "%0a%0aThank you!%0a" . $visit_text . "";
                    $app_message = "Hello, " . $customer_details->full_name . "!\nCongratulations...!!!\0aYour " . $single_details->membership_name . " Membership Is Active Now✅\n\n📅 It will be valid from " . date('d M, Y',strtotime($single_details->membership_start)) . " to " . date('d M, Y',strtotime($single_details->membership_end)) . "\n\nFollow the link for payment receipt.\n" . $receipt_link . "\n\nThank you!\n" . $visit_text . "";
                    $number = $finalNumber;
                    $customer = $customer_details->id;
                    $salon_id = $customer_details->salon_id;
                    $branch_id = $customer_details->branch_id;
                    $for_order_id = '';
                    $for_offer_id = '';
                    $for_query_id = '';
                    $consent_form_id = '';
                    $membership_history_id = $membership_pkey;
                    $package_allocation_id = '';
                    $giftcard_purchase_id = '';
                    $title = 'Membership Purchased';
                    $generated_from = '0';
                    $notification_data = [
                        "landing_page"  => 'my_memberships',
                        "redirect_id"   => ''
                    ];
        
                    $message_send_on = '';
                    $template_id = '';                                
                    $email_subject = '';
                    $email_html = '';
                    $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                    if(!empty($booking_rules)){
                        if($booking_rules->booking_reminder_type == '1'){
                            $message_send_on = '0'; //SMS
                            $template_id = '';
                        }elseif($booking_rules->booking_reminder_type == '2'){
                            $message_send_on = '2'; //EMAIL
                            $email_html = '';
                        }elseif($booking_rules->booking_reminder_type == '3'){
                            $message_send_on = '1'; //WP
                        }
                    }
                    $wp_template_data = [];
                    $trying_booking_id = '';
                    $cron_id = '';

                    $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                }
            }
        }

        return true;
	}
    
	public function asign_package(){ 
        $is_counter = $this->input->post('is_counter');
        $discount_in_rs = $this->input->post('discount_in_rs');
        $discount_in_per = $this->input->post('discount_in_per');
        $all_payment_mode = $this->input->post('payment_mode');
        $all_transaction_id = $this->input->post('transaction_id');
        $all_mode_amount = $this->input->post('mode_amount');

        $adjust_amount = $this->input->post('adjust_amount');
        $adjust_amount_remark = $this->input->post('adjust_amount_remark');
        $amount_round_type = $this->input->post('amount_round_type');
        $rounded_bill_amount = $this->input->post('rounded_bill_amount');

        $payment_mode_multiple = !empty($all_payment_mode) ? implode(',',$all_payment_mode) : null;
        $payment_transaction_id_multiple = !empty($all_transaction_id) ? implode(',',$all_transaction_id) : null;
        $payment_amount_multiple = !empty($all_mode_amount) ? implode(',',$all_mode_amount) : null;
        
        $payment_mode = !empty($all_payment_mode) && count($all_payment_mode) == 1 ? $all_payment_mode[0] : null;
        $transaction_id = !empty($all_transaction_id) && count($all_transaction_id) == 1 ? $all_transaction_id[0] : null;

		$this->db->where('tbl_package.id',$this->input->post('package_id'));
		$package_data = $this->db->get('tbl_package');
		$package_data = $package_data->row();

        if(!empty($package_data)){
            $data = array(   
                'branch_id' 				=> $this->session->userdata('branch_id'),
                'salon_id'	 				=> $this->session->userdata('salon_id'),
                'email' 					=> $this->input->post('email'),
                'address' 					=> $this->input->post('address'),
                'dob' 						=> $this->input->post('dob'),
                'state' 					=> $this->input->post('state'),
                'city' 						=> $this->input->post('city'),
                'doa' 						=> $this->input->post('doa'),
                'married_status' 			=> $this->input->post('married_status'),
            );  

            $customer_id = $this->input->post('id') != "" ? $this->input->post('id') : $this->input->post('customer_name');
            $this->db->where('is_deleted','0');
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('id',$customer_id);
            $exist = $this->db->get('tbl_salon_customer');
            $exist = $exist->row();

            if(!empty($exist)){
                $customer_id = $exist->id;
                $this->db->where('id', $customer_id);
                $this->db->update('tbl_salon_customer', $data);
            }else{
                $f_name = $this->input->post('f_name') != "" ? $this->input->post('f_name') : null;
                $l_name = $this->input->post('l_name') != "" ? $this->input->post('l_name') : null;
                $full_name = $f_name . ' ' . $l_name;

                $general_data = array(
                    'f_name'                    => $f_name,
                    'l_name'                    => $l_name,
                    'full_name'                 => $full_name,
                    // 'full_name' 				=> $this->input->post('full_name'),
                    'customer_phone' 			=> ($this->input->post('customer_phone') != "" ? $this->input->post('customer_phone') : $this->input->post('selected_customer_phone')),
                    'gender' 					=> $this->input->post('gender'),
                );
                $date = array(
                    'created_on' => date("Y-m-d H:i:s")
                );
                $new_arr = array_merge($data, $date);
                $new_arr = array_merge($new_arr, $general_data);
                $this->db->insert('tbl_salon_customer', $new_arr);
                $customer_id = $this->db->insert_id();
            }

            $count_type = $package_data->count_type;
            if($count_type == 'Days'){
                $count_value = $package_data->count_value;
            }elseif($count_type == 'Week'){
                $count_value = $package_data->count_value * 7;
            }elseif($count_type == 'Month'){
                $count_value = $package_data->count_value * 30;
            }elseif($count_type == 'Year'){
                $count_value = $package_data->count_value * 365;
            }else{
                $count_value = $package_data->count_value;
            }
            $package_start = date("Y-m-d");
            $package_end = date("Y-m-d", strtotime("+" . $count_value . " days", strtotime($package_start)));     

            $salon_profile = $this->Salon_model->get_all_salon_profile_single_all($this->session->userdata('branch_id'),$this->session->userdata('salon_id'));
            $is_gst_applicable = '0';
            $gst_no = '';
            $gst_rate = '0';
            if(!empty($salon_profile)){
                if($salon_profile->is_gst_applicable == '1'){
                    $gst_no = $salon_profile->gst_no;
                    $is_gst_applicable = '1';
                    $setup = $this->Master_model->get_backend_setups();	
                    if(!empty($setup)){
                        $gst_rate = $setup->gst_rate;
                    }
                }
            }
            $gst_amount = (($this->input->post('price') - $this->input->post('discount_in_rs')) * ((float)$gst_rate)) / 100;

            $allocation_data = array(
                'customer_name'         =>  $customer_id,
                'allocated_by'          =>  $this->input->post('employee'),
                'package_id'            =>  $this->input->post('package_id'),
                'branch_id' 			=>  $this->session->userdata('branch_id'),
                'salon_id' 				=>  $this->session->userdata('salon_id'),
                'package_start_date'    =>  $package_start,
                'package_end_date'      =>  $package_end,
                'actual_price'          =>  $package_data->actual_price,
                'discount'              =>  $package_data->discount,
                'discount_in'           =>  $package_data->discount_in,
                'package_amount'        =>  $this->input->post('price'),
                'discount_in_rs' 	    =>  $this->input->post('discount_in_rs'), 
                'discount_in_per' 	    =>  $this->input->post('discount_in_per'), 
                
                'is_gst_applicable' => $is_gst_applicable == '1' ? $is_gst_applicable : '0', 
                'salon_gst_no' 	    => $gst_no, 
                'salon_gst_rate' 	=> $gst_rate, 
                'gst_amount' 	    => $gst_amount, 

                'payment_mode' 	    => $payment_mode, 
                'transaction_id'    => $transaction_id,
                
                'payment_mode_multiple'             => $payment_mode_multiple,
                'payment_amount_multiple'           => $payment_amount_multiple,
                'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                'payment_on' 	        => $this->input->post('service_date') != "" ? date("Y-m-d H:i:s",strtotime($this->input->post('service_date'))) : date("Y-m-d H:i:s"),
                'is_booking_done'       => '1',
                
                'created_on'            =>  date("Y-m-d H:i:s"),
                'is_counter'        =>  $this->input->post('employee') == "" ? $is_counter : null
            );
            $this->db->insert('tbl_customer_package_allocations', $allocation_data);
            $allocation_id = $this->db->insert_id();

            $package_all_services = explode(',',$package_data->service_name);

            if(!empty($package_all_services)){
                for($i=0;$i<count($package_all_services);$i++){
                    $package_service_products = $this->get_package_products_single($package_data->id,$package_all_services[$i]);
                    $package_item_details = array(
                        'branch_id' 			=> $this->session->userdata('branch_id'),
                        'salon_id' 				=> $this->session->userdata('salon_id'),
                        'allocation_id' 		=> $allocation_id,
                        'customer_name' 		=> $customer_id,
                        'pacakge_id' 		    => $this->input->post('package_id'),
                        'package_amount' 		=> $this->input->post('price'),
                        'item_type'             =>  '0',
                        'item_id'               =>  $package_all_services[$i],
                        'products_id'           =>  !empty($package_service_products) ? $package_service_products->product_ids : null,
                        'item_added_on'         =>  date("Y-m-d"),
                        'package_start_date'    =>  date("Y-m-d"),
                        'created_on'            =>  date("Y-m-d H:i:s"),
                    );
                    $this->db->insert('tbl_booking_package_detail_status', $package_item_details);      
                }
            }              
            
            $this->db->where('is_deleted','0');
            $this->db->where('status','1');
            $this->db->where('id',$customer_id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $single = $this->db->get('tbl_salon_customer')->row();  

            $actual_paid_amount = $this->input->post('actual_paid_amount');             
                                    
            $current_total_bill_amount = $single->total_bill_amount;
            $current_total_paid_amount = $single->total_paid_amount;
            $current_current_pending_amount = $single->current_pending_amount;
            $package_final_price = ($this->input->post('price') - $this->input->post('discount_in_rs')) + $gst_amount;
            
            $new_total_bill_amount = (float)$current_total_bill_amount + (float)$rounded_bill_amount;
            $new_total_paid_amount = (float)$current_total_paid_amount + (float)$actual_paid_amount;
            $new_current_pending_amount = ((float)$rounded_bill_amount + (float)$current_current_pending_amount) - (float)$actual_paid_amount;
    
            $update_pkey = array(
                'total_bill_amount'         => $new_total_bill_amount,
                'total_paid_amount'         => $new_total_paid_amount,
                'current_pending_amount'    => number_format((float)($new_current_pending_amount), 2, '.', ''),
            );
            $this->db->where('id',$customer_id);
            $this->db->update('tbl_salon_customer',$update_pkey);                        
            
            $payment_data = array(
                'payment_from' 		        => '0',
                'branch_id' 		        => $branch_id,
                'salon_id' 			        => $salon_id,
                'customer_id' 		        => $customer_id,
                'type' 		                => '4',
                'package_id'                => $package_id,
                'package_allocation_id'     => $allocation_id,
                'opening_pending_amount' 	=> $current_current_pending_amount,
                'paid_amount' 		        => $actual_paid_amount,
                'closing_pending_amount' 	=> $new_current_pending_amount,
                'total_bill_amount' 		=> $current_total_bill_amount,
                'total_paid_amount' 	    => $current_total_paid_amount,
                'remark' 	                => 'Payment for package purchase',
                'payment_date'              => $this->input->post('service_date') != "" ? date("Y-m-d H:i:s",strtotime($this->input->post('service_date'))) : date("Y-m-d H:i:s"),
                
                'payment_mode' 	    => $payment_mode, 
                'transaction_id'    => $transaction_id,
                
                'payment_mode_multiple'             => $payment_mode_multiple,
                'payment_amount_multiple'           => $payment_amount_multiple,
                'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
                'is_counter'        =>  $this->input->post('employee') == "" ? $is_counter : null,
                    
                'adjust_amount'                     => $adjust_amount,
                'adjust_amount_remark'              => $adjust_amount_remark,
                'amount_round_type'                 => $amount_round_type,
                'rounded_bill_amount'               => $rounded_bill_amount,
            );
            $this->db->insert('tbl_booking_payment_entry', $payment_data);
            $payment_id = $this->db->insert_id();

            $data = array('payment_id'  =>  $payment_id);
            $this->db->where('id',$allocation_id);
            $this->db->update('tbl_customer_package_allocations',$data);   
            
            if($this->input->post('payment_btn') == 'generate'){
                //send WP message with receipt attached                    
                $this->db->where('id',$customer_id);
                $this->db->where('branch_id',$this->session->userdata('branch_id'));
                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                $this->db->where('is_deleted','0');
                $customer_details = $this->db->get('tbl_salon_customer')->row();
                if($customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
                    $this->db->select('tbl_customer_package_allocations.*, tbl_package.package_name');
                    $this->db->join('tbl_package', 'tbl_package.id = tbl_customer_package_allocations.package_id');
                    $this->db->where('tbl_customer_package_allocations.id',$allocation_id);
                    $this->db->where('tbl_customer_package_allocations.branch_id',$this->session->userdata('branch_id'));
                    $this->db->where('tbl_customer_package_allocations.salon_id',$this->session->userdata('salon_id'));
                    $this->db->where('tbl_customer_package_allocations.is_deleted','0');
                    $single_details = $this->db->get('tbl_customer_package_allocations')->row();
                    if(!empty($single_details)){
                        $receipt_link = base_url('package-print/' . base64_encode($allocation_id) . '?print&mobile');
                        $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                        $finalNumber = substr($cleanedNumber, -10);
                        $finalNumber = '91' . $finalNumber;

                        $this->db->where('is_deleted','0');
                        $this->db->where('id',$this->session->userdata('branch_id'));
                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                        $branch = $this->db->get('tbl_branch')->row();
                        $visit_text = '';
                        if(!empty($branch)){
                            if($branch->branch_name != ""){
                                $visit_text .= $branch->branch_name;
                            }
                        }

                        $type = '21';
                        $message = "Hello, " . $customer_details->full_name . "!%0aCongratulations...!!!%0aYour " . $single_details->package_name . " Package Is Active Now\u{2705}%0a%0a\u{1F5D3}It will be valid from " . date('d M, Y',strtotime($single_details->package_start_date)) . " to " . date('d M, Y',strtotime($single_details->package_end_date)) . "%0a\u{1F55B}%0a%0aFollow the link for payment receipt.%0a" . $receipt_link . "%0a%0aThank you!%0a" . $visit_text . "";
                        $app_message = "Hello, " . $customer_details->full_name . "!\nCongratulations...!!!\0aYour " . $single_details->package_name . " Package Is Active Now✅\n\n📅 It will be valid from " . date('d M, Y',strtotime($single_details->package_start_date)) . " to " . date('d M, Y',strtotime($single_details->package_end_date)) . "\n\nFollow the link for payment receipt.\n" . $receipt_link . "\n\nThank you!\n" . $visit_text . "";
                        $number = $finalNumber;
                        $customer = $customer_details->id;
                        $salon_id = $customer_details->salon_id;
                        $branch_id = $customer_details->branch_id;
                        $for_order_id = '';
                        $for_offer_id = '';
                        $for_query_id = '';
                        $consent_form_id = '';
                        $membership_history_id = '';
                        $package_allocation_id = $allocation_id;
                        $giftcard_purchase_id = '';
                        $title = 'Package Purchased';
                        $generated_from = '0';
                        $notification_data = [
                            "landing_page"  => 'my_packages',
                            "redirect_id"   => ''
                        ];
            
                        $message_send_on = '';
                        $template_id = '';                                
                        $email_subject = '';
                        $email_html = '';
                        $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                        if(!empty($booking_rules)){
                            if($booking_rules->booking_reminder_type == '1'){
                                $message_send_on = '0'; //SMS
                                $template_id = '';
                            }elseif($booking_rules->booking_reminder_type == '2'){
                                $message_send_on = '2'; //EMAIL
                                $email_html = '';
                            }elseif($booking_rules->booking_reminder_type == '3'){
                                $message_send_on = '1'; //WP
                            }
                        }
                        $wp_template_data = [];
                        $trying_booking_id = '';
                        $cron_id = '';

                        $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                    }
                }
            }

            return true;
        }
	}
    
	public function asign_giftcard(){ 
        $is_counter = $this->input->post('is_counter');
        $discount_in_rs = $this->input->post('discount_in_rs');
        $discount_in_per = $this->input->post('discount_in_per');
        $all_payment_mode = $this->input->post('payment_mode');
        $all_transaction_id = $this->input->post('transaction_id');
        $all_mode_amount = $this->input->post('mode_amount');
        
        $adjust_amount = $this->input->post('adjust_amount');
        $adjust_amount_remark = $this->input->post('adjust_amount_remark');
        $amount_round_type = $this->input->post('amount_round_type');
        $rounded_bill_amount = $this->input->post('rounded_bill_amount');

        $payment_mode_multiple = !empty($all_payment_mode) ? implode(',',$all_payment_mode) : null;
        $payment_transaction_id_multiple = !empty($all_transaction_id) ? implode(',',$all_transaction_id) : null;
        $payment_amount_multiple = !empty($all_mode_amount) ? implode(',',$all_mode_amount) : null;
        
        $payment_mode = !empty($all_payment_mode) && count($all_payment_mode) == 1 ? $all_payment_mode[0] : null;
        $transaction_id = !empty($all_transaction_id) && count($all_transaction_id) == 1 ? $all_transaction_id[0] : null;


        $giftcard_id = $this->input->post('giftcard_id');
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');

        $this->db->where('branch_id', $branch_id);
        $this->db->where('salon_id', $salon_id);
        $this->db->where('id',$giftcard_id);
        $this->db->where('is_deleted','0');
        $single_giftcard = $this->db->get('tbl_gift_card')->row();
        if(!empty($single_giftcard)){
            $data = array(   
                'branch_id' 				=> $this->session->userdata('branch_id'),
                'salon_id'	 				=> $this->session->userdata('salon_id'),
                'email' 					=> $this->input->post('email'),
                'address' 					=> $this->input->post('address'),
                'dob' 						=> $this->input->post('dob'),
                'state' 					=> $this->input->post('state'),
                'city' 						=> $this->input->post('city'),
                'doa' 						=> $this->input->post('doa'),
                'married_status' 			=> $this->input->post('married_status'),
            );  

            $customer_id = $this->input->post('id') != "" ? $this->input->post('id') : $this->input->post('customer_name');
            $this->db->where('is_deleted','0');
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('id',$customer_id);
            $exist = $this->db->get('tbl_salon_customer');
            $exist = $exist->row();
            
            if(!empty($exist)){
                $customer_id = $exist->id;
                $this->db->where('id', $customer_id);
                $this->db->update('tbl_salon_customer', $data);
            }else{
                $f_name = $this->input->post('f_name') != "" ? $this->input->post('f_name') : null;
                $l_name = $this->input->post('l_name') != "" ? $this->input->post('l_name') : null;
                $full_name = $f_name . ' ' . $l_name;

                $general_data = array(
                    'f_name'                    => $f_name,
                    'l_name'                    => $l_name,
                    'full_name'                 => $full_name,
                    // 'full_name' 				=> $this->input->post('full_name'),
                    'customer_phone' 			=> ($this->input->post('customer_phone') != "" ? $this->input->post('customer_phone') : $this->input->post('selected_customer_phone')),
                    'gender' 					=> $this->input->post('gender'),
                );
                $date = array(
                    'created_on' => date("Y-m-d H:i:s")
                );
                $new_arr = array_merge($data, $date);
                $new_arr = array_merge($new_arr, $general_data);
                $this->db->insert('tbl_salon_customer', $new_arr);
                $customer_id = $this->db->insert_id();
            }

            $gift_card_balance = $single_giftcard->gift_price != "" ? $single_giftcard->gift_price : $single_giftcard->regular_price;
            if($gift_card_balance > 0){
                $gift_card_status = '0';
            }elseif($gift_card_balance == 0){
                $gift_card_status = '1';
                $gift_card_balance = '0';
            }else{
                $gift_card_status = '1';
                $gift_card_balance = '0';
            }
            
            $is_gst_applicable = '0';
            $gst_no = '';
            $gst_rate = 0;
            if($profile->is_gst_applicable == '1'){
                $gst_no = $profile->gst_no;
                $is_gst_applicable = '1';
                $setup = $this->Master_model->get_backend_setups();	
                if(!empty($setup)){
                    $gst_rate = $setup->gst_rate;
                }
            }
            $gst_amount = (($single_giftcard->regular_price - $this->input->post('discount_in_rs')) * ((float)$gst_rate)) / 100;

            $giftcard_data = array(
                'branch_id' 			=> $branch_id,
                'salon_id' 				=> $salon_id,
                'payment_from'          => '0', 
                'type'                  => '3',
                'customer_id' 		    => $customer_id,
                
                'giftcard_id' 	        => $single_giftcard->id,
                'gift_card_name' 	    => $single_giftcard->gift_name,
                'gift_card_code' 	        => $single_giftcard->gift_card_code,
                'giftcard_min_amount' 	    => $single_giftcard->min_booking_amt,
                'gift_card_regular_price' 	=> $single_giftcard->regular_price,
                'discount_in_rs' 	        => $this->input->post('discount_in_rs'), 
                'discount_in_per' 	        => $this->input->post('discount_in_per'), 
                'giftcard_final_amount' 	=> ($single_giftcard->regular_price - $this->input->post('discount_in_rs')) + $gst_amount,
                
                'is_gst_applicable'         => $is_gst_applicable == '1' ? $is_gst_applicable : '0', 
                'salon_gst_no' 	            => $gst_no, 
                'salon_gst_rate' 	        => $gst_rate, 
                'gst_amount' 	            => $gst_amount, 

                'gift_card_price' 	        => $single_giftcard->gift_price != "" ? $single_giftcard->gift_price : $single_giftcard->regular_price,
                'gift_card_balance' 	    => $gift_card_balance,
                'gift_card_status' 	        => $gift_card_status,
                'created_on'                => date("Y-m-d H:i:s"),
                'payment_date'              => $this->input->post('service_date') != "" ? date("Y-m-d H:i:s",strtotime($this->input->post('service_date'))) : date("Y-m-d H:i:s"),
                'remark' 	                => 'Payment for giftcard purchase',

                'payment_mode' 	    => $payment_mode, 
                'transaction_id'    => $transaction_id,
                
                'payment_mode_multiple'             => $payment_mode_multiple,
                'payment_amount_multiple'           => $payment_amount_multiple,
                'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                'giftcard_added_by'         => $this->input->post('employee'),
                'is_counter'        =>  $this->input->post('employee') == "" ? $is_counter : null,
                    
                'adjust_amount'                     => $adjust_amount,
                'adjust_amount_remark'              => $adjust_amount_remark,
                'amount_round_type'                 => $amount_round_type,
                'rounded_bill_amount'               => $rounded_bill_amount,
            );
            $this->db->insert('tbl_booking_payment_entry', $giftcard_data);
            $giftcard_payment_id = $this->db->insert_id();

            $giftcard_customer_uid = $single_giftcard->gift_card_code . '' . $giftcard_payment_id . '' . date("ym"); 
            $this->db->where('id',$giftcard_payment_id);
            $this->db->update('tbl_booking_payment_entry',array('giftcard_customer_uid'=>$giftcard_customer_uid));               
            
            $this->db->where('is_deleted','0');
            $this->db->where('status','1');
            $this->db->where('id',$customer_id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $single = $this->db->get('tbl_salon_customer')->row(); 

            $actual_paid_amount = $this->input->post('actual_paid_amount');               
                                    
            $current_total_bill_amount = $single->total_bill_amount;
            $current_total_paid_amount = $single->total_paid_amount;
            $current_current_pending_amount = $single->current_pending_amount;
            $package_final_price = ($single_giftcard->regular_price - $this->input->post('discount_in_rs')) + $gst_amount;
            
            $new_total_bill_amount = (float)$current_total_bill_amount + (float)$rounded_bill_amount;
            $new_total_paid_amount = (float)$current_total_paid_amount + (float)$actual_paid_amount;
            $new_current_pending_amount = ((float)$rounded_bill_amount + (float)$current_current_pending_amount) - (float)$actual_paid_amount;
    
            $update_pkey = array(
                'total_bill_amount'         => $new_total_bill_amount,
                'total_paid_amount'         => $new_total_paid_amount,
                'current_pending_amount'    => number_format((float)($new_current_pending_amount), 2, '.', ''),
            );
            $this->db->where('id',$customer_id);
            $this->db->update('tbl_salon_customer',$update_pkey); 
            
            $update_pkey = array(
                'opening_pending_amount' 	=> $current_current_pending_amount,
                'paid_amount' 		        => $actual_paid_amount,
                'closing_pending_amount' 	=> $new_current_pending_amount,
                'total_bill_amount' 		=> $current_total_bill_amount,
                'total_paid_amount' 	    => $current_total_paid_amount,
            );
            $this->db->where('id',$giftcard_payment_id);
            $this->db->update('tbl_booking_payment_entry',$update_pkey); 
            
            if($this->input->post('payment_btn') == 'generate'){
                //send WP message with receipt attached                    
                $this->db->where('id',$customer_id);
                $this->db->where('branch_id',$this->session->userdata('branch_id'));
                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                $this->db->where('is_deleted','0');
                $customer_details = $this->db->get('tbl_salon_customer')->row();
                if($customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
                    $this->db->select('tbl_booking_payment_entry.*, tbl_gift_card.gift_name as gift_card_real_name');
                    $this->db->join('tbl_gift_card', 'tbl_gift_card.id = tbl_booking_payment_entry.giftcard_id');
                    $this->db->where('tbl_booking_payment_entry.id',$giftcard_payment_id);
                    $this->db->where('tbl_booking_payment_entry.branch_id',$this->session->userdata('branch_id'));
                    $this->db->where('tbl_booking_payment_entry.salon_id',$this->session->userdata('salon_id'));
                    $this->db->where('tbl_booking_payment_entry.is_deleted','0');
                    $single_details = $this->db->get('tbl_booking_payment_entry')->row();
                    if(!empty($single_details)){
                        $receipt_link = base_url('giftcard-print/' . base64_encode($giftcard_payment_id) . '?print&mobile');
                        $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                        $finalNumber = substr($cleanedNumber, -10);
                        $finalNumber = '91' . $finalNumber;

                        $this->db->where('is_deleted','0');
                        $this->db->where('id',$this->session->userdata('branch_id'));
                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                        $branch = $this->db->get('tbl_branch')->row();
                        $visit_text = '';
                        if(!empty($branch)){
                            if($branch->branch_name != ""){
                                $visit_text .= $branch->branch_name;
                            }
                        }

                        $type = '22';
                        $message = "Hello, " . $customer_details->full_name . "!%0aCongratulations...!!!%0aYour " . $single_details->gift_card_name . " Giftcard Is Active Now\u{2705}%0a%0a\u{1F5D3}Use " . $single_details->giftcard_customer_uid . " Code while Appointment Booking and get Rs. " . $single_details->gift_card_price . " Instant Discount%0a\u{1F55B}%0a%0aFollow the link for payment receipt.%0a" . $receipt_link . "%0a%0aThank you!%0a" . $visit_text . "";
                        $app_message = "Hello, " . $customer_details->full_name . "!\nCongratulations...!!!\0aYour " . $single_details->gift_card_name . " Giftcard Is Active Now✅\n\n📅 Use " . $single_details->giftcard_customer_uid . " Code while Appointment Booking and get Rs. " . $single_details->gift_card_price . " Instant Discount\n\nFollow the link for payment receipt.\n" . $receipt_link . "\n\nThank you!\n" . $visit_text . "";
                        $number = $finalNumber;
                        $customer = $customer_details->id;
                        $salon_id = $customer_details->salon_id;
                        $branch_id = $customer_details->branch_id;
                        $for_order_id = '';
                        $for_offer_id = '';
                        $for_query_id = '';
                        $consent_form_id = '';
                        $membership_history_id = '';
                        $package_allocation_id = '';
                        $giftcard_purchase_id = $giftcard_payment_id;
                        $title = 'Giftcard Purchased';
                        $generated_from = '0';
                        $notification_data = [
                            "landing_page"  => 'my_giftcards',
                            "redirect_id"   => ''
                        ];
            
                        $message_send_on = '';
                        $template_id = '';                                
                        $email_subject = '';
                        $email_html = '';
                        $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                        if(!empty($booking_rules)){
                            if($booking_rules->booking_reminder_type == '1'){
                                $message_send_on = '0'; //SMS
                                $template_id = '';
                            }elseif($booking_rules->booking_reminder_type == '2'){
                                $message_send_on = '2'; //EMAIL
                                $email_html = '';
                            }elseif($booking_rules->booking_reminder_type == '3'){
                                $message_send_on = '1'; //WP
                            }
                        }
                        $wp_template_data = [];
                        $trying_booking_id = '';
                        $cron_id = '';

                        $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                    }
                }
            }

            return true;
        }else{
            return false;
        }
	}
	public function get_single_customer($id){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $id);
        $result = $this->db->get('tbl_salon_customer');
        return $result->row();
    } 
	public function get_single_customer_name(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_salon_customer');
        return $result->row();
    } 

	public function get_all_assigned_membership(){
		$this->db->select('tbl_salon_customer.*,tbl_customer_membership_history.employee_id as sold_by, tbl_memebership.membership_name, tbl_memebership.membership_price, tbl_customer_membership_history.membership_start, tbl_customer_membership_history.membership_end');
		$this->db->from('tbl_salon_customer');
		$this->db->join('tbl_memebership', 'tbl_salon_customer.membership_id = tbl_memebership.id AND tbl_memebership.is_deleted = 1');
		$this->db->join('tbl_customer_membership_history', 'tbl_salon_customer.membership_pkey = tbl_customer_membership_history.id');
		$this->db->where('tbl_salon_customer.is_deleted', '0');
		$this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('tbl_salon_customer.id', 'DESC');
		$result = $this->db->get();
		return $result->result();
	} 

	public function get_all_assigned_membership_new(){
		$this->db->select('tbl_customer_membership_history.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_memebership.membership_name, tbl_memebership.membership_price');
		$this->db->from('tbl_customer_membership_history');
		$this->db->join('tbl_memebership', 'tbl_customer_membership_history.membership_id = tbl_memebership.id');
		$this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_membership_history.customer_id');
		$this->db->where('tbl_customer_membership_history.is_deleted', '0');
		$this->db->where('tbl_customer_membership_history.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_membership_history.salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('tbl_customer_membership_history.id', 'DESC');
		$result = $this->db->get();
		return $result->result();
	}

	public function get_customer_package_amount_history($id){
		$this->db->select('tbl_customer_package_allocations.*,tbl_salon_customer.email,tbl_salon_customer.address,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_package.package_name, tbl_package.service_name as all_service_name, tbl_package.amount as package_amount');
		$this->db->from('tbl_customer_package_allocations');
		$this->db->join('tbl_package', 'tbl_customer_package_allocations.package_id = tbl_package.id');
		$this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_package_allocations.customer_name');
		$this->db->where('tbl_customer_package_allocations.id', $id);
		$this->db->where('tbl_customer_package_allocations.is_deleted', '0');
		$this->db->where('tbl_customer_package_allocations.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_package_allocations.salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get();
		return $result->row();
	} 
	public function get_customer_package_amount_history_all($id){
		$this->db->select('tbl_customer_package_allocations.*,
        tbl_booking_payment_entry.opening_pending_amount,tbl_booking_payment_entry.paid_amount as actual_paid_amount,tbl_booking_payment_entry.closing_pending_amount,
        tbl_booking_payment_entry.adjust_amount,tbl_booking_payment_entry.adjust_amount_remark,tbl_booking_payment_entry.amount_round_type,tbl_booking_payment_entry.rounded_bill_amount,
        tbl_booking_payment_entry.opening_pending_amount,tbl_booking_payment_entry.paid_amount,tbl_booking_payment_entry.closing_pending_amount,
        tbl_salon_customer.email,tbl_salon_customer.address,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_package.package_name, tbl_package.service_name as all_service_name, tbl_package.amount as package_amount');
		$this->db->from('tbl_customer_package_allocations');
		$this->db->join('tbl_package', 'tbl_customer_package_allocations.package_id = tbl_package.id');
		$this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_package_allocations.customer_name');
		$this->db->join('tbl_booking_payment_entry', 'tbl_booking_payment_entry.id = tbl_customer_package_allocations.payment_id','left');
		$this->db->where('tbl_customer_package_allocations.id', $id);
		$this->db->where('tbl_customer_package_allocations.is_deleted', '0');
		$result = $this->db->get();
		return $result->row();
	} 
	public function get_customer_membership_amount_history($id){
		$this->db->select('tbl_customer_membership_history.*,tbl_salon_customer.email,tbl_salon_customer.address,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_memebership.membership_name, tbl_memebership.membership_price');
		$this->db->from('tbl_customer_membership_history');
		$this->db->join('tbl_memebership', 'tbl_customer_membership_history.membership_id = tbl_memebership.id');
		$this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_membership_history.customer_id');
		$this->db->where('tbl_customer_membership_history.id', $id);
		$this->db->where('tbl_customer_membership_history.is_deleted', '0');
		$this->db->where('tbl_customer_membership_history.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_membership_history.salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get();
		return $result->row();
	} 
	public function get_customer_membership_amount_history_all($id){
		$this->db->select('tbl_customer_membership_history.*,
        tbl_booking_payment_entry.opening_pending_amount,tbl_booking_payment_entry.paid_amount as actual_paid_amount,tbl_booking_payment_entry.closing_pending_amount,
        tbl_booking_payment_entry.adjust_amount,tbl_booking_payment_entry.adjust_amount_remark,tbl_booking_payment_entry.amount_round_type,tbl_booking_payment_entry.rounded_bill_amount,
        tbl_booking_payment_entry.opening_pending_amount,tbl_booking_payment_entry.paid_amount,tbl_booking_payment_entry.closing_pending_amount,
        tbl_salon_customer.email,tbl_salon_customer.address,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_memebership.membership_name, tbl_memebership.membership_price');
		$this->db->from('tbl_customer_membership_history');
		$this->db->join('tbl_memebership', 'tbl_customer_membership_history.membership_id = tbl_memebership.id');
		$this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_membership_history.customer_id');
		$this->db->join('tbl_booking_payment_entry', 'tbl_booking_payment_entry.id = tbl_customer_membership_history.payment_id','left');
		$this->db->where('tbl_customer_membership_history.id', $id);
		$this->db->where('tbl_customer_membership_history.is_deleted', '0');
		$result = $this->db->get();
		return $result->row();
	} 
	public function get_membership_info_ajax(){
		$membership_id = $this->input->post('membership_id');
		$this->db->where('id', $membership_id);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_memebership')->row();
		if (!empty($result)) {
			echo json_encode($result);
		}
	} 
	public function get_package_info_ajax(){
		$package_id = $this->input->post('package_id');
		$this->db->where('id', $package_id);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_package')->row();
		if (!empty($result)) {
			echo json_encode($result);
		}
	} 
	public function get_giftcard_info_ajax(){
		$giftcard_id = $this->input->post('giftcard_id');
		$this->db->where('id', $giftcard_id);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_gift_card')->row();
		if (!empty($result)) {
			echo json_encode($result);
		}
	} 
    public function fetch_guest_count_ajax(){
        $this->db->where('is_deleted','0');
        $this->db->where('is_original_guest','1');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $exist = $this->db->get('tbl_salon_customer')->num_rows();
        if($exist == 0){
            $name = 'Guest 1';
        }else{
            $name = 'Guest ' . ((int)$exist + 1);
        }

        echo $name;
    }
    public function add_new_customer(){
        // echo '<pre>'; print_r($_POST); exit;
        // $this->db->where('is_deleted','0');
        // $this->db->where('customer_phone',$this->input->post('customer_phone'));
        // $this->db->where('branch_id',$this->session->userdata('branch_id'));
        // $this->db->where('salon_id',$this->session->userdata('salon_id'));
        // $exist = $this->db->get('tbl_salon_customer')->row();

        $f_name = $this->input->post('f_name') != "" ? $this->input->post('f_name') : null;
        $l_name = $this->input->post('l_name') != "" ? $this->input->post('l_name') : null;
        $full_name = $f_name . ' ' . $l_name;

        $hidden_start = $this->input->post('hidden_start') != "" ? $this->input->post('hidden_start') : '';
        $hidden_end = $this->input->post('hidden_end') != "" ? $this->input->post('hidden_end') : '';
        $hidden_stylist = $this->input->post('hidden_stylist') != "" ? $this->input->post('hidden_stylist') : '';

        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'f_name' 		    => $f_name,
            'l_name' 		    => $l_name,
            'full_name' 		=> $full_name,
            // 'full_name' 		=> $this->input->post('full_name'),
            'customer_phone' 	=> $this->input->post('customer_phone'),
            'custom_note' 	    => $this->input->post('custom_note'),
            'email' 			=> $this->input->post('email'),
            'address' 			=> $this->input->post('address'),
            'dob' 				=> date('Y-m-d',strtotime($this->input->post('dob'))),
            'gender' 			=> $this->input->post('gender'),
            'state' 			=> $this->input->post('state'),
            'city' 				=> $this->input->post('city'),
            'doa' 				=> date('Y-m-d',strtotime($this->input->post('DOA'))),
        );

        if($this->input->post('id') == ""){
            // if(empty($exist)){
                $is_guest = $this->input->post('is_guest');
                if($is_guest == 'on'){
                    $is_guest = '1';
                }else{
                    $is_guest = '0';
                }
                
                $date = array(
                    'created_on'        => date("Y-m-d H:i:s"),
                    'is_original_guest' =>  $is_guest,
                    'is_guest'          =>  $is_guest
                );
                $new_arr = array_merge($data, $date);
                $this->db->insert('tbl_salon_customer', $new_arr);
                $last_id = $this->db->insert_id();

                if($this->input->post('added_from') == 'seperate'){
                    return 0;
                }elseif($this->input->post('added_from') == 'customer_list'){                    
                    $this->session->set_flashdata('success', 'Success ! Customer added successfully');
                    redirect('customer-list');
                }elseif($this->input->post('added_from') == 'bill-generation'){                    
                    $this->session->set_flashdata('success', 'Success ! Customer added successfully');
                    redirect('bill-generation?customer=' . $last_id);
                }elseif($this->input->post('added_from') == 'booking-form'){                    
                    $this->session->set_flashdata('success', 'Success ! Customer added successfully');
                    redirect('add-new-booking-new?customer=' . $last_id . '&start=' . $hidden_start . '&end=' . $hidden_end . '&stylist=' . $hidden_stylist);
                }else{
                    $this->session->set_flashdata('success', 'Success ! Customer added successfully');
                    redirect('add-new-booking-new?customer=' . $last_id . '&start=' . $hidden_start . '&end=' . $hidden_end . '&stylist=' . $hidden_stylist);
                }
            // }else{        
            //     $guest_to_parmanant = $this->input->post('guest_to_parmanant');
            //     if($guest_to_parmanant == '1'){
            //         $guest_to_parmanant = '0';
            //     }else{
            //         $guest_to_parmanant = '';
            //     }

            //     if($guest_to_parmanant != ""){
            //         $date = array(
            //             'is_guest'          =>  $guest_to_parmanant
            //         );
            //         $data = array_merge($data, $date);
            //     }

            //     $this->db->where('id', $exist->id);
            //     $this->db->update('tbl_salon_customer', $data);

            //     if($this->input->post('added_from') == 'booking-form'){                    
            //         $this->session->set_flashdata('success', 'Success ! Customer added successfully');
            //         redirect('add-new-booking-new?customer=' . $exist->id . '&start=' . $hidden_start . '&end=' . $hidden_end . '&stylist=' . $hidden_stylist);
            //     }elseif($this->input->post('added_from') == 'bill-generation'){                    
            //         $this->session->set_flashdata('success', 'Success ! Customer added successfully');
            //         redirect('bill-generation?customer=' . $exist->id);
            //     }elseif($this->input->post('added_from') == 'report'){                    
            //         $this->session->set_flashdata('success', 'Success ! Customer updated successfully');
            //         redirect('customer-report');
            //     }else{
            //         return 1;
            //     }
            // } 
        }else{    
            $guest_to_parmanant = $this->input->post('guest_to_parmanant');
            if($guest_to_parmanant == '1'){
                $guest_to_parmanant = '0';
            }else{
                $guest_to_parmanant = '';
            }
            
            if($guest_to_parmanant != ""){
                $date = array(
                    'is_guest'          =>  $guest_to_parmanant
                );
                $data = array_merge($data, $date);
            }

            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_salon_customer', $data);
            
            if($this->input->post('added_from') == 'booking-form'){                    
                $this->session->set_flashdata('success', 'Success ! Customer added successfully');
                redirect('add-new-booking-new?customer=' . $this->input->post('id') . '&start=' . $hidden_start . '&end=' . $hidden_end . '&stylist=' . $hidden_stylist);
            }elseif($this->input->post('added_from') == 'bill-generation'){                    
                $this->session->set_flashdata('success', 'Success ! Customer added successfully');
                redirect('bill-generation?customer=' . $this->input->post('id'));
            }elseif($this->input->post('added_from') == 'report'){                    
                $this->session->set_flashdata('success', 'Success ! Customer updated successfully');
                redirect('customer-report');
            }else{
                return 1;
            }
        }
	} 
    public function cancel_message(){
        $single = $this->Marketing_model->get_single_customize_message($this->uri->segment(2));
        if(!empty($single)){
            $data = array(
                'approval_status' 		=> '3',
                'cancelled_on'          => date("Y-m-d H:i:s")
            );
            $this->db->where('id', $single->id);
            $this->db->update('tbl_salon_customize_messages', $data);
            return 0;
        }else{
            return 1;
        } 
	} 
    
    public function get_send_offer_message_form_ajx(){
        $id = $this->input->post('id');
        $booking_rules = $this->Salon_model->get_booking_rules();
        $this->db->where('is_deleted','0');
        $this->db->where('id',$id);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $row = $this->db->get('tbl_offers')->row();
        
        $this->db->where('is_deleted','0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $branch = $this->db->get('tbl_branch')->row();
        
        // echo '<pre>'; print_r($row); exit();
        if(!empty($row)){
            $services_text = '';
            $services = explode(',',$row->service_name);
            for($i=0;$i<count($services);$i++){
                $this->db->where('id',$services[$i]);
                $this->db->where('branch_id',$this->session->userdata('branch_id'));
                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                $this->db->where('is_deleted','0');
                $service_details = $this->db->get('tbl_salon_emp_service')->row();
                if (!empty($service_details)) {
                    $services_text .= $service_details->service_name;
                    
                    if ($i < count($services) - 1) {
                        $services_text .= ', ';
                    }
                }
            }
            $services_text = trim($services_text,',');
            $services_text = trim($services_text,' ');

            $single_offer_discount_type = $row->discount_in;
            if($single_offer_discount_type == '0'){
                $service_offer_discount_text = $row->discount.'%';
            }else{
                $service_offer_discount_text = 'Flat Rs. '.$row->discount;
            }
            
            $visit_text = '';
            if(!empty($branch)){
                if($branch->branch_name != ""){
                    $visit_text .= $branch->branch_name;
                }
            }

            if (!empty($row->duration) && $row->duration != '0') {
                $start_date = date('d M, Y', strtotime($row->created_on));
                $end_date = date('d M, Y', strtotime($row->created_on . ' + ' . (int)$row->duration . ' weeks'));
            } else {
                $start_date = '';
                $end_date = '';
            }

            $festival_name = 'Festive Season';

            $customer = $this->get_all_salon_customer();

            // $message = "🌟 *Offer Alert!* 🌟%0a%0a" .
            //     "Get *{$service_offer_discount_text} off* on *{$services_text}*.%0a%0a" .
            //     "Hurry, book your appointment now!%0a%0a" .
            //     "*{$validity_text}*" .
            //     "*{$visit_text}*%0a" .
            //     "Don't miss out on this exclusive deal!";

            $message = "🌟 Festival Offer Alert! 🌟%0a%0a" .
                "Celebrate {$festival_name} with {$visit_text}!%0a" .
                "Get {$service_offer_discount_text} off on all services from {$start_date} to {$end_date}.%0a%0a" .
                "Hurry, book your appointment now!";
            
            $message = htmlspecialchars($message, ENT_QUOTES, 'UTF-8');
            $message = preg_replace('/\*([^\*]+)\*/', '<strong>$1</strong>', $message);
            $message = preg_replace('/_([^_]+)_/', '<em>$1</em>', $message);
            $message = preg_replace('/~([^~]+)~/', '<del>$1</del>', $message);
            $message = preg_replace('/`([^`]+)`/', '<code>$1</code>', $message);
            
            $message = str_replace('%0a', '<br>', $message);
        ?>
        <form method="post" name="send_message_form" id="send_message_form" enctype="multipart/form-data" action="<?=base_url();?>send_offer_message">        
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group custom_message_div">
                    <?=$message;?>
                </div>
            </div>  
            <input type="hidden" id="hidden_id" name="hidden_id" value="<?php echo $row->id; ?>">     
            <input type="hidden" id="hidden_message" name="hidden_message" value="<?php echo $message; ?>">     
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group">
                    <label for="customers">Select Customers<b class="require">*</b></label>
                    <select class="form-control choosen" id="customers" name="customers[]" multiple>
                    <?php 
                        if(!empty($customer)){
                        foreach($customer as $customer_result){
                            if($customer_result->gender == $row->gender){
                    ?>
                    <option value="<?=$customer_result->id;?>"><?=$customer_result->full_name.' ('.$customer_result->customer_phone.')';?></option>
                    <?php }}} ?>
                    </select>   
                    <label for="customers" generated="true" class="error" style="display:none;">Please select customer!</label>                          
                </div>
            </div>    
            <div class="row" style="display:none;">
                <div class="form-group col-md-6 col-xs-12" id="message_type_div">
                <label>Select Message Type<b class="require">*</b></label>
                <select class="form-control choosen" name="message_type" id="message_type">
                    <option value="">Select Option</option>
                    <option value="1" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '1'){ echo 'selected'; }?>>SMS</option>
                    <option value="2" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '2'){ echo 'selected'; }?>>Email</option>
                    <option value="3" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '3'){ echo 'selected'; }else{ echo 'selected'; }?>>Whatsapp</option>
                </select>
                <label for="message_type" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
            </div>
            </div>  
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group"> 
                    <button type="submit" id="submit_message_button" class="btn btn-primary" style="margin-top:25px;">Submit</button>
                </div>
            </div>
        </form>
        <script>
            $(".choosen").chosen({
                no_results_text: "Oops, nothing found!"
            });
            $('#send_message_form').validate({
                ignore: [],
                rules: {
                    'customers[]': {
                        required: true
                    },
                    message_type: {
                        required: true
                    }
                },
                messages: {
                    'customers[]': "Please select customer!",
                    message_type: "Please select message type!"
                },
                submitHandler: function(form) {
                    if (confirm("Are you sure you want to submit form?")) {
                        form.submit();
                    }
                }
            });
        </script>
        <?php
        }
    }
    
    public function get_send_coupon_message_form_ajx(){
        $id = $this->input->post('id');
        $booking_rules = $this->Salon_model->get_booking_rules();
        $this->db->where('is_deleted','0');
        $this->db->where('id',$id);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $row = $this->db->get('tbl_coupon_code')->row();
        
        $this->db->where('is_deleted','0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $branch = $this->db->get('tbl_branch')->row();

        if(!empty($row)){            
            $validity_text = '';
            if($row->coupan_expiry != "" && $row->coupan_expiry != null && $row->coupan_expiry != "0000-00-00" && $row->coupan_expiry != "1970-01-01"){
                $validity_text = date('d M, Y',strtotime($row->coupan_expiry));
            }
                   
            $coupan_code_text = '';
            if($row->coupan_code != "" && $row->coupan_code != null){
                $coupan_code_text = rtrim($row->coupan_code);
            }
                   
            $discount_text = '';
            if($row->coupon_offers != "" && $row->coupon_offers != null){
                $discount_text = 'Flat Rs. ' . rtrim($row->coupon_offers);
            } 

            $min_purchase = '';
            if($row->min_price != "" && $row->min_price != null){
                $min_purchase = rtrim($row->min_price);
            }
            
            $visit_text = '';
            if(!empty($branch)){
                if($branch->branch_name != ""){
                    $visit_text .= 'Visit '.$branch->branch_name;
                }
            }

            $customer = $this->get_all_salon_customer();

            // $message = "💸 *Exclusive Coupon Code Alert!* 💸%0a%0a" .
            // "Use code *{$coupan_code_text}* to get *{$discount_text}* on your next visit!%0a%0a" .
            // "Hurry, {$validity_text}Book your appointment now!%0a%0a" .
            // "{$visit_text}";

            $message = "💸 Special Offer Just for You! 💸%0a%0a" .
            "Make a minimum purchase of Rs. {$min_purchase} and get {$discount_text} OFF on your next visit!%0a%0a" .
            "Hurry—this offer is valid until {$validity_text} Don’t miss out.%0a%0a";
            
            $message = htmlspecialchars($message, ENT_QUOTES, 'UTF-8');
            $message = preg_replace('/\*([^\*]+)\*/', '<strong>$1</strong>', $message);
            $message = preg_replace('/_([^_]+)_/', '<em>$1</em>', $message);
            $message = preg_replace('/~([^~]+)~/', '<del>$1</del>', $message);
            $message = preg_replace('/`([^`]+)`/', '<code>$1</code>', $message);
            
            $message = str_replace('%0a', '<br>', $message);
        ?>
        <form method="post" name="send_message_form" id="send_message_form" enctype="multipart/form-data" action="<?=base_url();?>send_coupon_message">        
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group custom_message_div">
                    <?=$message;?>
                </div>
            </div>  
            <input type="hidden" id="hidden_id" name="hidden_id" value="<?php echo $row->id; ?>">     
            <input type="hidden" id="hidden_message" name="hidden_message" value="<?php echo $message; ?>">     
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group">
                    <label for="customers">Select Customers<b class="require">*</b></label>
                    <select class="form-control choosen" id="customers" name="customers[]" multiple>
                    <?php 
                        if(!empty($customer)){
                        foreach($customer as $customer_result){
                            if($customer_result->gender == $row->gender){
                    ?>
                    <option value="<?=$customer_result->id;?>"><?=$customer_result->full_name.' ('.$customer_result->customer_phone.')';?></option>
                    <?php }}} ?>
                    </select>   
                    <label for="customers" generated="true" class="error" style="display:none;">Please select customer!</label>                          
                </div>
            </div>    
            <div class="row" style="display:none;">
                <div class="form-group col-md-6 col-xs-12" id="message_type_div">
                <label>Select Message Type<b class="require">*</b></label>
                <select class="form-control choosen" name="message_type" id="message_type">
                    <option value="">Select Option</option>
                    <option value="1" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '1'){ echo 'selected'; }?>>SMS</option>
                    <option value="2" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '2'){ echo 'selected'; }?>>Email</option>
                    <option value="3" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '3'){ echo 'selected'; }else{ echo 'selected'; }?>>Whatsapp</option>
                </select>
                <label for="message_type" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
            </div>
            </div>  
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group"> 
                    <button type="submit" id="submit_message_button" class="btn btn-primary" style="margin-top:25px;">Submit</button>
                </div>
            </div>
        </form>
        <script>
            $(".choosen").chosen({
                no_results_text: "Oops, nothing found!"
            });
            $('#send_message_form').validate({
                ignore: [],
                rules: {
                    'customers[]': {
                        required: true
                    },
                    message_type: {
                        required: true
                    }
                },
                messages: {
                    'customers[]': "Please select customer!",
                    message_type: "Please select message type!"
                },
                submitHandler: function(form) {
                    if (confirm("Are you sure you want to submit form?")) {
                        form.submit();
                    }
                }
            });
        </script>
        <?php
        }
    }
    
    public function get_send_giftcard_message_form_ajx(){
        $id = $this->input->post('id');
        $booking_rules = $this->Salon_model->get_booking_rules();
        $this->db->where('is_deleted','0');
        $this->db->where('id',$id);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $row = $this->db->get('tbl_gift_card')->row();
        
        $this->db->where('is_deleted','0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $branch = $this->db->get('tbl_branch')->row();

        if(!empty($row)){             
            $visit_text = '';
            if(!empty($branch)){
                if($branch->branch_name != ""){
                    $visit_text .= 'Visit '.$branch->branch_name.'';
                }
            }

            $customer = $this->get_all_salon_customer();

            $message = "🎁 Gift the Joy of Beauty & Wellness! 🎁%0a%0a" .
            "Surprise your loved ones with premium beauty and care services from {$visit_text} 💌%0a%0a" .
            "How to Get & Share:%0a1️⃣ Open the Napito app.%0a2️⃣ Buy a gift card.%0a3️⃣ Share it from the app.%0a%0a" .
            "💖 Make someone’s day special!";
            
            $message = htmlspecialchars($message, ENT_QUOTES, 'UTF-8');
            $message = preg_replace('/\*([^\*]+)\*/', '<strong>$1</strong>', $message);
            $message = preg_replace('/_([^_]+)_/', '<em>$1</em>', $message);
            $message = preg_replace('/~([^~]+)~/', '<del>$1</del>', $message);
            $message = preg_replace('/`([^`]+)`/', '<code>$1</code>', $message);
            
            $message = str_replace('%0a', '<br>', $message);
        ?>
        <form method="post" name="send_message_form" id="send_message_form" enctype="multipart/form-data" action="<?=base_url();?>send_giftcard_message">        
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group custom_message_div">
                    <?=$message;?>
                </div>
            </div>  
            <input type="hidden" id="hidden_id" name="hidden_id" value="<?php echo $row->id; ?>">     
            <input type="hidden" id="hidden_message" name="hidden_message" value="<?php echo $message; ?>">     
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group">
                    <label for="customers">Select Customers<b class="require">*</b></label>
                    <select class="form-control choosen" id="customers" name="customers[]" multiple>
                    <?php 
                        if(!empty($customer)){
                        foreach($customer as $customer_result){
                            if($customer_result->gender == $row->gender){
                    ?>
                    <option value="<?=$customer_result->id;?>"><?=$customer_result->full_name.' ('.$customer_result->customer_phone.')';?></option>
                    <?php }}} ?>
                    </select>   
                    <label for="customers" generated="true" class="error" style="display:none;">Please select customer!</label>                          
                </div>
            </div>    
            <div class="row" style="display:none;">
                <div class="form-group col-md-6 col-xs-12" id="message_type_div">
                <label>Select Message Type<b class="require">*</b></label>
                <select class="form-control choosen" name="message_type" id="message_type">
                    <option value="">Select Option</option>
                    <option value="1" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '1'){ echo 'selected'; }?>>SMS</option>
                    <option value="2" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '2'){ echo 'selected'; }?>>Email</option>
                    <option value="3" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '3'){ echo 'selected'; }else{ echo 'selected'; }?>>Whatsapp</option>
                </select>
                <label for="message_type" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
            </div>
            </div>  
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group"> 
                    <button type="submit" id="submit_message_button" class="btn btn-primary" style="margin-top:25px;">Submit</button>
                </div>
            </div>
        </form>
        <script>
            $(".choosen").chosen({
                no_results_text: "Oops, nothing found!"
            });
            $('#send_message_form').validate({
                ignore: [],
                rules: {
                    'customers[]': {
                        required: true
                    },
                    message_type: {
                        required: true
                    }
                },
                messages: {
                    'customers[]': "Please select customer!",
                    message_type: "Please select message type!"
                },
                submitHandler: function(form) {
                    if (confirm("Are you sure you want to submit form?")) {
                        form.submit();
                    }
                }
            });
        </script>
        <?php
        }
    }
    public function add_new_customer_add_product(){
        $this->db->where('is_deleted','0');
        $this->db->where('customer_phone',$this->input->post('customer_phone'));
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $exist = $this->db->get('tbl_salon_customer')->result();
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'full_name' 		=> $this->input->post('full_name'),
            'customer_phone' 	=> $this->input->post('customer_phone'),
            'custom_note' 	    => $this->input->post('custom_note'),
            'email' 			=> $this->input->post('email'),
            'address' 			=> $this->input->post('address'),
            'dob' 				=> date('Y-m-d',strtotime($this->input->post('dob'))),
            'gender' 			=> $this->input->post('gender'),
            'state' 			=> $this->input->post('state'),
            'city' 				=> $this->input->post('city'),
            'doa' 				=> date('Y-m-d',strtotime($this->input->post('DOA'))),
        );
        if(empty($exist)){
            $date = array(
                'created_on'  => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_salon_customer', $new_arr);
            $last_id = $this->db->insert_id();

            if($this->input->post('added_from') == 'seperate'){
                return 0;
            }else{
                $this->session->set_flashdata('success', 'Success ! Customer added successfully');
                redirect('product-booking?customer=' . $last_id);
            }
        }else{
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_salon_customer', $data);
            return 1;
        }   
	} 
    public function add_payment(){
        $id = $this->input->post('customer');

        $this->db->where('id',$id);
        $single = $this->db->get('tbl_salon_customer')->row();

        if(!empty($single)){
            $data = array(
                'branch_id' 		        => $this->session->userdata('branch_id'),
                'salon_id' 			        => $this->session->userdata('salon_id'),
                'customer_id' 		        => $single->id,
                'type' 		                => '2',
                'opening_pending_amount' 	=> $this->input->post('pending'),
                'paid_amount' 		        => $this->input->post('now_paid'),
                'closing_pending_amount' 	=> $this->input->post('new_pending'),
                'total_bill_amount' 		=> $this->input->post('booking'),
                'total_paid_amount' 	    => $this->input->post('paid'),
                'remark' 	                => $this->input->post('remark'),
                'payment_date' 	            => date('Y-m-d',strtotime($this->input->post('payment_date'))),
                'transaction_id' 	        => $this->input->post('transaction_id'),
                'payment_mode' 	            => $this->input->post('payment_mode'),
            );
            if($this->input->post('id') == ""){
                $date = array(
                    'created_on'                => date("Y-m-d H:i:s"),
                );
                $newarr = array_merge($data, $date);
                $this->db->insert('tbl_booking_payment_entry',$newarr);

                $update_data = array(
                    'current_pending_amount'    =>  $this->input->post('new_pending'),
                    'total_paid_amount'         =>  (float)$this->input->post('paid') + (float)$this->input->post('now_paid'),
                );
                $this->db->where('id',$single->id);
                $this->db->update('tbl_salon_customer',$update_data);
            }else{
                $this->db->where('id',$this->input->post('id'));
                $this->db->update('tbl_booking_payment_entry',$data);

                $pre_total_paid = $single->total_paid_amount;
                $pre_pending = $single->current_pending_amount;

                $old_paid_amount = (float)$this->input->post('old_paid_amount');

                $temp_paid_amount = (float)$pre_total_paid - $old_paid_amount;
                $temp_pending_amount = (float)$pre_pending + $old_paid_amount;

                $new_paid_amount = (float)$temp_paid_amount + (float)$this->input->post('now_paid');
                $new_pending_amount = (float)$temp_pending_amount - (float)$this->input->post('now_paid');
                
                $update_data = array(
                    'current_pending_amount'    =>  $new_pending_amount,
                    'total_paid_amount'         =>  $new_paid_amount,
                );
                $this->db->where('id',$single->id);
                $this->db->update('tbl_salon_customer',$update_data);
            }
            return 1;
        }else{
            return 0;
        }
    }
    public function add_customer_payment($id){
        $this->db->where('id',$id);
        $single = $this->db->get('tbl_salon_customer')->row();

        if(!empty($single)){
            $data = array(
                'branch_id' 		=> $this->session->userdata('branch_id'),
                'salon_id' 			=> $this->session->userdata('salon_id'),
                'customer_id' 		=> $single->id,
                'type' 		                => '2',
                'opening_pending_amount' 	=> $single->current_pending_amount,
                'paid_amount' 		        => $this->input->post('paid_amount_' . $single->id),
                'closing_pending_amount' 	=> $this->input->post('new_pending_amount_' . $single->id),
                'total_bill_amount' 		=> $this->input->post('total_bill_amount_' . $single->id),
                'total_paid_amount' 	    => $this->input->post('total_paid_amount_' . $single->id),
                'remark' 	                => $this->input->post('remark_' . $single->id),
                'payment_date' 	=> date('Y-m-d',strtotime($this->input->post('payment_date_' . $single->id))),
                'payment_mode' 	=> $this->input->post('payment_mode_' . $single->id),
                'transaction_id' 	=> $this->input->post('transaction_id_' . $single->id),
				'created_on'        => date("Y-m-d H:i:s")
            );
            $this->db->insert('tbl_booking_payment_entry',$data);

            $update_data = array(
                'current_pending_amount'    =>  $this->input->post('new_pending_amount_' . $single->id),
                'total_paid_amount'         =>  (float)$single->total_paid_amount + (float)$this->input->post('paid_amount_' . $single->id),
            );
            $this->db->where('id',$single->id);
            $this->db->update('tbl_salon_customer',$update_data);
            return 1;
        }else{
            return 0;
        }
	} 
	public function get_last_customer_detail(){
		$this->db->where('is_deleted', '0');
        $this->db->where('is_guest', '0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('id', 'DESC');
		$this->db->limit(1);
		$query = $this->db->get('tbl_salon_customer');
		$result = $query->row();
		return $result;
	}
	public function get_single_booking_customer_detail(){
		$this->db->where('is_deleted', '0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$this->db->where('id', $this->uri->segment(2));
		$result = $this->db->get('tbl_salon_customer');
		return $result->row();
	} 
	public function add_single_booking(){
		$data = array(
			'branch_id' 		=> $this->session->userdata('branch_id'),
			'salon_id' 			=> $this->session->userdata('salon_id'),
			'services' 			=> $this->input->post('services'),
			'customer_name' 	=> $this->input->post('customer_name'),
			'time_slot' 		=> $this->input->post('time_slot'),
			'stylist' 			=> $this->input->post('stylist'),
			'booking_date' 		=> $this->input->post('booking_date'),
			'payble_price' 		=> $this->input->post('payble_price'),
			'amount_to_paid' 	=> $this->input->post('amount_to_paid'),
			'gst_amount' 		=> $this->input->post('gst_amount'),
		); 
		if($this->input->post('id') == ""){
			$date = array(
				'created_on'    => date("Y-m-d H:i:s")
			);
			$new_arr = array_merge($data, $date);
			$this->db->insert('tbl_new_booking', $new_arr);
			return 0;
		}else{
			$this->db->where('id', $this->input->post('id'));
			$this->db->update('tbl_new_booking', $data);
			return 1;
		}
	} 
	public function add_new_booking(){
		$services = $this->input->post('services');
		$time_slots = $this->input->post('time_slot');
		$stylists = $this->input->post('stylist');
		$booking_date = $this->input->post('booking_date');
		$services_array = explode(',', $services);
		$time_slots_array = explode(',', $time_slots);
		$stylists_array = explode(',', $stylists);
		$date_array = explode(',', $booking_date);
		$count = count($services_array);
		for($i = 0; $i < $count; $i++){
			$data = array(
				'branch_id' 			=> $this->session->userdata('branch_id'),
				'salon_id' 				=> $this->session->userdata('salon_id'),
				'customer_name' 		=> $this->input->post('customer_name'),
				'service_category' 		=> $this->input->post('service_category'),
				'services' 				=> $services_array[$i],
				'pacakge_id' 			=> $this->input->post('pacakge_id'),
				'products_id' 			=> $this->input->post('products_id'),
				'time_slot' 			=> $time_slots_array[$i],
				'stylist' 				=> $stylists_array[$i],
				'service_price' 		=> $this->input->post('service_price'),
				'product_price' 		=> $this->input->post('product_price'),
				'booking_date' 			=> $date_array[$i],
				'selected_shift' 		=> $this->input->post('selected_shift'),
				'reminder' 				=> $this->input->post('reminder'),
				'note' 					=> $this->input->post('note'),
				'gst_amount' 			=> $this->input->post('gst_amount'),
				'payble_price' 			=> $this->input->post('payble_price'),
				'amount_to_paid' 		=> $this->input->post('amount_to_paid'),
				'gift_discount' 		=> $this->input->post('gift_discount'),
				'offer_discount' 		=> $this->input->post('offer_discount'),
				'm_service_discount'	=> $this->input->post('m_service_discount'),
				'm_product_discount' 	=> $this->input->post('m_product_discount'),
			); 
			if($this->input->post('id') == ""){
				$date = array(
					'created_on' => date("Y-m-d H:i:s")
				);
				$new_arr = array_merge($data, $date);
				$this->db->insert('tbl_new_booking', $new_arr);
			}else{
				$this->db->where('id', $this->input->post('id'));
				$this->db->update('tbl_new_booking', $data);
			}
		} 
		return 0;
	} 
    public function get_active_package_allocation($id){
        $this->db->where('id',$id);
        $result = $this->db->get('tbl_customer_package_allocations')->row();
        return $result;
    }
    public function get_active_package_allocation_item_status($allocation_id,$item_id,$item_type){
        $this->db->where('allocation_id',$allocation_id);
        $this->db->where('item_id',$item_id);
        $this->db->where('item_type',$item_type);
        $this->db->where('is_deleted','0');
        $result = $this->db->get('tbl_booking_package_detail_status')->row();
        return $result;
    }
    public function get_saloon_branch_total_orders($saloon,$branch){
        $this->db->where('branch_id',$branch);
        $this->db->where('salon_id',$saloon);
        $this->db->where('is_deleted','0');
        $this->db->where('booking_type','0');
        $result = $this->db->get('tbl_new_booking')->num_rows();
        return $result;
    }

    public function get_booking_only_products($id,$booking_id){        
        $this->db->select('tbl_only_product_booking_details.*,tbl_new_booking.amount_to_paid, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_product.product_name,tbl_product_sub_category.product_sub_category as product_sub_category_name,tbl_product_category.product_category as product_category_name,tbl_product_category.product_category_marathi,tbl_product.current_stock');
        $this->db->join('tbl_product','tbl_product.id = tbl_only_product_booking_details.product_id');
        $this->db->join('tbl_product_category','tbl_product_category.id = tbl_product.product_category');
        $this->db->join('tbl_product_sub_category','tbl_product_sub_category.id = tbl_product.product_subcategory');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_only_product_booking_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
        $this->db->where('tbl_only_product_booking_details.booking_id',$booking_id);
        $this->db->where('tbl_only_product_booking_details.booking_payment_id',$id);
        $this->db->where('tbl_only_product_booking_details.is_deleted','0');
        $booking_products = $this->db->get('tbl_only_product_booking_details')->result();
        return $booking_products;
    }
    
	public function generate_bill($booking_id){
        // echo '<pre>'; print_r($_POST); exit();
        $customer_id = $this->input->post('customer_id_' . $booking_id);
        $selected_product_stylist_id = $this->input->post('selected_product_stylist_hidden_' . $booking_id);

        $this->db->where('id',$booking_id);
        $this->db->where('booking_type','0');
        $single = $this->db->get('tbl_new_booking')->row();

        if(!empty($single)){
            $this->db->where('id',$customer_id);
            $customer = $this->db->get('tbl_salon_customer')->row();

            if(!empty($customer)){
                $hidden_selected_products = $this->input->post('hidden_selected_products_' . $booking_id);
                $product_values = $hidden_selected_products != "" ? explode(',',$hidden_selected_products) : [];

                $payment_mode = $this->input->post('payment_mode_' . $booking_id);
                $transaction_id = $this->input->post('transaction_id_' . $booking_id);
                $payment_date = $this->input->post('payment_date_' . $booking_id);
                $paid_amount = $this->input->post('paid_amount_' . $booking_id);
                $customer_pending_amount = $this->input->post('pending_amount_' . $booking_id);

                $adjust_amount = $this->input->post('adjust_amount_' . $booking_id);
                $adjust_amount_remark = $this->input->post('adjust_amount_remark_' . $booking_id);
                $amount_round_type = $this->input->post('amount_round_type_' . $booking_id);
                $rounded_bill_amount = $this->input->post('rounded_bill_amount_' . $booking_id);
                $total_due_amount = $this->input->post('total_due_amount_' . $booking_id);

                $is_member = $this->input->post('is_membership_booking_' . $booking_id);
                $membership_id = $this->input->post('membership_id_' . $booking_id);

                $customer_reward_available = $this->input->post('customer_reward_available_' . $booking_id);
                $used_rewards = $this->input->post('used_rewards_' . $booking_id);
                $reward_discount_hidden = $this->input->post('reward_discount_amount_' . $booking_id);

                $giftcard_discount = $this->input->post('gift_discount_' . $booking_id);
                $extra_discount_amount = $this->input->post('discount_in_rs');
                $extra_discount_in_per = $this->input->post('discount_in_per');
                $is_giftcard_applied = $this->input->post('is_giftcard_applied_' . $booking_id);
                $applied_giftcard_id = $this->input->post('applied_giftcard_id_' . $booking_id);
                $applied_giftcard_owner_id = $this->input->post('applied_giftcard_owner_id_' . $booking_id);
                $giftcard_redemption_id = $this->input->post('giftcard_redemption_id_' . $booking_id);
                $is_new_giftcard_applied = $this->input->post('is_new_giftcard_applied_' . $booking_id);
                
                $applied_offer_id = $this->input->post('offer_applied_to_booking_' . $booking_id);
                $is_offer_applied = $this->input->post('is_offer_applied_to_booking_' . $booking_id);
                $offer_discount_amount = $this->input->post('offer_discount_amount_' . $booking_id);

                $send_appointment_details = $this->input->post('send_appointment_details_' . $booking_id);
                $message_type = $this->input->post('message_type_' . $booking_id);

                $product_details_ids = array();
                $services = array();
                $products = array();
                $services_details_ids = $this->input->post('service_checkbox_' . $booking_id);
                if($services_details_ids != "" && is_array($services_details_ids) && !empty($services_details_ids)){
                    for($i=0;$i<count($services_details_ids);$i++){
                        $single_array = $this->input->post('service_products_checkbox_' . $services_details_ids[$i]);
                        $services[] = $this->input->post('single_service_id_' . $services_details_ids[$i]);
                        if ($single_array != "" && $single_array != null && is_array($single_array) && !empty($single_array)) {
                            $product_details_ids = array_merge($product_details_ids,$single_array);
                            for($j=0;$j<count($single_array);$j++){
                                $products[] = $this->input->post('single_service_product_id_' . $services_details_ids[$i] . '_' . $single_array[$j]);
                            }
                        }
                    }
                }

                // echo '<pre>'; print_r($services_details_ids); exit();
                $all_payment_mode = $this->input->post('payment_mode_' . $booking_id);
                $all_transaction_id = $this->input->post('transaction_id_' . $booking_id);
                $all_mode_amount = $this->input->post('mode_amount_' . $booking_id);

                $payment_mode_multiple = !empty($all_payment_mode) ? implode(',',$all_payment_mode) : null;
                $payment_transaction_id_multiple = !empty($all_transaction_id) ? implode(',',$all_transaction_id) : null;
                $payment_amount_multiple = !empty($all_mode_amount) ? implode(',',$all_mode_amount) : null;
                
                $payment_mode = !empty($all_payment_mode) && count($all_payment_mode) == 1 ? $all_payment_mode[0] : null;
                $transaction_id = !empty($all_transaction_id) && count($all_transaction_id) == 1 ? $all_transaction_id[0] : null;

                $selected_coupon_id = $this->input->post('selected_coupon_id_' . $booking_id);

                $total_service_amount = $this->input->post('total_service_amount_' . $booking_id);
                $total_product_amount = $this->input->post('total_product_amount_' . $booking_id);
                $service_payable_amount = $this->input->post('service_payable_hidden_' . $booking_id);
                $product_payable_amount = $this->input->post('product_payable_hidden_' . $booking_id);

                $selected_package = $this->input->post('package_id_' . $booking_id);                
                $package_amount = $this->input->post('package_amount_' . $booking_id);
                $is_package_included = $this->input->post('is_package_included_' . $booking_id);
                $used_package_type = $this->input->post('used_package_type_' . $booking_id);
                $package_rewards = $this->input->post('package_rewards_' . $booking_id);
                $package_allocation_id = $this->input->post('package_allocation_id_' . $booking_id);

                $payable_amount = $this->input->post('payable_hidden_' . $booking_id);
                $marketing_service_discount_amount = $this->input->post('marketing_service_discount_amount_hidden_' . $booking_id);
                $marketing_product_discount_amount = $this->input->post('marketing_product_discount_amount_hidden_' . $booking_id);
                $coupon_discount_amount = $this->input->post('coupon_discount_amount_' . $booking_id);
                $total_discount_hidden = $this->input->post('total_discount_hidden_' . $booking_id);
                $booking_amount = $this->input->post('booking_amount_hidden_' . $booking_id);
                $gst_amount = $this->input->post('gst_amount_hidden_' . $booking_id);
                $grand_total_amount = $this->input->post('grand_total_hidden_' . $booking_id);
                
                $is_gst_applicable = $this->input->post('is_gst_applicable_' . $booking_id) == '1' ? $this->input->post('is_gst_applicable_' . $booking_id) : '0';
                $salon_gst_no = $this->input->post('salon_gst_no_' . $booking_id);
                $salon_gst_rate = $this->input->post('salon_gst_rate_' . $booking_id);

                $membership_payment_status = $this->input->post('membership_payment_status_' . $booking_id);                
                $membership_payment_amount = $this->input->post('membership_payment_amount_' . $booking_id);
                $is_membership_payment_included = $this->input->post('is_membership_payment_included_' . $booking_id);
                $membership_history_id = $this->input->post('membership_history_id_' . $booking_id);

                $membership_discount_type = $this->input->post('membership_discount_type_' . $booking_id);
                $membership_service_discount_amount = $this->input->post('m_service_discount_amount_' . $booking_id);
                $membership_product_discount_amount = $this->input->post('m_product_discount_amount_' . $booking_id);
                $membership_service_discount = $this->input->post('m_service_discount_' . $booking_id);
                $membership_product_discount = $this->input->post('m_product_discount_' . $booking_id);

                $booking_data = array(
                    'is_products_added'     => !empty($product_values) ? '1' : '0',
                    'branch_id' 			=> $this->session->userdata('branch_id'),
                    'salon_id' 				=> $this->session->userdata('salon_id'),
                    'booking_id' 		    => $booking_id,
                    'booking_date'          => date('Y-m-d',strtotime($single->booking_date)),
                    'customer_name' 		=> $customer_id,
                    'is_membership_booking' => $is_member,
                    'membership_id' 		=> $membership_id,
                    
                    'is_membership_payment_included'    => $is_member == '1' ? $is_membership_payment_included : '0',
                    'membership_payment_amount' 	    => $is_member == '1' ? $membership_payment_amount : '0.00',
                    'membership_history_id' 	        => $is_member == '1' ? $membership_history_id : '',

                    'membership_discount_type'	=> $membership_discount_type,
                    'm_service_discount'	=> $membership_service_discount,
                    'm_product_discount' 	=> $membership_product_discount,
                    'm_service_discount_amount'	    => $membership_service_discount_amount,
                    'm_product_discount_amount' 	=> $membership_product_discount_amount,
                    'services' 		        => !empty($services) ? implode(',',$services) : '',
                    'products' 		        => !empty($products) ? implode(',',$products) : '',
                    'selected_coupon_id' 	=> $selected_coupon_id,

                    'pacakge_id' 			=> $is_package_included == '1' ? $selected_package : null,
                    'package_amount' 		=> $is_package_included == '1' ? $package_amount : '0.00',
                    'used_package_type'     => $is_package_included == '1' && $used_package_type == '1' ? $used_package_type : null,
                    'package_rewards' 		=> $is_package_included == '1' ? $package_rewards : null,
                    'package_allocation_id' => $is_package_included == '1' ? $package_allocation_id : null,
                    'is_package_included' 	=> $is_package_included == '1' ? $is_package_included : '0',

                    'total_service_price'   => $total_service_amount,
                    'total_product_price'   => $total_product_amount,
                    'service_price'         => $service_payable_amount,
                    'product_price'         => $product_payable_amount,
                    'payble_price'          => $payable_amount,
                    'coupon_discount_amount'=> $coupon_discount_amount,
                    
                    'marketing_service_discount_amount'=> $marketing_service_discount_amount,
                    'marketing_product_discount_amount'=> $marketing_product_discount_amount,
                    
                    'reward_discount_amount'=> $reward_discount_hidden,
                    'extra_discount_amount' => $extra_discount_amount,
                    'extra_discount_in_per' => $extra_discount_in_per,
                    'total_discount_amount' => $total_discount_hidden,
                    'used_rewards'          => $used_rewards,
                    'booking_amount'        => $booking_amount,
                    'gst_amount'            => $gst_amount,
                    
                    'is_gst_applicable'     => $is_gst_applicable,
                    'salon_gst_no'          => $salon_gst_no,
                    'salon_gst_rate'        => $salon_gst_rate,

                    'amount_to_paid'        => $grand_total_amount,
                    'adjust_amount'         => $adjust_amount,
                    'adjust_amount_remark'  => $adjust_amount_remark,
                    'amount_round_type'     => $amount_round_type,
                    'rounded_bill_amount'   => $rounded_bill_amount,
                    'total_due_while_bill'  => $total_due_amount,
                    'actual_paid_amount'    => $paid_amount,
                    'customer_pending_amount'=> $customer_pending_amount,

                    'is_giftcard_applied' 	=> $is_giftcard_applied,
                    'applied_giftcard_id'   => ($is_giftcard_applied == '1') ? $applied_giftcard_id : '',
                    'applied_giftcard_owner_id'   => ($is_giftcard_applied == '1') ? $applied_giftcard_owner_id : '',
                    'gift_discount'         => ($is_giftcard_applied == '1') ? $giftcard_discount : '',
                    'is_new_giftcard_applied'   => ($is_giftcard_applied == '1') ? $is_new_giftcard_applied : '',
                    'giftcard_redemption_id'    => ($is_giftcard_applied == '1') ? $giftcard_redemption_id : '',
                    'payment_date'          => date('Y-m-d',strtotime($payment_date)),
                    'payment_mode'          => $payment_mode,
                    'transaction_id'        => $transaction_id,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
                    
                    'is_offer_applied' 	    => $is_offer_applied,
                    'applied_offer_id'      => ($is_offer_applied == '1') ? $applied_offer_id : '',
                    'offer_discount_amount' => ($is_offer_applied == '1') ? $offer_discount_amount : '',

                    'send_appointment_details'          => $send_appointment_details,
                    'message_type'                      => $message_type,

                    'payment_status'        => '1',
                    'created_on'            => date("Y-m-d H:i:s"),
                );
                // echo '<pre>'; print_r($booking_data); exit();
                $this->db->insert('tbl_service_payment', $booking_data);
                $booking_payment_id = $this->db->insert_id();

                $receipt_data = array(
                    'receipt_no'   => $single->receipt_no.'-'.$booking_payment_id,
                );
                $this->db->where('id',$booking_payment_id);
                $this->db->update('tbl_service_payment',$receipt_data);

                if($is_giftcard_applied == '1'){
                    $redemption_history = array(
                        'used_customer_id'  =>  $customer_id,
                        'booking_id'        =>  $booking_id,
                        'redeemed_amount'   =>  $giftcard_discount,
                        'redeemed_on'       =>  date('d-m-Y H:i:s')
                    );
                    if($is_new_giftcard_applied == '1'){
                        $this->db->where('branch_id',$this->session->userdata('branch_id'));
                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                        $this->db->where('id',$applied_giftcard_id);
                        $this->db->where('is_deleted','0');
                        $single_giftcard = $this->db->get('tbl_gift_card')->row();
                        if(!empty($single_giftcard)){
                            $gift_card_balance = $single_giftcard->gift_price - $giftcard_discount;
                            if($gift_card_balance > 0){
                                $gift_card_status = '0';
                            }elseif($gift_card_balance == 0){
                                $gift_card_status = '1';
                                $gift_card_balance = '0';
                            }else{
                                $gift_card_status = '1';
                                $gift_card_balance = '0';
                            }
                            $giftcard_gst_amount = ((float)$single_giftcard->regular_price * (float)$gst_rate) / 100;
                            
                            $giftcard_data = array(
                                'branch_id' 			=> $this->session->userdata('branch_id'),
                                'salon_id' 				=> $this->session->userdata('salon_id'),
                                'booking_id' 		    => $booking_id,
                                'payment_from'          => '0', 
                                'type'                  => '3',
                                'customer_id' 		    => $customer_id,
                                
                                'giftcard_id' 	        => $single_giftcard->id,
                                'gift_card_name' 	    => $single_giftcard->gift_name,
                                'gift_card_code' 	        => $single_giftcard->gift_card_code,
                                'giftcard_min_amount' 	    => $single_giftcard->min_booking_amt,
                                'gift_card_regular_price' 	=> $single_giftcard->regular_price,
                                'gift_card_price' 	        => $single_giftcard->gift_price,
                                'gift_card_balance' 	    => $gift_card_balance,
                                'gift_card_status' 	        => $gift_card_status,
                                'redemption_history'        => !empty($redemption_history) ? json_encode($redemption_history) : '',
                                'created_on'                => date("Y-m-d H:i:s"),
                                
                                'paid_amount' 	            => $single_giftcard->regular_price + $giftcard_gst_amount,
                                
                                'is_gst_applicable'         => $is_gst_applicable == '1' ? $is_gst_applicable : '0', 
                                'salon_gst_no' 	            => $gst_no, 
                                'salon_gst_rate' 	        => $gst_rate, 
                                'gst_amount' 	            => $giftcard_gst_amount, 

                                'payment_date'              => date('Y-m-d',strtotime($payment_date)),
                                'payment_mode' 	            => $payment_mode,
                                
                    
                                'payment_mode_multiple'             => $payment_mode_multiple,
                                'payment_amount_multiple'           => $payment_amount_multiple,
                                'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
                            );
                            $this->db->insert('tbl_booking_payment_entry', $giftcard_data);
                            $giftcard_payment_id = $this->db->insert_id();

                            $giftcard_customer_uid = $single_giftcard->gift_card_code . '' . $giftcard_payment_id . '' . date("YmdHis"); 
                            $this->db->where('id',$giftcard_payment_id);
                            $this->db->update('tbl_booking_payment_entry',array('giftcard_customer_uid'=>$giftcard_customer_uid));
                        }
                    }else{
                        $this->db->where('branch_id',$this->session->userdata('branch_id'));
                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                        $this->db->where('customer_id',$applied_giftcard_owner_id);
                        $this->db->where('type','3');
                        $this->db->where('is_deleted','0');
                        $this->db->where('id',$giftcard_redemption_id);
                        $single_giftcard_redemption = $this->db->get('tbl_booking_payment_entry')->row();
                        if(!empty($single_giftcard_redemption)){
                            $current_redemption_history = json_decode($single_giftcard_redemption->redemption_history);
                            $current_redemption_history[] = $redemption_history;

                            $gift_card_balance = $single_giftcard_redemption->gift_card_balance - $giftcard_discount;
                            if($gift_card_balance > 0){
                                $gift_card_status = '0';
                            }elseif($gift_card_balance == 0){
                                $gift_card_status = '1';
                                $gift_card_balance = '0';
                            }else{
                                $gift_card_status = '1';
                                $gift_card_balance = '0';
                            }

                            $gift_card_status = '1';    // lapse it once used
                            
                            $giftcard_data = array(
                                'gift_card_balance' 	    => $gift_card_balance,
                                'gift_card_status' 	        => $gift_card_status,
                                'redemption_history'        => !empty($current_redemption_history) ? json_encode($current_redemption_history) : ''
                            );
                            $this->db->where('id',$single_giftcard_redemption->id);
                            $this->db->update('tbl_booking_payment_entry', $giftcard_data);
                        }
                    }
                }

                if($used_rewards > 0){
                    $this->db->where('id',$customer_id);
                    $customer_rewards = $this->db->get('tbl_salon_customer')->row();
                    if(!empty($customer_rewards)){
                        $pre_balance = $customer_rewards->rewards_balance;
                        $rewards = $used_rewards;
                        $new_balance = $pre_balance - $rewards;

                        $reward_data = array(
                            'customer_id'                   =>  $customer_id,
                            'branch_id'                     =>  $this->session->userdata('branch_id'),
                            'salon_id'                      =>  $this->session->userdata('salon_id'),
                            'booking_id'                    =>  $booking_id,
                            'transaction_type'              =>  '3',
                            'remark'                        =>  'Reward points used for booking payment',
                            'previous_reward_balance'       =>  $customer_rewards->rewards_balance,
                            'reward_value'                  =>  $rewards,
                            'new_reward_balance'            =>  $new_balance,
                            'created_on'                    =>  date("Y-m-d H:i:s")
                        );
                        $this->db->insert('tbl_customer_rewards_history',$reward_data);

                        $this->db->where('id',$customer_id);
                        $this->db->update('tbl_salon_customer',array('rewards_balance'=>$new_balance));
                    }
                }

                if($services_details_ids != "" && is_array($services_details_ids) && !empty($services_details_ids)){
                    $offer_services = [];
                    if($is_offer_applied == '1'){
                        $this->db->where('id',$applied_offer_id);
                        $this->db->where('is_deleted','0');
                        $single_offer = $this->db->get('tbl_offers')->row();
                        if(!empty($single_offer)){
                            $offer_services = explode(',',$single_offer->service_name);                        
                        }
                    }
                    for($i=0;$i<count($services_details_ids);$i++){
                        $this->db->where('id',$services_details_ids[$i]);
                        $single_service_details = $this->db->get('tbl_booking_services_details')->row();
                        if(!empty($single_service_details)){
                            $old_stylist = $this->input->post('old_stylist_' . $services_details_ids[$i]);
                            $new_stylist = $this->input->post('new_stylist_' . $services_details_ids[$i]);

                            $product_details_ids = array();
                            $single_service_products = array();
                            $products_single = $this->input->post('service_products_checkbox_' . $services_details_ids[$i]);
                            if ($products_single != "" && $products_single != null && is_array($products_single) && !empty($products_single)) {
                                $product_details_ids = array_merge($product_details_ids,$products_single);
                                for($j=0;$j<count($products_single);$j++){
                                    $single_service_products[] = $this->input->post('single_service_product_id_' . $services_details_ids[$i] . '_' . $products_single[$j]);
                                }
                            }

                            $service_price = $single_service_details->service_price;
                            $service_id = $single_service_details->service_id;
                            
                            $received_total_service = $total_service_amount;
                            if($received_total_service != "" && $received_total_service != "0.00" && $received_total_service != null && $received_total_service != 0){
                                $price_share_in_total_service = (float)(($service_price/$received_total_service) * 100);
                                $discount_share_membership_amount = (float)(($membership_service_discount_amount * $price_share_in_total_service) / 100);
                            }else{
                                $discount_share_membership_amount = 0;
                            }

                            $received_total = $total_product_amount + $total_service_amount;
                            if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                                $price_share_in_total = (float)(($service_price/$received_total) * 100);
                                $discount_share_coupon_amount = (float)(($coupon_discount_amount * $price_share_in_total) / 100);
                                $discount_share_reward_amount = (float)(($reward_discount_hidden * $price_share_in_total) / 100);
                                $discount_share_extra_amount = (float)(($extra_discount_amount * $price_share_in_total) / 100);
                            }else{
                                $discount_share_coupon_amount = 0;
                                $discount_share_reward_amount = 0;
                                $discount_share_extra_amount = 0;
                            }

                            $discount_share_giftcard_amount = 0 ;
                            $received_total = $total_product_amount + $total_service_amount;
                            if($is_giftcard_applied == '1'){
                                if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                                    $price_share_in_total_giftcard_service_amount = (float)(($service_price/$received_total) * 100);
                                    $discount_share_giftcard_amount = (float)(($giftcard_discount * $price_share_in_total_giftcard_service_amount) / 100);
                                }else{
                                    $discount_share_giftcard_amount = 0;
                                }
                            }

                            $discount_share_offer_amount = 0;
                            $calculated_discount_share_offer_amount = 0;
                            if($is_offer_applied == '1'){
                                if(in_array($service_id,$offer_services)){
                                    $received_total_service = $total_service_amount;
                                    if($received_total_service != "" && $received_total_service != "0.00" && $received_total_service != null && $received_total_service != 0){
                                        $price_share_in_total_service = (float)(($service_price/$received_total_service) * 100);
                                        $calculated_discount_share_offer_amount = (float)(($offer_discount_amount * $price_share_in_total_service) / 100);
                                    }else{
                                        $calculated_discount_share_offer_amount = 0;
                                    }
                                }
                            }

                            $is_service_offer_applied = $this->input->post('is_service_offer_applied_' . $services_details_ids[$i]);
                            $applied_offer_id = $this->input->post('applied_offer_id_' . $services_details_ids[$i]);
                            $service_offer_discount_type = $this->input->post('service_offer_discount_type_' . $services_details_ids[$i]);
                            $service_offer_discount = $this->input->post('service_offer_discount_' . $services_details_ids[$i]);
                            $discount_share_offer_amount = $this->input->post('service_offer_discount_amount_' . $services_details_ids[$i]);
                            $discount_share_offer_amount = $discount_share_offer_amount != "" ? $discount_share_offer_amount : $calculated_discount_share_offer_amount;

                            $total_single_service_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_offer_amount + $discount_share_reward_amount + $discount_share_giftcard_amount + $discount_share_extra_amount;
                            $single_service_discounted_amount = $service_price - $total_single_service_discount;

                            $payment_data = array(
                                'payment_date'          => date('Y-m-d',strtotime($payment_date)),
                                'payment_mode'          => $payment_mode,
                    
                                'payment_mode_multiple'             => $payment_mode_multiple,
                                'payment_amount_multiple'           => $payment_amount_multiple,
                                'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                                'payment_status'        => '1',
                                'booking_payment_id'    => $booking_payment_id,    
                                'stylist_id_after_bill' => $new_stylist,    
                                'product_ids_after_bill'=> !empty($single_service_products) ? implode(',',$single_service_products) : '',                        
                    
                                'received_discount_amount_while_bill'     	=> $total_single_service_discount,
                                'received_coupon_discount_while_bill'     	=> $discount_share_coupon_amount,
                                'received_reward_discount_while_bill'     	=> $discount_share_reward_amount,
                                'received_extra_discount_while_bill'     	=> $discount_share_reward_amount,
                                'received_membership_discount_while_bill'   => $discount_share_membership_amount,
                                'received_giftcard_discount_while_bill'     => $discount_share_giftcard_amount,
                                'service_discounted_price_while_bill'     	=> $single_service_discounted_amount,

                                'is_service_offer_applied'                  => $is_service_offer_applied,
                                'applied_offer_id'                          => $applied_offer_id,
                                'service_offer_discount'                    => $service_offer_discount,
                                'service_offer_discount_type'               => $service_offer_discount_type,
                                'service_offer_discount_amount_while_bill'  => $discount_share_offer_amount,
                            );
                            $this->db->where('id',$services_details_ids[$i]);
                            $this->db->update('tbl_booking_services_details', $payment_data);
                            $booking_service_details_id = $services_details_ids[$i];
                            
                            if($single_service_details->service_added_from == '0' && $single_service_details->service_reward_points != "" && $single_service_details->service_reward_points != null && $single_service_details->service_reward_points != '0'){
                                $this->db->where('id',$customer_id);
                                $customer_rewards = $this->db->get('tbl_salon_customer')->row();
                                if(!empty($customer_rewards)){
                                    $pre_balance = $customer_rewards->rewards_balance;
                                    $rewards = $single_service_details->service_reward_points;
                                    $new_balance = $pre_balance + $rewards;

                                    $reward_data = array(
                                        'customer_id'                   =>  $customer_id,
                                        'branch_id'                     =>  $this->session->userdata('branch_id'),
                                        'salon_id'                      =>  $this->session->userdata('salon_id'),
                                        'booking_id'                    =>  $booking_id,
                                        'rewards_for'                   =>  '0',
                                        'for_service'                   =>  $single_service_details->service_id,
                                        'booking_service_details_id'    =>  $booking_service_details_id,
                                        'transaction_type'              =>  '0',
                                        'remark'                        =>  'Reward points credited for service payment',
                                        'previous_reward_balance'       =>  $pre_balance,
                                        'reward_value'                  =>  $rewards,
                                        'new_reward_balance'            =>  $new_balance,
                                        'created_on'                    =>  date("Y-m-d H:i:s")
                                    );
                                    $this->db->insert('tbl_customer_rewards_history',$reward_data);

                                    $this->db->where('id',$customer_id);
                                    $this->db->update('tbl_salon_customer',array('rewards_balance'=>$new_balance));
                                }
                            }

                            if($products_single != "" && is_array($products_single) && !empty($products_single)){
                                for($j=0;$j<count($products_single);$j++){
                                    $this->db->where('booking_service_details_id',$booking_service_details_id);
                                    $this->db->where('id',$products_single[$j]);
                                    $single_product_details = $this->db->get('tbl_booking_services_products_details')->row();
                                    if(!empty($single_product_details)){
                                        $product_price = $single_product_details->product_price;
                                        $used_barcode = $this->input->post('used_product_barcodes_' . $booking_service_details_id . '_' . $products_single[$j]);

                                        $received_total_product = $total_product_amount;
                                        if($received_total_product != "" && $received_total_product != "0.00" && $received_total_product != null && $received_total_product != 0){
                                            $price_share_in_total_product = (float)(($product_price/$received_total_product) * 100);
                                            $discount_share_membership_amount = (float)(($membership_product_discount_amount * $price_share_in_total_product) / 100);
                                        }else{
                                            $discount_share_membership_amount = 0;
                                        }

                                        $received_total = $total_product_amount + $total_service_amount;
                                        if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                                            $price_share_in_total = (float)(($product_price/$received_total) * 100);
                                            $discount_share_coupon_amount = (float)(($coupon_discount_amount * $price_share_in_total) / 100);
                                            $discount_share_reward_amount = (float)(($reward_discount_hidden * $price_share_in_total) / 100);
                                            $discount_share_extra_amount = (float)(($extra_discount_amount * $price_share_in_total) / 100);
                                        }else{
                                            $discount_share_coupon_amount = 0;
                                            $discount_share_reward_amount = 0;
                                            $discount_share_extra_amount = 0;
                                        }
                                        
                                        $discount_share_giftcard_amount = 0 ;
                                        $received_total = $total_product_amount + $total_service_amount;
                                        if($is_giftcard_applied == '1'){
                                            if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                                                $price_share_in_total_giftcard_service_amount = (float)(($product_price/$received_total) * 100);
                                                $discount_share_giftcard_amount = (float)(($giftcard_discount * $price_share_in_total_giftcard_service_amount) / 100);
                                            }else{
                                                $discount_share_giftcard_amount = 0;
                                            }
                                        }

                                        $total_single_product_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_reward_amount + $discount_share_giftcard_amount + $discount_share_extra_amount;
                                        $single_product_discounted_amount = $product_price - $total_single_product_discount;
    
                                        $service_product_data = array(
                                            'payment_date'          => date('Y-m-d',strtotime($payment_date)),
                                            'payment_mode'          => $payment_mode,
                    
                                            'payment_mode_multiple'             => $payment_mode_multiple,
                                            'payment_amount_multiple'           => $payment_amount_multiple,
                                            'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                                            'payment_status'        => '1',
                                            'booking_payment_id'    => $booking_payment_id,
                                            'used_barcode_id'       => $used_barcode,
                    
                                            'received_discount_amount_while_bill'     	=> $total_single_product_discount,
                                            'received_coupon_discount_while_bill'     	=> $discount_share_coupon_amount,
                                            'received_reward_discount_while_bill'     	=> $discount_share_reward_amount,
                                            'received_extra_discount_while_bill'     	=> $discount_share_extra_amount,
                                            'received_membership_discount_while_bill'   => $discount_share_membership_amount,
                                            'product_discounted_price_while_bill'     	=> $single_product_discounted_amount,
                                            'received_giftcard_discount_while_bill'     => $discount_share_giftcard_amount,
                                        );
                                        $this->db->where('booking_service_details_id',$booking_service_details_id);
                                        $this->db->where('id',$products_single[$j]);
                                        $this->db->update('tbl_booking_services_products_details', $service_product_data);
                                        
                                        $product_single_details = $this->get_product_details($single_product_details->product_id);
                                        if(!empty($product_single_details)){         
                                            $opening = $product_single_details->current_stock;                              
                                            $quantity = 1;                             
                                            $closing = $opening - $quantity;                         
                                            $outward_data = array(
                                                'branch_id'         => $this->session->userdata('branch_id'),
                                                'salon_id'          => $this->session->userdata('salon_id'),
                                                'booking_id'        => $booking_id,
                                                'booking_type'      => '0',
                                                'booking_service_details_id'=> $booking_service_details_id,
                                                'booking_product_details_id'=> $products_single[$j],
                                                'booking_service_id'        => $service_id,
                                                'booking_product_id'        => $single_product_details->product_id,
                                                'opening_stock'     => $opening,
                                                'closing_stock'     => $closing,
                                                'quantity'          => $quantity,
                                                'purchase_price'    => $single_product_discounted_amount,
                                                'entry_by'          => $this->session->userdata('branch_id'),
                                                'created_on'        => date("Y-m-d H:i:s")
                                            );
                                            $this->db->insert('tbl_product_outward_while_booking_details', $outward_data);
                                            $stock_outward_id = $this->db->insert_id();

                                            $this->db->where('id', $product_single_details->id);
                                            $this->db->where('branch_id', $this->session->userdata('branch_id'));
                                            $this->db->where('salon_id', $this->session->userdata('salon_id'));
                                            $this->db->update('tbl_product', array('current_stock'=>(int)$closing));

                                            if($used_barcode != ""){
                                                $barcode_entry = array(
                                                    'used_on'           => date('Y-m-d H:i:s'),
                                                    // 'used_on'           => date('Y-m-d H:i:s',strtotime($single_service_details->service_from)),
                                                    'used_in_booking_id'=> $booking_id,
                                                    'product_status'    => '1',
                                                    'booking_type'      => '0',
                                                    'stock_outward_while_booking_id'      => $stock_outward_id,
                                                );
                                                $this->db->where('id', $used_barcode);
                                                $this->db->where('product_name', $single_product_details->product_id);
                                                $this->db->update('tbl_product_barcode', $barcode_entry);      
                                            }                                            
                                        }
                                    }
                                }
                            }
                            
                            // remove excluded products from booking
                            $old_single_service_product_details = array();
                            $this->db->where('booking_service_details_id',$single_service_details->id);
                            $this->db->where('is_deleted','0');
                            $all_single_service_product_details = $this->db->get('tbl_booking_services_products_details')->result();
                            if(!empty($all_single_service_product_details)){
                                foreach($all_single_service_product_details as $all_single_service_product_details_result){
                                    $old_single_service_product_details[] = $all_single_service_product_details_result->id;
                                }
                            }
                            if($products_single != "" && is_array($products_single) && !empty($products_single)){
                                $excluded_product_details = array_values(array_diff($old_single_service_product_details,$products_single));
                            }else{
                                $excluded_product_details = array_values(array_diff($old_single_service_product_details,array()));
                            }
                            if(!empty($excluded_product_details)){
                                $excluded_data = array(
                                    'payment_status'        => '2',
                                );
                                $this->db->where('booking_service_details_id',$single_service_details->id);
                                $this->db->where_in('id',$excluded_product_details);
                                $this->db->update('tbl_booking_services_products_details', $excluded_data);
                            }
                        }
                    }
                }

                //new product added billing start        
                $incentive_amount = 0;        
                if($product_values != "" && is_array($product_values) && !empty($product_values)){
                    for($i=0;$i<count($product_values);$i++){
                        $this->db->where('id',$product_values[$i]);
                        $single_product = $this->db->get('tbl_product')->row();
                        if(!empty($single_product)){
                            $categoryID = $single_product->product_category;
                            $productID = $single_product->id;

                            $used_barcodes = $this->input->post('used_product_barcodes_' . $productID);
                            $employee_product_incentive = $this->input->post('employee_product_incentive_' . $productID);
                            $product_price = $this->input->post('single_product_price_' . $productID);
                            $product_original_price = $this->input->post('product_original_price_' . $productID); 
                            $is_discount_applied = $this->input->post('is_discount_applied_' . $productID); 
                            $product_quantity = $this->input->post('product_quantity_' . $productID); 
                            $total_single_product_price = $this->input->post('single_product_total_hidden_' . $productID); 
                            $total_single_product_price = $product_quantity * $product_price;
                                
                            ////product discount related start

                            $is_product_discount_applied = $this->input->post('is_product_discount_applied_' . $productID);
                            $product_discount_row_id = $this->input->post('product_discount_row_id_' . $productID);
                            $product_discount_in = $this->input->post('product_discount_in_' . $productID);
                            $product_discount_type = $this->input->post('product_discount_type_' . $productID);
                            $product_discount_value = $this->input->post('product_discount_value_' . $productID);

                            //discount
                            $product_discount_slab_min = $this->input->post('product_discount_slab_min_' . $productID); 
                            $product_discount_slab_max = $this->input->post('product_discount_slab_max_' . $productID);
                            $product_slab_increment = $this->input->post('product_slab_increment_' . $productID);
                            $product_applied_flexible_slab = $this->input->post('product_applied_flexible_slab_' . $productID);
                            $product_received_discount = $this->input->post('product_received_discount_' . $productID);

                            $received_total_service = $total_product_amount;
                            if($received_total_service != "" && $received_total_service != "0.00" && $received_total_service != null && $received_total_service != 0){
                                $price_share_in_total_service = (float)(($total_single_product_price/$received_total_service) * 100);
                                $discount_share_membership_amount = (float)((($membership_product_discount_amount) * $price_share_in_total_service) / 100);
                            }else{
                                $discount_share_membership_amount = 0;
                            }

                            $received_total = $total_product_amount + $total_service_amount;
                            if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                                $price_share_in_total = (float)(($total_single_product_price/$received_total) * 100);
                                $discount_share_coupon_amount = (float)(($coupon_discount_amount * $price_share_in_total) / 100);
                                $discount_share_reward_amount = (float)(($reward_discount_hidden * $price_share_in_total) / 100);
                                $discount_share_extra_amount = (float)(($extra_discount_amount * $price_share_in_total) / 100);
                            }else{
                                $discount_share_coupon_amount = 0;
                                $discount_share_reward_amount = 0;
                                $discount_share_extra_amount = 0;
                            }
                            
                            $discount_share_giftcard_amount = 0 ;
                            $received_total = $total_product_amount + $total_service_amount;
                            if($is_giftcard_applied == '1'){
                                if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                                    $price_share_in_total_giftcard_service_amount = (float)(($total_single_product_price/$received_total) * 100);
                                    $discount_share_giftcard_amount = (float)(($giftcard_discount * $price_share_in_total_giftcard_service_amount) / 100);
                                }else{
                                    $discount_share_giftcard_amount = 0;
                                }
                            }

                            $discount_share_membership_amount_per_product = $discount_share_membership_amount/$product_quantity;
                            $discount_share_coupon_amount_per_product = $discount_share_coupon_amount/$product_quantity;
                            $discount_share_reward_amount_per_product = $discount_share_reward_amount/$product_quantity;
                            $discount_share_extra_amount_per_product = $discount_share_extra_amount/$product_quantity;
                            $discount_share_giftcard_amount_per_product = $discount_share_giftcard_amount/$product_quantity;

                            $received_discount_amount_per_product_while_booking = $discount_share_membership_amount_per_product + $discount_share_coupon_amount_per_product + $discount_share_reward_amount_per_product + $discount_share_extra_amount_per_product + $discount_share_giftcard_amount_per_product;
                            
                            $total_single_product_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_reward_amount + $discount_share_giftcard_amount + $discount_share_extra_amount;
                            $single_product_discounted_amount = $total_single_product_price - $total_single_product_discount;

                            $stylist_data = array(
                                'booking_id' 		    => $booking_id,
                                'branch_id' 			=> $this->session->userdata('branch_id'),
                                'salon_id' 				=> $this->session->userdata('salon_id'),
                                'customer_name' 		=> $customer_id,
                                'stylist_id' 		    => $selected_product_stylist_id,
                                'stylist_after_bill'    => $selected_product_stylist_id,
                                'category_id'     		=> $categoryID,
                                'product_id'     		=> $productID,
                                'single_product_price'     	    => $product_price,
                                'original_single_product_price' => $product_original_price,
                                'quantity'                      => $product_quantity,
                                'quantity_after_bill'           => $product_quantity,
                                'total_product_price'           => $total_single_product_price,
                                'total_product_price_after_bill'=> $total_single_product_price,
                                'created_on'            => date("Y-m-d H:i:s"),
                                'booking_date'          => date('Y-m-d',strtotime($single->booking_date)),
                                
                                'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                                'received_discount_amount_per_product_while_booking' => $received_discount_amount_per_product_while_booking,
                                'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                                'received_coupon_discount_while_booking'        => $discount_share_coupon_amount,
                                'received_reward_discount_while_booking'        => $discount_share_reward_amount_per_product,
                                'received_giftcard_discount_while_booking'      => $discount_share_giftcard_amount,
                                'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,
                                
                                'received_discount_amount_while_bill'     	    => $total_single_product_discount,
                                'received_discount_amount_per_product_while_bill'     	=> $received_discount_amount_per_product_while_booking,
                                'received_membership_discount_while_bill'       => $discount_share_membership_amount,
                                'received_coupon_discount_while_bill'           => $discount_share_coupon_amount,
                                'received_reward_discount_while_bill'           => $discount_share_reward_amount_per_product,
                                'received_giftcard_discount_while_bill'         => $discount_share_giftcard_amount,
                                'product_discounted_price_while_bill'     	    => $single_product_discounted_amount,
                                
                                'is_discount_applied'                           => $is_product_discount_applied,
                                'product_discount_row_id'                       => $product_discount_row_id,

                                'product_discount_in'     	                    => $product_discount_in,
                                'product_discount_type'     	                => $product_discount_type,
                                'product_discount_value'     	                => $product_discount_value,
                                
                                'product_discount_slab_min'     	            => $product_discount_slab_min,
                                'product_discount_slab_max'     	            => $product_discount_slab_max,
                                'product_slab_increment'     	                => $product_slab_increment,
                                'product_applied_flexible_slab'     	        => $product_applied_flexible_slab,
                                'product_received_discount'     	            => $product_received_discount,          
                                'stylist_incentive_for_single_product'          => $employee_product_incentive,

                                'payment_status'                                => '1',
                                'booking_payment_id'                            => $booking_payment_id,
                                'payment_date'                                  => date('Y-m-d',strtotime($payment_date)),
                                'payment_mode'                                  => $payment_mode,
                    
                                'payment_mode_multiple'             => $payment_mode_multiple,
                                'payment_amount_multiple'           => $payment_amount_multiple,
                                'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
                                                           
                                'used_barcodes'                                 => !empty($used_barcodes) ? implode(',',$used_barcodes) : null,       
                            );
                            $this->db->insert('tbl_only_product_booking_details', $stylist_data);
                            $only_product_details_id = $this->db->insert_id();

                            $single_incentive_amt = 0.00;         
                            $opening = $single_product->current_stock;                              
                            $quantity = $product_quantity;                             
                            $closing = $opening - $quantity;                         
                            $outward_data = array(
                                'branch_id'         => $this->session->userdata('branch_id'),
                                'salon_id'          => $this->session->userdata('salon_id'),
                                'booking_id'        => $booking_id,
                                'booking_type'      => '1',
                                'product_booking_product_details_id'=> $only_product_details_id,
                                'booking_product_id'                => $single_product->id,
                                'opening_stock'     => $opening,
                                'closing_stock'     => $closing,
                                'quantity'          => $quantity,
                                'purchase_price'    => $single_product_discounted_amount,
                                'entry_by'          => $this->session->userdata('branch_id'),
                                'created_on'        => date("Y-m-d H:i:s")
                            );
                            $this->db->insert('tbl_product_outward_while_booking_details', $outward_data);
                            $stock_outward_id = $this->db->insert_id();

                            $this->db->where('id', $single_product->id);
                            $this->db->where('branch_id', $this->session->userdata('branch_id'));
                            $this->db->where('salon_id', $this->session->userdata('salon_id'));
                            $this->db->update('tbl_product', array('current_stock'=>(int)$closing));

                            if(!empty($used_barcodes)){
                                $barcode_entry = array(
                                    'used_on'           => date('Y-m-d H:i:s'),
                                    'used_in_booking_id'=> $booking_id,
                                    'product_status'    => '1',
                                    'booking_type'      => '0',
                                    'stock_outward_while_booking_id'  => $stock_outward_id,
                                );
                                $this->db->where_in('id', $used_barcodes);
                                $this->db->where('product_name', $single_product->id);
                                $this->db->update('tbl_product_barcode', $barcode_entry); 
                            }
                            
                            //calculate single product incentive
                            $single_incentive_rate = $employee_product_incentive != "" ? (float)$employee_product_incentive : 0.00;
                            $single_incentive_amt = $quantity * $single_incentive_rate;
                            
                            $product_incentive_single_data = array(
                                'stylist_incentive_amount'  =>  $single_incentive_amt
                            );
                            $this->db->where('id',$only_product_details_id);
                            $this->db->update('tbl_only_product_booking_details', $product_incentive_single_data);
                            
                            $incentive_amount = (float)$incentive_amount + (float)$single_incentive_amt;
                        }
                    }
                }

                // stylist_incentive_setup
                if($incentive_amount > 0 && $selected_product_stylist_id != ""){
                    $incentive_data = array(
                        'incentive_type'  => '1',
                        'employee_id'     =>  $selected_product_stylist_id,
                        'branch_id'       =>  $this->session->userdata('branch_id'),
                        'salon_id'        =>  $this->session->userdata('salon_id'),
                        'booking_id'      =>  $booking_id,
                        'booking_payment_id'    =>  $booking_payment_id,
                        'booking_type'    => '0',
                        'products' 		  => !empty($product_values) ? implode(',',$product_values) : '',
                        'incentive_amount'=>  $incentive_amount,
                        'incentive_added_on'    => date("Y-m-d H:i:s"),
                        'created_on'            => date("Y-m-d H:i:s")
                    );
                    $this->db->insert('tbl_employee_incentive_entry',$incentive_data);
                }
                //new product added billing end

                $pre_total_bill_amount = (float)$customer->total_bill_amount;
                $pre_total_paid_amount = (float)$customer->total_paid_amount;
                $pre_current_pending_amount = (float)$customer->current_pending_amount;

                $new_total_bill_amount = $pre_total_bill_amount + (float)$rounded_bill_amount;
                $new_total_paid_amount = $pre_total_paid_amount + (float)$paid_amount;

                $single_pending_amount = (float)$rounded_bill_amount - (float)$paid_amount;

                $new_current_pending_amount = $pre_current_pending_amount + (float)$single_pending_amount;

                $payment_entry_data = array(
                    'customer_id'     =>  $customer_id,
                    'branch_id'       =>  $this->session->userdata('branch_id'),
                    'salon_id'        =>  $this->session->userdata('salon_id'),
                    'booking_id'      =>  $booking_id,
                    'paid_amount'     =>  $paid_amount,
                    'type' 		                 => '0',
                    'remark' 	                 => 'Payment for booking bill generation',
                    'opening_pending_amount'     =>  $pre_current_pending_amount,
                    'closing_pending_amount'     =>  $new_current_pending_amount,                    
                    'total_bill_amount'          =>  $pre_total_bill_amount,
                    'total_paid_amount'          =>  $pre_total_paid_amount,
                    'booking_payment_amount'     =>  $grand_total_amount,
                    'booking_payment_id'         =>  $booking_payment_id,
                    'payment_date'    => date('Y-m-d',strtotime($payment_date)),
                    'payment_mode'    => $payment_mode,                                
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                    'created_on'      =>  date("Y-m-d H:i:s")
                );
                $this->db->insert('tbl_booking_payment_entry',$payment_entry_data);

                $payment_data = array(
                    'total_bill_amount'         =>  $new_total_bill_amount,
                    'total_paid_amount'         =>  $new_total_paid_amount,
                    'current_pending_amount'    =>  number_format((float)($new_current_pending_amount), 2, '.', ''),
                );
                $this->db->where('id',$customer_id);
                $this->db->update('tbl_salon_customer',$payment_data);   
                
                $this->db->where('booking_id',$booking_id);
                $this->db->where('is_deleted','0');
                $this->db->where_in('service_status',['1','0']);
                $this->db->where('payment_status','0');
                $pending_services = $this->db->get('tbl_booking_services_details')->result(); 
                if(empty($pending_services)){
                    $update_data = array(
                        'payment_date'          => date('Y-m-d',strtotime($payment_date)),
                        'payment_mode'          => $payment_mode,   
                    
                        'payment_mode_multiple'             => $payment_mode_multiple,
                        'payment_amount_multiple'           => $payment_amount_multiple,
                        'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                        'payment_status'        => '1',
                        'booking_payment_id'    => $booking_payment_id,
                    );
                    $this->db->where('id',$booking_id);
                    $this->db->update('tbl_new_booking',$update_data);
                }
                
                if($single->is_package_included == '1' && $single->package_rewards != '' && $single->package_rewards != null && $single->package_rewards != '0'){
                    $this->db->where('id',$customer_id);
                    $customer_rewards = $this->db->get('tbl_salon_customer')->row();
                    if(!empty($customer_rewards)){
                        $pre_balance = $customer_rewards->rewards_balance;
                        $rewards = $single->package_rewards;
                        $new_balance = $pre_balance + $rewards;

                        $reward_data = array(
                            'customer_id'                   =>  $customer_id,
                            'branch_id'                     =>  $this->session->userdata('branch_id'),
                            'salon_id'                      =>  $this->session->userdata('salon_id'),
                            'booking_id'                    =>  $booking_id,
                            'rewards_for'                   =>  '1',
                            'for_package'                   =>  $single->pacakge_id,
                            'package_allocation_id'         =>  $single->package_allocation_id,
                            'transaction_type'              =>  '0',
                            'remark'                        =>  'Reward points credited for package payment',
                            'previous_reward_balance'       =>  $pre_balance,
                            'reward_value'                  =>  $rewards,
                            'new_reward_balance'            =>  $new_balance,
                            'created_on'                    =>  date("Y-m-d H:i:s")
                        );
                        $this->db->insert('tbl_customer_rewards_history',$reward_data);

                        $this->db->where('id',$customer_id);
                        $this->db->update('tbl_salon_customer',array('rewards_balance'=>$new_balance));
                    }
                }

                //membership_payment_status_update
                if($is_member == '1' && $is_membership_payment_included == '1'){
                    $mem_data = array(
                        'payment_status' 	        => '1',
                        'payment_id'                => $booking_payment_id, 
                        'payment_in_booking_id'     => $booking_id,
                        'payment_on' 		        => date("Y-m-d H:i:s")
                    ); 
                    $this->db->where('id',$membership_history_id);
                    $this->db->update('tbl_customer_membership_history',$mem_data);   
                }

                if($this->input->post('payment_btn_' . $booking_id) == 'generate'){
                    //send WP message with receipt attached                    
                    $this->db->where('id',$customer_id);
                    $this->db->where('branch_id',$this->session->userdata('branch_id'));
                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                    $this->db->where('is_deleted','0');
                    $customer_details = $this->db->get('tbl_salon_customer')->row();
                    if($customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
                        $services_text = '';
                        $this->db->select('tbl_service_payment.*,tbl_new_booking.service_start_date,tbl_new_booking.service_start_time');
                        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_service_payment.booking_id');
                        $this->db->where('tbl_service_payment.id',$booking_payment_id);
                        $booking_details = $this->db->get('tbl_service_payment')->row();
                        if(!empty($booking_details)){
                            $services = explode(',',$booking_details->services);
                            if(count($services) > 0){
                                for($i=0;$i<count($services);$i++){
                                    $this->db->where('id',$services[$i]);
                                    $this->db->where('branch_id',$this->session->userdata('branch_id'));
                                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                                    $this->db->where('is_deleted','0');
                                    $service_details = $this->db->get('tbl_salon_emp_service')->row();
                                    if (!empty($service_details)) {
                                        // $services_text .= $service_details->service_name . '|' . $service_details->service_name_marathi;
                                        $services_text .= $service_details->service_name;
                                        
                                        if ($i < count($services) - 1) {
                                            $services_text .= ', ';
                                        }
                                    }
                                }
                                $services_text = trim($services_text,',');
                                $services_text = trim($services_text,' ');
                                $receipt_link = base_url() . 'booking-print/' . base64_encode($booking_details->booking_id) . '/' . base64_encode($booking_details->id) . '?print&mobile';
                                $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                                $finalNumber = substr($cleanedNumber, -10);
                                $finalNumber = '91' . $finalNumber;

                                $this->db->where('is_deleted','0');
                                $this->db->where('id',$this->session->userdata('branch_id'));
                                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                                $branch = $this->db->get('tbl_branch')->row();
                                $visit_text = '';
                                if(!empty($branch)){
                                    if($branch->branch_name != ""){
                                        $visit_text .= $branch->branch_name;
                                    }
                                }

                                $type = '8';
                                $message = "Hello, " . $customer_details->full_name . "!%0aAppointment Completed\u{2705}%0a%0a\u{1F5D3}" . date('d M, Y',strtotime($booking_details->service_start_date)) . " at%0a\u{1F55B}" . date('h:i A',strtotime($booking_details->service_start_time)) . " for%0a\u{1F488}" . $services_text . "%0a%0aFollow the link for payment receipt.%0a" . $receipt_link . "%0a%0aThank you!%0a" . $visit_text . "";
                                $app_message = "Hello, " . $customer_details->full_name . "!\nAppointment Completed ✅\n\n📅 " . date('d M, Y', strtotime($booking_details->service_start_date)) . " at\n🕒 " . date('h:i A', strtotime($booking_details->service_start_time)) . " for\n💇‍♀️ " . $services_text . "\n\nFollow the link for payment receipt.\n" . $receipt_link . "\n\nThank you!\n" . $visit_text . "";
                                $number = $finalNumber;
                                $customer = $customer_details->id;
                                $salon_id = $customer_details->salon_id;
                                $branch_id = $customer_details->branch_id;
                                $for_order_id = $booking_details->id;
                                $for_offer_id = '';
                                $for_query_id = '';
                                $consent_form_id = '';
                                $title = 'Appointment Completed';
                                $generated_from = '0';
                                $notification_data = [
                                    "landing_page"  => 'order_details',
                                    "redirect_id"   => (string)$for_order_id
                                ];
                    
                                $message_send_on = '';
                                $template_id = '';                                
                                $email_subject = '';
                                $email_html = '';
                                $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                                if(!empty($booking_rules)){
                                    if($booking_rules->booking_reminder_type == '1'){
                                        $message_send_on = '0'; //SMS
                                        $template_id = '';
                                    }elseif($booking_rules->booking_reminder_type == '2'){
                                        $message_send_on = '2'; //EMAIL
                                        $email_html = '';
                                    }elseif($booking_rules->booking_reminder_type == '3'){
                                        $message_send_on = '1'; //WP
                                    }
                                }
                                $membership_history_id = '';
                                $package_allocation_id = '';
                                $giftcard_purchase_id = '';
                                $trying_booking_id = '';
                                $wp_template_data = [];
                                $cron_id = '';

                                $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                            }
                        }
                    }
                }

                return '1@@@'.$booking_payment_id;
            }else{
                return '0@@@';
            }
        }else{
            return '0@@@';
        }
	} 
    
	public function product_generate_bill($booking_id){
        $customer_id = $this->input->post('customer_id_' . $booking_id);
        $stylist_id = $this->input->post('employee_' . $booking_id);
        $old_stylist_id = $this->input->post('old_stylist_id' . $booking_id);

        $this->db->where('id',$booking_id);
        $this->db->where('booking_type','1');
        $single = $this->db->get('tbl_new_booking')->row();

        if(!empty($single)){
            $this->db->where('id',$customer_id);
            $customer = $this->db->get('tbl_salon_customer')->row();

            if(!empty($customer)){
                $payment_mode = $this->input->post('payment_mode_' . $booking_id);
                $transaction_id = $this->input->post('transaction_id_' . $booking_id);
                $payment_date = $this->input->post('payment_date_' . $booking_id);
                $paid_amount = $this->input->post('paid_amount_' . $booking_id);

                $is_member = $this->input->post('is_membership_booking_' . $booking_id);
                $membership_id = $this->input->post('membership_id_' . $booking_id);

                $customer_reward_available = $this->input->post('customer_reward_available_' . $booking_id);
                $used_rewards = $this->input->post('used_rewards_' . $booking_id);
                $reward_discount_hidden = $this->input->post('reward_discount_amount_' . $booking_id);
                
                $incentive_amount = 0;

                $message_type = $this->input->post('message_type_' . $booking_id);

                $products = array();
                $product_details = $this->input->post('service_checkbox_' . $booking_id);
                if($product_details != "" && is_array($product_details) && !empty($product_details)){
                    for($i=0;$i<count($product_details);$i++){
                        $products[] = $this->input->post('single_product_id_' . $product_details[$i]);
                    }
                }
            
                $this->db->where('booking_id',$booking_id);
                $this->db->where('customer_name',$customer_id);
                $original_products = $this->db->get('tbl_only_product_booking_details')->result();
                $original_product_details_ids = array();
                if(!empty($original_products)){
                    foreach($original_products as $original_products_result){
                        $original_product_details_ids[] = $original_products_result->id;
                    }
                }
                $not_included_product_details_ids = array_values(array_diff($original_product_details_ids,$product_details));

                $total_product_amount = $this->input->post('total_product_amount_' . $booking_id);
                $product_payable_amount = $this->input->post('product_payable_hidden_' . $booking_id);
                $payable_amount = $this->input->post('payable_hidden_' . $booking_id);
                $total_discount_hidden = $this->input->post('total_discount_hidden_' . $booking_id);
                $booking_amount = $this->input->post('booking_amount_hidden_' . $booking_id);
                $gst_amount = $this->input->post('gst_amount_hidden_' . $booking_id);
                $grand_total_amount = $this->input->post('grand_total_hidden_' . $booking_id);
                
                $membership_discount_type = $this->input->post('membership_discount_type_' . $booking_id);
                $membership_product_discount_amount = $this->input->post('m_product_discount_amount_' . $booking_id);
                $membership_product_discount = $this->input->post('m_product_discount_' . $booking_id);

                $is_gst_applicable = $this->input->post('is_gst_applicable_' . $booking_id) == '1' ? $this->input->post('is_gst_applicable_' . $booking_id) : '0';
                $salon_gst_no = $this->input->post('salon_gst_no_' . $booking_id);
                $salon_gst_rate = $this->input->post('salon_gst_rate_' . $booking_id);

                $booking_data = array(
                    'branch_id' 			=> $this->session->userdata('branch_id'),
                    'salon_id' 				=> $this->session->userdata('salon_id'),
                    'booking_type' 		    => '1',
                    'stylist_id' 		    => $stylist_id,
                    'booking_id' 		    => $booking_id,
                    'booking_date'          => date('Y-m-d',strtotime($single->booking_date)),
                    'customer_name' 		=> $customer_id,
                    'is_membership_booking' => $is_member,
                    'membership_id' 		=> $membership_id,
                    'membership_discount_type'	=> $membership_discount_type,
                    'm_product_discount' 	=> $membership_product_discount,
                    'm_product_discount_amount' 	=> $membership_product_discount_amount,
                    'products' 		        => !empty($products) ? implode(',',$products) : '',
                    'total_product_price'   => $total_product_amount,
                    'product_price'         => $product_payable_amount,
                    'payble_price'          => $payable_amount,
                    'reward_discount_amount'=> $reward_discount_hidden,
                    'total_discount_amount' => $total_discount_hidden,
                    'used_rewards'          => $used_rewards,
                    'booking_amount'        => $booking_amount,
                    'gst_amount'            => $gst_amount,
                    'amount_to_paid'        => $grand_total_amount,
                    'actual_paid_amount'    => $paid_amount,
                    'payment_date'          => date('Y-m-d',strtotime($payment_date)),
                    'payment_mode'          => $payment_mode,
                    'transaction_id'        => $transaction_id,
                    
                    'is_gst_applicable'     => $is_gst_applicable,
                    'salon_gst_no'          => $salon_gst_no,
                    'salon_gst_rate'        => $salon_gst_rate,

                    'send_appointment_details'          => null,
                    'message_type'                      => $message_type,

                    'payment_status'        => '1',
                    'created_on'            => date("Y-m-d H:i:s"),
                );
                // echo '<pre>'; print_r($not_included_product_details_ids); exit();
                $this->db->insert('tbl_service_payment', $booking_data);
                $booking_payment_id = $this->db->insert_id();

                $receipt_data = array(
                    'receipt_no'   => $single->receipt_no.'-'.$booking_payment_id,
                );
                $this->db->where('id',$booking_payment_id);
                $this->db->update('tbl_service_payment',$receipt_data);

                if($used_rewards > 0){
                    $this->db->where('id',$customer_id);
                    $customer_rewards = $this->db->get('tbl_salon_customer')->row();
                    if(!empty($customer_rewards)){
                        $pre_balance = $customer_rewards->rewards_balance;
                        $rewards = $used_rewards;
                        $new_balance = $pre_balance - $rewards;

                        $reward_data = array(
                            'customer_id'                   =>  $customer_id,
                            'branch_id'                     =>  $this->session->userdata('branch_id'),
                            'salon_id'                      =>  $this->session->userdata('salon_id'),
                            'booking_id'                    =>  $booking_id,
                            'booking_type'                  =>  '1',
                            'transaction_type'              =>  '3',
                            'remark'                        =>  'Reward points used for booking payment',
                            'previous_reward_balance'       =>  $customer_rewards->rewards_balance,
                            'reward_value'                  =>  $rewards,
                            'new_reward_balance'            =>  $new_balance,
                            'created_on'                    =>  date("Y-m-d H:i:s")
                        );
                        $this->db->insert('tbl_customer_rewards_history',$reward_data);

                        $this->db->where('id',$customer_id);
                        $this->db->update('tbl_salon_customer',array('rewards_balance'=>$new_balance));
                    }
                }
                
                if($product_details != "" && is_array($product_details) && !empty($product_details)){
                    for($i=0;$i<count($product_details);$i++){
                        $this->db->where('id',$product_details[$i]);
                        $single_product_details = $this->db->get('tbl_only_product_booking_details')->row();
                        if(!empty($single_product_details)){
                            $new_quantity = $this->input->post('product_quantity_' . $product_details[$i]);
                            $single_product_price = $this->input->post('single_product_price_' . $product_details[$i]);
                            $used_barcodes = $this->input->post('used_product_barcodes_' . $product_details[$i]);

                            $single_total_price = $new_quantity * $single_product_price;

                            $received_total_product = $total_product_amount;
                            if($received_total_product != "" && $received_total_product != "0.00" && $received_total_product != null && $received_total_product != 0){
                                $price_share_in_total_service = (float)(($single_total_price/$received_total_product) * 100);
                                $discount_share_membership_amount = (float)(($membership_product_discount_amount * $price_share_in_total_service) / 100);
                            }else{
                                $discount_share_membership_amount = 0;
                            }

                            $received_total = $total_product_amount;
                            if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                                $price_share_in_total = (float)(($single_total_price/$received_total) * 100);
                                $discount_share_reward_amount = (float)(($reward_discount_hidden * $price_share_in_total) / 100);
                            }else{
                                $discount_share_reward_amount = 0;
                            }

                            $total_single_product_discount = $discount_share_membership_amount + $discount_share_reward_amount;
                            $total_single_product_discount_per_product = $total_single_product_discount / $new_quantity;
                            $single_product_discounted_amount = $single_total_price - $total_single_product_discount;

                            $payment_data = array(
                                'payment_date'          => date('Y-m-d',strtotime($payment_date)),
                                'payment_mode'          => $payment_mode,
                                'payment_status'        => '1',
                                'booking_payment_id'    => $booking_payment_id,                         
                                'quantity_after_bill'   => $new_quantity,                            
                                'total_product_price_after_bill'   => (float)$single_total_price,                            
                                'used_barcodes'         => implode(',',$used_barcodes),       
                                     
                                'stylist_after_bill'    => $stylist_id,                            
                                'total_product_price_after_bill'   => (float)$single_total_price,                       
                    
                                'received_discount_amount_while_bill'     	            => $total_single_product_discount,
                                'received_discount_amount_per_product_while_bill'     	=> $total_single_product_discount_per_product,
                                'received_reward_discount_while_bill'     	=> $discount_share_reward_amount,
                                'received_membership_discount_while_bill'   => $discount_share_membership_amount,
                                'product_discounted_price_while_bill'     	=> $single_product_discounted_amount,
                            );
                            $this->db->where('id',$product_details[$i]);
                            $this->db->update('tbl_only_product_booking_details', $payment_data);

                            $product_single_details = $this->get_product_details($single_product_details->product_id);
                            if(!empty($product_single_details)){ 
                                $single_incentive_amt = 0.00;         
                                $opening = $product_single_details->current_stock;                              
                                $quantity = $new_quantity;                             
                                $closing = $opening - $quantity;                         
                                $outward_data = array(
                                    'branch_id'         => $this->session->userdata('branch_id'),
                                    'salon_id'          => $this->session->userdata('salon_id'),
                                    'booking_id'        => $booking_id,
                                    'booking_type'      => '1',
                                    'product_booking_product_details_id'=> $product_details[$i],
                                    'booking_product_id'                => $single_product_details->product_id,
                                    'opening_stock'     => $opening,
                                    'closing_stock'     => $closing,
                                    'quantity'          => $quantity,
                                    'purchase_price'    => $single_product_discounted_amount,
                                    'entry_by'          => $this->session->userdata('branch_id'),
                                    'created_on'        => date("Y-m-d H:i:s")
                                );
                                $this->db->insert('tbl_product_outward_while_booking_details', $outward_data);
                                $stock_outward_id = $this->db->insert_id();

                                $this->db->where('id', $product_single_details->id);
                                $this->db->where('branch_id', $this->session->userdata('branch_id'));
                                $this->db->where('salon_id', $this->session->userdata('salon_id'));
                                $this->db->update('tbl_product', array('current_stock'=>(int)$closing));

                                $barcode_entry = array(
                                    'used_on'           => date('Y-m-d H:i:s'),
                                    'used_in_booking_id'=> $booking_id,
                                    'product_status'    => '1',
                                    'booking_type'      => '1',
                                    'stock_outward_while_booking_id'  => $stock_outward_id,
                                );
                                $this->db->where_in('id', $used_barcodes);
                                $this->db->where('product_name', $single_product_details->product_id);
                                $this->db->update('tbl_product_barcode', $barcode_entry); 
                                
                                //calculate single product incentive
                                $single_incentive_rate = $single_product_details->stylist_incentive_for_single_product != "" ? (float)$single_product_details->stylist_incentive_for_single_product : 0.00;
                                $single_incentive_amt = $quantity * $single_incentive_rate;
                                
                                $product_incentive_single_data = array(
                                    'stylist_incentive_amount'  =>  $single_incentive_amt
                                );
                                $this->db->where('id',$product_details[$i]);
                                $this->db->update('tbl_only_product_booking_details', $product_incentive_single_data);
                                
                                $incentive_amount = (float)$incentive_amount + (float)$single_incentive_amt;
                            }
                        }
                    }
                }

                if(!empty($not_included_product_details_ids)){
                    $not_included_data = array(
                        'payment_status'        => '2'                      
                    );
                    $this->db->where_in('id',$not_included_product_details_ids);
                    $this->db->update('tbl_only_product_booking_details', $not_included_data);
                }

                $pre_total_bill_amount = (float)$customer->total_bill_amount;
                $pre_total_paid_amount = (float)$customer->total_paid_amount;
                $pre_current_pending_amount = (float)$customer->current_pending_amount;

                $new_total_bill_amount = $pre_total_bill_amount + (float)$grand_total_amount;
                $new_total_paid_amount = $pre_total_paid_amount + (float)$paid_amount;

                $single_pending_amount = (float)$grand_total_amount - (float)$paid_amount;

                $new_current_pending_amount = $pre_current_pending_amount + (float)$single_pending_amount;

                $payment_entry_data = array(
                    'customer_id'     =>  $customer_id,
                    'branch_id'       =>  $this->session->userdata('branch_id'),
                    'salon_id'        =>  $this->session->userdata('salon_id'),
                    'booking_id'      =>  $booking_id,
                    'booking_type'    => '1',
                    'paid_amount'     =>  $paid_amount,
                    'type' 		                 => '0',
                    'remark' 	                 => 'Payment for product booking bill generation',
                    'opening_pending_amount'     =>  $pre_current_pending_amount,
                    'closing_pending_amount'     =>  $new_current_pending_amount,                    
                    'total_bill_amount'          =>  $pre_total_bill_amount,
                    'total_paid_amount'          =>  $pre_total_paid_amount,
                    'booking_payment_amount'     =>  $grand_total_amount,
                    'booking_payment_id'         =>  $booking_payment_id,
                    'payment_date'    => date('Y-m-d',strtotime($payment_date)),
                    'payment_mode'    => $payment_mode,
                    'created_on'      =>  date("Y-m-d H:i:s")
                );
                $this->db->insert('tbl_booking_payment_entry',$payment_entry_data);

                $payment_data = array(
                    'total_bill_amount'         =>  $new_total_bill_amount,
                    'total_paid_amount'         =>  $new_total_paid_amount,
                    'current_pending_amount'    =>  $new_current_pending_amount,
                );
                $this->db->where('id',$customer_id);
                $this->db->update('tbl_salon_customer',$payment_data);   
                
                $this->db->where('booking_id',$booking_id);
                $this->db->where('is_deleted','0');
                $this->db->where('payment_status','0');
                $pending_services = $this->db->get('tbl_only_product_booking_details')->result(); 
                if(empty($pending_services)){
                    foreach($pending_services as $pending_services_result){
                        $update_data = array(
                            'payment_status'        => '2',
                            'booking_payment_id'    => $booking_payment_id,
                        );
                        $this->db->where('id',$pending_services_result->id);
                        $this->db->update('tbl_only_product_booking_details',$update_data);
                    }
                }
                $update_data = array(
                    'payment_date'          => date('Y-m-d',strtotime($payment_date)),
                    'payment_mode'          => $payment_mode,
                    'payment_status'        => '1',
                    'booking_payment_id'    => $booking_payment_id,
                );
                $this->db->where('id',$booking_id);
                $this->db->where('booking_type','1');
                $this->db->update('tbl_new_booking',$update_data);

                // stylist_incentive_setup
                if($incentive_amount > 0 && $stylist_id != ""){
                    $incentive_data = array(
                        'incentive_type'  => '1',
                        'employee_id'     =>  $stylist_id,
                        'branch_id'       =>  $this->session->userdata('branch_id'),
                        'salon_id'        =>  $this->session->userdata('salon_id'),
                        'booking_id'      =>  $booking_id,
                        'booking_payment_id'    =>  $booking_payment_id,
                        'booking_type'    => '1',
                        'products' 		  => !empty($products) ? implode(',',$products) : '',
                        'incentive_amount'=>  $incentive_amount,
                        'incentive_added_on'    => date("Y-m-d H:i:s"),
                        'created_on'            => date("Y-m-d H:i:s")
                    );
                    $this->db->insert('tbl_employee_incentive_entry',$incentive_data);
                }

                return '1@@@'.$booking_payment_id;
            }else{
                return '0@@@';
            }
        }else{
            return '0@@@';
        }
	} 
    public function get_employee_product_incentives($id){
        $this->db->where('employee_id',$id);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('is_deleted','0');
        $result = $this->db->get('tbl_employee_incentive_entry')->result(); 
        return $result;
    }
    public function get_employee_generated_salaries($id){
        $this->db->where('emp_id',$id);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('is_deleted','0');
        $result = $this->db->get('tbl_salon_emp_salary_slip')->result(); 
        return $result;
    }
	public function add_new_booking_new(){
        // echo '<pre>'; print_r($_POST); exit();
		$customer_id = $this->input->post('customer_name');
		$is_member = $this->input->post('is_member');
		$membership_id = $this->input->post('membership_id');
		$note = $this->input->post('note');
		$reminder = $this->input->post('reminder');
		$payment_method = $this->input->post('payment_method') != "" ? $this->input->post('payment_method') : '0';

		$customer_reward_available = $this->input->post('customer_reward_available');
		$used_rewards = $this->input->post('used_rewards');
		$reward_discount_hidden = $this->input->post('reward_discount_hidden');

		$giftcard_discount = $this->input->post('giftcard_discount');
		$is_giftcard_applied = $this->input->post('is_giftcard_applied');
		$applied_giftcard_id = $this->input->post('applied_giftcard_id');

        $applicable_giftcard_total_service_amount = 0;
        $stylist_for_calender = '';

        $products = array();
		$services = $this->input->post('service_name_check');
        if($services != "" && is_array($services) && !empty($services)){
            for($i=0;$i<count($services);$i++){
                $single_array = $this->input->post('product_checkbox_' . $services[$i]);
                if ($single_array != "" && $single_array != null && is_array($single_array) && !empty($single_array)) {
                    $products = array_merge($products,$single_array);
                }
                
                if($is_giftcard_applied == '1'){
                    $this->db->where('id',$applied_giftcard_id);
                    $giftcard = $this->db->get('tbl_gift_card')->row();
                    if(!empty($giftcard)){
                        $giftcard_services = explode(',',$giftcard->service_name);
                        if(in_array($services[$i],$giftcard_services)){
                            $service_price = $this->input->post('service_price_' . $services[$i]);
                            $applicable_giftcard_total_service_amount = $applicable_giftcard_total_service_amount + $service_price;
                        }
                    }
                }
            }
        }

		$selected_package = $this->input->post('selected_package_id');
        $package_products = array();
        $package_services = $this->input->post('package_service_name_check_' . $selected_package);
        if($package_services != "" && is_array($package_services) && !empty($package_services)){
            for($i=0;$i<count($package_services);$i++){
                $single_array = $this->input->post('package_product_name_check_' . $selected_package .'_' . $package_services[$i]);
                if ($single_array != "" && $single_array != null && is_array($single_array) && !empty($single_array)) {
                    $package_products = array_merge($products,$single_array);
                }
            }
        }

        // server side check for overlapping bookings     start   
        if($services != "" && is_array($services) && !empty($services)){
            for($i=0;$i<count($services);$i++){
                $service_stylist_id = explode('@@@',$this->input->post('service_stylist_id_' . $services[$i]))[0];
                $service_from = isset(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[0]) ? explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[0] : '';
                $service_to = isset(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[1]) ? explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[1] : '';
                $booking_date = $this->input->post('booking_date');

                $is_allowed = $this->Calendar_model->validate_timeslot($service_stylist_id, $service_from, $service_to, $this->session->userdata('branch_id'), $this->session->userdata('salon_id'));
                if(!$is_allowed){
                    return 'not_allowed';
                }
            }
        }
        if($package_services != "" && is_array($package_services) && !empty($package_services)){
            for($i=0;$i<count($package_services);$i++){
                $service_stylist_id = explode('@@@',$this->input->post('service_stylist_id_' . $package_services[$i]))[0];
                $service_from = isset(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_services[$i]))[0]) ? explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_services[$i]))[0] : '';
                $service_to = isset(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_services[$i]))[1]) ? explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_services[$i]))[1] : '';
                $booking_date = $this->input->post('booking_date');

                $is_allowed = $this->Calendar_model->validate_timeslot($service_stylist_id, $service_from, $service_to, $this->session->userdata('branch_id'), $this->session->userdata('salon_id'));
                if(!$is_allowed){
                    return 'not_allowed';
                }
            }
        }
        // server side check for overlapping bookings     end

        if(!empty($package_services)){
            if(!empty($services)){
                $merged_services = array_merge($services,$package_services);
            }else{
                $merged_services = $package_services;
            }
        }else{
            $merged_services = $services;
        }
        if(!empty($package_products)){
            if(!empty($products)){
                $merged_products = array_merge($products,$package_products);
            }else{
                $merged_products = $package_products;
            }
        }else{
            $merged_products = $products;
        }

		$selected_coupon_id = $this->input->post('selected_coupon_id_hidden');

		$total_service_amount = $this->input->post('total-service-amount');
		$total_product_amount = $this->input->post('total-product-amount');
		$service_payable_amount = $this->input->post('service_payable_hidden');
		$product_payable_amount = $this->input->post('product_payable_hidden');
		$package_amount = $this->input->post('total-package-amount');
		$membership_amount = $this->input->post('total-membership-amount');
		$payable_amount = $this->input->post('payable_hidden');
		$coupon_discount_amount = $this->input->post('coupon_discount_hidden');
		$total_discount_hidden = $this->input->post('total_discount_hidden');
		$booking_amount = $this->input->post('booking_amount_hidden');
		$gst_amount = $this->input->post('gst_amount_hidden');
		$grand_total_amount = $this->input->post('grand_total_hidden');
        
		$membership_discount_type = $this->input->post('membership_discount_type');
		$membership_service_discount_amount = $this->input->post('membership_service_discount_amount_hidden');
		$membership_product_discount_amount = $this->input->post('membership_product_discount_amount_hidden');
		$membership_service_discount = $this->input->post('membership_service_discount');
		$membership_product_discount = $this->input->post('membership_product_discount');

        $this->db->where('id',$customer_id);
        $single_customer = $this->db->get('tbl_salon_customer')->row();

        $booking_data = array(
            'branch_id' 			=> $this->session->userdata('branch_id'),
            'salon_id' 				=> $this->session->userdata('salon_id'),
            'stylist_id' 	        => $this->input->post('employee_selection_rule') == '2' && $this->input->post('employee') != '' ? $this->input->post('employee') : null,
            'customer_name' 		=> $customer_id,
            'is_guest_booking' 		=> !empty($single_customer) ? $single_customer->is_guest : '0',
            'booking_type' 		    => '0',
            'is_membership_booking' => $is_member == '1' ? $is_member : '0',
            'membership_id' 		=> $membership_id,
            'membership_discount_type'	=> $membership_discount_type,
            'm_service_discount'	=> $membership_service_discount,
            'm_product_discount' 	=> $membership_product_discount,
            'm_service_discount_amount'	    => $membership_service_discount_amount,
            'm_product_discount_amount' 	=> $membership_product_discount_amount,
            'original_services'     => !empty($merged_services) ? implode(',',$merged_services) : '',
            'original_products' 	=> !empty($merged_products) ? implode(',',$merged_products) : '',
            'services' 		        => !empty($merged_services) ? implode(',',$merged_services) : '',
            'products' 		        => !empty($merged_products) ? implode(',',$merged_products) : '',
            'selected_coupon_id' 	=> $selected_coupon_id,
            'is_package_included'	=> ($selected_package != "" && $selected_package != null) ? '1' : '0',
            'pacakge_id' 			=> $selected_package,
            'package_amount' 		=> $package_amount,
            'membership_amount' 	=> $membership_amount,
            'is_membership_payment_included' 	=> $this->input->post('membership_payment_status') == '0' ? '1' : '0',
            'total_service_price'   => $total_service_amount,
            'total_product_price'   => $total_product_amount,
            'service_price'         => $service_payable_amount,
            'product_price'         => $product_payable_amount,
            'payble_price'          => $payable_amount,
            'coupon_discount_amount'=> $coupon_discount_amount,
            'reward_discount_amount'=> $reward_discount_hidden,
            'total_discount_amount' => $total_discount_hidden,
            'used_rewards'          => $used_rewards,
            'booking_amount'        => $booking_amount,
            'gst_amount'            => $gst_amount,
            
            'is_gst_applicable'     => $this->input->post('is_gst_applicable') == '1' ? $this->input->post('is_gst_applicable') : '0',
            'salon_gst_no'          => $this->input->post('salon_gst_no'),
            'salon_gst_rate'        => $this->input->post('salon_gst_rate'),

            'amount_to_paid'        => $grand_total_amount,
            'reminder' 				=> '3',
            'payment_method' 		=> $payment_method,
            'note'   				=> $note,
            'is_giftcard_applied' 	=> $is_giftcard_applied,
            'applied_giftcard_id'   => ($is_giftcard_applied == '1') ? $applied_giftcard_id : '',
            'gift_discount'         => ($is_giftcard_applied == '1') ? $giftcard_discount : '',
            'booking_date'          => date("Y-m-d"),
            'service_start_date'    => date("Y-m-d",strtotime($this->input->post('booking_date'))),
            'service_start_time'    => date("H:i:s",strtotime($this->input->post('booking_start'))),
            'created_on'            => date("Y-m-d H:i:s"),
        );
        // echo '<pre>'; print_r($booking_data); exit();

        $this->db->insert('tbl_new_booking', $booking_data);
        $booking_id = $this->db->insert_id();

        $order_counts = $this->get_saloon_branch_total_orders($this->session->userdata('salon_id'),$this->session->userdata('branch_id'));
        $branch_formatted = sprintf('%03d', $this->session->userdata('branch_id'));
        $salon_formatted = sprintf('%03d', $this->session->userdata('salon_id'));
        $count_formatted = sprintf('%04d', ($order_counts + 1));
        $invoice_no = $branch_formatted.$salon_formatted.$count_formatted;

        $update_data = array(
            'receipt_no'    =>  $invoice_no,
        );
        $this->db->where('id',$booking_id);
        $this->db->update('tbl_new_booking',$update_data);


        if($is_giftcard_applied == '1'){
            $this->db->where('id',$applied_giftcard_id);
            $giftcard = $this->db->get('tbl_gift_card')->row();
            if(!empty($giftcard)){
                $existing_customers = explode(',',$giftcard->used_by_customers);
                $existing_customers[] = $customer_id.'@@@'.$booking_id.'@@@'.date("Y-m-d");

                $this->db->where('id',$giftcard->id);
                $this->db->update('tbl_gift_card',array('used_by_customers'=>implode(',',$existing_customers)));
            }
        }else{
            $giftcard = array();
        }
        
        if($services != "" && is_array($services) && !empty($services)){
            for($i=0;$i<count($services);$i++){
                $products_single = $this->input->post('product_checkbox_' . $services[$i]);
                $service_price = $this->input->post('service_price_' . $services[$i]);

                $original_service_price = $this->input->post('service_original_price_' . $services[$i]); 
                $is_service_offer_applied = $this->input->post('is_service_offer_applied_' . $services[$i]);
                $applied_offer_id = $this->input->post('applied_offer_id_' . $services[$i]);
                $service_offer_discount = $this->input->post('service_offer_discount_' . $services[$i]);
                $service_offer_discount_type = $this->input->post('service_offer_discount_type_' . $services[$i]);
                $service_offer_discount_amount = $this->input->post('service_offer_discount_amount_' . $services[$i]);
                
                ////service discount related start

                $is_service_discount_applied = $this->input->post('is_service_discount_applied_' . $services[$i]);
                $service_discount_rewards_type = $this->input->post('service_discount_rewards_type_' . $services[$i]);  //0=discount, 1=rewards
                $service_discount_customer_criteria = $this->input->post('service_discount_customer_criteria_' . $services[$i]);
                $service_discount_row_id = $this->input->post('service_discount_row_id_' . $services[$i]);
                $service_discount_in = $this->input->post('service_discount_in_' . $services[$i]);
                $service_discount_type = $this->input->post('service_discount_type_' . $services[$i]);
                $service_discount_value = $this->input->post('service_discount_value_' . $services[$i]);

                //discount
                $service_discount_slab_min = $this->input->post('service_discount_slab_min_' . $services[$i]); 
                $service_discount_slab_max = $this->input->post('service_discount_slab_max_' . $services[$i]);
                $service_slab_increment = $this->input->post('service_slab_increment_' . $services[$i]);
                $service_applied_flexible_slab = $this->input->post('service_applied_flexible_slab_' . $services[$i]);
                $service_received_discount = $this->input->post('service_received_discount_' . $services[$i]);

                //rewards
                $service_rewards_discount_slab_min = $this->input->post('service_rewards_discount_slab_min_' . $services[$i]); 
                $service_rewards_discount_slab_max = $this->input->post('service_rewards_discount_slab_max_' . $services[$i]);
                $service_rewards_slab_increment = $this->input->post('service_rewards_slab_increment_' . $services[$i]);
                $service_rewards_applied_flexible_slab = $this->input->post('service_rewards_applied_flexible_slab_' . $services[$i]);
                $service_rewards_received_discount = $this->input->post('service_rewards_received_discount_' . $services[$i]);

                ////service discount related end

                $received_total_service = $total_service_amount;
                if($received_total_service != "" && $received_total_service != "0.00" && $received_total_service != null && $received_total_service != 0){
                    $price_share_in_total_service = (float)(($service_price/$received_total_service) * 100);
                    $discount_share_membership_amount = (float)(($membership_service_discount_amount * $price_share_in_total_service) / 100);
                }else{
                    $discount_share_membership_amount = 0;
                }

                $received_total = $total_product_amount + $total_service_amount;
                if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                    $price_share_in_total = (float)(($service_price/$received_total) * 100);
                    $discount_share_coupon_amount = (float)(($coupon_discount_amount * $price_share_in_total) / 100);
                    $discount_share_reward_amount = (float)(($reward_discount_hidden * $price_share_in_total) / 100);
                }else{
                    $discount_share_coupon_amount = 0;
                    $discount_share_reward_amount = 0;
                }
                $discount_share_giftcard_amount = 0 ;
                if($is_giftcard_applied == '1' && !empty($giftcard)){
                    $giftcard_services = explode(',',$giftcard->service_name);
                    if(in_array($services[$i],$giftcard_services)){
                        if($applicable_giftcard_total_service_amount != "" && $applicable_giftcard_total_service_amount != "0.00" && $applicable_giftcard_total_service_amount != null && $applicable_giftcard_total_service_amount != 0){
                            $price_share_in_total_giftcard_service_amount = (float)(($service_price/$applicable_giftcard_total_service_amount) * 100);
                            $discount_share_giftcard_amount = (float)(($giftcard_discount * $price_share_in_total_giftcard_service_amount) / 100);
                        }
                    }
                }

                $total_single_service_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_reward_amount + $discount_share_giftcard_amount;
                $single_service_discounted_amount = $service_price - $total_single_service_discount;

                $service_stylist_id = explode('@@@',$this->input->post('service_stylist_id_' . $services[$i]));
                $stylist_for_calender = isset($service_stylist_id[0]) ? $service_stylist_id[0] : '';
                $stylist_shift = isset($service_stylist_id[1]) ? $service_stylist_id[1] : '';
                $stylist_shift_type = isset($service_stylist_id[2]) ? $service_stylist_id[2] : '';

                $service_from = isset(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[0]) ? explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[0] : '';
                $service_to = isset(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[1]) ? explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[1] : '';
                
                $stylist_data = array(
                    'booking_id' 		    => $booking_id,
                    'branch_id' 			=> $this->session->userdata('branch_id'),
                    'salon_id' 				=> $this->session->userdata('salon_id'),
                    'customer_name' 		=> $customer_id,
                    'service_added_from'	=> '0', //single
                    'service_id'     		=> $services[$i],
                    'service_price'     	=> $service_price,
                    'original_service_price'=> $original_service_price,
                    'product_ids'     		=> (!empty($products_single)) ? implode(',',$products_single) : null,
                    'service_reward_points' => $this->input->post('service_reward_points_' . $services[$i]),
                    // 'stylist_id'      		=> $this->input->post('service_stylist_id_' . $services[$i]),
                    'stylist_id'      		=> $service_stylist_id[0],
                    'booking_shift_id'      => $stylist_shift,
                    'booking_shift_type'    => $stylist_shift_type,
                    'service_date'     		=> date('Y-m-d',strtotime($this->input->post('booking_date'))),
                    'service_from'    	    => date('Y-m-d H:i:s',strtotime($service_from)),
                    'service_to'      	    => date('Y-m-d H:i:s',strtotime($service_to)),
                    'created_on'            => date("Y-m-d H:i:s"),
                    
                    'received_discount_amount_while_booking'     	=> $total_single_service_discount,
                    'received_coupon_discount_while_booking'     	=> $discount_share_coupon_amount,
                    'received_reward_discount_while_booking'     	=> $discount_share_reward_amount,
                    'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                    'received_giftcard_discount_while_booking'     	=> $discount_share_giftcard_amount,
                    'service_discounted_price_while_booking'     	=> $single_service_discounted_amount,
                    
                    'is_service_offer_applied'     	                => $is_service_offer_applied,
                    'applied_offer_id'     	                        => $is_service_offer_applied == '1' ? $applied_offer_id : '',
                    'service_offer_discount'                        => $is_service_offer_applied == '1' ? $service_offer_discount : '',
                    'service_offer_discount_type'     	            => $is_service_offer_applied == '1' ? $service_offer_discount_type : '',
                    'service_offer_discount_amount'     	        => $is_service_offer_applied == '1' ? $service_offer_discount_amount : '',

                    'is_service_discount_applied'                   => $is_service_discount_applied,
                    'service_marketing_discount_type'               => $service_discount_rewards_type,
                    'service_discount_customer_criteria'            => $service_discount_customer_criteria,
                    'service_discount_row_id'                       => $service_discount_row_id,

                    'discount_in'     	                            => $service_discount_in,
                    'discount_type'     	                        => $service_discount_type,
                    'discount_value'     	                        => $service_discount_value,
                    
                    'discount_slab_min'     	                    => $service_discount_slab_min,
                    'discount_slab_max'     	                    => $service_discount_slab_max,
                    'slab_increment'     	                        => $service_slab_increment,
                    'applied_flexible_slab'     	                => $service_applied_flexible_slab,
                    'received_discount'     	                    => $service_received_discount,

                    'rewards_discount_slab_min'     	            => $service_rewards_discount_slab_min,
                    'rewards_discount_slab_max'     	            => $service_rewards_discount_slab_max,
                    'rewards_slab_increment'     	                => $service_rewards_slab_increment,
                    'rewards_applied_flexible_slab'     	        => $service_rewards_applied_flexible_slab,
                    'rewards_received_discount'     	            => $service_rewards_received_discount,
                );
                $this->db->insert('tbl_booking_services_details', $stylist_data);
                $booking_service_details_id = $this->db->insert_id();

                if($products_single != "" && is_array($products_single) && !empty($products_single)){
                    for($j=0;$j<count($products_single);$j++){
                        $product_price = $this->input->post('product_price_' . $services[$i] . '_' . $products_single[$j]);        
                        $product_original_price = $this->input->post('product_original_price_' . $services[$i] . '_' . $products_single[$j]);        
                        
                        ////product discount related start

                        $is_product_discount_applied = $this->input->post('is_product_discount_applied_' . $services[$i] . '_' . $products_single[$j]);
                        $product_discount_row_id = $this->input->post('product_discount_row_id_' . $services[$i] . '_' . $products_single[$j]);
                        $product_discount_in = $this->input->post('product_discount_in_' . $services[$i] . '_' . $products_single[$j]);
                        $product_discount_type = $this->input->post('product_discount_type_' . $services[$i] . '_' . $products_single[$j]);
                        $product_discount_value = $this->input->post('product_discount_value_' . $services[$i] . '_' . $products_single[$j]);

                        //discount
                        $product_discount_slab_min = $this->input->post('product_discount_slab_min_' . $services[$i] . '_' . $products_single[$j]); 
                        $product_discount_slab_max = $this->input->post('product_discount_slab_max_' . $services[$i] . '_' . $products_single[$j]);
                        $product_slab_increment = $this->input->post('product_slab_increment_' . $services[$i] . '_' . $products_single[$j]);
                        $product_applied_flexible_slab = $this->input->post('product_applied_flexible_slab_' . $services[$i] . '_' . $products_single[$j]);
                        $product_received_discount = $this->input->post('product_received_discount_' . $services[$i] . '_' . $products_single[$j]);

                        ////product discount related end

                        $received_total_product = $total_product_amount;
                        if($received_total_product != "" && $received_total_product != "0.00" && $received_total_product != null && $received_total_product != 0){
                            $price_share_in_total_product = (float)(($product_price/$received_total_product) * 100);
                            $discount_share_membership_amount = (float)(($membership_product_discount_amount * $price_share_in_total_product) / 100);
                        }else{
                            $discount_share_membership_amount = 0;
                        }

                        $received_total = $total_product_amount + $total_service_amount;
                        if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                            $price_share_in_total = (float)(($product_price/$received_total) * 100);
                            $discount_share_coupon_amount = (float)(($coupon_discount_amount * $price_share_in_total) / 100);
                            $discount_share_reward_amount = (float)(($reward_discount_hidden * $price_share_in_total) / 100);
                        }else{
                            $discount_share_coupon_amount = 0;
                            $discount_share_reward_amount = 0;
                        }

                        $total_single_product_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_reward_amount;
                        $single_product_discounted_amount = $product_price - $total_single_product_discount;

                        $service_product_data = array(
                            'booking_service_details_id'  => $booking_service_details_id,
                            'booking_id' 		    => $booking_id,
                            'branch_id' 			=> $this->session->userdata('branch_id'),
                            'salon_id' 				=> $this->session->userdata('salon_id'),
                            'customer_name' 		=> $customer_id,
                            'product_added_from'	=> '0', //single
                            'service_id'     		=> $services[$i],
                            'product_id'     		=> $products_single[$j],
                            'product_price'     	=> $product_price,
                            'product_original_price'=> $product_original_price,
                            'created_on'            => date("Y-m-d H:i:s"),
                    
                            'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                            'received_coupon_discount_while_booking'     	=> $discount_share_coupon_amount,
                            'received_reward_discount_while_booking'     	=> $discount_share_reward_amount,
                            'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                            'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,                            

                            'is_product_discount_applied'                   => $is_product_discount_applied,
                            'product_discount_row_id'                       => $product_discount_row_id,

                            'product_discount_in'     	                    => $product_discount_in,
                            'product_discount_type'     	                => $product_discount_type,
                            'product_discount_value'     	                => $product_discount_value,
                            
                            'product_discount_slab_min'     	            => $product_discount_slab_min,
                            'product_discount_slab_max'     	            => $product_discount_slab_max,
                            'product_slab_increment'     	                => $product_slab_increment,
                            'product_applied_flexible_slab'     	        => $product_applied_flexible_slab,
                            'product_received_discount'     	            => $product_received_discount,
                        );
                        $this->db->insert('tbl_booking_services_products_details', $service_product_data);
                    }
                }
            }
        }
        if($package_services != "" && is_array($package_services) && !empty($package_services)){
            for($i=0;$i<count($package_services);$i++){
                $products_single = $this->input->post('package_product_name_check_' . $selected_package .'_' . $package_services[$i]);
                $service_stylist_id = explode('@@@',$this->input->post('service_stylist_id_' . $package_services[$i]));
                $stylist_for_calender = $service_stylist_id[0];
                $stylist_shift = $service_stylist_id[1];
                $stylist_shift_type = $service_stylist_id[2];
                $stylist_data = array(
                    'booking_id' 		    => $booking_id,
                    'branch_id' 			=> $this->session->userdata('branch_id'),
                    'salon_id' 				=> $this->session->userdata('salon_id'),
                    'customer_name' 		=> $customer_id,
                    'service_added_from'	=> '1', //package
                    'package_id'     		=> $selected_package,
                    'service_id'     		=> $package_services[$i],
                    'product_ids'     		=> (!empty($products_single)) ? implode(',',$products_single) : null,
                    'service_reward_points' => $this->input->post('service_reward_points_' . $package_services[$i]),
                    // 'stylist_id'      		=> $this->input->post('service_stylist_id_' . $package_services[$i]),
                    'stylist_id'      		=> $service_stylist_id[0],
                    'booking_shift_id'      => $stylist_shift,
                    'booking_shift_type'    => $stylist_shift_type,
                    'service_date'     		=> date('Y-m-d',strtotime($this->input->post('booking_date'))),
                    'service_from'    	    => date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_services[$i]))[0])),
                    'service_to'      	    => date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_services[$i]))[1])),
                    'created_on'            => date("Y-m-d H:i:s"),
                );
                $this->db->insert('tbl_booking_services_details', $stylist_data);                
                $booking_service_details_id = $this->db->insert_id();

                if($products_single != "" && is_array($products_single) && !empty($products_single)){
                    for($j=0;$j<count($products_single);$j++){
                        $service_product_data = array(
                            'booking_service_details_id'  => $booking_service_details_id,
                            'booking_id' 		    => $booking_id,
                            'branch_id' 			=> $this->session->userdata('branch_id'),
                            'salon_id' 				=> $this->session->userdata('salon_id'),
                            'customer_name' 		=> $customer_id,
                            'package_id' 		    => $selected_package,
                            'product_added_from'	=> '1', //package
                            'service_id'     		=> $package_services[$i],
                            'product_id'     		=> $products_single[$j],
                            'created_on'            => date("Y-m-d H:i:s"),
                        );
                        $this->db->insert('tbl_booking_services_products_details', $service_product_data);
                    }
                }
            }  
        }   

        if($selected_package != ""){
            $package_details = $this->get_package_details($selected_package);
            if(!empty($package_details)){
                $package_rewards_data = array(
                    'package_rewards' =>  $package_details->reward_point
                );
                
                $this->db->where('id',$booking_id);
                $this->db->where('branch_id',$this->session->userdata('branch_id'));
                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                $this->db->update('tbl_new_booking',$package_rewards_data);

                if($this->input->post('is_old_package') == '1'){
                    $active_package_allocation = $this->get_active_package_allocation($this->input->post('old_package_allocation_id'));
                    if(!empty($active_package_allocation)){
                        if(!empty($package_services)){
                            for($i=0;$i<count($package_services);$i++){
                                $old_details = $this->get_active_package_allocation_item_status($active_package_allocation->id,$package_services[$i],'0');
                                if(!empty($old_details)){
                                    $package_item_used_details = array(
                                        'item_used_in_booking_id'   => $booking_id,
                                        'used_status'               => '1',
                                        'service_date'     		    => date('Y-m-d',strtotime($this->input->post('booking_date'))),
                                        'service_from'    	        => date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_services[$i]))[0])),
                                        'service_to'      	        => date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_services[$i]))[1])),
                                        'item_used_on'              => date("Y-m-d"),
                                    );
                                    $this->db->where('id',$old_details->id);
                                    $this->db->update('tbl_booking_package_detail_status', $package_item_used_details);                                    

                                    $allocation_data_for_service = array(
                                        'package_allocation_id'         =>  $active_package_allocation->id,
                                        'package_allocation_status_id'  =>  $old_details->id,
                                    );
                                    $this->db->where('service_id', $package_services[$i],);
                                    $this->db->where('customer_name',$customer_id);
                                    $this->db->where('booking_id',$booking_id);
                                    $this->db->where('service_added_from','1');
                                    $this->db->where('branch_id',$this->session->userdata('branch_id'));
                                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                                    $this->db->update('tbl_booking_services_details',$allocation_data_for_service);
                                }
                            }
                        }

                        $used_in_booking_status_data = array(
                            'is_booking_done'       =>  '1',
                            'added_in_booking_id'   =>  $booking_id,
                        );
                        $this->db->where('allocation_id',$active_package_allocation->id);
                        $this->db->update('tbl_booking_package_detail_status', $used_in_booking_status_data);
                        
                        $used_in_booking_data = array(
                            'is_booking_done'           =>  '1',
                            'allocated_in_booking_id'   =>  $booking_id,
                        );
                        $this->db->where('id',$active_package_allocation->id);
                        $this->db->update('tbl_customer_package_allocations', $used_in_booking_data);

                        $this->db->where('allocation_id',$active_package_allocation->id);
                        $this->db->where('customer_name',$customer_id);
                        $this->db->where('pacakge_id',$selected_package);
                        $this->db->where('used_status','0');
                        $this->db->where('is_deleted','0');
                        $available_unused_item = $this->db->get('tbl_booking_package_detail_status')->num_rows();
                        if($available_unused_item == 0){
                            $lapsed_data = array(
                                'is_lapsed' =>  '1',
                            );
                            $this->db->where('id',$active_package_allocation->id);
                            $this->db->update('tbl_customer_package_allocations', $lapsed_data);
                        }
                        
                        $allocation_data_for_product = array(
                            'package_allocation_id' =>  $active_package_allocation->id,
                            'used_package_type'     =>  '0'
                        );
                        
                        $this->db->where('id',$booking_id);
                        $this->db->where('branch_id',$this->session->userdata('branch_id'));
                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                        $this->db->update('tbl_new_booking',$allocation_data_for_product);
                    }
                }else{
                    $allocation_data = array(
                        'customer_name'         =>  $customer_id,
                        'allocated_in_booking_id'   =>  $booking_id,
                        'package_id'            =>  $selected_package,
                        'branch_id' 			=>  $this->session->userdata('branch_id'),
                        'salon_id' 				=>  $this->session->userdata('salon_id'),
                        'package_start_date'    =>  date("Y-m-d"),
                        'package_amount'        =>  $package_amount,
                        'created_on'            =>  date("Y-m-d H:i:s"),
                    );
                    $this->db->insert('tbl_customer_package_allocations', $allocation_data);
                    $allocation_id = $this->db->insert_id();

                    $allocation_data_for_product = array(
                        'package_allocation_id' =>  $allocation_id
                    );
                    $allocation_data_for_booking = array(
                        'package_allocation_id' =>  $allocation_id,
                        'used_package_type'     =>  '1'
                    );
                    
                    $this->db->where('id',$booking_id);
                    $this->db->where('branch_id',$this->session->userdata('branch_id'));
                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                    $this->db->update('tbl_new_booking',$allocation_data_for_booking);

                    $this->db->where('product_added_from','1');
                    $this->db->where('customer_name',$customer_id);
                    $this->db->where('booking_id',$booking_id);
                    $this->db->where('package_id',$selected_package);
                    $this->db->where('branch_id',$this->session->userdata('branch_id'));
                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                    $this->db->update('tbl_booking_services_products_details',$allocation_data_for_product);

                    $package_all_services = explode(',',$package_details->service_name);

                    if(!empty($package_all_services)){
                        for($i=0;$i<count($package_all_services);$i++){
                            $package_service_products = $this->get_package_products_single($package_details->id,$package_all_services[$i]);
                            $package_item_details = array(
                                'branch_id' 			=> $this->session->userdata('branch_id'),
                                'salon_id' 				=> $this->session->userdata('salon_id'),
                                'allocation_id' 		=> $allocation_id,
                                'customer_name' 		=> $customer_id,
                                'pacakge_id' 		    => $selected_package,
                                'package_amount' 		=> $package_amount,
                                'added_in_booking_id'   => $booking_id,
                                'item_type'             =>  '0',
                                'item_id'               =>  $package_all_services[$i],
                                'products_id'           =>  !empty($package_service_products) ? $package_service_products->product_ids : null,
                                'item_added_on'         =>  date("Y-m-d"),
                                'package_start_date'    =>  date("Y-m-d"),
                                'created_on'            =>  date("Y-m-d H:i:s"),
                            );
                            $this->db->insert('tbl_booking_package_detail_status', $package_item_details);
                            $single_package_details_id = $this->db->insert_id();

                            if(!empty($package_services)){
                                if(in_array($package_all_services[$i],$package_services)){
                                    $package_item_used_details = array(
                                        'item_used_in_booking_id'   => $booking_id,
                                        'used_status'               =>  '1',
                                        'service_date'     		    =>  date('Y-m-d',strtotime($this->input->post('booking_date'))),
                                        'service_from'    	        =>  date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_all_services[$i]))[0])),
                                        'service_to'      	        =>  date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $package_all_services[$i]))[1])),
                                        'item_used_on'              =>  date("Y-m-d"),
                                    );
                                    $this->db->where('item_type','0');
                                    $this->db->where('allocation_id',$allocation_id);
                                    $this->db->where('id',$single_package_details_id);
                                    $this->db->where('item_id',$package_all_services[$i]);
                                    $this->db->update('tbl_booking_package_detail_status', $package_item_used_details);
                                }
                            }                            

                            $allocation_data_for_service = array(
                                'package_allocation_id'         =>  $allocation_id,
                                'package_allocation_status_id'  =>  $single_package_details_id,
                            );
                            $this->db->where('service_id', $package_all_services[$i],);
                            $this->db->where('customer_name',$customer_id);
                            $this->db->where('booking_id',$booking_id);
                            $this->db->where('service_added_from','1');
                            $this->db->where('branch_id',$this->session->userdata('branch_id'));
                            $this->db->where('salon_id',$this->session->userdata('salon_id'));
                            $this->db->update('tbl_booking_services_details',$allocation_data_for_service);
                        }
                    }                

                    $this->db->where('allocation_id',$allocation_id);
                    $this->db->where('customer_name',$customer_id);
                    $this->db->where('pacakge_id',$selected_package);
                    $this->db->where('used_status','0');
                    $this->db->where('is_deleted','0');
                    $available_unused_item = $this->db->get('tbl_booking_package_detail_status')->num_rows();
                    if($available_unused_item == 0){
                        $lapsed_data = array(
                            'is_lapsed' =>  '1',
                        );
                        $this->db->where('id',$allocation_id);
                        $this->db->update('tbl_customer_package_allocations', $lapsed_data);
                    }
                }
            }
        }

        $this->update_booking_service_end($booking_id);

        // $customer_id = '3';
        // $booking_id = '102';
        $this->db->where('id',$customer_id);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('is_deleted','0');
        $customer_details = $this->db->get('tbl_salon_customer')->row();
        if(!empty($customer_details) && $customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
            $services_text = '';
            $this->db->where('id',$booking_id);
            $booking_details = $this->db->get('tbl_new_booking')->row();
            if(!empty($booking_details)){
                $services = explode(',',$booking_details->services);
                if(count($services) > 0){
                    for($i=0;$i<count($services);$i++){
                        $this->db->where('id',$services[$i]);
                        $this->db->where('branch_id',$this->session->userdata('branch_id'));
                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                        $this->db->where('is_deleted','0');
                        $service_details = $this->db->get('tbl_salon_emp_service')->row();
                        if (!empty($service_details)) {
                            // $services_text .= $service_details->service_name . '|' . $service_details->service_name_marathi;
                            $services_text .= $service_details->service_name;
                            
                            if ($i < count($services) - 1) {
                                $services_text .= ', ';
                            }
                        }
                    }
                    $services_text = trim($services_text,',');
                    $services_text = trim($services_text,' ');
                    $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                    $finalNumber = substr($cleanedNumber, -10);
                    $finalNumber = '91' . $finalNumber;

                    $this->db->where('is_deleted','0');
                    $this->db->where('id',$this->session->userdata('branch_id'));
                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                    $branch = $this->db->get('tbl_branch')->row();
                    $visit_text = '';
                    if(!empty($branch)){
                        if($branch->branch_name != ""){
                            $visit_text .= $branch->branch_name;
                        }
                    }

                    $receipt_link = base_url() . 'mobile-booking-print/' . base64_encode($booking_details->id) . '?print&mobile';

                    $type = '5';
                    $message = "Hello, " . $customer_details->full_name . "!%0a%0aYou're booked\u{1F389}%0a\u{1F5D3}" . date('d M, Y',strtotime($booking_details->service_start_date)) . " at%0a\u{1F55B}" . date('h:i A',strtotime($booking_details->service_start_time)) . " for%0a\u{1F488}" . $services_text . "%0a%0aFollow the link for booking receipt.%0a" . $receipt_link . "%0a%0aNeed changes !!! Just Feel Free To Contact Us.%0a%0aThanks for choosing us!%0a" . $visit_text . "";
                    $app_message = "Hello, " . $customer_details->full_name . "!\n\nYou're booked 🎉\n📅 " . date('d M, Y', strtotime($booking_details->service_start_date)) . " at\n🕒 " . date('h:i A', strtotime($booking_details->service_start_time)) . " for\n💇‍♀️ " . $services_text . "\nFollow the link for booking receipt." . $receipt_link . "\n\nNeed changes !!! Just Feel Free To Contact Us.\n\nThanks for choosing us!\n" . $visit_text . "";
                    // echo $message; exit;
                    $number = $finalNumber;
                    $customer = $customer_details->id;
                    $salon_id = $customer_details->salon_id;
                    $branch_id = $customer_details->branch_id;
                    $for_order_id = $booking_details->id;
                    $for_offer_id = '';
                    $for_query_id = '';
                    $consent_form_id = '';
                    $title = 'Booking Received';
                    $generated_from = '0';
                    $notification_data = [
                        "landing_page"  => 'order_details',
                        "redirect_id"   => (string)$for_order_id
                    ];
                    
                    $message_send_on = '';
                    $template_id = '';                    
                    $email_subject = '';
                    $email_html = '';
                    $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                    if(!empty($booking_rules)){
                        if($booking_rules->booking_reminder_type == '1'){
                            $message_send_on = '0'; //SMS
                            $template_id = '';
                        }elseif($booking_rules->booking_reminder_type == '2'){
                            $message_send_on = '2'; //EMAIL
                            $email_html = '';
                        }elseif($booking_rules->booking_reminder_type == '3'){
                            $message_send_on = '1'; //WP
                        }
                    }
                    $membership_history_id = '';
                    $package_allocation_id = '';
                    $giftcard_purchase_id = '';
                    $trying_booking_id = '';
                    $wp_template_data = [];
                    $cron_id = '';

                    $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                }
            }
        }

		return $stylist_for_calender;
	} 
    public function update_booking_service_end($booking_id){   
        $this->db->where('booking_id',$booking_id);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('is_deleted','0');
        $this->db->order_by('service_to','desc');
        $this->db->limit(1);
        $last_service = $this->db->get('tbl_booking_services_details')->row();
        
        $this->db->where('booking_id',$booking_id);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('is_deleted','0');
        $this->db->order_by('service_from','asc');
        $this->db->limit(1);
        $first_service = $this->db->get('tbl_booking_services_details')->row();

        if(!empty($last_service) && !empty($first_service)){
            $data = array(
                'service_end_date'      =>  date('Y-m-d',strtotime($last_service->service_to)),
                'service_end_time'      =>  date('H:i:s',strtotime($last_service->service_to)),
                'service_start_date'    =>  date('Y-m-d',strtotime($first_service->service_from)),
                'service_start_time'    =>  date('H:i:s',strtotime($first_service->service_from))
            );
            $this->db->where('id',$booking_id);
            $this->db->update('tbl_new_booking',$data);
        }

        return true;
    }
    public function update_booking_service_end_all($booking_id,$branch_id,$salon_id){   
        $this->db->where('booking_id',$booking_id);
        $this->db->where('branch_id',$branch_id);
        $this->db->where('salon_id',$salon_id);
        $this->db->where('is_deleted','0');
        $this->db->order_by('service_to','desc');
        $this->db->limit(1);
        $last_service = $this->db->get('tbl_booking_services_details')->row();
        
        $this->db->where('booking_id',$booking_id);
        $this->db->where('branch_id',$branch_id);
        $this->db->where('salon_id',$salon_id);
        $this->db->where('is_deleted','0');
        $this->db->order_by('service_from','asc');
        $this->db->limit(1);
        $first_service = $this->db->get('tbl_booking_services_details')->row();

        if(!empty($last_service) && !empty($first_service)){
            $data = array(
                'service_end_date'      =>  date('Y-m-d',strtotime($last_service->service_to)),
                'service_end_time'      =>  date('H:i:s',strtotime($last_service->service_to)),
                'service_start_date'    =>  date('Y-m-d',strtotime($first_service->service_from)),
                'service_start_time'    =>  date('H:i:s',strtotime($first_service->service_from))
            );
            $this->db->where('id',$booking_id);
            $this->db->update('tbl_new_booking',$data);
        }

        return true;
    }
	public function add_product_booking(){
        $booking_id = '';
        $status = false;
        // echo '<pre>'; print_r($_POST); exit();
		$hidden_id = $this->input->post('hidden_id');
        if($hidden_id != ""){            
            $this->db->where('id',$hidden_id);
            $this->db->where('is_deleted','0');
            $single_booking = $this->db->get('tbl_new_booking')->row();
            if(!empty($single_booking)){
                $customer_id = $this->input->post('customer_name');
                $stylist = $this->input->post('employee');
                $is_member = $this->input->post('is_member');
                $membership_id = $this->input->post('membership_id');
                $note = $this->input->post('note');
                $reminder = $this->input->post('reminder');
                $payment_method = $this->input->post('payment_method');
    
                $product_values = $this->input->post('service_name_check');
                if($product_values != "" && !empty($product_values)){
                    $products = array_map(function($item) {
                        $parts = explode('@@@', $item);
                        return isset($parts[1]) ? $parts[1] : null;
                    }, $product_values);
                    
                    $products = array_filter($products);
                    $old_products = $single_booking->products != "" ? explode(', ', $single_booking->products) : [];
                    $merged_products = array_unique(array_merge($products, $old_products));
                    sort($merged_products);
        
                    $total_product_amount = (float)$this->input->post('total-product-amount') ?? 0.00;
                    $product_payable_amount = (float)$this->input->post('product_payable_hidden') ?? 0.00;
                    $payable_amount = (float)$this->input->post('payable_hidden') ?? 0.00;
                    $total_discount_hidden = (float)$this->input->post('total_discount_hidden') ?? 0.00;
                    $booking_amount = (float)$this->input->post('booking_amount_hidden') ?? 0.00;
                    $gst_amount = (float)$this->input->post('gst_amount_hidden') ?? 0.00;
                    $grand_total_amount = (float)$this->input->post('grand_total_hidden') ?? 0.00;
                    
                    $membership_discount_type = $this->input->post('membership_discount_type');
                    $membership_product_discount_amount = $this->input->post('membership_product_discount_amount_hidden') != "" ? (float)$this->input->post('membership_product_discount_amount_hidden') : 0.00;
                    $membership_product_discount = $this->input->post('membership_product_discount');
                    
                    $old_membership_product_discount_amount = $single_booking->m_product_discount_amount != "" ? (float)$single_booking->m_product_discount_amount : 0.00;
                    $old_total_product_amount = $single_booking->total_product_price != "" ? (float)$single_booking->total_product_price : 0.00;
                    $old_product_price = $single_booking->product_price != "" ? (float)$single_booking->product_price : 0.00;
                    $old_payble_price = $single_booking->payble_price != "" ? (float)$single_booking->payble_price : 0.00;
                    $old_total_discount_amount = $single_booking->total_discount_amount != "" ? (float)$single_booking->total_discount_amount : 0.00;
                    $old_booking_amount = $single_booking->booking_amount != "" ? (float)$single_booking->booking_amount : 0.00;
                    $old_gst_amount = $single_booking->gst_amount != "" ? (float)$single_booking->gst_amount : 0.00;
                    $old_amount_to_paid = $single_booking->amount_to_paid != "" ? (float)$single_booking->amount_to_paid : 0.00;
                    
                    $booking_data = array(
                        'is_membership_booking' => $is_member == '1' ? $is_member : '0',
                        'membership_id' 		=> $membership_id,
                        'membership_discount_type'	=> $membership_discount_type,
                        'm_product_discount' 	=> $membership_product_discount,
                        'm_product_discount_amount' 	=> $membership_product_discount_amount + $old_membership_product_discount_amount,
                        'products' 		        => !empty($merged_products) ? implode(',',$merged_products) : '',
                        'total_product_price'   => $total_product_amount + $old_total_product_amount,
                        'product_price'         => $product_payable_amount + $old_product_price,
                        'payble_price'          => $payable_amount + $old_payble_price,
                        'total_discount_amount' => $total_discount_hidden + $old_total_discount_amount,
                        'booking_amount'        => $booking_amount + $old_booking_amount,
                        'gst_amount'            => $gst_amount + $old_gst_amount,
                        
                        'is_gst_applicable'     => $this->input->post('is_gst_applicable') == '1' ? $this->input->post('is_gst_applicable') : '0',
                        'salon_gst_no'          => $this->input->post('salon_gst_no'),
                        'salon_gst_rate'        => $this->input->post('salon_gst_rate'),
        
                        'amount_to_paid'        => $grand_total_amount + $old_amount_to_paid,
                        'reminder' 				=> $reminder,
                        'payment_method' 		=> $payment_method != "" ? '1' : '0',
                        'note'   				=> $note,
                        'stylist_id'			=> $stylist,
                        'booking_date'          => date("Y-m-d",strtotime($this->input->post('booking_date'))),
                    );
                    // echo '<pre>'; print_r($booking_data); exit();
                    $this->db->where('id', $hidden_id);
                    $this->db->update('tbl_new_booking', $booking_data);
                    $booking_id = $hidden_id;
                    
                    if($product_values != "" && is_array($product_values) && !empty($product_values)){
                        for($i=0;$i<count($product_values);$i++){
                            $categoryID = explode('@@@',$product_values[$i])[0];
                            $productID = explode('@@@',$product_values[$i])[1];
        
                            $employee_product_incentive = $this->input->post('employee_product_incentive_' . $productID);
                            $product_price = $this->input->post('product_price_' . $productID);
                            $product_original_price = $this->input->post('product_original_price_' . $productID); 
                            $is_discount_applied = $this->input->post('is_discount_applied_' . $productID); 
                            $product_quantity = $this->input->post('product_quantity_' . $productID); 
                            $total_single_product_price = $this->input->post('single_product_total_hidden_' . $productID); 
                                
                            ////product discount related start

                            $is_product_discount_applied = $this->input->post('is_product_discount_applied_' . $productID);
                            $product_discount_row_id = $this->input->post('product_discount_row_id_' . $productID);
                            $product_discount_in = $this->input->post('product_discount_in_' . $productID);
                            $product_discount_type = $this->input->post('product_discount_type_' . $productID);
                            $product_discount_value = $this->input->post('product_discount_value_' . $productID);

                            //discount
                            $product_discount_slab_min = $this->input->post('product_discount_slab_min_' . $productID); 
                            $product_discount_slab_max = $this->input->post('product_discount_slab_max_' . $productID);
                            $product_slab_increment = $this->input->post('product_slab_increment_' . $productID);
                            $product_applied_flexible_slab = $this->input->post('product_applied_flexible_slab_' . $productID);
                            $product_received_discount = $this->input->post('product_received_discount_' . $productID);

                            $received_total_service = $total_product_amount + $old_total_product_amount;
                            if($received_total_service != "" && $received_total_service != "0.00" && $received_total_service != null && $received_total_service != 0){
                                $price_share_in_total_service = (float)(($total_single_product_price/$received_total_service) * 100);
                                $discount_share_membership_amount = (float)((($membership_product_discount_amount + $old_membership_product_discount_amount) * $price_share_in_total_service) / 100);
                            }else{
                                $discount_share_membership_amount = 0;
                            }
        
                            $discount_share_membership_amount_per_product = $discount_share_membership_amount/$product_quantity;
        
                            $total_single_product_discount = $discount_share_membership_amount;
                            $single_product_discounted_amount = $total_single_product_price - $total_single_product_discount;
        
                            $stylist_data = array(
                                'booking_id' 		    => $booking_id,
                                'branch_id' 			=> $this->session->userdata('branch_id'),
                                'salon_id' 				=> $this->session->userdata('salon_id'),
                                'customer_name' 		=> $customer_id,
                                'stylist_id' 		    => $stylist,
                                'category_id'     		=> $categoryID,
                                'product_id'     		=> $productID,
                                'single_product_price'     	    => $product_price,
                                'original_single_product_price' => $product_original_price,
                                'quantity'                      => $product_quantity,
                                'total_product_price'           => $total_single_product_price,
                                'created_on'            => date("Y-m-d H:i:s"),
                                'booking_date'          => date("Y-m-d",strtotime($this->input->post('booking_date'))),
                                
                                'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                                'received_discount_amount_per_product_while_booking'     	=> $discount_share_membership_amount_per_product,
                                'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                                'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,
                                
                                'is_discount_applied'                           => $is_product_discount_applied,
                                'product_discount_row_id'                       => $product_discount_row_id,

                                'product_discount_in'     	                    => $product_discount_in,
                                'product_discount_type'     	                => $product_discount_type,
                                'product_discount_value'     	                => $product_discount_value,
                                
                                'product_discount_slab_min'     	            => $product_discount_slab_min,
                                'product_discount_slab_max'     	            => $product_discount_slab_max,
                                'product_slab_increment'     	                => $product_slab_increment,
                                'product_applied_flexible_slab'     	        => $product_applied_flexible_slab,
                                'product_received_discount'     	            => $product_received_discount,          
                                'stylist_incentive_for_single_product'          => $employee_product_incentive
                            );
                            $this->db->insert('tbl_only_product_booking_details', $stylist_data);
                        }
                    }
                    
                    $status = true;
                }else{
                    $status = false;
                }
            }else{
                $status = false;
            }
        }else{
            $customer_id = $this->input->post('customer_name');
            $stylist = $this->input->post('employee');
            $is_member = $this->input->post('is_member');
            $membership_id = $this->input->post('membership_id');
            $note = $this->input->post('note');
            $reminder = $this->input->post('reminder');
            $payment_method = $this->input->post('payment_method');

            $product_values = $this->input->post('service_name_check');
            $products = array_map(function($item) {
                $parts = explode('@@@', $item);
                return isset($parts[1]) ? $parts[1] : null;
            }, $product_values);
            
            $products = array_filter($products);

            $total_product_amount = $this->input->post('total-product-amount');
            $product_payable_amount = $this->input->post('product_payable_hidden');
            $payable_amount = $this->input->post('payable_hidden');
            $total_discount_hidden = $this->input->post('total_discount_hidden');
            $booking_amount = $this->input->post('booking_amount_hidden');
            $gst_amount = $this->input->post('gst_amount_hidden');
            $grand_total_amount = $this->input->post('grand_total_hidden');
            
            $membership_discount_type = $this->input->post('membership_discount_type');
            $membership_product_discount_amount = $this->input->post('membership_product_discount_amount_hidden');
            $membership_product_discount = $this->input->post('membership_product_discount');

            $booking_data = array(
                'branch_id' 			=> $this->session->userdata('branch_id'),
                'salon_id' 				=> $this->session->userdata('salon_id'),
                'booking_type' 		    => '1',
                'customer_name' 		=> $customer_id,
                'is_membership_booking' => $is_member == '1' ? $is_member : '0',
                'membership_id' 		=> $membership_id,
                'membership_discount_type'	=> $membership_discount_type,
                'm_product_discount' 	=> $membership_product_discount,
                'm_product_discount_amount' 	=> $membership_product_discount_amount,
                'products' 		        => !empty($products) ? implode(',',$products) : '',
                'total_product_price'   => $total_product_amount,
                'product_price'         => $product_payable_amount,
                'payble_price'          => $payable_amount,
                'total_discount_amount' => $total_discount_hidden,
                'booking_amount'        => $booking_amount,
                'gst_amount'            => $gst_amount,
                
                'is_gst_applicable'     => $this->input->post('is_gst_applicable') == '1' ? $this->input->post('is_gst_applicable') : '0',
                'salon_gst_no'          => $this->input->post('salon_gst_no'),
                'salon_gst_rate'        => $this->input->post('salon_gst_rate'),

                'amount_to_paid'        => $grand_total_amount,
                'reminder' 				=> $reminder,
                'payment_method' 		=> $payment_method != "" ? '1' : '0',
                'note'   				=> $note,
                'stylist_id'			=> $stylist,
                'booking_date'          => date("Y-m-d",strtotime($this->input->post('booking_date'))),
                'created_on'            => date("Y-m-d H:i:s"),
            );
            // echo '<pre>'; print_r($_POST); exit();
            $this->db->insert('tbl_new_booking', $booking_data);
            $booking_id = $this->db->insert_id();

            $order_counts = $this->get_saloon_branch_total_orders($this->session->userdata('salon_id'),$this->session->userdata('branch_id'));
            $branch_formatted = sprintf('%03d', $this->session->userdata('branch_id'));
            $salon_formatted = sprintf('%03d', $this->session->userdata('salon_id'));
            $count_formatted = sprintf('%04d', ($order_counts + 1));
            $invoice_no = $branch_formatted.$salon_formatted.$count_formatted;

            $update_data = array(
                'receipt_no'    =>  $invoice_no,
            );
            $this->db->where('id',$booking_id);
            $this->db->update('tbl_new_booking',$update_data);
            
            if($product_values != "" && is_array($product_values) && !empty($product_values)){
                for($i=0;$i<count($product_values);$i++){
                    $categoryID = explode('@@@',$product_values[$i])[0];
                    $productID = explode('@@@',$product_values[$i])[1];

                    $employee_product_incentive = $this->input->post('employee_product_incentive_' . $productID);
                    $product_price = $this->input->post('product_price_' . $productID);
                    $product_original_price = $this->input->post('product_original_price_' . $productID); 
                    $is_discount_applied = $this->input->post('is_discount_applied_' . $productID); 
                    $product_quantity = $this->input->post('product_quantity_' . $productID); 
                    $total_single_product_price = $this->input->post('single_product_total_hidden_' . $productID); 
                                
                    ////product discount related start

                    $is_product_discount_applied = $this->input->post('is_product_discount_applied_' . $productID);
                    $product_discount_row_id = $this->input->post('product_discount_row_id_' . $productID);
                    $product_discount_in = $this->input->post('product_discount_in_' . $productID);
                    $product_discount_type = $this->input->post('product_discount_type_' . $productID);
                    $product_discount_value = $this->input->post('product_discount_value_' . $productID);

                    //discount
                    $product_discount_slab_min = $this->input->post('product_discount_slab_min_' . $productID); 
                    $product_discount_slab_max = $this->input->post('product_discount_slab_max_' . $productID);
                    $product_slab_increment = $this->input->post('product_slab_increment_' . $productID);
                    $product_applied_flexible_slab = $this->input->post('product_applied_flexible_slab_' . $productID);
                    $product_received_discount = $this->input->post('product_received_discount_' . $productID);

                    $received_total_service = $total_product_amount;
                    if($received_total_service != "" && $received_total_service != "0.00" && $received_total_service != null && $received_total_service != 0){
                        $price_share_in_total_service = (float)(($total_single_product_price/$received_total_service) * 100);
                        $discount_share_membership_amount = (float)(($membership_product_discount_amount * $price_share_in_total_service) / 100);
                    }else{
                        $discount_share_membership_amount = 0;
                    }

                    $discount_share_membership_amount_per_product = $discount_share_membership_amount/$product_quantity;

                    $total_single_product_discount = $discount_share_membership_amount;
                    $single_product_discounted_amount = $total_single_product_price - $total_single_product_discount;

                    $stylist_data = array(
                        'booking_id' 		    => $booking_id,
                        'branch_id' 			=> $this->session->userdata('branch_id'),
                        'salon_id' 				=> $this->session->userdata('salon_id'),
                        'customer_name' 		=> $customer_id,
                        'stylist_id' 		    => $stylist,
                        'category_id'     		=> $categoryID,
                        'product_id'     		=> $productID,
                        'single_product_price'     	    => $product_price,
                        'original_single_product_price' => $product_original_price,
                        'quantity'                      => $product_quantity,
                        'total_product_price'           => $total_single_product_price,
                        'created_on'            => date("Y-m-d H:i:s"),
                        'booking_date'          => date("Y-m-d",strtotime($this->input->post('booking_date'))),
                        
                        'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                        'received_discount_amount_per_product_while_booking'     	=> $discount_share_membership_amount_per_product,
                        'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                        'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,
                                
                        'is_discount_applied'                           => $is_product_discount_applied,
                        'product_discount_row_id'                       => $product_discount_row_id,

                        'product_discount_in'     	                    => $product_discount_in,
                        'product_discount_type'     	                => $product_discount_type,
                        'product_discount_value'     	                => $product_discount_value,
                        
                        'product_discount_slab_min'     	            => $product_discount_slab_min,
                        'product_discount_slab_max'     	            => $product_discount_slab_max,
                        'product_slab_increment'     	                => $product_slab_increment,
                        'product_applied_flexible_slab'     	        => $product_applied_flexible_slab,
                        'product_received_discount'     	            => $product_received_discount,       
                        'stylist_incentive_for_single_product'          => $employee_product_incentive
                    );
                    $this->db->insert('tbl_only_product_booking_details', $stylist_data);
                }
            }
            
            $status = true;
        }

		return array('status'=>$status,'booking_id'=>$booking_id);
	} 
	public function get_salon_services_list_by_selected_stylist($stylist_id){
        $this->db->where('is_deleted','0');
        $this->db->where('id', $stylist_id);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_employee');
        return $result->row();
    } 
	public function get_all_booking_for_calendar(){
		$this->db->select('tbl_new_booking.*,tbl_salon_customer.email,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone');
		$this->db->from('tbl_new_booking');
		$this->db->join('tbl_salon_customer', 'tbl_new_booking.customer_name = tbl_salon_customer.id', 'left');
		$this->db->where('tbl_new_booking.is_deleted', '0');
        $this->db->where('tbl_new_booking.booking_type','0');
		$this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('tbl_new_booking.id', 'DESC');
		$result = $this->db->get();
		return $result->result();
	} 
	public function get_all_booking_list_for_selecteddate_ajax(){
		$this->db->select('tbl_new_booking.*,tbl_salon_emp_service.service_name_marathi,tbl_salon_emp_service.service_name, tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_employee.full_name as employee_name');
		$this->db->join('tbl_salon_customer', 'tbl_new_booking.customer_name = tbl_salon_customer.id', 'left');
		$this->db->join('tbl_salon_employee', 'tbl_new_booking.stylist = tbl_salon_employee.id', 'left');
		$this->db->join('tbl_salon_emp_service', 'tbl_new_booking.services = tbl_salon_emp_service.id', 'left');
		$booking_date = $this->input->post('booking_date');
		$this->db->where('tbl_new_booking.is_deleted', '0');
		$this->db->where('tbl_new_booking.booking_date', $booking_date);
        $this->db->where('tbl_new_booking.booking_type','0');
		$this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_new_booking')->result();
		if (!empty($result)) {
			echo json_encode($result);
		} else{
			echo 0;
		}
	} 
	public function get_customer_info_for_calender(){
		$this->db->where('is_deleted', '0');
        $this->db->where('is_guest', '0');
		$this->db->where('booking_status', '0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_customer');
		return $result->result();
	} 
	public function get_customer_info($id){
		$this->db->where('is_deleted', '0');
		$this->db->where('id', $id);
		$result = $this->db->get('tbl_salon_customer');
		return $result->row();
	} 
	public function get_branch_info($id){
        $this->db->select('tbl_branch.*,tbl_salon.salon_name');
        $this->db->join('tbl_salon', 'tbl_salon.id = tbl_branch.salon_id');
		$this->db->where('tbl_branch.is_deleted', '0');
		$this->db->where('tbl_branch.id', $id);
		$result = $this->db->get('tbl_branch');
		return $result->row();
	} 
	public function get_salon_services_list_for_calender(){
		$this->db->where('is_deleted', '0');
		$this->db->where('status', '1');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_emp_service');
		return $result->result();
	} 
	public function get_all_booking(){
		$this->db->where('is_deleted', '0');
        $this->db->where('booking_type','0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('id', 'DESC');
		$result = $this->db->get('tbl_new_booking');
		return $result->result();
	} 
    public function get_single_booking(){
        $this->db->where('is_deleted', '0');
        $this->db->where('booking_type','0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_new_booking');
        return $result->row();
    }
    public function get_service_for_booking(){
        $this->db->select('tbl_sub_category.*,tbl_salon_service_category.sup_category');
        $this->db->from('tbl_sub_category');
        $this->db->join('tbl_salon_service_category', 'tbl_salon_service_category.id = tbl_sub_category.sup_category', 'left');
        $this->db->where('tbl_sub_category.is_deleted', '0');
        $result = $this->db->get();
        return $result->result();
    }
    public function get_shift_name_for_employee(){
        $stylistId = $this->input->post('stylist_id');
        $this->db->select('tbl_salon_employee.*,tbl_new_booking.time_slot,tbl_new_booking.stylist, tbl_shift_master.id, tbl_shift_master.lunch_start_time, tbl_shift_master.lunch_close_time, tbl_shift_master.shift_in_time, tbl_shift_master.shift_out_time, tbl_booking_rules.session_avg_duration ,tbl_booking_rules.offset_session_time,tbl_booking_rules.on_off_btn,tbl_booking_rules.salon_start_time,tbl_booking_rules.salon_end_time');
        $this->db->from('tbl_salon_employee');
        $this->db->join('tbl_shift_master', 'tbl_shift_master.id = tbl_salon_employee.shift_name', 'left');
        $this->db->join('tbl_booking_rules', 'tbl_booking_rules.id = tbl_booking_rules.branch_id', 'left');
        $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_new_booking.branch_id', 'left');
        $this->db->where('tbl_salon_employee.id', $stylistId);
        $query = $this->db->get();
        if($query->num_rows() > 0){
            $result = $query->row(); 
            echo json_encode(array(
                'shift_in_time' 		=> $result->shift_in_time,
                'shift_out_time' 		=> $result->shift_out_time,
                'session_avg_duration' 	=> $result->session_avg_duration,
                'offset_session_time' 	=> $result->offset_session_time,
                'on_off_btn' 			=> $result->on_off_btn,
                'time_slot' 			=> $result->time_slot,
                'salon_start_time' 		=> $result->salon_start_time,
                'salon_end_time' 		=> $result->salon_end_time,
                'lunch_start_time' 		=> $result->lunch_start_time,
                'lunch_close_time' 		=> $result->lunch_close_time,
            ));
        }
    }  
    public function get_customer_details($id){
		$this->db->select('tbl_salon_customer.*,cities.name as city_name,states.name as state_name');		
        $this->db->where('tbl_salon_customer.id',$id);
        $this->db->where('tbl_salon_customer.is_deleted','0');
        // $this->db->where('tbl_salon_customer.branch_id',$this->session->userdata('branch_id'));
        // $this->db->where('tbl_salon_customer.salon_id',$this->session->userdata('salon_id'));
		$this->db->join('states','states.id = tbl_salon_customer.state','left');
		$this->db->join('cities','cities.id = tbl_salon_customer.city','left');
        $result = $this->db->get('tbl_salon_customer');
		$result = $result->row();
        return $result;
    }  
    public function get_customer_details_all($id){
		$this->db->select('tbl_salon_customer.*,cities.name as city_name,states.name as state_name');		
        $this->db->where('tbl_salon_customer.id',$id);
        $this->db->where('tbl_salon_customer.is_deleted','0');
		$this->db->join('states','states.id = tbl_salon_customer.state','left');
		$this->db->join('cities','cities.id = tbl_salon_customer.city','left');
        $result = $this->db->get('tbl_salon_customer');
		$result = $result->row();
        return $result;
    } 
    
	public function get_all_salon_customer_list_conditional($registered_from,$branch_id){
		$this->db->select('tbl_salon_customer.*,cities.name as city_name,states.name as state_name');		
		$this->db->join('states','states.id = tbl_salon_customer.state','left');
		$this->db->join('cities','cities.id = tbl_salon_customer.city','left');
        if($registered_from != ''){
            $this->db->where('tbl_salon_customer.registered_from',$registered_from);
        }	
        $this->db->where('tbl_salon_customer.is_guest', '0');
        $this->db->where('tbl_salon_customer.is_deleted','0');
        $this->db->where('tbl_salon_customer.branch_id',$branch_id);
		$this->db->order_by('tbl_salon_customer.id','DESC');
		$result = $this->db->get('tbl_salon_customer');
		return $result->result();		
	}
	public function get_all_salon_customer_list($length, $start, $search){
		$this->db->select('tbl_salon_customer.*,cities.name as city_name,states.name as state_name');		
		$this->db->join('states','states.id = tbl_salon_customer.state','left');
		$this->db->join('cities','cities.id = tbl_salon_customer.city','left');
		if($search !=""){
            $this->db->group_start();
			$this->db->or_like('tbl_salon_customer.full_name',$search);
			$this->db->or_like('tbl_salon_customer.email',$search);
			$this->db->or_like('tbl_salon_customer.customer_phone',$search);
			$this->db->or_like('tbl_salon_customer.dob',$search);
			$this->db->or_like('tbl_salon_customer.rewards_balance',$search);
			$this->db->or_like('tbl_salon_customer.current_pending_amount',$search);
			$this->db->or_like('states.name',$search);
			$this->db->or_like('cities.name',$search);
            $this->db->group_end();
		}	
        if($this->input->post('is_app_customers') == '1'){
            $this->db->where('tbl_salon_customer.registered_from','1');
        }	
        if($this->input->post('is_shop_customers') == '1'){
            $this->db->where('tbl_salon_customer.registered_from','0');
        }

        $ids = $this->input->post('ids') != '' ? json_decode($this->input->post('ids')) : [];

        if (!empty($ids)) {
            $chunks = array_chunk($ids, 500);

            $this->db->group_start();

            foreach ($chunks as $chunk) {
                $this->db->or_where_in('tbl_salon_customer.id', $chunk);
            }

            $this->db->group_end();
        }
	
        $this->db->where('tbl_salon_customer.is_guest','0');
        $this->db->where('tbl_salon_customer.is_deleted','0');
        $this->db->where('tbl_salon_customer.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_customer.salon_id',$this->session->userdata('salon_id'));
		$this->db->order_by('tbl_salon_customer.id','DESC');
		$this->db->limit($length,$start);
		$result = $this->db->get('tbl_salon_customer');
		return $result->result();		
	}
	public function get_all_salon_customer_count($search){
		$this->db->select('tbl_salon_customer.*,cities.name as city_name,states.name as state_name');		
		$this->db->join('states','states.id = tbl_salon_customer.state','left');
		$this->db->join('cities','cities.id = tbl_salon_customer.city','left');
		if($search !=""){
            $this->db->group_start();
			$this->db->or_like('tbl_salon_customer.full_name',$search);
			$this->db->or_like('tbl_salon_customer.email',$search);
			$this->db->or_like('tbl_salon_customer.customer_phone',$search);
			$this->db->or_like('tbl_salon_customer.dob',$search);
			$this->db->or_like('tbl_salon_customer.rewards_balance',$search);
			$this->db->or_like('tbl_salon_customer.current_pending_amount',$search);
			$this->db->or_like('states.name',$search);
			$this->db->or_like('cities.name',$search);
            $this->db->group_end();
		}	
        if($this->input->post('is_app_customers') == '1'){
            $this->db->where('tbl_salon_customer.registered_from','1');
        }	
        if($this->input->post('is_shop_customers') == '1'){
            $this->db->where('tbl_salon_customer.registered_from','0');
        }

        $ids = $this->input->post('ids') != '' ? json_decode($this->input->post('ids')) : [];

        if (!empty($ids)) {
            $chunks = array_chunk($ids, 500);

            $this->db->group_start();

            foreach ($chunks as $chunk) {
                $this->db->or_where_in('tbl_salon_customer.id', $chunk);
            }

            $this->db->group_end();
        }

        $this->db->where('tbl_salon_customer.is_guest','0');
        $this->db->where('tbl_salon_customer.is_deleted','0');
        $this->db->where('tbl_salon_customer.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_customer.salon_id',$this->session->userdata('salon_id'));
		$this->db->order_by('tbl_salon_customer.id','DESC');
		$result = $this->db->get('tbl_salon_customer');
		return $result->num_rows();
	}
    public function get_customer_all_details_ajax(){
        $customer = $this->input->post('customer');
        $this->db->where('tbl_salon_customer.id',$customer);
        $this->db->where('tbl_salon_customer.is_deleted','0');
        $result = $this->db->get('tbl_salon_customer');
		$result = $result->row();
        echo json_encode($result);
    } 
    public function get_customer_membership_details_ajax(){
        $customer = $this->input->post('customer');
        $this->db->where('tbl_salon_customer.id',$customer);
        $this->db->where('tbl_salon_customer.is_deleted','0');
        $result = $this->db->get('tbl_salon_customer');
		$result = $result->row();

        if(!empty($result)){
            if($result->membership_id != "" && $result->membership_id != null && $result->membership_id != "0"){
                $this->db->select('tbl_customer_membership_history.*, tbl_memebership.membership_name');
                $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_customer_membership_history.membership_id');
                $this->db->where('tbl_customer_membership_history.id',$result->membership_pkey);
                $this->db->where('tbl_customer_membership_history.customer_id', $result->id);
                $this->db->where('DATE(tbl_customer_membership_history.membership_start) <=', date('Y-m-d'));
                $this->db->where('DATE(tbl_customer_membership_history.membership_end) >=', date('Y-m-d'));
                $this->db->where('tbl_customer_membership_history.is_deleted','0');
                $this->db->where('tbl_customer_membership_history.membership_status','0');
                $membership_details = $this->db->get('tbl_customer_membership_history')->row();

                if(!empty($membership_details)){
                    $membership = $membership_details;
                    $is_member = '1';
                }else{
                    $membership = array();
                    $is_member = '0';
                }
            }else{
                $membership = array();
                $is_member = '0';
            }
        }
        $custom = array(
            'membership_details'    =>  $membership,
            'is_member'             =>  $is_member,
            'single'                =>  $result,
        );

        echo json_encode($custom);
    } 
    
    public function get_customer_single_details_ajax(){
        $customer = $this->input->post('customer');
        $this->db->where('tbl_salon_customer.id',$customer);
        $this->db->where('tbl_salon_customer.is_deleted','0');
        $result = $this->db->get('tbl_salon_customer');
		$single = $result->row();
        echo json_encode($single);
    }

    public function get_customer_package_details_ajax(){
        $customer = $this->input->post('customer');
        $this->db->where('tbl_salon_customer.id',$customer);
        $this->db->where('tbl_salon_customer.is_deleted','0');
        $result = $this->db->get('tbl_salon_customer');
		$single = $result->row();

        $this->db->select('tbl_customer_package_allocations.*, tbl_package.package_name, tbl_package.bg_color, tbl_package.text_color');
        $this->db->join('tbl_package', 'tbl_package.id = tbl_customer_package_allocations.package_id');
        $this->db->where('tbl_customer_package_allocations.customer_name',$customer);
        $this->db->where('tbl_customer_package_allocations.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_customer_package_allocations.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('DATE(tbl_customer_package_allocations.package_start_date) <=', date('Y-m-d'));
        $this->db->where('DATE(tbl_customer_package_allocations.package_end_date) >=', date('Y-m-d'));
        $this->db->where('tbl_customer_package_allocations.is_deleted','0');
        $this->db->where('tbl_customer_package_allocations.is_lapsed','0');
        $result = $this->db->get('tbl_customer_package_allocations');
		$result = $result->result();
        
        if(!empty($single) && $single->gender != ""){
            $this->db->where('tbl_package.gender',$single->gender);
        }
        $this->db->where('tbl_package.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_package.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_package.is_deleted','0');
        $available_package_details = $this->db->get('tbl_package');
		$available_package_details = $available_package_details->result();

        $custom = array(
            'available_package_details'    =>  $available_package_details,
            'package_details'    =>  $result,
            'is_package'         =>  !empty($result) ? '1' : '0',
            'single'             =>  $single,
        );

        echo json_encode($custom);
    } 
    
    public function get_customer_completed_bookings_ajx(){
        $customer = $this->input->post('customer');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('booking_type','0');
        $this->db->where('booking_status','5');
        $this->db->where('payment_status','0');
        $this->db->where('is_deleted','0');
        $this->db->where('customer_name', $customer);
        $bookings = $this->db->get('tbl_new_booking')->result();
        echo json_encode($bookings);
    } 
    public function get_customer_completed_product_bookings_ajx(){
        $customer = $this->input->post('customer');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('booking_type','1');
        $this->db->where('booking_status','1');
        $this->db->where('payment_status','0');
        $this->db->where('is_deleted','0');
        $this->db->where('customer_name', $customer);
        $bookings = $this->db->get('tbl_new_booking')->result();
        echo json_encode($bookings);
    } 
    
	public function get_customer_giftcard_amount($id){
        $this->db->select('tbl_booking_payment_entry.*,tbl_salon_customer.email,tbl_salon_customer.address,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_gift_card.gender, tbl_gift_card.gift_card_code, tbl_gift_card.gift_name, tbl_gift_card.discount, tbl_gift_card.discount_in, tbl_gift_card.regular_price, tbl_gift_card.gift_price, tbl_gift_card.bg_color_input, tbl_gift_card.bg_color, tbl_gift_card.text_color_input, tbl_gift_card.text_color, tbl_gift_card.min_booking_amt');
        $this->db->join('tbl_gift_card', 'tbl_gift_card.id = tbl_booking_payment_entry.giftcard_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_payment_entry.customer_id');
        $this->db->where('tbl_booking_payment_entry.is_deleted','0');
        $this->db->where('tbl_booking_payment_entry.id',$id);
        $this->db->where('tbl_booking_payment_entry.type','3');
        $this->db->order_by('tbl_booking_payment_entry.updated_on','desc');
        $result = $this->db->get('tbl_booking_payment_entry');
		return $result->row();
	} 
    public function get_all_assigned_giftcard_new(){
        $this->db->select('tbl_booking_payment_entry.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_gift_card.gender, tbl_gift_card.gift_name, tbl_gift_card.bg_color_input, tbl_gift_card.bg_color, tbl_gift_card.text_color_input, tbl_gift_card.text_color');
        $this->db->join('tbl_gift_card', 'tbl_gift_card.id = tbl_booking_payment_entry.giftcard_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_payment_entry.customer_id');
        $this->db->where('tbl_booking_payment_entry.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_payment_entry.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_payment_entry.is_deleted','0');
        $this->db->where('tbl_booking_payment_entry.type','3');
        $this->db->order_by('tbl_booking_payment_entry.created_on','desc');
        $result = $this->db->get('tbl_booking_payment_entry');
		$result = $result->result();
        return $result;
    } 
    public function get_all_assigned_package_new(){
        $this->db->select('tbl_customer_package_allocations.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_package.package_name, tbl_package.bg_color, tbl_package.text_color');
        $this->db->join('tbl_package', 'tbl_package.id = tbl_customer_package_allocations.package_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_package_allocations.customer_name');
        $this->db->where('tbl_customer_package_allocations.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_customer_package_allocations.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_customer_package_allocations.is_deleted','0');
        $this->db->order_by('tbl_customer_package_allocations.updated_on','desc');
        $result = $this->db->get('tbl_customer_package_allocations');
		$result = $result->result();
        return $result;
    } 
    public function get_customer_details_ajax(){
        $keyword = $this->input->post('keyword');
        $this->db->select('tbl_salon_customer.*, cities.name as city_name, states.name as state_name');
        $this->db->where('tbl_salon_customer.is_deleted', '0');
        $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
        $this->db->group_start();
        $this->db->like('tbl_salon_customer.customer_phone', $keyword);
        $this->db->or_like('tbl_salon_customer.full_name', $keyword);
        $this->db->group_end();
        $this->db->join('states', 'states.id = tbl_salon_customer.state', 'left');
        $this->db->join('cities', 'cities.id = tbl_salon_customer.city', 'left');
        $result = $this->db->get('tbl_salon_customer');
        $result = $result->result();
        echo json_encode($result);
    }
    
    public function get_reward_setup_ajx(){
        $gender = $this->input->post('gender');
        $bookingID = $this->input->post('bookingID');
        $this->db->where('is_deleted','0');
        $this->db->where('id', $bookingID);
        $single_booking = $this->db->get('tbl_new_booking')->row();

		$this->db->select('tbl_reward_point.*');		
        $this->db->where('tbl_reward_point.gender',$gender);
        $this->db->where('tbl_reward_point.is_deleted','0');
        $this->db->where('tbl_reward_point.status','1');
        $this->db->where('tbl_reward_point.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_reward_point.salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_reward_point');
		$result = $result->row();
        echo json_encode($result);
    }	
    public function get_customer_details_for_booking_ajax(){
        $phone = $this->input->post('phone');
        $id = $this->input->post('id');
        $order_type = $this->input->post('order_type');

		$this->db->select('tbl_salon_customer.*,cities.name as city_name,states.name as state_name');	
        if($id == ""){	
            $this->db->where('tbl_salon_customer.customer_phone',$phone);
        }else{
            $this->db->where('tbl_salon_customer.id',$id);
        }
        $this->db->where('tbl_salon_customer.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_customer.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_customer.is_deleted','0');
		$this->db->join('states','states.id = tbl_salon_customer.state','left');
		$this->db->join('cities','cities.id = tbl_salon_customer.city','left');
        $result = $this->db->get('tbl_salon_customer');
		$result = $result->row();
        if(!empty($result)){
            if($result->membership_id != "" && $result->membership_id != null && $result->membership_id != "0"){
                $this->db->select('tbl_customer_membership_history.*, tbl_memebership.membership_name');
                $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_customer_membership_history.membership_id');
                $this->db->where('tbl_customer_membership_history.id',$result->membership_pkey);
                $this->db->where('tbl_customer_membership_history.customer_id', $result->id);
                $this->db->where('DATE(tbl_customer_membership_history.membership_start) <=', date('Y-m-d'));
                $this->db->where('DATE(tbl_customer_membership_history.membership_end) >=', date('Y-m-d'));
                $this->db->where('tbl_customer_membership_history.is_deleted','0');
                $this->db->where('tbl_customer_membership_history.membership_status','0');
                $membership_details = $this->db->get('tbl_customer_membership_history')->row();

                if(!empty($membership_details)){
                    $membership = $membership_details;
                    $is_member = '1';
                }else{
                    $membership = array();
                    $is_member = '0';
                }
            }else{
                $membership = array();
                $is_member = '0';
            }

            $this->db->select('tbl_booking_payment_entry.*, tbl_new_booking.booking_payment_id, tbl_new_booking.receipt_no, tbl_new_booking.booking_type');
            $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_booking_payment_entry.booking_id');
            $this->db->where('tbl_booking_payment_entry.customer_id', $result->id);
            $this->db->where('tbl_booking_payment_entry.is_deleted', '0');
            $this->db->where('tbl_new_booking.booking_type', $order_type);
            $this->db->order_by('tbl_booking_payment_entry.payment_date', 'desc');
            $payments = $this->db->get('tbl_booking_payment_entry')->result();
            
            $this->db->select('tbl_service_payment.*');
            $this->db->where('tbl_service_payment.customer_name',$result->id);
            $this->db->where('tbl_service_payment.is_deleted','0');
            $this->db->order_by('tbl_service_payment.id','desc');
            $product_payments = $this->db->get('tbl_service_payment')->result();

            $this->db->where('tbl_new_booking.customer_name', $result->id);
            $this->db->where('tbl_new_booking.is_deleted', '0');
            $this->db->where('tbl_new_booking.booking_type',$order_type);
            $this->db->order_by('tbl_new_booking.booking_date', 'asc');
            $order_history = $this->db->get('tbl_new_booking')->result();
            
            $this->db->select('tbl_booking_services_details.*, tbl_new_booking.receipt_no, tbl_new_booking.booking_payment_id , tbl_new_booking.booking_type, tbl_new_booking.is_direct_billing, tbl_salon_emp_service.service_name, tbl_salon_emp_service.service_name_marathi,tbl_salon_employee.full_name');
            $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
            $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
            $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_booking_services_details.booking_id');
            $this->db->where('tbl_booking_services_details.customer_name', $result->id);
            // $this->db->order_by('tbl_booking_services_details.service_from', 'asc');
            $this->db->where('tbl_booking_services_details.is_deleted', '0');
            $this->db->order_by('tbl_booking_services_details.id', 'desc');
            $this->db->where('tbl_new_booking.booking_type',$order_type);
            $order_service_history = $this->db->get('tbl_booking_services_details')->result();
            
            $this->db->select('tbl_only_product_booking_details.*, tbl_new_booking.booking_date, tbl_new_booking.booking_type, tbl_product.product_name');
            $this->db->join('tbl_product', 'tbl_product.id = tbl_only_product_booking_details.product_id');
            $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
            $this->db->where('tbl_only_product_booking_details.customer_name', $result->id);
            $this->db->where('tbl_only_product_booking_details.is_deleted', '0');
            $this->db->order_by('tbl_only_product_booking_details.id', 'desc');
            $this->db->where('tbl_new_booking.booking_type',$order_type);
            $order_product_history = $this->db->get('tbl_only_product_booking_details')->result();

            $this->db->where('customer_id', $result->id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('is_deleted', '0');
            $resch_count = $this->db->get('tbl_customer_rescheduled_bookings')->num_rows();

            $this->db->where('customer_name', $result->id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('is_deleted', '0');
            $this->db->where('service_status', '1');
            $completed_count = $this->db->get('tbl_booking_services_details')->num_rows();

            $this->db->where('customer_name', $result->id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('is_deleted', '0');
            $this->db->where('service_status', '2');
            $cancelled_count = $this->db->get('tbl_booking_services_details')->num_rows();

            $this->db->where('customer_name', $result->id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('is_deleted', '0');
            $this->db->where('service_status', '0');
            $pending_count = $this->db->get('tbl_booking_services_details')->num_rows();

            $this->db->select('tbl_customer_package_allocations.*, tbl_package.package_name, tbl_package.bg_color, tbl_package.text_color');
            $this->db->join('tbl_package', 'tbl_package.id = tbl_customer_package_allocations.package_id');
            $this->db->where('tbl_customer_package_allocations.customer_name',$result->id);
            $this->db->where('tbl_customer_package_allocations.branch_id',$this->session->userdata('branch_id'));
            $this->db->where('tbl_customer_package_allocations.salon_id',$this->session->userdata('salon_id'));
            $this->db->where('DATE(tbl_customer_package_allocations.package_start_date) <=', date('Y-m-d'));
            $this->db->where('DATE(tbl_customer_package_allocations.package_end_date) >=', date('Y-m-d'));
            $this->db->where('tbl_customer_package_allocations.is_deleted','0');
            $this->db->where('tbl_customer_package_allocations.is_lapsed','0');
            $packages = $this->db->get('tbl_customer_package_allocations');
            $packages = $packages->result();

            $counts = array(
                'cancelled'     =>  $cancelled_count,
                'pending'       =>  $pending_count,
                'completed'     =>  $completed_count,
                'rescheduled'   =>  $resch_count,
            );

            // echo '<pre>'; print_r($order_service_history); exit();
            echo json_encode(
                array(
                    'customer'              =>  $result,
                    'is_member'             =>  $is_member,
                    'membership'            =>  $membership,
                    'order_history'         =>  $order_history,
                    'order_service_history' =>  $order_service_history,
                    'order_product_history' =>  $order_product_history,
                    'payments'              =>  $payments,
                    'product_payments'      =>  $product_payments,
                    'counts'                =>  $counts,
                    'order_type'            =>  $order_type,
                    'packages'              =>  $packages,
                )
            );
        }else{
            echo 0;
        }
    } 
    
    public function get_customer_membership_details($id){
		$this->db->select('tbl_salon_customer.*,cities.name as city_name,states.name as state_name');	
        $this->db->where('tbl_salon_customer.id',$id);
        $this->db->where('tbl_salon_customer.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_customer.salon_id',$this->session->userdata('salon_id'));
		$this->db->join('states','states.id = tbl_salon_customer.state','left');
		$this->db->join('cities','cities.id = tbl_salon_customer.city','left');
        $result = $this->db->get('tbl_salon_customer');
		$result = $result->row();
        if(!empty($result)){
            if($result->membership_id != "" && $result->membership_id != null && $result->membership_id != "0"){
                $this->db->select('tbl_customer_membership_history.*, tbl_memebership.membership_name');
                $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_customer_membership_history.membership_id');
                $this->db->where('tbl_customer_membership_history.id',$result->membership_pkey);
                $this->db->where('tbl_customer_membership_history.customer_id', $result->id);
                $this->db->where('DATE(tbl_customer_membership_history.membership_start) <=', date('Y-m-d'));
                $this->db->where('DATE(tbl_customer_membership_history.membership_end) >=', date('Y-m-d'));
                $this->db->where('tbl_customer_membership_history.is_deleted','0');
                $this->db->where('tbl_customer_membership_history.membership_status','0');
                $membership_details = $this->db->get('tbl_customer_membership_history')->row();

                if(!empty($membership_details)){
                    $membership = $membership_details;
                    $is_member = '1';
                }else{
                    $membership = array();
                    $is_member = '0';
                }
            }else{
                $membership = array();
                $is_member = '0';
            }

            return
                array(
                    'customer'              =>  $result,
                    'is_member'             =>  $is_member,
                    'membership'            =>  $membership,
                );
        }else{
            return array(
                'customer'              =>  array(),
                'is_member'             =>  '0',
                'membership'            =>  array(),
            );
        }
    }
	public function get_package_details($id){
		$this->db->where('id', $id);
		$result = $this->db->get('tbl_package')->row();
        return $result;
	} 
	public function get_giftcard_details($id){
		$this->db->where('id', $id);
		$result = $this->db->get('tbl_gift_card')->row();
        return $result;
	} 
	public function get_giftcard_redemption_details($id){
		$this->db->where('id', $id);
		$this->db->where('type', '3');
		$result = $this->db->get('tbl_booking_payment_entry')->row();
        return $result;
	} 
	public function get_package_details_ajax(){
		$package_id = $this->input->post('package_name_id');
		$this->db->where('id', $package_id);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_package')->row();
		if(!empty($result)){
			echo json_encode($result);
		}
	} 
	public function get_time_slot_by_shift_ajax(){
		$shift_name_id = $this->input->post('shift_name_id');
		$this->db->where('id', $shift_name_id);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));    
		$result = $this->db->get('tbl_shift_master')->row(); 
		if(!empty($result)){
			echo json_encode($result);
		}
	}
	public function get_booking_all_service_details($booking,$branch_id,$salon_id){	
        $this->db->select('tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_sub_category.sub_category_marathi,tbl_booking_services_details.*,tbl_salon_employee.full_name,tbl_salon_emp_service.category_image,tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_salon_emp_service.service_duration,tbl_salon_emp_service.service_description,tbl_salon_emp_service.sub_category');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
        $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
		$this->db->where('tbl_booking_services_details.booking_id', $booking);
		$this->db->where('tbl_booking_services_details.branch_id', $branch_id);
		$this->db->where('tbl_booking_services_details.salon_id', $salon_id); 
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->order_by('tbl_booking_services_details.service_from', 'asc');
		$result = $this->db->get('tbl_booking_services_details')->result(); 
		return $result;
	} 
	public function get_booking_all_service_product_details($service_id,$service_details_id,$booking,$branch_id,$salon_id){	
        $this->db->select('tbl_booking_services_products_details.*,tbl_product.product_name,tbl_product.product_photo');
        $this->db->join('tbl_product','tbl_product.id = tbl_booking_services_products_details.product_id');
		$this->db->where('tbl_booking_services_products_details.service_id', $service_id);
		$this->db->where('tbl_booking_services_products_details.booking_service_details_id', $service_details_id);
		$this->db->where('tbl_booking_services_products_details.booking_id', $booking);
		$this->db->where('tbl_booking_services_products_details.branch_id', $branch_id);
		$this->db->where('tbl_booking_services_products_details.salon_id', $salon_id); 
        $this->db->where('tbl_booking_services_products_details.is_deleted', '0');
		$result = $this->db->get('tbl_booking_services_products_details')->result(); 
		return $result;
	} 
	public function get_booking_single_service_details($booking,$service){	
		$this->db->where('booking_id', $booking);
		$this->db->where('service_id', $service);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id')); 
        $this->db->where('is_deleted', '0');
		$result = $this->db->get('tbl_booking_services_details')->row(); 
		return $result;
	} 
	public function get_booking_single_service_details_stylist($booking,$service,$stylist){	
		$this->db->where('booking_id', $booking);
		$this->db->where('service_id', $service);
		$this->db->where('stylist_id', $stylist);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id')); 
        $this->db->where('is_deleted', '0');
		$result = $this->db->get('tbl_booking_services_details')->row(); 
		return $result;
	} 
	public function get_service_stylists_single($id){	
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation', 'left');
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('find_in_set("'.$id.'", tbl_salon_employee.service_name) <> 0');
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        if($this->input->post('employee_selection_rule') == '2' && $this->input->post('employee') != ""){
            $this->db->where('tbl_salon_employee.id', $this->input->post('employee'));
        }
        $this->db->where('tbl_emp_designation.designation', 'Stylist');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
	} 
	public function get_service_stylists($id){	
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation', 'left');
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('find_in_set("'.$id.'", tbl_salon_employee.service_name) <> 0');
        if($this->input->post('employee_selection_rule') == '2' && $this->input->post('employee') != ""){
            $this->db->where('tbl_salon_employee.id', $this->input->post('employee'));
        }
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_emp_designation.designation', 'Stylist');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
	} 
	public function get_service_stylists_all($id,$branch_id,$salon_id){	
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation', 'left');
        $this->db->where('tbl_salon_employee.branch_id', $branch_id);
        $this->db->where('tbl_salon_employee.salon_id', $salon_id);
        $this->db->where('find_in_set("'.$id.'", tbl_salon_employee.service_name) <> 0');
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_emp_designation.designation', 'Stylist');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
	} 
    public function get_service_stylists_all_single($id,$branch_id,$salon_id,$stylist_id){	
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation', 'left');
        $this->db->where('tbl_salon_employee.branch_id', $branch_id);
        $this->db->where('tbl_salon_employee.salon_id', $salon_id);
        if($stylist_id != ""){
            $this->db->where('tbl_salon_employee.id', $stylist_id);
        }
        $this->db->where('find_in_set("'.$id.'", tbl_salon_employee.service_name) <> 0');
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_emp_designation.designation', 'Stylist');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
	} 
	public function get_service_details($id){	
		$this->db->where('id', $id);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id')); 
		$result = $this->db->get('tbl_salon_emp_service')->row(); 
		return $result;
	} 
	public function get_service_details_all($id,$branch_id,$salon_id){	
		$this->db->where('id', $id);
		$this->db->where('branch_id', $branch_id);
		$this->db->where('salon_id', $salon_id); 
		$result = $this->db->get('tbl_salon_emp_service')->row(); 
		return $result;
	} 
	public function get_service_details_for_booking_ajax(){
		$sup_category = $this->input->post('sup_category');		
		$this->db->where('category', $sup_category);
		$this->db->where('status', '1');
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id')); 
		$result = $this->db->get('tbl_salon_emp_service')->result(); 
		if(!empty($result)){
			echo json_encode($result);
		} 
	} 
	public function get_stylist_details_ajax(){
		$service_name_id = $this->input->post('service_name_id');
		$this->db->select('tbl_sub_category.*, tbl_salon_employee.full_name, tbl_salon_employee.id');
		$this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_sub_category.id', 'left');
		$this->db->where('tbl_sub_category.id', $service_name_id);
		$this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_sub_category')->row();
		if(!empty($result)){
			echo json_encode($result);
		}
	}
	public function get_product_details($id){
		$this->db->where('id', $id);
		$result = $this->db->get('tbl_product')->row();
	    return $result;
	} 
	public function get_product_details_for_booking_ajax(){
		$service_id = $this->input->post('service_id');
		$this->db->where('id', $service_id);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_emp_service')->result();
		if(!empty($result)){
			echo json_encode($result);
		}else{
			echo '[]';
		}
	} 
	public function get_service_selected_shift_ajax(){
		$service_id = $this->input->post('service_id');
		$this->db->where('id', $service_id);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_emp_service')->row();
		if(!empty($result)){
			echo json_encode($result);
		}else{
			echo '[]';
		}
	}
	public function get_booking_by_time_ajax(){
		$time = $this->input->post('time');
		$this->db->where('time_slot', $time);
        $this->db->where('booking_type','0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_new_booking')->result();
		if(!empty($result)){
			echo json_encode($result);
		}else{
			echo '[]';
		}
	} 
	public function get_booking_by_time_and_date_ajax(){
		$time = $this->input->post('time');
		$date = $this->input->post('date');
		$this->db->where('booking_date', $date);
		$this->db->where('time_slot', $time);
        $this->db->where('booking_type','0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_new_booking')->result();
		if (!empty($result)) {
			echo json_encode($result);
		} else {
			echo 0;
		}
	} 
	public function get_booking_by_date_ajax(){
		$date = $this->input->post('date');
		$this->db->where('booking_date', $date);
        $this->db->where('booking_type','0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_new_booking')->result();
		if(!empty($result)){
			echo json_encode($result);
		}else{
			echo '[]';
		}
	} 
	public function get_default_services_for_booking(){
		$this->db->where('is_deleted', '0');
		$this->db->where('status', '1');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
		$result = $this->db->get('tbl_salon_emp_service');
		return $result->result();
	}
	public function get_default_category_for_booking(){
		$this->db->where('is_deleted', '0');
		$this->db->where('status', '1');
		$this->db->where('default_status', '1');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
		$result = $this->db->get('tbl_admin_service_category');
		return $result->result();
	}
	public function fetch_categories_ajax(){
		$this->db->where('is_deleted', '0');
		$this->db->where('status', '1');
        if($this->input->post('gender') != ''){
		    $this->db->where('gender', $this->input->post('gender'));
        }
        if($this->input->post('default_status') == '1'){
		    $this->db->where('default_status', '1');
        }
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
		$result = $this->db->get('tbl_admin_service_category');
		echo json_encode($result->result());
	}
	public function get_default_services_ajax(){
		$category = $this->input->post('category');
		$this->db->select('tbl_salon_emp_service.*, tbl_admin_service_category.sup_category');
		$this->db->from('tbl_salon_emp_service');
		$this->db->join('tbl_admin_service_category', 'tbl_salon_emp_service.category = tbl_admin_service_category.id', 'left');
		$this->db->where('tbl_salon_emp_service.category', $category);
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get()->result();
		if(!empty($result)){
			echo json_encode($result);
		}else{
			echo '[]';
		}
	} 
	public function set_booking_status(){
		$data = array(
			'branch_id' 	=> $this->session->userdata('branch_id'),
			'salon_id' 		=> $this->session->userdata('salon_id'),
			'status_name' 	=> $this->input->post('status_name'),
			'status_color' 	=> $this->input->post('status_color'),
		); 
		if($this->input->post('id') == ""){
			$date = array(
				'created_on'  => date("Y-m-d H:i:s")
			);
			$new_arr = array_merge($data, $date);
			$this->db->insert('tbl_bokking_status_color', $new_arr);
			return 0;
		}else{
			$this->db->where('id', $this->input->post('id'));
			$this->db->update('tbl_bokking_status_color', $data);
			return 1;
		}
	} 
	public function get_all_status_color_list(){
		$this->db->where('tbl_bokking_status_color.is_deleted', '0');
		$this->db->where('tbl_bokking_status_color.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_bokking_status_color.salon_id', $this->session->userdata('salon_id')); 
		$this->db->select('tbl_bokking_status_color.*, tbl_admin_bokking_status_color.status_name');
		$this->db->from('tbl_bokking_status_color');
		$this->db->join('tbl_admin_bokking_status_color', 'tbl_bokking_status_color.status_name = tbl_admin_bokking_status_color.id');
		$this->db->order_by('tbl_bokking_status_color.id', 'DESC');
		$result = $this->db->get();
		return $result->result();
	}  
	public function get_single_status_color(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $this->uri->segment(2));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_bokking_status_color');
        return $result->row();
    } 
    public function get_unique_color_status_details_ajax(){
        $status_name_id = $this->input->post('status_name_id');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('status_name', $status_name_id);
        $result = $this->db->get('tbl_bokking_status_color')->row();
        if (!empty($result)) {
            echo json_encode($result);
        } else {
            echo 0;
        }
    } 
    public function set_notifications($customer_id, $heading, $description){
        $data = array(
            'customer_id'  => $customer_id,
            'heading'      => $heading,
            'discription'  => $description,
            'created_on'   => date('Y-m-d H:i:s'),
        );
        $this->db->insert('tbl_set_notification', $data);
    }
    public function get_all_notifications(){
        $this->db->where('is_deleted', '0');
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_set_notification');
        return $result->result();
    } 
    public function add_sup_category($category_image){
		$data = array(
			'branch_id' 			=> $this->session->userdata('branch_id'),
			'salon_id' 				=> $this->session->userdata('salon_id'),
			'sup_category' 			=> $this->input->post('sup_category'),
			'category_image' 		=> $category_image,
			'sup_category_marathi' 	=> $this->input->post('sup_category_marathi'),
		); 
		if($this->input->post('id') == ""){
			$date = array(
				'created_on' => date("Y-m-d H:i:s")
			); 
			$new_arr = array_merge($data, $date);
			$this->db->insert('tbl_salon_service_category', $new_arr);
		}else{
			$this->db->where('id', $this->input->post('id'));
			$this->db->update('tbl_salon_service_category', $data);
		}
	}
	
	
	
	/*--------------------Code optimised------------------------*/
	

    
	public function add_service_sub_category(){
        $data = array(
            'salon_id' 			=> $this->session->userdata('salon_id'),
			'branch_id' 			=> $this->session->userdata('branch_id'),
			'category_id' 			=> $this->input->post('category'), 
            'sub_category' 			=> $this->input->post('sub_category'),
            'sub_category_marathi' 	=> $this->input->post('sub_category_marathi'),
        );
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on' => date("Y-m-d H:i:s")
            ); 
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_service_sub_category', $new_arr);
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_service_sub_category', $data);
        }
    }
	public function get_all_service_sub_category(){
		$this->db->select('tbl_salon_service_category.sup_category,tbl_service_sub_category.*');
		$this->db->where('tbl_service_sub_category.salon_id',$this->session->userdata('salon_id'));
		$this->db->where('tbl_service_sub_category.branch_id',$this->session->userdata('branch_id'));
		$this->db->where('tbl_service_sub_category.is_deleted','0');
		$this->db->join('tbl_salon_service_category','tbl_salon_service_category.id = tbl_service_sub_category.category_id');
		$this->db->order_by('tbl_salon_service_category.sup_category', 'DESC');
		$result = $this->db->get('tbl_service_sub_category');
		return $result->result();
	}
	public function get_single_service_sub_category(){
		$this->db->where('tbl_service_sub_category.salon_id',$this->session->userdata('salon_id'));
		$this->db->where('tbl_service_sub_category.branch_id',$this->session->userdata('branch_id'));
		$this->db->where('tbl_service_sub_category.id',$this->uri->segment(2));
		$this->db->where('tbl_service_sub_category.is_deleted','0'); 
		$result = $this->db->get('tbl_service_sub_category');
		return $result->row();
	}
    public function get_salon_product_category(){
        $this->db->where('is_deleted', '0');
        // $this->db->where('branch_id', $this->session->userdata('branch_id'));
        // $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product_category');
        return $result->result();
    }
    public function get_all_sup_category(){
        $this->db->where('is_deleted', '0');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_admin_service_category');
        return $result->result();
    }
    public function get_all_sup_category_gender($gender){
        $this->db->where('is_deleted', '0');
        $this->db->where('gender', $gender);
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_admin_service_category');
        return $result->result();
    }
    public function get_category_from_by_default(){
        $this->db->where('is_deleted', '0');
        $this->db->where('tbl_salon_service_category.salon_id','0');
		$this->db->where('tbl_salon_service_category.branch_id','0');
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_salon_service_category');
        return $result->result();
    }

    public function get_sub_category_ajax(){
        $this->db->where('sup_category',$this->input->post('sup_category'));
        $this->db->where('gender',$this->input->post('gender'));
        $this->db->where('is_deleted','0');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_admin_sub_category');
        $result = $result->result();  
        echo json_encode($result); 
    }

    public function get_single_sup_category()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_salon_service_category');
        return $result->row();
    }
    
    public function get_unique_sup_category()
    {
        $this->db->where('sup_category', $this->input->post('sup_category'));
        $this->db->where('gender', $this->input->post('gender'));
        if ($this->input->post('id') != "0") {
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_service_category');
        echo $result->num_rows();
    }


    // for Add Sub Category and Third Category

    public function get_overlapping_bookings($services,$branch,$salon){
        if(!empty($services)){
            for($i=0;$i<count($services);$i++){
                $this->db->where_in('service_status',['0','1']);
                $this->db->where('is_deleted','0');
                $this->db->where('branch_id',$branch);
                $this->db->where('salon_id', $salon);
                $this->db->where('stylist_id', $services[$i]['selected_stylist']);
                $this->db->where('DATE(service_date)', date('Y-m-d',strtotime($services[$i]['service_from'])));
                $this->db->where('service_from >=', date('Y-m-d H:i:s',strtotime($services[$i]['service_from'])));
                $this->db->where('service_from <=', date('Y-m-d H:i:s',strtotime($services[$i]['service_to'])));
                $result = $this->db->get('tbl_booking_services_details')->num_rows();
                if($result > 0){
                    return 1;
                }
            }

            for($i=0;$i<count($services);$i++){
                $this->db->where_in('service_status',['0','1']);
                $this->db->where('is_deleted','0');
                $this->db->where('branch_id',$branch);
                $this->db->where('salon_id', $salon);
                $this->db->where('stylist_id', $services[$i]['selected_stylist']);
                $this->db->where('DATE(service_date)', date('Y-m-d',strtotime($services[$i]['service_to'])));
                $this->db->where('service_to >=', date('Y-m-d H:i:s',strtotime($services[$i]['service_from'])));
                $this->db->where('service_to <=', date('Y-m-d H:i:s',strtotime($services[$i]['service_to'])));
                $result = $this->db->get('tbl_booking_services_details')->num_rows();
                if($result > 0){
                    return 1;
                }
            }
        }

        return 0;
    }

    public function validate_booking_short_breakwise($services,$branch,$salon){
        if(!empty($services)){            
            for($i=0;$i<count($services);$i++){ 
                $selected_from_date = date('Y-m-d', strtotime($services[$i]['service_from']));       
                $selected_from = date('Y-m-d H:i:s', strtotime($services[$i]['service_from']));       
                $selected_to = date('Y-m-d H:i:s', strtotime($services[$i]['service_to'])); 

                $this->db->where('DATE(break_date)', $selected_from_date);
                $this->db->where('branch_id', $branch);
                $this->db->where('salon_id', $salon);
                $this->db->where('stylist_id', $services[$i]['selected_stylist']);
                $this->db->where('is_deleted', '0');
                $this->db->where_in('break_status', ['0','2']);
                $breaks = $this->db->get('tbl_stylist_short_breaks')->result();

                if (!empty($breaks)) {
                    foreach($breaks as $row){
                        $break_from = date('Y-m-d H:i:s', strtotime($row->from));
                        $break_to = date('Y-m-d H:i:s', strtotime($row->to));

                        if ($selected_from < $break_to && $selected_to > $break_from) {
                            return 0;
                        }
                    }
                }
            }
        }

        return 1;
    }

    public function validate_booking_resc($services,$branch,$salon){
        if(!empty($services)){            
            for($i=0;$i<count($services);$i++){
                $is_allowed = $this->Calendar_model->validate_timeslot_resc($services[$i]['stylist_id'], $services[$i]['service_from'], $services[$i]['service_to'], $branch, $salon, $services[$i]['booking_id']);
                if(!$is_allowed){
                    return 0;
                }
            }
        }

        return 1;
    }

    public function validate_booking($services,$branch,$salon){
        if(!empty($services)){            
            for($i=0;$i<count($services);$i++){
                $is_allowed = $this->Calendar_model->validate_timeslot($services[$i]['selected_stylist'], $services[$i]['service_from'], $services[$i]['service_to'], $branch, $salon);
                if(!$is_allowed){
                    return 0;
                }
            }
        }

        return 1;
    }
	public function get_selected_service_in_stock_products($products){
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('current_stock >', '0');
		$exp = explode(",",$products);
		$this->db->where_in('id',$exp);
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
		$result = $this->db->get('tbl_product');
		return $result->result();
	}
	public function get_selected_service_products($products){
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
		$exp = explode(",",$products);
		$this->db->where_in('id',$exp);
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
		$result = $this->db->get('tbl_product');
		return $result->result();
	}
	public function get_selected_package_products($package,$service_id){
        $this->db->join('tbl_product','tbl_product.id = tbl_package_products.');
        $this->db->where('is_deleted', '0');
		$this->db->where('tbl_package_id',$package);
        if($service_id != ""){
		    $this->db->where('service_id',$service_id);
        }
		$result = $this->db->get('tbl_package_products');
		return $result->result();
	}
	public function get_selected_service_employee($products){
		$exp = explode(",",$products);
		$this->db->where_in('id',$exp);
		$result = $this->db->get('tbl_salon_employee');
		return $result->result();
	}

	// public function get_all_services(){
	// 	$this->db->select('tbl_salon_emp_service.*,tbl_admin_sub_category.sub_category,tbl_admin_sub_category.sub_category_marathi,tbl_salon_service_category.sup_category,tbl_salon_service_category.sup_category_marathi');
	// 	$this->db->where('tbl_salon_emp_service.is_deleted', '0');  
    //     $this->db->where('(tbl_salon_emp_service.branch_id = "'.$this->session->userdata('branch_id').'" OR tbl_salon_emp_service.branch_id = "0")');
    //     $this->db->where('(tbl_salon_emp_service.salon_id = "'.$this->session->userdata('salon_id').'" OR tbl_salon_emp_service.salon_id = "0")');
	// 	$this->db->join('tbl_salon_service_category','tbl_salon_service_category.id = tbl_salon_emp_service.category');
	// 	$this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
	// 	$this->db->order_by('tbl_salon_emp_service.id', 'DESC'); 
	// 	$result = $this->db->get('tbl_salon_emp_service');
	// 	return $result->result();
	// }

    public function get_all_services()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_salon_emp_service');
        return $result->result();
    }



    public function get_current_branch($branch_id){
        $this->db->where('is_deleted', '0');
		$this->db->where_in('id',$branch_id);
		$result = $this->db->get('tbl_branch');
		return $result->result();
	}

    public function get_current_salon($salon_id){
        $this->db->where('is_deleted', '0');
		$this->db->where_in('id',$salon_id);
		$result = $this->db->get('tbl_salon');
		return $result->result();
	}
   
    

    public function get_salon_services_list_by_category($category_id)
    {   
        $this->db->where('tbl_salon_emp_service.category', $category_id);
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('tbl_salon_emp_service.gender', $_GET['filter_gender']);
        }
        $this->db->where('tbl_salon_emp_service.status', '1');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
        $this->db->from('tbl_salon_emp_service');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
      
        $this->db->order_by('CAST(tbl_salon_emp_service.order AS UNSIGNED)', 'asc');
    
        $result = $this->db->get();
        return $result->result();
    }

    public function get_salon_services_list()
    {
        $this->db->where('tbl_salon_emp_service.status', '1');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
        $this->db->from('tbl_salon_emp_service');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
      
        $this->db->order_by('tbl_salon_emp_service.id', 'DESC');
    
        $result = $this->db->get();
        return $result->result();
    }


    public function get_salon_services_list_by($category_id)
    {
        $this->db->where('id', $category_id);
        $this->db->where('status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_admin_service_category');
        return $result->row();
    }



    public function get_all_disaprove_services()
    {
        $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
        $this->db->from('tbl_salon_emp_service');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
        $this->db->where('tbl_salon_emp_service.status', '0');
        $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_salon_emp_service.id', 'DESC');
    
        $result = $this->db->get();
        return $result->result();
    }
    


    public function get_ready_sub_category_list_by_category($category_id) {
        $this->db->select('tbl_admin_sub_category.*, tbl_admin_service_category.sup_category as category');
        $this->db->from('tbl_admin_sub_category');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_admin_sub_category.sup_category', 'left');
        $this->db->where('tbl_admin_sub_category.is_deleted', '0');
        $this->db->order_by('CAST(tbl_admin_sub_category.order AS UNSIGNED)', 'asc');
        $this->db->where_in('tbl_admin_sub_category.sup_category', $category_id);
    
        $result = $this->db->get();
        return $result->result();
    }
    


    public function get_ready_services_list_by_category($category_id)
    {
    //    echo '<pre> hello'; print_r(explode(',',$this->session->userdata('servicable_genders'))); exit();$this->db->where('is_deleted', '0');
        
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }

        $this->db->where('tbl_admin_services.sub_category', $category_id);
        $this->db->where('tbl_admin_services.is_deleted', '0');       
        $this->db->select('tbl_admin_services.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_service_category.sup_category as supcategory');
        $this->db->from('tbl_admin_services');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_services.sub_category = tbl_admin_sub_category.id');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_admin_services.category', 'left');
        if(!empty($servicable_genders)){
            $this->db->where_in('tbl_admin_services.gender', $servicable_genders);      
        }
        $this->db->order_by('CAST(tbl_admin_services.order AS UNSIGNED)', 'asc'); 
        $result = $this->db->get();
        return $result->result(); 
    }
    

    public function get_service_details_for_price_set_ajax()
{
    $service_id = $this->input->post('service_id');
    $this->db->where('id', $service_id);
    $result = $this->db->get('tbl_admin_services')->row();

    if (!empty($result)) {
        echo json_encode($result);
    } else {
        echo '[]';
    }
}
    
    
    public function get_single_service_from_admin(){
        $this->db->select('tbl_admin_services.*,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_service_category.sup_category as category_name');
        $this->db->where('tbl_admin_services.id',$this->uri->segment(2));
        $this->db->where('tbl_admin_services.status', '1');  
        $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_admin_services.category');
        $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_admin_services.sub_category');
        $result = $this->db->get('tbl_admin_services');
       // echo "<pre>";print_r($result->row());exit;
        return $result->row();
    }
    public function get_salon_services_list_for_emp_new($gender = '')
    {
        $this->db->select('tbl_salon_emp_service.*,tbl_admin_sub_category.sub_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_service_category.sup_category, tbl_admin_service_category.sup_category_marathi');
        $this->db->join('tbl_admin_sub_category', 'tbl_salon_emp_service.sub_category = tbl_admin_sub_category.id');
        $this->db->join('tbl_admin_service_category', 'tbl_salon_emp_service.category = tbl_admin_service_category.id');
        $this->db->order_by('CAST(tbl_salon_emp_service.order AS UNSIGNED)', 'asc');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
        if($gender != ""){
            $this->db->where('tbl_salon_emp_service.gender', $gender);
        }
        $result = $this->db->get('tbl_salon_emp_service');
        return $result->result();
    }
    public function get_salon_services_list_for_emp($gender = '')
    {
        if($gender != ""){
            $this->db->where('tbl_salon_emp_service.gender', $gender);
        }
        $this->db->where('tbl_salon_emp_service.status', '1');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_admin_service_category.is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
        $this->db->from('tbl_salon_emp_service');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
        $this->db->order_by('CAST(tbl_salon_emp_service.order AS UNSIGNED)', 'asc');
        $this->db->order_by('CAST(tbl_admin_service_category.order AS UNSIGNED)', 'asc');
        $this->db->order_by('CAST(tbl_admin_sub_category.order AS UNSIGNED)', 'asc');
        $services = $this->db->get();
        return $services->result();
    }

    public function set_salon_services(){ 
        $this->db->where('id',$this->input->post('service_pkey'));
        $service = $this->db->get('tbl_admin_services');
        $service = $service->row();
        if(!empty($service)){
            $data = array(
                'branch_id' 				=> $this->session->userdata('branch_id'),
                'salon_id' 					=> $this->session->userdata('salon_id'),
                'category'   				=> $service->category,
                'gender'   				    => $service->gender,
                'sub_category'   			=> $service->sub_category,
                'service_name'   			=> $service->service_name,
                'service_name_marathi'   	=> $service->service_name_marathi,
                'service_description' 		=> $this->input->post('service_description'),
                'service_duration' 			=> $this->input->post('service_duration'),
                'service_discount' 			=> $this->input->post('service_discount'),
                'discount_in' 				=> $this->input->post('discount_in'),
                'reward_point' 				=> $this->input->post('reward_point'),
                'final_price' 				=> $this->input->post('final_price'),
                'reminder_duration' 	    => $this->input->post('reminder_duration'),
                'discount_type' 	        => $this->input->post('discount_type'),
                'min' 	                    => $this->input->post('min'),
                'max' 	                    => $this->input->post('max'),
                'is_special' 	            => $this->input->post('is_special') == 'on' ? '1' : '0',
                'default_status' 	        => $service->default_status,
                'category_image' 			=> $service->category_image,
                'service_id'                => $this->input->post('service_pkey'),
                'status' 			        => '1',
                'created_on'                => date("Y-m-d H:i:s")
            );
            // echo '<pre>'; print_r($data); exit();
        
            $this->set_onboarding_status('8');

            if ($this->input->post('product') == "") {
                $data['product'] = ' ';
            } else {
                $data['product'] = implode(',', $this->input->post('product'));
            }
            
            $this->db->where('is_deleted', '0');
            $this->db->where('category', $service->category);
            $this->db->where('gender', $service->gender);
            $this->db->where('branch_id', $this->session->userdata('branch_id'));
            $this->db->where('salon_id', $this->session->userdata('salon_id'));
            $current_count = $this->db->get('tbl_salon_emp_service')->num_rows();
            $order_data=array( 
                'order'         =>  $current_count + 1,
            ); 
            $new_arr = array_merge($data,$order_data);
            $this->db->insert('tbl_salon_emp_service', $new_arr);
        }
        return '0@@'.$service->category;
    }
    public function get_my_added_service(){
        $this->db->select('service_id');
        $this->db->where('is_deleted', '0'); 
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_emp_service');
        $result = $result->result();
        $ids = array();
        if(!empty($result)){
            foreach($result as $result_res){
                $ids[] = $result_res->service_id;
            }
        }
        return $ids;
    }
    public function add_salon_services($category_image){ 
        $data = array(
            'branch_id' 				=> $this->session->userdata('branch_id'),
            'salon_id' 					=> $this->session->userdata('salon_id'),
            'gender'   				    => $this->input->post('is_add_new') == '1' ? $this->input->post('gender') : $this->input->post('service_gender'),
            'category'   				=> $this->input->post('is_add_new') == '1' ? $this->input->post('sup_category') : $this->input->post('old_category') ,
            'sub_category'   			=> $this->input->post('is_add_new') == '1' ? $this->input->post('sub_category') : $this->input->post('old_sub_category') ,
            'service_name'   			=> $this->input->post('service_name'),
            'service_name_marathi'   	=> $this->input->post('service_name_marathi'),
            'service_description' 		=> $this->input->post('service_description'),
            'short_description' 		=> $this->input->post('short_description'),
            'service_duration' 			=> $this->input->post('service_duration'),
            'service_discount' 			=> $this->input->post('service_discount'),
            'discount_in' 				=> $this->input->post('discount_in'),
            'reward_point' 				=> $this->input->post('reward_point'),
            'final_price' 				=> $this->input->post('final_price'),
            'reminder_duration' 	    => $this->input->post('reminder_duration'),
            'discount_type' 	        => $this->input->post('discount_type'),
            'min' 	                    => $this->input->post('min'),
            'max' 	                    => $this->input->post('max'),
            'is_special' 	            => $this->input->post('is_special') == "on" ? '1' : '0',
            'default_status' 	        => $this->input->post('default_status'),
			'category_image' 			=> $category_image,
        );
        // echo "<pre>";print_r($this->input->post('id'));exit;
        if ($this->input->post('product') == "") {
            $data['product'] = ' ';
        } else {
            $data['product'] = implode(',', $this->input->post('product'));
        }
        // echo "<pre>";print_r( $data);exit;
        
        $this->set_onboarding_status('8');

        if ($this->input->post('id') == "") {            
            $this->db->where('is_deleted', '0');
            $this->db->where('category', ($this->input->post('is_add_new') == '1' ? $this->input->post('sup_category') : $this->input->post('old_category')));
            $this->db->where('gender', $this->input->post('service_gender'));
            $this->db->where('branch_id', $this->session->userdata('branch_id'));
            $this->db->where('salon_id', $this->session->userdata('salon_id'));
            $current_count = $this->db->get('tbl_salon_emp_service')->num_rows();
            $order_data=array( 
                'order'         =>  $current_count + 1,
                'created_on' => date("Y-m-d H:i:s")
            ); 
            $new_arr = array_merge($data,$order_data);
            $this->db->insert('tbl_salon_emp_service', $new_arr);

            return '0';
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_salon_emp_service', $data);
            
            return '1';
        }
    }

 



    public function get_all_sub_category_list()
{
    $this->db->select('tbl_sub_category.*, tbl_salon_service_category.sup_category');
    $this->db->from('tbl_sub_category');
    $this->db->join('tbl_salon_service_category', 'tbl_sub_category.sup_category = tbl_salon_service_category.id', 'left');
    $this->db->where('tbl_sub_category.is_deleted', '0');  
    $this->db->where('tbl_sub_category.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_sub_category.salon_id', $this->session->userdata('salon_id'));
    $this->db->order_by('tbl_sub_category.id', 'DESC'); 
    $result = $this->db->get();
    return $result->result();
}


public function get_single_service_for_edit(){
    $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory, tbl_admin_sub_category.sub_category_marathi as subcategory_marathi, tbl_admin_sub_category.gender as subcategory_gender');
    $this->db->from('tbl_salon_emp_service');
    $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
    $this->db->where('tbl_salon_emp_service.is_deleted', '0');
    $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
    $this->db->where('tbl_salon_emp_service.id', $this->uri->segment(2));
    $result = $this->db->get();
    return $result->row();
}
public function get_single_ready_service($id){
    $this->db->where('tbl_admin_services.id', $id);
    $this->db->where('tbl_admin_services.is_deleted', '0');       
    $this->db->select('tbl_admin_services.*, tbl_admin_sub_category.sub_category as subcategory, tbl_admin_sub_category.sub_category_marathi as subcategory_marathi, tbl_admin_sub_category.gender as subcategory_gender,tbl_admin_service_category.sup_category as supcategory');
    $this->db->from('tbl_admin_services');
    $this->db->join('tbl_admin_sub_category', 'tbl_admin_services.sub_category = tbl_admin_sub_category.id');
    $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_admin_services.category', 'left');
    $this->db->order_by('tbl_admin_services.id', 'DESC');
    $result = $this->db->get();
    return $result->row(); 
}


    public function get_sup_category(){
        $this->db->where('is_deleted', '0');
        $this->db->where('(tbl_salon_service_category.branch_id = "'.$this->session->userdata('branch_id').'" OR tbl_salon_service_category.branch_id = "0")');
        $this->db->where('(tbl_salon_service_category.salon_id = "'.$this->session->userdata('salon_id').'" OR tbl_salon_service_category.salon_id = "0")');
        $result = $this->db->get('tbl_salon_service_category');
        return $result->result();
    }

    public function get_emp_name_for_service(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
    }
	public function get_emp_name_for_service_name(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        // $this->db->where('desgnation','1');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
    } 
    public function inactive(){
        $data = array(
            'status' => '0'
        );
        $this->db->where('id', $this->uri->segment(2));
        $this->db->update($this->uri->segment(3), $data);
        return true;
    } 
    public function active(){
        $data = array(
            'status' => '1'
        );
        $this->db->where('id', $this->uri->segment(2));
        $this->db->update($this->uri->segment(3), $data);
        return true;
    } 
    public function delete(){
		if(isset($_GET['recover'])){
			$data = array(
				'is_deleted' => '0'
			);
			$this->db->where('id', $this->uri->segment(2));
			$this->db->update($this->uri->segment(3), $data); 
			return true;
		}else{ 
			$data = array(
				'is_deleted' => '1'
			);
			$this->db->where('id', $this->uri->segment(2));
			$this->db->update($this->uri->segment(3), $data); 
			return true;	
		}
    }
    public function off_btn_offset_session_time($id){
        $this->db->where('id', $id);
        $data = array('on_off_btn' => '0');
        $this->db->update('tbl_booking_rules', $data);
        return $this->db->affected_rows() > 0;
    } 
    public function on_btn_offset_session_time($id){
        $this->db->where('id', $id);
        $data = array('on_off_btn' => '1');
        $this->db->update('tbl_booking_rules', $data);
        return $this->db->affected_rows() > 0;
    }
    public function off_booking_manual_btn($id){
        $this->db->where('id', $id);
        $data = array('booking_manual_btn' => '0');
        $this->db->update('tbl_booking_rules', $data);
        return $this->db->affected_rows() > 0;
    } 
    public function on_booking_manual_btn($id){
        $this->db->where('id', $id);
        $data = array('booking_manual_btn' => '1');
        $this->db->update('tbl_booking_rules', $data);
        return $this->db->affected_rows() > 0;
    } 
    public function salon_status_open($id){
        $this->db->where('id', $id);
        $data = array('salon_status' => '0');
        $this->db->update('tbl_booking_rules', $data);
        return $this->db->affected_rows() > 0;
    }
    public function salon_status_close($id){
        $this->db->where('id', $id);
        $data = array('salon_status' => '1');
        $this->db->update('tbl_booking_rules', $data);
        return $this->db->affected_rows() > 0;
    }  

    public function add_shift(){
        $order = null;
        if($this->input->post('shift_type') == '1'){
            if ($this->input->post('hidden_shift_id') == "") {
                $order = 1;
                $this->db->where('is_deleted','0');
                $this->db->where('branch_id', $this->session->userdata('branch_id'));
                $this->db->where('salon_id', $this->session->userdata('salon_id'));
                $this->db->where('shift_type','1');
                $this->db->order_by('order','desc');
                $this->db->limit(1);
                $latest = $this->db->get('tbl_shift_master')->row();
                if(!empty($latest)){
                    $order = $latest->order + 1;
                }
            }else{
                $this->db->where('id',$this->input->post('hidden_shift_id'));
                $latest = $this->db->get('tbl_shift_master')->row();
                if(!empty($latest)){
                    $order = $latest->order;
                }
            }
        }
        $data = array(
            'branch_id'             => $this->session->userdata('branch_id'),
            'salon_id'              => $this->session->userdata('salon_id'),
            'shift_name'            => $this->input->post('shift_name'),
            'shift_type'            => $this->input->post('shift_type'),
            'order'                 => $order,
            
            'is_monday_shift'       => $this->input->post('monday_shift') == 'on' ? '1' : '0',
            'monday_working_from'   => ($this->input->post('monday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('monday_working_from'))) : null,
            'monday_working_to'     => ($this->input->post('monday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('monday_working_to'))) : null,
            'monday_shift_from'     => ($this->input->post('monday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('monday_shift_from'))) : null,
            'monday_shift_to'       => ($this->input->post('monday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('monday_shift_to'))) : null,
            'monday_break_from'     => ($this->input->post('monday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('monday_break_from'))) : null,
            'monday_break_to'       => ($this->input->post('monday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('monday_break_to'))) : null,

            'is_tuesday_shift'      => $this->input->post('tuesday_shift') == 'on' ? '1' : '0',
            'tuesday_working_from'  => ($this->input->post('tuesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('tuesday_working_from'))) : null,
            'tuesday_working_to'    => ($this->input->post('tuesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('tuesday_working_to'))) : null,
            'tuesday_shift_from'    => ($this->input->post('tuesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('tuesday_shift_from'))) : null,
            'tuesday_shift_to'      => ($this->input->post('tuesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('tuesday_shift_to'))) : null,
            'tuesday_break_from'    => ($this->input->post('tuesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('tuesday_break_from'))) : null,
            'tuesday_break_to'      => ($this->input->post('tuesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('tuesday_break_to'))) : null,
            
            'is_wednesday_shift'    => $this->input->post('wednesday_shift') == 'on' ? '1' : '0',
            'wednesday_working_from'=> ($this->input->post('wednesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('wednesday_working_from'))) : null,
            'wednesday_working_to'  => ($this->input->post('wednesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('wednesday_working_to'))) : null,
            'wednesday_shift_from'  => ($this->input->post('wednesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('wednesday_shift_from'))) : null,
            'wednesday_shift_to'    => ($this->input->post('wednesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('wednesday_shift_to'))) : null,
            'wednesday_break_from'  => ($this->input->post('wednesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('wednesday_break_from'))) : null,
            'wednesday_break_to'    => ($this->input->post('wednesday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('wednesday_break_to'))) : null,
            
            'is_thursday_shift'     => $this->input->post('thursday_shift') == 'on' ? '1' : '0',
            'thursday_working_from' => ($this->input->post('thursday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('thursday_working_from'))) : null,
            'thursday_working_to'   => ($this->input->post('thursday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('thursday_working_to'))) : null,
            'thursday_shift_from'   => ($this->input->post('thursday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('thursday_shift_from'))) : null,
            'thursday_shift_to'     => ($this->input->post('thursday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('thursday_shift_to'))) : null,
            'thursday_break_from'   => ($this->input->post('thursday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('thursday_break_from'))) : null,
            'thursday_break_to'     => ($this->input->post('thursday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('thursday_break_to'))) : null,
            
            'is_friday_shift'       => $this->input->post('friday_shift') == 'on' ? '1' : '0',
            'friday_working_from'   => ($this->input->post('friday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('friday_working_from'))) : null,
            'friday_working_to'     => ($this->input->post('friday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('friday_working_to'))) : null,
            'friday_shift_from'     => ($this->input->post('friday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('friday_shift_from'))) : null,
            'friday_shift_to'       => ($this->input->post('friday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('friday_shift_to'))) : null,
            'friday_break_from'     => ($this->input->post('friday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('friday_break_from'))) : null,
            'friday_break_to'       => ($this->input->post('friday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('friday_break_to'))) : null,
            
            'is_saturday_shift'     => $this->input->post('saturday_shift') == 'on' ? '1' : '0',
            'saturday_working_from' => ($this->input->post('saturday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('saturday_working_from'))) : null,
            'saturday_working_to'   => ($this->input->post('saturday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('saturday_working_to'))) : null,
            'saturday_shift_from'   => ($this->input->post('saturday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('saturday_shift_from'))) : null,
            'saturday_shift_to'     => ($this->input->post('saturday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('saturday_shift_to'))) : null,
            'saturday_break_from'   => ($this->input->post('saturday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('saturday_break_from'))) : null,
            'saturday_break_to'     => ($this->input->post('saturday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('saturday_break_to'))) : null,
            
            'is_sunday_shift'       => $this->input->post('sunday_shift') == 'on' ? '1' : '0',
            'sunday_working_from'   => ($this->input->post('sunday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('sunday_working_from'))) : null,
            'sunday_working_to'     => ($this->input->post('sunday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('sunday_working_to'))) : null,
            'sunday_shift_from'     => ($this->input->post('sunday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('sunday_shift_from'))) : null,
            'sunday_shift_to'       => ($this->input->post('sunday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('sunday_shift_to'))) : null,
            'sunday_break_from'     => ($this->input->post('sunday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('sunday_break_from'))) : null,
            'sunday_break_to'       => ($this->input->post('sunday_shift') == 'on') ? date('H:i:s',strtotime($this->input->post('sunday_break_to'))) : null,
        );
        // echo'<pre>'; print_r($data); exit;
        $this->set_onboarding_status('6');
        if ($this->input->post('hidden_shift_id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_shift_master', $new_arr);
            return 0;
        } else {
            $this->db->where('id', $this->input->post('hidden_shift_id'));
            $this->db->update('tbl_shift_master', $data);
            return 1;
        }
    }

    public function get_all_shift()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_shift_master');
        return $result->result();
    }

    public function get_single_shift()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(3));
        $result = $this->db->get('tbl_shift_master');
        return $result->row();
    }
    public function update_shift_order() {
        $order = $this->input->post('order');    
        if (!empty($order)) {
            foreach ($order as $item) {
                if (isset($item['id']) && isset($item['order'])) {
                    $this->db->where('id', $item['id']);
                    $this->db->where('branch_id', $this->session->userdata('branch_id'));
                    $this->db->where('salon_id', $this->session->userdata('salon_id'));
                    $this->db->update('tbl_shift_master', ['order' => $item['order']]);
                }
            }
            echo json_encode(['status' => 'success']);
        } else {
            echo json_encode(['status' => 'error', 'message' => 'No data received']);
        }
    }
    
    public function get_all_shifts()
    {
        $this->db->where('shift_type', '0');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'desc');
        $result = $this->db->get('tbl_shift_master');
        return $result->result();
    }
    public function start_bookings($id){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $id);
        $row = $this->db->get('tbl_shift_master')->row();
        if(!empty($row)){
            $data = array(
                'is_bookings_allowed'   =>  '1'
            );
            $this->db->where('id', $id);
            $this->db->update('tbl_shift_master',$data);
            return true;
        }else{
            return false;
        }
    }
    public function stop_bookings($id){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $id);
        $row = $this->db->get('tbl_shift_master')->row();
        if(!empty($row)){
            $data = array(
                'is_bookings_allowed'   =>  '0'
            );
            $this->db->where('id', $id);
            $this->db->update('tbl_shift_master',$data);
            return true;
        }else{
            return false;
        }
    }
    public function get_shift_emps($id)
    {
        $this->db->where('shift', $id);
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'desc');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
    }
    public function get_shift_bookings($id)
    {
        $this->db->where('booking_shift_id', $id);
        $this->db->where('is_deleted', '0');
        $this->db->where('service_from > ', date('Y-m-d H:i:s'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'desc');
        $result = $this->db->get('tbl_booking_services_details');
        return $result->result();
    }
    public function get_all_rotational_shifts()
    {
        $this->db->where('shift_type', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('order', 'asc');
        $result = $this->db->get('tbl_shift_master');
        return $result->result();
    }

    public function get_all_active_shifts()
    {
        $this->db->where('status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_shift_master');
        return $result->result();
    }
    public function get_all_shifts_typewise($shift_type)
    {
        $this->db->where('status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('shift_type', $shift_type);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_shift_master');
        return $result->result();
    }
    public function get_saloon_shifts_typewise_ajax()
    {
        $this->db->where('status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('shift_type', $this->input->post('shift_type'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_shift_master')->result();
    
        echo json_encode($result);
    }


    // For Add product category 




    public function product_category()
    {
        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'product_category' => $this->input->post('product_category'),
        );
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_admin_service_category', $new_arr);
            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_admin_service_category', $data);
            return 1;
        }
    }
    public function get_all_product_category()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_admin_service_category');
        return $result->result();
    }

    public function get_single_product_category()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_admin_service_category');
        return $result->row();
    }

    public function get_unique_product_category()
    {
        $this->db->where('product_category', $this->input->post('product_category'));
        if ($this->input->post('id') != "0") {
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_admin_service_category');
        echo $result->num_rows();
    }


     // For Add product unit 




     public function product_unit()
     {
         $data = array(
             'branch_id' => $this->session->userdata('branch_id'),
             'salon_id' => $this->session->userdata('salon_id'),
             'product_unit' => $this->input->post('product_unit'),
         );
         if ($this->input->post('id') == "") {
             $date = array(
                 'created_on'    => date("Y-m-d H:i:s")
             );
             $new_arr = array_merge($data, $date);
             $this->db->insert('tbl_product_unit', $new_arr);
             return 0;
         } else {
             $this->db->where('id', $this->input->post('id'));
             $this->db->update('tbl_product_unit', $data);
             return 1;
         }
     }
     public function get_all_product_unit()
     {
         $this->db->where('is_deleted', '0');
         $this->db->where('branch_id', $this->session->userdata('branch_id'));
         $this->db->where('salon_id', $this->session->userdata('salon_id'));
         $this->db->order_by('id', 'DESC');
         $result = $this->db->get('tbl_product_unit');
         return $result->result();
     }
 
     public function get_single_product_unit()
     {
         $this->db->where('is_deleted', '0');
         $this->db->where('branch_id', $this->session->userdata('branch_id'));
         $this->db->where('salon_id', $this->session->userdata('salon_id'));
         $this->db->where('id', $this->uri->segment(2));
         $result = $this->db->get('tbl_product_unit');
         return $result->row();
     }
 
     public function get_unique_product_unit()
     {
         $this->db->where('product_unit', $this->input->post('product_unit'));
         if ($this->input->post('id') != "0") {
             $this->db->where('id !=', $this->input->post('id'));
         }
         $this->db->where('is_deleted', '0');
         $this->db->where('branch_id', $this->session->userdata('branch_id'));
         $this->db->where('salon_id', $this->session->userdata('salon_id'));
         $result = $this->db->get('tbl_product_unit');
         echo $result->num_rows();
     }
 


     
    public function get_all_products_unit()
    {
        $this->db->where('tbl_admin_product_unit.is_deleted','0'); 
        // $this->db->where('tbl_admin_product_unit.branch_id', $this->session->userdata('branch_id'));
        // $this->db->where('tbl_admin_product_unit.salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('tbl_admin_product_unit.id','DESC');
		$result = $this->db->get('tbl_admin_product_unit');
		return $result->result();
    }

    // For Add Designation 




    public function add_designation()
    {
        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'designation' => $this->input->post('designation'),
        );
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_emp_designation', $new_arr);
            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_emp_designation', $data);
            return 1;
        }
    }

    public function get_all_designation()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_emp_designation');
        return $result->result();
    }

    public function get_shift_details($id)
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $id);
        $result = $this->db->get('tbl_shift_master');
        return $result->row();
    }
    public function get_single_shift_details($id)
    {
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $id);
        $result = $this->db->get('tbl_shift_master');
        return $result->row();
    }
    public function get_employee_shift_update_history($emp_id)
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('emp_id', $emp_id);
        $this->db->order_by('created_on', 'desc');
        $result = $this->db->get('tbl_shift_update_history')->result();
        return $result;
    }
    public function get_single_designation_details($id)
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $id);
        $result = $this->db->get('tbl_emp_designation');
        return $result->row();
    }
    public function get_single_designation()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_emp_designation');
        return $result->row();
    }

    public function get_unique_designation()
    {
        $this->db->where('designation', $this->input->post('designation'));
        if ($this->input->post('id') != "0") {
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_emp_designation');
        echo $result->num_rows();
    }
    public function get_unique_supplier()
    {
        $this->db->where('name', $this->input->post('name'));
        if ($this->input->post('id') != "0") {
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_supplier');
        $result = $result->num_rows();
        if($result > 0){
            echo '1';
        }else{
            echo '0';
        }
    }


    public function get_unique_phone()
    {
        $this->db->where('phone', $this->input->post('phone'));
        if ($this->input->post('id') != "0") {
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_student');
        echo $result->num_rows();
    }

    // For Add Product 




    public function add_product_stock_old()
{
    $data = array(
        'branch_id' => $this->session->userdata('branch_id'),
        'salon_id' => $this->session->userdata('salon_id'),
        'product_name' => $this->input->post('product_name'),
        'product_category' => $this->input->post('product_category'),
        'product_unit' => $this->input->post('product_unit'),
        'opening_stock' => $this->input->post('opening_stock'),
        'closing_stock' => $this->input->post('closing_stock'),
        'quantity' => $this->input->post('quantity'),
        'purchase_price' => $this->input->post('purchase_price'),
    );
    
    $data1 = array(
        'branch_id' => $this->session->userdata('branch_id'),
        'salon_id' => $this->session->userdata('salon_id'),
        'product_name' => $this->input->post('product_name'),
        'closing_stock' => $this->input->post('closing_stock'),
    );
    $l_id = $this->Salon_model->get_all_product_barcode();
    $count = count($l_id);
    $data2Array = array();
    $startCount = ($count == 0) ? 1 : $count;
    for ($i = 0; $i < $data['quantity']; $i++,$startCount++) {
        $data2 = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'product_name' => $this->input->post('product_name'),
            'barcode_id' => $this->session->userdata('salon_id') . $this->session->userdata('branch_id') .$this->input->post('product_name').$i.$startCount,
        );

        $data2Array[] = $data2;
    }
    // echo "<pre>";print_r($data2Array);exit;
    
    $this->db->where('product_name', $this->input->post('product_name'));
    $existingRow = $this->db->get('tbl_product_closing_stock')->row();

    if (!$existingRow) {
        $date = array('created_on' => date("Y-m-d H:i:s"));
        $new_arr = array_merge($data, $date);
        $new_arr1 = array_merge($data1, $date);
        $new_arr2 = array_merge($data2Array, $date);
       
        $this->db->insert('tbl_product_stock', $new_arr);
        $this->db->insert('tbl_product_closing_stock', $new_arr1);
        $this->db->insert('tbl_product_stock_history', $new_arr); 
        $this->db->insert_batch('tbl_product_barcode', $new_arr2);

        return 0; 
    } else {
        // $date = array('created_on' => date("Y-m-d H:i:s"));
        // $new_arr2 = array_merge($data2Array, $date);
        $this->db->where('product_name', $this->input->post('product_name'));
        $this->db->update('tbl_product_stock', $data);
        $this->db->where('product_name', $this->input->post('product_name'));
        $this->db->update('tbl_product_closing_stock', $data1);
        $this->db->insert('tbl_product_stock_history', $data);
        $this->db->insert_batch('tbl_product_barcode', $data2Array);
        return 1;
    }
}
public function add_product_stock(){
    $data = array(
        'branch_id'         => $this->session->userdata('branch_id'),
        'salon_id'          => $this->session->userdata('salon_id'),
        'entry_type'        => '0',
        'product_name'      => $this->input->post('product_name'),
        // 'barcode_id'        => $this->input->post('barcode_id'),
        'supplier'          => $this->input->post('supplier'),
        'product_category'  => $this->input->post('product_category'),
        'product_unit'      => $this->input->post('product_unit'),
        'opening_stock'     => $this->input->post('opening_stock'),
        'closing_stock'     => $this->input->post('closing_stock'),
        'quantity'          => $this->input->post('quantity'),
        'purchase_price'    => $this->input->post('purchase_price'),
        'mfg_date'          => $this->input->post('mfg_date') != "" ? date('Y-m-d',strtotime($this->input->post('mfg_date'))) : '',
        'exp_date'          => $this->input->post('exp_date') != "" ? date('Y-m-d',strtotime($this->input->post('exp_date'))) : '',
        'entry_by'          => $this->session->userdata('branch_id'),
        'created_on'        => date("Y-m-d H:i:s")
    );
    // echo '<pre>'; print_r($data); exit;
    $this->db->insert('tbl_product_stock', $data);
    $stock_id = $this->db->insert_id();
    
    $branch_formatted = sprintf('%03d', $this->session->userdata('branch_id'));
    $salon_formatted = sprintf('%03d', $this->session->userdata('salon_id'));
    $count_formatted = sprintf('%04d', $barcode_uid);
    $barcode_uid = 'INW' . $branch_formatted.$salon_formatted.$count_formatted;

    $old_stock = (int)$this->input->post('opening_stock');
    $quantity = (int)$this->input->post('quantity');
    $new_stock = $quantity + $old_stock;

    $this->db->where('id', $this->input->post('product_name'));
    $this->db->where('branch_id', $this->session->userdata('branch_id'));
    $this->db->where('salon_id', $this->session->userdata('salon_id'));
    $this->db->update('tbl_product', array('current_stock'=>(int)$new_stock));

    $barcode_ids = array();
    for($i=0;$i<(int)$this->input->post('quantity');$i++){
        $barcode_entry = array(
            'branch_id'         => $this->session->userdata('branch_id'),
            'salon_id'          => $this->session->userdata('salon_id'),
            'product_category'  => $this->input->post('product_category'),
            'product_name'      => $this->input->post('product_name'),
            'stock_entry_id'    => $stock_id,
            'product_status'    => '0',
            'total_quantity'    => $this->input->post('quantity'),
            'mfg_date'          => $this->input->post('mfg_date') != "" ? date('Y-m-d',strtotime($this->input->post('mfg_date'))) : '',
            'exp_date'          => $this->input->post('exp_date') != "" ? date('Y-m-d',strtotime($this->input->post('exp_date'))) : '',
            'created_on'        => date("Y-m-d H:i:s")
        );
        $this->db->insert('tbl_product_barcode', $barcode_entry);
        $barcode_id = $this->db->insert_id();

        $barcodeCode = sprintf('%03d', $this->session->userdata('branch_id')) . sprintf('%02d', $this->input->post('product_name')) . 
                        sprintf('%05d', $stock_id) . sprintf('%05d', $barcode_id);

        $this->db->where('id', $barcode_id);
        $this->db->update('tbl_product_barcode', array('barcode_id'=>$barcodeCode));   
        
        $barcode_ids[] = $barcode_id;
    }

    $this->db->where('id', $stock_id);
    $this->db->update('tbl_product_stock', array('barcode_id'=>$barcode_uid,'barcode_ids'=>implode(',',$barcode_ids)));

    return true;
}

public function add_product_consumption(){
    $data = array(
        'branch_id'         => $this->session->userdata('branch_id'),
        'salon_id'          => $this->session->userdata('salon_id'),
        'entry_type'        => '1',
        'consumption_type'  => $this->input->post('consumption'),
        'barcode_ids'       => implode(',',$this->input->post('selected_barcodes')),
        'product_name'      => $this->input->post('product_name'),
        'product_category'  => $this->input->post('product_category'),
        'product_unit'      => $this->input->post('product_unit'),
        'opening_stock'     => $this->input->post('opening_stock'),
        'closing_stock'     => $this->input->post('closing_stock'),
        'quantity'          => $this->input->post('quantity'),
        'entry_by'          => $this->session->userdata('branch_id'),
        'created_on'        => date("Y-m-d H:i:s")
    );
    // echo '<pre>'; print_r($data); exit;
    $this->db->insert('tbl_product_stock', $data);
    $stock_id = $this->db->insert_id();
    
    $new_stock = $this->input->post('closing_stock');

    $this->db->where('id', $this->input->post('product_name'));
    $this->db->where('branch_id', $this->session->userdata('branch_id'));
    $this->db->where('salon_id', $this->session->userdata('salon_id'));
    $this->db->update('tbl_product', array('current_stock'=>(int)$new_stock));

    $barcode_ids = $this->input->post('selected_barcodes');
    $barcode_entry = array(
        'used_on'           => date('Y-m-d H:i:s'),
        'product_status'    => $this->input->post('consumption'),
        'stock_outward_id'  => $stock_id,
    );
    $this->db->where_in('id', $barcode_ids);
    $this->db->update('tbl_product_barcode', $barcode_entry);

    return true;
}


    public function get_all_product()
{
    $this->db->select('tbl_product_stock.*, tbl_product.product_subcategory, tbl_product_category.product_category as productcategory, tbl_product_unit.product_unit, tbl_product.product_name');
    $this->db->from('tbl_product_stock');
    $this->db->join('tbl_product_category', 'tbl_product_stock.product_category = tbl_product_category.id', 'left');
    $this->db->join('tbl_product_unit', 'tbl_product_stock.product_unit = tbl_product_unit.id', 'left');
    $this->db->join('tbl_product', 'tbl_product_stock.product_name = tbl_product.id', 'left');
    $this->db->where('tbl_product_stock.is_deleted', '0');
    $this->db->where('tbl_product_stock.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_product_stock.salon_id', $this->session->userdata('salon_id'));

    if(isset($_GET['product']) && $_GET['product'] != ""){
        $this->db->where('tbl_product_stock.product_name', $_GET['product']);
    }
    if(isset($_GET['category']) && $_GET['category'] != ""){
        $this->db->where('tbl_product_stock.product_category', $_GET['category']);
    }
    if(isset($_GET['supplier']) && $_GET['supplier'] != ""){
        $this->db->where('tbl_product_stock.supplier', $_GET['supplier']);
    }
    if(isset($_GET['type']) && $_GET['type'] != ""){
        $entry_type = explode('@@@',$_GET['type'])[0];
        if($entry_type != ""){
            $this->db->where('tbl_product_stock.entry_type', $entry_type);
            if($entry_type == '1'){
                $consumption_type = explode('@@@',$_GET['type'])[1];
                if($consumption_type != ""){
                    $this->db->where('tbl_product_stock.consumption_type', $consumption_type);
                }
            }
        }
    }
    if(isset($_GET['from_date']) && $_GET['from_date'] != ""){
        $this->db->where('DATE(tbl_product_stock.created_on) >=', date('Y-m-d',strtotime($_GET['from_date'])));
    }
    if(isset($_GET['to_date']) && $_GET['to_date'] != ""){
        $this->db->where('DATE(tbl_product_stock.created_on) <=', date('Y-m-d',strtotime($_GET['to_date'])));
    }
    $this->db->order_by('tbl_product_stock.id', 'DESC');
    $result = $this->db->get();

    return $result->result();
}

public function add_supplier()
{
    $data = array(
        'branch_id' => $this->session->userdata('branch_id'),
        'salon_id' => $this->session->userdata('salon_id'),
        'person_name' => $this->input->post('person_name'),
        'name' => $this->input->post('name'),
        'mobile_no' => $this->input->post('mobile_no'),
        'email' => $this->input->post('email'),
        'address' => $this->input->post('address'),
    );
    if ($this->input->post('id') == "") {
        $date = array(
            'created_on'    => date("Y-m-d H:i:s")
        );
        $new_arr = array_merge($data, $date);
        $this->db->insert('tbl_supplier', $new_arr);
        return 0;
    } else {
        $this->db->where('id', $this->input->post('id'));
        $this->db->update('tbl_supplier', $data);
        return 1;
    }
}
public function get_active_supplier()
{
    $this->db->from('tbl_supplier');
    $this->db->where('tbl_supplier.is_deleted', '0');
    $this->db->where('tbl_supplier.status', '1');
    $this->db->where('tbl_supplier.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_supplier.salon_id', $this->session->userdata('salon_id'));

    $this->db->order_by('tbl_supplier.id', 'DESC');
    $result = $this->db->get();

    return $result->result();
}
public function get_all_supplier()
{
    $this->db->from('tbl_supplier');
    $this->db->where('tbl_supplier.is_deleted', '0');
    $this->db->where('tbl_supplier.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_supplier.salon_id', $this->session->userdata('salon_id'));

    $this->db->order_by('tbl_supplier.id', 'DESC');
    $result = $this->db->get();

    return $result->result();
}
public function get_single_supplier($id)
{
    $this->db->from('tbl_supplier');
    $this->db->where('tbl_supplier.id', $id);
    $this->db->where('tbl_supplier.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_supplier.salon_id', $this->session->userdata('salon_id'));

    $this->db->order_by('tbl_supplier.id', 'DESC');
    $result = $this->db->get();

    return $result->row();
}

public function add_petty_cash_entry()
{
    $this->db->from('tbl_salon_employee');
    $this->db->where('tbl_salon_employee.id', $this->input->post('employee'));
    $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
    $result = $this->db->get();
    $single = $result->row();

    $data = array(
        'branch_id' => $this->session->userdata('branch_id'),
        'salon_id' => $this->session->userdata('salon_id'),
        'entry_by' => !empty($single) ? $single->full_name : $this->input->post('name'),
        'entry_by_id' => $this->input->post('employee') != "" && $this->input->post('employee') != "Other" ? $this->input->post('employee') : null,
        'amount' => $this->input->post('amount'),
        'type' => $this->input->post('type'),
        'remark' => $this->input->post('remark'),
        'opening_balance' => $this->input->post('opening_balance'),
        'closing_balance' => $this->input->post('closing_balance'),
    );
    if ($this->input->post('id') == "") {
        $date = array(
            'created_on'    => date("Y-m-d H:i:s")
        );
        $new_arr = array_merge($data, $date);
        $this->db->insert('tbl_petty_cash_entries', $new_arr);

        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->update('tbl_branch',array('current_petty_cash_balance'=>(float)$this->input->post('closing_balance')));

        return 0;
    } else {
        $this->db->where('id', $this->input->post('id'));
        $this->db->update('tbl_petty_cash_entries', $data);
        return 1;
    }
}
public function get_all_petty_cash_entries()
{
    $this->db->from('tbl_petty_cash_entries');
    $this->db->where('tbl_petty_cash_entries.is_deleted', '0');
    $this->db->where('tbl_petty_cash_entries.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_petty_cash_entries.salon_id', $this->session->userdata('salon_id'));

    if(isset($_GET['selected_employee']) && $_GET['selected_employee'] != ""){
        $this->db->where('tbl_petty_cash_entries.entry_by_id', $_GET['selected_employee']);
    }

    if(isset($_GET['from_date']) && $_GET['from_date'] != ""){
        $this->db->where('DATE(tbl_petty_cash_entries.created_on) >=', date('Y-m-d',strtotime($_GET['from_date'])));
    }
    if(isset($_GET['to_date']) && $_GET['to_date'] != ""){
        $this->db->where('DATE(tbl_petty_cash_entries.created_on) <=', date('Y-m-d',strtotime($_GET['to_date'])));
    }

    $this->db->order_by('tbl_petty_cash_entries.id', 'DESC');
    $result = $this->db->get();

    return $result->result();
}
public function get_single_petty_cash_entry($id)
{
    $this->db->from('tbl_petty_cash_entries');
    $this->db->where('tbl_petty_cash_entries.id', $id);
    $this->db->where('tbl_petty_cash_entries.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_petty_cash_entries.salon_id', $this->session->userdata('salon_id'));

    $this->db->order_by('tbl_petty_cash_entries.id', 'DESC');
    $result = $this->db->get();

    return $result->row();
}
public function get_petty_cash_balance_ajax()
{
    $this->db->from('tbl_branch');
    $this->db->where('tbl_branch.id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_branch.salon_id', $this->session->userdata('salon_id'));

    $this->db->order_by('tbl_branch.id', 'DESC');
    $result = $this->db->get();

    echo json_encode($result->row());
}


public function get_single_product()
{
    $this->db->where('tbl_product_stock.is_deleted', '0');
    $this->db->where('tbl_product_stock.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_product_stock.salon_id', $this->session->userdata('salon_id'));
    $this->db->where('tbl_product_stock.id', $this->uri->segment(2));
    $this->db->select('tbl_product_stock.*, tbl_admin_service_category.sup_category as productcategory, tbl_product_unit.product_unit as productunit');
    $this->db->from('tbl_product_stock');
    $this->db->join('tbl_admin_service_category', 'tbl_product_stock.product_category = tbl_admin_service_category.id', 'left');
    $this->db->join('tbl_product_unit', 'tbl_product_stock.product_unit = tbl_product_unit.id', 'left');
    
    $result = $this->db->get();
    return $result->row();
}

    public function get_product_category()
    {
        $this->db->where('is_deleted', '0');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product_category');
        return $result->result();
    }
    public function get_product_category_row($id)
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $id);
        $result = $this->db->get('tbl_product_category');
        return $result->row();
    }
    public function get_product_detail_for_stock_ajax()
    {   
        $product_name = $this->input->post('product_name');
       
        $this->db->where_in('tbl_product.id', $product_name);
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $this->db->select('tbl_product.*, tbl_product_sub_category.product_sub_category as product_sub_category_name, tbl_product_category.product_category as productcategory,tbl_product_unit.product_unit as productunit');
        $this->db->join('tbl_product_category', 'tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->join('tbl_product_sub_category', 'tbl_product.product_subcategory = tbl_product_sub_category.id', 'left');
        $this->db->join('tbl_product_unit', 'tbl_product.product_unit = tbl_product_unit.id', 'left');
    
        $result = $this->db->get('tbl_product')->row();
        
        echo json_encode($result);
    }
  
    public function get_product_stock_deytails_ajax()
    {   
        $product_name = $this->input->post('product_name');
        
        $this->db->where_in('tbl_product_closing_stock.product_name', $product_name);
        $this->db->where('tbl_product_closing_stock.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product_closing_stock.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_product_closing_stock')->row();
        if (!empty($result)) {
            echo json_encode($result);
        } else {
            echo json_encode(0);
        }
    
    }


    // For Add gallary 




    public function add_gallary($gallary_image)
    {
        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'category' => $this->input->post('category'),
            'sub_category' => $this->input->post('sub_category'),
            'gallary_image'            => $gallary_image,
        );
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_gallary', $new_arr);
            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_gallary', $data);
            return 1;
        }
    }
    public function set_upload_gallary_img()
    {
        $config = array();
        $config['upload_path'] = 'admin_assets/images/gallary_image/';
        $config['allowed_types'] = '*';
        $config['encrypt_name'] = true;
        return $config;
    }
    public function get_all_gallary()
    {
        $this->db->select('tbl_gallary.*, tbl_salon_service_category.sup_category,tbl_sub_category.sub_category');
        $this->db->where('tbl_gallary.is_deleted', '0');
        $this->db->join('tbl_salon_service_category', 'tbl_salon_service_category.id = tbl_gallary.category',);
        $this->db->join('tbl_sub_category', 'tbl_sub_category.id = tbl_gallary.sub_category',);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_gallary');
        return $result->result();
    }

    public function get_single_gallary()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_gallary');
        return $result->row();
    }


    // For Add service Management 



    public function get_category()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_service_category');
        return $result->result();
    }
  
    public function get_sub_category($category)
    {
        $this->db->where_in('sup_category', $category);
        $this->db->order_by('id', 'DESC');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_sub_category')->result();
        return $result;
    }

    public function get_third_category_options($sup_category_id, $sub_category_id)
    {
        
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('sup_category_id', $sup_category_id);
        $this->db->select('id, third_category');
        $result = $this->db->get('tbl_third_category')->result();
        return $result;
    }





    // For Add speacial service Management 



    public function add_special_service()
    {
        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'category' => $this->input->post('category'),
            'service_name' => $this->input->post('service_name'),
            'discount' => $this->input->post('discount'),
        );
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_special_service', $new_arr);
            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_special_service', $data);
            return 1;
        }
    }

    public function get_all_special_service(){
		$this->db->select('tbl_special_service.*, tbl_salon_service_category.sup_category,tbl_salon_emp_service.sub_category as name_of_service');
		$this->db->from('tbl_special_service');
		$this->db->join('tbl_salon_service_category', 'tbl_special_service.category = tbl_salon_service_category.id', 'left');
		$this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_special_service.service_name', 'left');
		$this->db->where('tbl_special_service.is_deleted', '0');
		$this->db->where('tbl_special_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_special_service.salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('tbl_special_service.id', 'DESC'); 
		$result = $this->db->get(); 
		return $result->result();
	}
	public function get_selected_special_cerive_by_cat($category){
		$this->db->where('category',$category);
		$this->db->where('is_deleted','0');
		$result = $this->db->get('tbl_salon_emp_service');
		return $result->result();
	}

    public function get_single_special_service()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_special_service');
        return $result->row();
    }

    public function get_unique_special_service()
    {
        $this->db->where('category', $this->input->post('category'));
        if ($this->input->post('id') != "0") {
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_special_service');
        echo $result->num_rows();
    }




    // For Add Salon Employee Management 



    public function add_salon_employee($identy_proof,$profile_photo)
    {
        $service_name = $this->input->post('service_name');
        if($service_name != "" && is_array($service_name) && !empty($service_name)){
            $selected_services = implode(',',$service_name);
        }else{
            $selected_services = '';
        }

        $this->db->where('id', $this->input->post('shift'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $current_shift = $this->db->get('tbl_shift_master')->row();
        if(!empty($current_shift)){
            if($current_shift->shift_type == '1'){
                $this->db->where('order >', $current_shift->order);
                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                $this->db->where('branch_id',$this->session->userdata('branch_id'));
                $this->db->where('shift_type','1');
                $this->db->order_by('order', 'ASC');
                $this->db->limit(1);
                $upcoming_shift = $this->db->get('tbl_shift_master')->row();

                if (empty($upcoming_shift)) {
                    $this->db->where('shift_type','1');
                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                    $this->db->where('branch_id',$this->session->userdata('branch_id'));
                    $this->db->order_by('order', 'ASC');
                    $this->db->limit(1);
                    $upcoming_shift = $this->db->get('tbl_shift_master')->row();
                }
            }else{
                $upcoming_shift = $current_shift;
            }
        }

        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'full_name' => $this->input->post('name'),
            'whatsapp_number' => $this->input->post('phone_number'),
            'description' => $this->input->post('description'),
            'dob' => $this->input->post('dob') != "" ? date('Y-m-d',strtotime($this->input->post('dob'))) : '',
            'date_of_join' => $this->input->post('date_of_join') != "" ? date('Y-m-d',strtotime($this->input->post('date_of_join'))) : '',
            'email' => $this->input->post('email'),
            'address' => $this->input->post('address'),
            'gender' => $this->input->post('gender'),
            'staff_type' => $this->input->post('staff_type'),
            'identity' => $this->input->post('identity'),
            // 'identity_number' => $this->input->post('identity_number'),
            'account_holder_name' => $this->input->post('account_holder_name'),
            'account_number' => $this->input->post('account_number'),
            // 'account_type' => $this->input->post('account_type'),
            // 'bank_branch_name' => $this->input->post('bank_branch_name'),
            'ifsc' => $this->input->post('ifsc'),
            'designation' => $this->input->post('staff_type'),
            'service_name' 					=> $selected_services,
            'salary' => $this->input->post('salary'),
            'bank_name' => $this->input->post('bank_name'),
            'identy_proof' => $identy_proof,
            'profile_photo' => $profile_photo,
            
            'salary_method' => $this->input->post('salary_method'),
        );
        // echo '<pre>'; print_r($data); exit();

        $this->set_onboarding_status('17');

        $shift_data = array(
            'shift'         => $this->input->post('shift'),
            'shift_type'    => $this->input->post('shift_type'),
            'upcoming_shift_id'      => !empty($upcoming_shift) ? $upcoming_shift->id : '',
            'upcoming_shift_type'    => !empty($upcoming_shift) ? $upcoming_shift->shift_type : '',
        );
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $new_arr = array_merge($new_arr, $shift_data);
            $this->db->insert('tbl_salon_employee', $new_arr);
            $emp_id = $this->db->insert_id();

            $history_data = array(
                'salon_id'		        =>	$this->session->userdata('salon_id'),
                'branch_id'	            =>	$this->session->userdata('branch_id'),
                'emp_id'		        =>	$emp_id,
                'assigned_shift_type'	=>	$this->input->post('shift_type'),
                'pre_shift_type'	    =>	null,
                'assign_type'	        =>	'0',
                'is_shift_applied'	    =>	'1',
                'pre_shift_id'          =>  null,
                'previous_shift_name'   =>  null,
                'assigned_shift_id'     =>  $this->input->post('shift'),
                'created_on'	        =>	date('Y-m-d H:i:s'),
                'shift_applied_on'	    =>	date('Y-m-d H:i:s'),
            );
            $this->db->insert('tbl_shift_update_history',$history_data);

            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $single = $this->db->get('tbl_salon_employee')->row();
            if(!empty($single)){
                $this->db->where('id', $single->shift);
                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                $this->db->where('branch_id',$this->session->userdata('branch_id'));
                $pre_shift_details = $this->db->get('tbl_shift_master')->row();

                $pre_shift = $single->shift;
                $pre_shift_type = $single->shift_type;
                $new_shift = $this->input->post('shift');
                $new_shift_type = $this->input->post('shift_type');

                $new_arr = array_merge($data, $shift_data);
                $this->db->where('id', $this->input->post('id'));
                $this->db->update('tbl_salon_employee', $new_arr);

                if($new_shift != "" && $new_shift != $pre_shift){
                    $history_data = array(
                        'salon_id'		        =>	$this->session->userdata('salon_id'),
                        'branch_id'	            =>	$this->session->userdata('branch_id'),
                        'emp_id'		        =>	$single->id,
                        'assigned_shift_type'	=>	$new_shift_type,
                        'pre_shift_type'	    =>	$pre_shift_type,
                        'assign_type'	        =>	'2',
                        'is_shift_applied'	    =>	'1',
                        'pre_shift_id'          =>  $pre_shift,
                        'previous_shift_name'   =>  !empty($pre_shift_details) ? $pre_shift_details->shift_name : null,
                        'assigned_shift_id'     =>  $new_shift,
                        'created_on'	        =>	date('Y-m-d H:i:s'),
                        'shift_applied_on'	    =>	date('Y-m-d H:i:s'),
                    );
                    // echo '<pre>'; print_r($history_data); exit();
                    $this->db->insert('tbl_shift_update_history',$history_data);
                }
            }
            return 1;
        }
    }

    public function get_all_salon_customer()
    {       
        $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_customer.is_deleted', '0');
        $this->db->where('tbl_salon_customer.is_guest', '0');
        $this->db->order_by('tbl_salon_customer.id', 'DESC');
        $result = $this->db->get('tbl_salon_customer');
        return $result->result();
    }
    public function get_all_salon_services()
    {   
        $this->db->where('tbl_salon_emp_service.status', '1');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $this->db->select('tbl_salon_emp_service.*, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
        $this->db->from('tbl_salon_emp_service');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
      
        $this->db->order_by('tbl_salon_emp_service.id', 'DESC');
    
        $result = $this->db->get();
        return $result->result();
    }
    public function get_all_salon_products()
    {       
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('is_deleted', '0');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product');
        return $result->result();
    }
    public function get_all_salon_branch_products()
    {       
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product');
        return $result->result();
    }
    public function get_all_salon_stylists()
    {       
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
    }
    public function get_salon_all_stylists()
    {       
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation', 'left');
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_emp_designation.designation', 'Stylist');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
    }
    public function get_all_salon_employees()
    {       
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation', 'left');
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
    }

    public function get_all_salon_employee()
    {       
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name, tbl_shift_master.shift_name as shift_names,tbl_salon_emp_service.service_name as service_names, tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi');
       
        $this->db->select('GROUP_CONCAT(tbl_salon_emp_service.service_name) as service_names', false);
        $this->db->select('GROUP_CONCAT(tbl_salon_emp_service.gender) as genders', false);
        $this->db->select('GROUP_CONCAT(tbl_salon_emp_service.service_name_marathi) as service_names_marathi', false);
        $this->db->select('GROUP_CONCAT(tbl_admin_sub_category.sub_category) as sub_category_names', false);
        $this->db->select('GROUP_CONCAT(tbl_admin_sub_category.sub_category_marathi) as sub_category_marathi_names', false);
        $this->db->select('GROUP_CONCAT(tbl_admin_service_category.sup_category) as sup_category_names', false);
        $this->db->select('GROUP_CONCAT(tbl_admin_service_category.sup_category_marathi) as sup_category_marathi_names', false);
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');
		$this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');
		$this->db->join('tbl_shift_master', 'tbl_shift_master.id = tbl_salon_employee.shift', 'left');
		// $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_salon_employee.service_name', 'left');
        $this->db->join('tbl_salon_emp_service', 'FIND_IN_SET(tbl_salon_emp_service.id, tbl_salon_employee.service_name)', 'left'); // Join and find service names based on IDs
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category'); // Join and find service names based on IDs
        $this->db->group_by('tbl_salon_employee.id');
        $this->db->where('tbl_admin_service_category.is_deleted', '0'); 
	
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();

    }
    public function get_all_salon_employee_bookingwise()
    {       
        // Get today's date
        $today_date = date('Y-m-d');

        // Select the necessary columns and join with tbl_emp_designation
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');

        // Filter based on branch, salon, and not deleted
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');

        // Order by id in descending order
        $this->db->order_by('id', 'DESC');

        // Get all salon employees
        $salon_employees = $this->db->get('tbl_salon_employee')->result();

        // Initialize an array to store the sorted employees
        $sorted_employees = array();

        // Loop through each salon employee
        foreach ($salon_employees as $employee) {
            // Count the number of services for the stylist for today's date
            $this->db->where('stylist_id', $employee->id);
            $this->db->where('is_deleted', '0');
            $this->db->where_in('service_status', ['0','1']);
            $this->db->where('service_date', $today_date);
            $this->db->group_by('booking_id');
            $services_count = $this->db->count_all_results('tbl_booking_services_details');

            // Add the count as a new property to the employee object
            $employee->services_count_today = $services_count;

            // Add the employee to the sorted array
            $sorted_employees[$employee->id] = $employee;
        }

        // Sort the array based on the services count for today in descending order
        usort($sorted_employees, function($a, $b) {
            return $b->services_count_today - $a->services_count_today;
        });

        if(!empty($sorted_employees)){
            foreach($sorted_employees as &$result){
                $today_service_sale = (float)$this->get_employee_service_sale($result->id,date('Y-m-d'),date('Y-m-d'),'','1')['amount'];
                $today_service_product_sale = (float)$this->get_employee_service_product_sale($result->id,date('Y-m-d'),date('Y-m-d'),'','1')['amount'];
                $today_product_sale = (float)$this->get_employee_product_sale($result->id,date('Y-m-d'),date('Y-m-d'),'1')['amount'];
                $today_membership_sale = (float)$this->get_employee_membership_sale($result->id,date('Y-m-d'),date('Y-m-d'),'1')['amount'];
                $today_package_sale = (float)$this->get_employee_package_sale($result->id,date('Y-m-d'),date('Y-m-d'),'1')['amount'];
                $today_sale = $today_service_sale + $today_service_product_sale + $today_product_sale + $today_membership_sale + $today_package_sale;
                
                $total_available = $this->get_employee_available_total_time($result->id,date('Y-m-d'),$result->shift,$result->shift_type);
                
                $hours = floor($total_available['total_actual_avaiable'] / 60);
                $minutes = $total_available['total_actual_avaiable'] % 60;
                $formatted_time = sprintf('%02d:%02d', $hours, $minutes);

                $result->today_sale = (float)$today_sale;
                $result->total_actual_avaiable = $total_available['total_actual_avaiable'];
                $result->total_service_minutes = $total_available['total_service_minutes'];
                $result->total_working = $total_available['total_working'];
                $result->total_minutes_shift = $total_available['total_minutes_shift'];
                $result->total_minutes_break = $total_available['total_minutes_break'];
                $result->total_available_time = $formatted_time;
            }
        }
        return $sorted_employees;
    }
    public function get_all_salon_stylists_bookingwise()
    {       
        // Get today's date
        $today_date = date('Y-m-d');

        // Select the necessary columns and join with tbl_emp_designation
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');

        // Filter based on branch, salon, and not deleted
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_emp_designation.designation', 'Stylist');

        // Order by id in descending order
        $this->db->order_by('id', 'DESC');

        // Get all salon employees
        $salon_employees = $this->db->get('tbl_salon_employee')->result();

        // Initialize an array to store the sorted employees
        $sorted_employees = array();

        // Loop through each salon employee
        foreach ($salon_employees as $employee) {
            // Count the number of services for the stylist for today's date
            $this->db->where('stylist_id', $employee->id);
            $this->db->where('is_deleted', '0');
            $this->db->where_in('service_status', ['0','1']);
            $this->db->where('service_date', $today_date);
            $this->db->group_by('booking_id');
            $services_count = $this->db->count_all_results('tbl_booking_services_details');

            // Add the count as a new property to the employee object
            $employee->services_count_today = $services_count;

            // Add the employee to the sorted array
            $sorted_employees[$employee->id] = $employee;
        }

        // Sort the array based on the services count for today in descending order
        usort($sorted_employees, function($a, $b) {
            return $b->services_count_today - $a->services_count_today;
        });

        if(!empty($sorted_employees)){
            foreach($sorted_employees as &$result){
                $today_service_sale = (float)$this->get_employee_service_sale($result->id,date('Y-m-d'),date('Y-m-d'),'','1')['amount'];
                $today_service_product_sale = (float)$this->get_employee_service_product_sale($result->id,date('Y-m-d'),date('Y-m-d'),'','1')['amount'];
                $today_product_sale = (float)$this->get_employee_product_sale($result->id,date('Y-m-d'),date('Y-m-d'),'1')['amount'];
                $today_membership_sale = (float)$this->get_employee_membership_sale($result->id,date('Y-m-d'),date('Y-m-d'),'1')['amount'];
                $today_package_sale = (float)$this->get_employee_package_sale($result->id,date('Y-m-d'),date('Y-m-d'),'1')['amount'];
                $today_sale = $today_service_sale + $today_service_product_sale + $today_product_sale + $today_membership_sale + $today_package_sale;
                
                $total_available = $this->get_employee_available_total_time($result->id,date('Y-m-d'),$result->shift,$result->shift_type);
                
                $total_actual_avaiable = $total_available['total_actual_avaiable'];
                if ($total_actual_avaiable < 0) {
                    $total_actual_avaiable = 0;
                }
                $hours = floor($total_actual_avaiable / 60);
                $minutes = $total_actual_avaiable % 60;
                $formatted_time = sprintf('%02d hrs %02d mins', $hours, $minutes);

                $result->today_sale = (float)$today_sale;
                $result->total_actual_avaiable = $total_available['total_actual_avaiable'];
                $result->total_service_minutes = $total_available['total_service_minutes'];
                $result->total_working = $total_available['total_working'];
                $result->total_minutes_shift = $total_available['total_minutes_shift'];
                $result->total_minutes_break = $total_available['total_minutes_break'];
                $result->total_available_time = $formatted_time;
                
                $month_target = $this->get_single_target_details($result->salary_method);
                $year = date('Y');
                $month = date('m');                
                $start_date = date("$year-$month-01");
                $end_date = date("Y-m-t", strtotime($start_date));
                $start_date_mysql = date("Y-m-d", strtotime($start_date));
                $end_date_mysql = date("Y-m-d", strtotime($end_date));
                $start_timestamp = strtotime($start_date);
                $end_timestamp = strtotime($end_date);
                $total_days = ($end_timestamp - $start_timestamp) / (60 * 60 * 24) + 1;
                $emp_leaves = $this->get_employee_leaves($result->id,$start_date_mysql,$end_date_mysql);
                $weekly_off = 0;

                $consider_days = $total_days - $emp_leaves - $weekly_off;
                if(!empty($month_target)){
                    $start_amount = $month_target->start_amount;
                    $end_amount = $month_target->end_amount;
                    
                    $daily_target_min = $start_amount/$consider_days;
                    $daily_target_max = $end_amount/$consider_days;
                }else{
                    $daily_target_min = 0;
                    $daily_target_max = 0;
                }

                $result->daily_target_min = $daily_target_min;
                $result->daily_target_max = $daily_target_max;
                $result->is_month_target = !empty($month_target) ? true : false;
            }
        }
        return $sorted_employees;
    }
    public function get_employee_available_total_time($staff,$date,$shift,$shift_type){
        $this->db->select('*');
        $this->db->where('stylist_id', $staff);
        $this->db->where('is_deleted', '0');
        $this->db->where_in('service_status', ['0', '1']);
        $this->db->where('DATE(service_date)', date('Y-m-d', strtotime($date)));
        $services = $this->db->get('tbl_booking_services_details')->result_array();
    
        // Initialize total minutes
        $total_minutes = 0;
        $total_working = 0;
        $total_minutes_shift = 0;
        $total_minutes_break = 0;

        // Calculate the duration for each entry and sum it up
        foreach ($services as $service) {
            $service_from = new DateTime($service['service_from']);
            $service_to = new DateTime($service['service_to']);
            $interval = $service_from->diff($service_to);
            $minutes = ($interval->h * 60) + $interval->i;
            $total_minutes += $minutes;
        }

        $shift_details = $this->get_stylist_shift_details($shift,$shift_type,$date);
        if(!empty($shift_details)){
            $shift_from = date('Y-m-d H:i:s',strtotime($date.' '.$shift_details['shift_from']));
            $shift_to = date('Y-m-d H:i:s',strtotime($date.' '.$shift_details['shift_to']));
            $shift_break_from = date('Y-m-d H:i:s',strtotime($date.' '.$shift_details['shift_break_from']));
            $shift_break_to = date('Y-m-d H:i:s',strtotime($date.' '.$shift_details['shift_break_to']));
            
            $shift_from = new DateTime($shift_from);
            $shift_to = new DateTime($shift_to);
            $interval = $shift_from->diff($shift_to);
            $minutes = ($interval->h * 60) + $interval->i;
            $total_minutes_shift += $minutes;

            $shift_break_from = new DateTime($shift_break_from);
            $shift_break_to = new DateTime($shift_break_to);
            $interval = $shift_break_from->diff($shift_break_to);
            $minutes = ($interval->h * 60) + $interval->i;
            $total_minutes_break += $minutes;

            $total_working = $total_minutes_shift - $total_minutes_break;
        }

        return array(
            'total_minutes_shift'   =>  $total_minutes_shift,
            'total_minutes_break'   =>  $total_minutes_break,
            'total_working'         =>  $total_working,
            'total_service_minutes' =>  $total_minutes,
            'total_actual_avaiable' =>  $total_working - $total_minutes,
        );
    }


    public function get_single_salon_employee()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_salon_employee');
        return $result->row();
    }
    public function get_salon_designations()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_emp_designation');
        return $result->result();
    }

    public function get_shift()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_shift_master');
        return $result->result();
    }
    public function get_designation()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_emp_designation');
        return $result->result();
    }



     // For Add Membership Management 



     public function add_membership(){
		$data = array(
			'branch_id' 		=> $this->session->userdata('branch_id'),
			'salon_id' 			=> $this->session->userdata('salon_id'),
			'membership_id' 	=> $this->input->post('membership_id'),
			'membership_name' 	=> $this->input->post('membership_name'),
			'gender' 			=> $this->input->post('membership_gender'),
			'regular_price' 	=> $this->input->post('regular_price'),
			'service_discount' 	=> $this->input->post('service_discount'),
			'product_discount' 	=> $this->input->post('product_discount'),
			'discount_in' 		=> $this->input->post('discount_in'),
			'membership_price' 	=> $this->input->post('membership_price'),
			'description' 		=> $this->input->post('description'),
			'duration' 			=> $this->input->post('duration'),
			'duration_end' 		=> $this->input->post('duration_end'),
			'bg_color_input' 	=> $this->input->post('bg_color_input'),
			'bg_color' 			=> $this->input->post('bg_color'),
			'text_color_input' 	=> $this->input->post('text_color_input'),
			'text_color' 		=> $this->input->post('text_color'),
		);

        $this->set_onboarding_status('9');

        if($this->input->post('id') == ""){
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_memebership', $new_arr);
            return 0;
         }else{
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_memebership', $data);
            return 1;
        }
    } 

    public function get_all_memebership(){
		$this->db->where('is_deleted', '0');
        $this->db->where('status','1');
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('id', 'DESC');
		$result = $this->db->get('tbl_memebership');
		return $result->result();
	} 
     
     
     
     
     
    public function get_single_memebership(){
		$this->db->where('is_deleted', '0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$this->db->where('id', $this->uri->segment(2));
		$result = $this->db->get('tbl_memebership');
		return $result->row();
	}


    // For Add Package Management 



    

   
  


    // for customer discount
    public function add_customer_discount()
    {
        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'days' => $this->input->post('days'),
            'discount' => $this->input->post('discount'),
        );
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_discount_master', $new_arr);
            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_discount_master', $data);
            return 1;
        }
    }

    public function get_all_discount()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_discount_master');
        return $result->result();
    }

    public function get_single_discount()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_discount_master');
        return $result->row();
    } 

    public function add_facilities($facilities_image)
    {
        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'facilities_name' => $this->input->post('facilities_name'),
            'facilities_image' => $facilities_image,
        );
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_salon_facilities', $new_arr);
            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_salon_facilities', $data);
            return 1;
        }
    }

    public function get_all_facilities()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_salon_facilities');
        return $result->result();
    }

    public function get_single_facilities(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_salon_facilities');
        return $result->row();
    }



    // For Add course 



    public function add_course(){
        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'course_name' => $this->input->post('course_name'),
            // 'service' => implode(',',$this->input->post('service')),
            'course_details' => $this->input->post('course_details'),
            // 'time' => $this->input->post('time'),
            'fees_amount' => $this->input->post('fees_amount'),
            'duration' => $this->input->post('duration'),
            'holiday' => implode(',',$this->input->post('holiday')),
        );
        $this->set_onboarding_status('18');
        
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_course_master', $new_arr);
            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_course_master', $data);
            return 1;
        }
    }
	public function get_saloon_services(){ 
		$this->db->where_in("is_deleted",'0');
		$result = $this->db->get('tbl_salon_service_category');
		return $result->result();
	}
	public function get_selected_services($service_id){
		$exp = explode(",",$service_id);
		$this->db->where_in("id",$exp);
		$result = $this->db->get('tbl_salon_service_category');
		return $result->result();
	}
    public function get_all_course()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_course_master');
        return $result->result();
    }


    public function get_single_course()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_course_master');
        return $result->row();
    }





    // For Add reward points 



    public function set_reward_point(){
		$data = array(
            'branch_id' 				=> $this->session->userdata('branch_id'),
            'salon_id' 					=> $this->session->userdata('salon_id'),
            'reward_id' 				=> $this->input->post('reward_id'),
            'rs_per_reward' 			=> $this->input->post('rs_per_reward'),
            'reward_point' 				=> $this->input->post('reward_point'),
            'gender'		 			=> $this->input->post('gender'),
            'minimum_reward_required'	=> $this->input->post('minimum_reward_required'),
            'maximum_reward_required'	=> $this->input->post('maximum_reward_required'), 
        );

        $this->set_onboarding_status('14');

        if($this->input->post('id') == ""){
            $date = array(
                'created_on'  => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data,$date);
            $this->db->insert('tbl_reward_point', $new_arr);
            return 0;
        }else{
            $this->db->where('id',$this->input->post('id'));
            $this->db->update('tbl_reward_point', $data);
            return 1;
        }
    } 
    public function get_ready_reward_point(){
		$branch = $this->get_user_profile();
          
        $this->db->where('is_deleted','0');  
        $this->db->where('status','1');  
		
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }else{
			if($branch->category == "0"){
				$this->db->where('gender','0');
			}else if($branch->category == "1"){
				$this->db->where('gender','1');
			}
		}
        $result = $this->db->get('tbl_admin_reward_point');
        return $result->result();
    }
    public function get_single_ready_reward_point(){
        $this->db->where('is_deleted','0');   
        $this->db->where('id',$_GET['value']);  
        $result = $this->db->get('tbl_admin_reward_point');
        return $result->row();
    }
    public function get_all_reward_point(){
		$branch = $this->get_user_profile();
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
		
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }else{
			if($branch->category == "0"){
				$this->db->where('gender','0');
			}else if($branch->category == "1"){
				$this->db->where('gender','1');
			}	
		}
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_reward_point');
        return $result->result();
    }

    public function get_single_reward_point(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id',$_GET['edit']);
        $result = $this->db->get('tbl_reward_point');
        return $result->row();
    }


    public function check_reward_point_ajax()
    {
        $gender = $this->input->post('gender');
        $this->db->where('gender', $gender);
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_reward_point')->row();
    
        if (!empty($result)) {
            echo json_encode($result);
        }
    }



    // For Add Student mangement 



    // public function add_student()
    // {
    //     $student_name = $this->input->post('student_name');
    //     $existing_student = $this->db->get_where('tbl_student', array('student_name' => $student_name))->row();
    //     $data = array(
    //         'branch_id'             => $this->session->userdata('branch_id'),
    //         'salon_id'              => $this->session->userdata('salon_id'),
    //         'phone'                 => $this->input->post('phone'),
    //         'description'           => $this->input->post('description'),
    //         'address'               => $this->input->post('address'),
    //         'course_name'           => $this->input->post('course_name'),
    //         'fees_amount'           => $this->input->post('fees_amount'),
    //         'duration'              => $this->input->post('duration'),
    //         'email'                 => $this->input->post('email'),
    //         'dob'                   => $this->input->post('dob'),
    //         'add_date'              => $this->input->post('add_date'),
    //         'gender'                => $this->input->post('gender'),
    //     );
    
    //     if (empty($existing_student)) {
    //         $data['student_name'] = $student_name;
    //         $date = array('created_on' => date("Y-m-d H:i:s"));
    //         $new_arr = array_merge($data, $date);
    //         $this->db->insert('tbl_student', $new_arr);
    //         return 0;
    //     } else {
    //         $this->db->where('id', $existing_student->id);
    //         $this->db->update('tbl_student', $data);
    //         return 1; 
    //     }
    // }

    public function add_student()
    {
        // echo "<pre>";print_r($this->input->post('old_student_id'));exit;
        $data = array(
            'branch_id'             => $this->session->userdata('branch_id'),
            'salon_id'              => $this->session->userdata('salon_id'),
            'phone'                 => $this->input->post('phone'),
            'student_name'          => $this->input->post('student_name'),
            'description'           => $this->input->post('description'),
            'address'               => $this->input->post('address'),
            'fees_amount'           => $this->input->post('fees_amount'),
            'duration'              => $this->input->post('duration'),
            'email'                 => $this->input->post('email'),
            'dob'                   => $this->input->post('dob'),
            'add_date'              => $this->input->post('add_date'),
            'gender'                => $this->input->post('gender'),
        );
        // echo "<pre>";print_r($data);exit;
        if ($this->input->post('old_student_id') == "") {
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_student', $new_arr);
            $student_id = $this->db->insert_id();
        }else{
            $this->db->where('id', $this->input->post('old_student_id'));
            $this->db->update('tbl_student', $data);
            $student_id = $this->input->post('old_student_id');
        }

        $course_data = array(
            'branch_id'           => $this->session->userdata('branch_id'),
            'salon_id'            => $this->session->userdata('salon_id'),
            'total_fees'          => $this->input->post('fees_amount'),
            'course_name'         => $this->input->post('course_name'),
            'total_paid_fees'     => '0.00',
            'total_pending_fees'  => $this->input->post('fees_amount'),
            'amount_to_paid'      => $this->input->post('fees_amount'),
            'student_name'        => $student_id,
            'created_on'          => date("Y-m-d H:i:s"),
        );
        $this->db->insert('tbl_payment_entry',$course_data);
        $this->session->set_flashdata('success', 'Success ! Record added successfully');
        redirect('student-list');
    }

    public function update_student()
    {
        $data = array(
            'branch_id'             => $this->session->userdata('branch_id'),
            'salon_id'              => $this->session->userdata('salon_id'),
            'phone'                 => $this->input->post('phone'),
            'student_name'          => $this->input->post('student_name'),
            'description'           => $this->input->post('description'),
            'address'               => $this->input->post('address'),
            'email'                 => $this->input->post('email'),
            'dob'                   => $this->input->post('dob'),
            'add_date'              => $this->input->post('add_date'),
            'gender'                => $this->input->post('gender'),
        );
        if ($this->input->post('old_student_id') == "") {
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_student', $new_arr);
            $student_id = $this->db->insert_id();
        }else{
            $this->db->where('id', $this->input->post('old_student_id'));
            $this->db->update('tbl_student', $data);
            $student_id = $this->input->post('old_student_id');
        }
        $this->session->set_flashdata('success', 'Success ! Record added successfully');
        redirect('payment-entry/' . $student_id);
    }


    // public function get_all_student()
    // {
    //     $this->db->from('tbl_student');
    //     $this->db->join('tbl_course_master', 'tbl_student.id = tbl_course_master.id', 'left');
    //     $this->db->join('tbl_payment_entry','tbl_payment_entry.id = tbl_student.id','left');
    //     $this->db->join('tbl_payment_entry as payment_entry','payment_entry.id = tbl_course_master.course_name','left');
    //     $this->db->where('tbl_student.branch_id', $this->session->userdata('branch_id'));
    //     $this->db->where('tbl_student.salon_id', $this->session->userdata('salon_id'));
    //     $this->db->where('tbl_student.is_deleted', '0');
    //     $this->db->order_by('tbl_student.id', 'DESC');
    //     $result = $this->db->get();
    //     return $result->result();
    // }


public function get_all_student()
{
    $this->db->where('tbl_student.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_student.salon_id', $this->session->userdata('salon_id'));
    $this->db->where('tbl_student.is_deleted', '0');
    $this->db->order_by('tbl_student.id', 'DESC');
    $result = $this->db->get('tbl_student');
    return $result->result();
}
public function get_student_courses($id)
{
    $this->db->select('tbl_payment_entry.*, tbl_course_master.course_name');
    $this->db->join('tbl_course_master','tbl_payment_entry.course_name = tbl_course_master.id');
    $this->db->where('tbl_payment_entry.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_payment_entry.salon_id', $this->session->userdata('salon_id'));
    $this->db->where('tbl_payment_entry.is_deleted', '0');
    $this->db->where('tbl_payment_entry.student_name', $id);
    $this->db->order_by('tbl_payment_entry.id', 'DESC');
    $result = $this->db->get('tbl_payment_entry');
    return $result->result();
}


    public function get_all_fees_history()
    {
        $this->db->where('is_deleted', '0');
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_student');
        return $result->result();
    }

    public function get_single_student()
    {
        $this->db->select('tbl_student.*, 
                       tbl_payment_entry.course_name as payment_course_name,
                       tbl_course_master.course_name as master_course_name,tbl_payment_entry.total_fees');
        $this->db->join('tbl_payment_entry', 'tbl_payment_entry.student_name = tbl_student.id', 'left');
        $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_payment_entry.course_name', 'left');
        $this->db->where('tbl_student.is_deleted', '0');
        $this->db->where('tbl_student.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_student.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_student.id', $this->uri->segment(2));
        $result = $this->db->get('tbl_student');
        return $result->row();
    }
    public function get_course()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_course_master');
        return $result->result();
    }


    // public function get_course()
    // {
    //     $this->db->select('tbl_student.*, 
    //     tbl_payment_entry.course_name as payment_course_name,
    //     tbl_course_master.course_name as master_course_name');

    //     $this->db->join('tbl_payment_entry', 'tbl_payment_entry.student_name = tbl_student.id', 'left');
    //     $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_payment_entry.course_name', 'left');

    //     $this->db->where('tbl_student.is_deleted', '0');
    //     $this->db->where('tbl_student.branch_id', $this->session->userdata('branch_id'));
    //     $this->db->where('tbl_student.salon_id', $this->session->userdata('salon_id'));
    //     $result = $this->db->get('tbl_student');
    //     return $result->result();
    // }



  



    // public function get_fees_history_all_student()
    // {
    //     $this->db->select('tbl_fees_history.*, tbl_student.student_name');
    //     $this->db->from('tbl_fees_history');
    //     $this->db->join('tbl_student', 'tbl_fees_history.student_name = tbl_student.id', 'left');
    //     $this->db->where('tbl_student.branch_id', $this->session->userdata('branch_id'));
    //     $this->db->where('tbl_student.salon_id', $this->session->userdata('salon_id'));
    //     $this->db->where('tbl_fees_history.is_deleted', '0');
    //     $this->db->order_by('tbl_fees_history.id', 'DESC');
        
    //     $result = $this->db->get();
    //     return $result->result();
    // }

    public function get_fees_history_all_student($id)
    {
        $this->db->select('tbl_fees_history.*, tbl_student.student_name, tbl_student.phone, tbl_course_master.course_name');
        $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_fees_history.course_name', 'left');
        $this->db->join(' tbl_student', ' tbl_student.id = tbl_fees_history.student_name', 'left');
        $this->db->where('tbl_fees_history.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_fees_history.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_fees_history.payment_entry_id', $id);
        $this->db->where('tbl_fees_history.is_deleted', '0');
        $this->db->order_by('tbl_fees_history.id', 'DESC');
        $result = $this->db->get('tbl_fees_history');
        return $result->result();
    }
    
    // public function get_payment_history_by_student_id($id)
    // {
    //     // $this->db->where('tbl_payment_entry.student_name', $student_name);
    //     $this->db->where('tbl_payment_entry.student_name', $id);
    //     $this->db->where('tbl_payment_entry.is_deleted', '0');
    //     $this->db->order_by('date', 'DESC');
    //     $result = $this->db->get('tbl_payment_entry');
    //     return $result->result();
    // }


     public function get_payment_history_by_student_id()
    {
        $this->db->select('tbl_payment_entry.*,tbl_student.student_name,tbl_course_master.course_name,tbl_student.phone as mobile_number');
        $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_payment_entry.course_name', 'left');
        $this->db->join('tbl_student', 'tbl_student.id = tbl_payment_entry.student_name', 'left');
        $this->db->where('tbl_payment_entry.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_payment_entry.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_payment_entry.is_deleted', '0');
        $this->db->order_by('tbl_payment_entry.id', 'DESC');
        $result = $this->db->get('tbl_payment_entry');
        return $result->result();
    }


    // public function get_student_fees_history($student_id)
    // {
    //     $this->db->select('tbl_student.*, tbl_course_master.course_name, tbl_payment_entry.total_paid_fees, tbl_payment_entry.total_pending_fees');
    //     $this->db->from('tbl_student');
    //     $this->db->join('tbl_course_master', 'tbl_student.id = tbl_course_master.id', 'left');
    //     $this->db->join('tbl_payment_entry', 'tbl_student.id = tbl_payment_entry.student_name', 'left');
    //     $this->db->where('tbl_student.id', $student_id);
    //     $this->db->where('tbl_student.branch_id', $this->session->userdata('branch_id'));
    //     $this->db->where('tbl_student.salon_id', $this->session->userdata('salon_id'));
    //     $this->db->where('tbl_student.is_deleted', '0');
    //     $this->db->order_by('tbl_student.id', 'DESC');
    //     $result = $this->db->get();

    //     return $result->result();
    // }


    


    // public function get_student_fees_history($student_id)
    // {
    //     $this->db->select('tbl_payment_entry.*, tbl_student.student_name,tbl_course_master.course_name,tbl_fees_history.total_paid_fees,tbl_fees_history.total_pending_fees,tbl_fees_history.amount_to_paid');
    //     $this->db->join('tbl_student','tbl_payment_entry.student_name = tbl_student.id', 'left');
    //     $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_payment_entry.course_name', 'left');
    //     $this->db->join('tbl_fees_history', 'tbl_fees_history.course_name = tbl_payment_entry.course_name', 'left');
    //     $this->db->where('tbl_payment_entry.branch_id', $this->session->userdata('branch_id'));
    //     $this->db->where('tbl_payment_entry.salon_id', $this->session->userdata('salon_id'));
    //     $this->db->where('tbl_payment_entry.student_name', $student_id);
    //     $this->db->where('tbl_payment_entry.is_deleted', '0');
    //     $this->db->order_by('tbl_payment_entry.id', 'DESC');
    //     $result = $this->db->get('tbl_payment_entry');
    //     return $result->result();
    // }

    public function get_student_fees_history($student_id)
    {
        $this->db->select('tbl_fees_history.*, tbl_student.student_name,tbl_course_master.course_name as course_enrolled');
        $this->db->join('tbl_student','tbl_student.id = tbl_fees_history.student_name', 'left');
        $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_fees_history.course_name', 'left');
        $this->db->where('tbl_fees_history.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_fees_history.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_fees_history.student_name', $student_id);
        $this->db->where('tbl_fees_history.is_deleted', '0');
        $this->db->order_by('tbl_fees_history.id', 'DESC');
        $result = $this->db->get('tbl_fees_history');
        return $result->result();
    }

    public function get_unique_student_name($student_id){
        $this->db->where('tbl_student.id', $student_id);
        $this->db->where('tbl_student.is_deleted', '0');
        $this->db->order_by('tbl_student.id', 'DESC');
        $result = $this->db->get('tbl_student');
        return $result->row();
    }
    
    // For Payment mangement 



    // public function payment_entry($attachment_file)
    // {
    //     $this->db->where('payment_entry_id',$this->input->post('id'));
	// 	$exist = $this->db->get('tbl_fees_history');
	// 	$exist = $exist->row();
    //     // echo "<pre>";print_r($exist);exit;
    //     if(empty($exist)){
    //     $data = array(
    //         'branch_id'             => $this->session->userdata('branch_id'),
    //         'salon_id'              => $this->session->userdata('salon_id'),
    //         'student_name'          => $this->input->post('student_name'),
    //         'course_name'           => explode('@@@',$this->input->post('course_name'))[0],
    //         'payment_entry_id'      => explode('@@@',$this->input->post('course_name'))[1],
    //         'total_fees'            => $this->input->post('total_fees'),
    //         'total_paid_fees'       => 0,
    //         'total_pending_fees'    => $this->input->post('total_pending_fees'),
    //         'amount_to_paid'        => $this->input->post('amount_to_paid'),
    //         'date'                  => $this->input->post('date'),
    //         'payment_mode'          => $this->input->post('payment_mode'),
    //         'remark'                => $this->input->post('remark'),
    //         'attachment_file'       => $attachment_file,
    //         'created_on' 		    => date("Y-m-d H:i:s"),
    //     );
    //     // if ($this->input->post('payment_id') == "") {
    //     //     $date = array(
    //     //         'created_on'    => date("Y-m-d H:i:s")
    //     //     );
    //     //     $new_arr = array_merge($data, $date);
    //     //     $this->db->insert('tbl_payment_entry', $new_arr);
    //     //     $last_id = $this->db->insert_id();
    //     // } else {
    //     //     $this->db->where('id', $this->input->post('payment_id'));
    //     //     $this->db->update('tbl_payment_entry', $data); 
    //     //     $last_id = $this->db->insert_id();
    //     //     $this->session->set_flashdata('success', 'Success ! Record updated successfully');
    //     //     redirect('fees-history/' . $this->input->post('payment_id'));
    //     // }

    //         $this->db->insert('tbl_fees_history', $data);
    //         $this->session->set_flashdata('success', 'Success ! Record added successfully');
    //         redirect('payment-history');
    //     }else{
    //         $data = array(
    //             'branch_id'             => $this->session->userdata('branch_id'),
    //             'salon_id'              => $this->session->userdata('salon_id'),
    //             'student_name'          => $this->input->post('student_name'),
    //             'course_name'           => explode('@@@',$this->input->post('course_name'))[0],
    //             'payment_entry_id'      => explode('@@@',$this->input->post('course_name'))[1],
    //             'total_fees'            => $this->input->post('total_fees'),
    //             'total_paid_fees'       => $this->input->post('total_paid_fees')+$this->input->post('amount_to_paid'),
    //             'total_pending_fees'    => $this->input->post('total_fees')-$this->input->post('total_pending_fees'),
    //             'amount_to_paid'        => $this->input->post('amount_to_paid'),
    //             'date'                  => $this->input->post('date'),
    //             'payment_mode'          => $this->input->post('payment_mode'),
    //             'remark'                => $this->input->post('remark'),
    //             'attachment_file'       => $attachment_file,
    //             'created_on' 		    => date("Y-m-d H:i:s"),
    //         );
    //         $this->db->insert('tbl_fees_history', $exist->id);
    //         $this->session->set_flashdata('success', 'Success ! Record added successfully');
    //         redirect('payment-history');
    //     }
    // }




    public function payment_entry($attachment_file)
    {
        $data = array(
            'branch_id'             => $this->session->userdata('branch_id'),
            'salon_id'              => $this->session->userdata('salon_id'),
            'student_name'          => $this->input->post('student_name'),
            'course_name'           => explode('@@@',$this->input->post('course_name'))[0],
            'payment_entry_id'      => explode('@@@',$this->input->post('course_name'))[1],
            'total_fees'            => $this->input->post('total_fees'),
            'total_paid_fees'       => $this->input->post('total_paid_fees'),
            'total_pending_fees'    => $this->input->post('total_pending_fees'),
            'amount_to_paid'        => $this->input->post('amount_to_paid'),
            'date'                  => date('Y-m-d',strtotime($this->input->post('date'))),
            'payment_mode'          => $this->input->post('payment_mode'),
            'transaction_id'        => $this->input->post('transaction_id'),
            'remark'                => $this->input->post('remark'),
            'attachment_file'       => $attachment_file,
        );
        // echo '<pre>'; print_r($_POST); exit();
        if ($this->input->post('payment_id') == "") {
            $history_data = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_array_data = array_merge($data, $history_data);
            $this->db->insert('tbl_fees_history', $new_array_data);

            $student_data = array(
                'total_pending_fees'    =>  $this->input->post('total_pending_fees'),
                'total_paid_fees'       =>  (string)(($this->input->post('total_paid_fees') != "" ? (float)$this->input->post('total_paid_fees') : 0.00) + ($this->input->post('amount_to_paid') != "" ? (float)$this->input->post('amount_to_paid') : 0.00)),
            );
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('student_name',$this->input->post('student_name'));
            $this->db->where('id',explode('@@@',$this->input->post('course_name'))[1]);
            $this->db->where('course_name',explode('@@@',$this->input->post('course_name'))[0]);
            $this->db->where('is_deleted','0');
            $this->db->update('tbl_payment_entry',$student_data);

            $this->session->set_flashdata('success', 'Success ! Record added successfully');
            redirect('fees-history/'.explode('@@@',$this->input->post('course_name'))[1]);
        } 
    }

    public function get_all_payment_entry()
    {
        $this->db->select('tbl_payment_entry.*, tbl_student.student_name');
        $this->db->select('tbl_payment_entry.*, tbl_course_master.course_name');
        $this->db->from('tbl_payment_entry');
        $this->db->join('tbl_student', 'tbl_payment_entry.id = tbl_student.id', 'left');
        $this->db->join('tbl_course_master', 'tbl_payment_entry.id = tbl_course_master.id', 'left');
        $this->db->where('tbl_payment_entry.is_deleted', '0');
        $this->db->where('tbl_payment_entry.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_payment_entry.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_payment_entry.id', 'DESC');
        $result = $this->db->get();
        return $result->result();
    }

    public function get_single_payment_entry()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_payment_entry');
        return $result->row();
    }

    public function get_student_name()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('tbl_student.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_student.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_student');
        return $result->result();
    }
    public function get_course_detail($course_name_id)
    {
        $this->db->where('id', $course_name_id);
        $result = $this->db->get('tbl_course_master')->row();
        $data = array();
        if (!empty($result)) {
            $data['fees_amount'] = $result->fees_amount;
            $data['duration'] = $result->duration;
        }
        return $data;
    }
    // public function get_course_fees($id)
    // {
    //     $this->db->where('is_deleted', '0');
    //     $this->db->where('branch_id', $this->session->userdata('branch_id'));
    //     $this->db->where('salon_id', $this->session->userdata('salon_id'));
    //     $this->db->where('id', $id);
    //     $result = $this->db->get('tbl_course_master');
    //     return $result->row();
    // }


    // public function get_course_fees($id)
    // {
    //     $this->db->select('tbl_student.*, 
    //     tbl_payment_entry.course_name as payment_course_name,
    //     tbl_course_master.course_name as master_course_name');
    //     $this->db->join('tbl_payment_entry', 'tbl_payment_entry.student_name = tbl_student.id', 'left');
    //     $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_payment_entry.course_name', 'left');
    //     $this->db->where('tbl_student.is_deleted', '0');
    //     $this->db->where('tbl_student.branch_id', $this->session->userdata('branch_id'));
    //     $this->db->where('tbl_student.salon_id', $this->session->userdata('salon_id'));
    //     $this->db->where('tbl_student.id', $id);
    //     $result = $this->db->get('tbl_student');
    //     return $result->row();
    // }


    public function get_course_fees($id)
    {
        $this->db->select('tbl_payment_entry.*, 
        tbl_student.student_name as payment_student_name,
        tbl_course_master.course_name as master_course_name');
        $this->db->join('tbl_student', 'tbl_student.id = tbl_payment_entry.student_name', 'left');
        $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_payment_entry.course_name', 'left');
        $this->db->where('tbl_payment_entry.is_deleted', '0');
        $this->db->where('tbl_payment_entry.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_payment_entry.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_payment_entry.student_name', $id);
        $result = $this->db->get('tbl_payment_entry');
        return $result->result();
    }


   
    public function get_old_course_name($old_course_name){
        $this->db->where('id', $old_course_name->course_name);
		$result = $this->db->get('tbl_course_master');
		return $result->row();
    }

   


    // For salary Slip
    public function set_salary_slip()
    {   
        // echo '<pre>'; print_r($_POST); exit();
        if ($this->input->post('loan_deduct') == 'Yes') {
            $deduct_amt = $this->input->post('deduct_amt');
        } else if ($this->input->post('loan_deduct') == 'No') {
            $deduct_amt = '0';
        } else {
            $deduct_amt = '0';
        }
        
        $is_loan_active = $this->input->post('is_loan_active') == '1' ? '1' : '0';
        $active_loan_details_ids = $this->input->post('active_loan_details_ids');
        $deduct_loan_amt = $this->input->post('deduct_loan_amt') != "" ? (float)$this->input->post('deduct_loan_amt') : 0.00;
        if($deduct_loan_amt > 0.00){
            $is_loan_deduction = '1';
        }else{
            $is_loan_deduction = '0';
        }

        $salary_month = $this->input->post('salary_month');
        $salary_year = $this->input->post('salary_year');
        $from_date = date('Y-m-01', strtotime("$salary_year-$salary_month"));
        $to_date = date('Y-m-t', strtotime("$salary_year-$salary_month"));
        $total_months_days = cal_days_in_month(CAL_GREGORIAN, $salary_month, $salary_year);

        $this->db->where('id', $this->input->post('staff'));
        $this->db->where('is_deleted', '0');
        $result = $this->db->get(' tbl_salon_employee');
        $result = $result->row();
        $basic_pay = 0;
        $paid_salary_amt = 0;
        if (!empty($result)) {
            $basic_pay = $result->salary;
            $per_day_amt = $result->salary / $total_months_days;
            $total_full_days_amt = $per_day_amt * $this->input->post('present_days');
            $total_half_days_amt = ($per_day_amt / 2) * $this->input->post('half_days');
            $paid_salary_amt = $total_full_days_amt + $total_half_days_amt - $deduct_loan_amt;
        }
        $data = array(
            'emp_id'                => $this->input->post('staff'),
            'salon_id'              => $this->session->userdata('salon_id'),
            'branch_id'             => $this->session->userdata('branch_id'),
            'salaried_month'        => $salary_month,
            'salaried_year'         => $salary_year,
            'total_months_days'     => $total_months_days,
            'from_date'             => date("Y-m-d", strtotime($from_date)),
            'to_date'               => date("Y-m-d", strtotime($to_date)),
            'present_days'          => $this->input->post('present_days'),
            'half_days'             => $this->input->post('half_days'),
            'absent_days'           => $this->input->post('absent_days'),
            'leave_days'            => $this->input->post('leave_days'),
            'payed_date'            => date("Y-m-d", strtotime($this->input->post('payed_date'))),
            'remark'                => $this->input->post('remark'),
            'basic_pay'             => $basic_pay,
            'paid_salary_amt'       => $paid_salary_amt,

            'product_incentive'     => $this->input->post('product_incentive'),
            'target_incentive'      => $this->input->post('target_incentive'),
            'opening_pending_incentive'    => $this->input->post('prev_pending_incentive'),
            'paid_incentive'               => $this->input->post('paid_incentive'),
            'closing_pending_incentive'    => $this->input->post('pending_incentive'),
            'paid_amt'                      => $paid_salary_amt + ($this->input->post('paid_incentive') != "" ? floatval($this->input->post('paid_incentive')) : 0),

            'is_loan_deduction'     => $is_loan_deduction,
            'deducted_loan_ids'     => $is_loan_deduction == '1' ? $active_loan_details_ids : null,
            'loan_deduction_amount' => $is_loan_deduction == '1' ? $deduct_loan_amt : null,
            'created_on'            => date('Y-m-d H:i:s'),
        );
        // echo '<pre>'; print_r($data);exit;
        $this->db->insert('tbl_salon_emp_salary_slip', $data);
        $salary_slip_id = $this->db->insert_id();

        $current_pending_incentive_data = array(
            'current_pending_incentive' =>  $this->input->post('pending_incentive')
        );
        $this->db->where('id',$this->input->post('staff'));
        $this->db->update('tbl_salon_employee',$current_pending_incentive_data);
        
        $active_loan_details_ids_array = explode(',',$active_loan_details_ids);
        if($is_loan_deduction == '1' && !empty($active_loan_details_ids_array) && $active_loan_details_ids_array != "" && count($active_loan_details_ids_array) > 0){
            $single_loan_paid_amount = $deduct_loan_amt / count($active_loan_details_ids_array);
            for($k=0;$k<count($active_loan_details_ids_array);$k++){
                $this->db->where('id', $active_loan_details_ids_array[$k]);
                $this->db->where('is_deleted', '0');
                $exist = $this->db->get('tbl_employee_loan')->row();
                if(!empty($exist)){
                    $pre_payment_ids = $exist->loan_payment_ids != "" ? explode(',',$exist->loan_payment_ids) : [];

                    $pre_paid = $exist->loan_paid_amount != "" ? (float)$exist->loan_paid_amount : 0.00;
                    $pre_remaining = $exist->loan_remaning_amount != "" ? (float)$exist->loan_remaning_amount : 0.00;
                    $now_paid_amount = $single_loan_paid_amount != "" ? (float)$single_loan_paid_amount : 0.00;
                    $closing_due = $pre_remaining - $now_paid_amount;
                    $new_loan_paid_amount = $pre_paid + $now_paid_amount;

                    $data = array(
                        'branch_id' 		=> $this->session->userdata('branch_id'),
                        'salon_id' 	        => $this->session->userdata('salon_id'),
                        'employee_id' 		=> $exist->employee_id,
                        'loan_amount' 		=> $exist->amount,
                        'loan_id' 		    => $exist->id,
                        'payment_source'    => '1',
                        'opening_due'       => $pre_remaining,
                        'closing_due'       => $closing_due,
                        'paid_amount'       => $now_paid_amount,
                        'payment_date'      => date('Y-m-d',strtotime($this->input->post('payed_date'))),
                        'created_on'        => date("Y-m-d H:i:s")
                    );            
                    $this->db->insert('tbl_employee_loan_payments', $data);
                    $payment_id = $this->db->insert_id();

                    $pre_payment_ids[] = $payment_id;
                    $loan_update_data = array(
                        'loan_paid_amount'      =>  $new_loan_paid_amount,
                        'loan_remaning_amount'  =>  $closing_due,
                        'loan_payment_ids'      =>  !empty($pre_payment_ids) ? implode(',',$pre_payment_ids) : null
                    );
                    if($closing_due <= 0){
                        $loan_update_data['loan_status'] = '2';
                        $loan_update_data['completely_paid_on'] = date("Y-m-d H:i:s");
                    }
                    $this->db->where('is_deleted','0');
                    $this->db->where('id', $exist->id);
                    $this->db->update('tbl_employee_loan',$loan_update_data);
                } 
            }
        }

        return $salary_slip_id;
    }
    public function get_field_executive_attendance_ajx()
    {
        $this->db->where('emp_id', $this->input->post('staff_id'));
        $this->db->where('MONTH(att_date)', $this->input->post('salary_month'));
        $this->db->where('YEAR(att_date)', $this->input->post('salary_year'));
        $this->db->where('is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_attendance');
        $result = $result->num_rows();
        echo $result;
    }
    public function get_employee_present_days_ajx()
    {
        $salary_month = $this->input->post('salary_month');
        $salary_year = $this->input->post('salary_year');
        $from_date = date('Y-m-01', strtotime("$salary_year-$salary_month"));
        $to_date = date('Y-m-t', strtotime("$salary_year-$salary_month"));

        $this->db->where('emp_id', $this->input->post('staff_id'));
        $this->db->where('att_date >=', date("Y-m-d", strtotime($from_date)));
        $this->db->where('att_date <=', date("Y-m-d", strtotime($to_date)));
        $this->db->where('is_deleted', '0');
        $this->db->where('attendence_type', '1');
        $result = $this->db->get('tbl_salon_emp_attendance');
        $result = $result->num_rows();
        echo $result;
    }
    public function get_employee_half_days_ajx()
    {
        $salary_month = $this->input->post('salary_month');
        $salary_year = $this->input->post('salary_year');
        $from_date = date('Y-m-01', strtotime("$salary_year-$salary_month"));
        $to_date = date('Y-m-t', strtotime("$salary_year-$salary_month"));

        $this->db->where('emp_id', $this->input->post('staff_id'));
        $this->db->where('att_date >=', date("Y-m-d", strtotime($from_date)));
        $this->db->where('att_date <=', date("Y-m-d", strtotime($to_date)));
        $this->db->where('is_deleted', '0');
        $this->db->where_in('attendence_type', ['3','4']);
        $result = $this->db->get('tbl_salon_emp_attendance');
        $result = $result->num_rows();
        echo $result;
    }
    public function get_employee_absent_days_ajx()
    {
        $salary_month = $this->input->post('salary_month');
        $salary_year = $this->input->post('salary_year');
        $from_date = date('Y-m-01', strtotime("$salary_year-$salary_month"));
        $to_date = date('Y-m-t', strtotime("$salary_year-$salary_month"));

        $att_type = ['1', '3', '4'];
        $this->db->where('emp_id', $this->input->post('staff_id'));
        $this->db->where('att_date >=', date("Y-m-d", strtotime($from_date)));
        $this->db->where('att_date <=', date("Y-m-d", strtotime($to_date)));
        $this->db->where('is_deleted', '0');
        $this->db->where_in('attendence_type', $att_type);
        $result = $this->db->get('tbl_salon_emp_attendance');
        $result = $result->num_rows();

        $total_months_days = cal_days_in_month(CAL_GREGORIAN, $salary_month, $salary_year);
        $absent_days = $total_months_days - $result;        

        $start_date = date("$salary_year-$salary_month-01");
        $end_date = date("Y-m-t", strtotime($start_date));
        $start_date_mysql = date("Y-m-d", strtotime($start_date));
        $end_date_mysql = date("Y-m-d", strtotime($end_date));

        $this->db->where('tbl_salon_emp_leaves.emp_id', $this->input->post('staff_id'));
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
        $this->db->where("(
            (from_date <= '$end_date_mysql' AND to_date >= '$start_date_mysql') OR
            (from_date >= '$start_date_mysql' AND from_date <= '$end_date_mysql')
        )");
        $leaves = $this->db->get('tbl_salon_emp_leaves')->result();

        $total_leave_days = 0;

        foreach ($leaves as $leave) {
            $from_date = date_create($leave->from_date);
            $to_date = date_create($leave->to_date);
        
            $overlap_start = max($from_date, date_create($start_date));
            $overlap_end = min($to_date, date_create($end_date));
        
            if ($overlap_start <= $overlap_end) {
                $interval = date_diff($overlap_start, $overlap_end);
                $total_leave_days += $interval->days + 1;
            }
        }
        echo $absent_days - $total_leave_days;
    }
    public function get_employee_total_loan_ajx()
    {
        $this->db->where('staff_id', $this->input->post('staff_id'));
        $this->db->where('is_deleted', '0');
        $result = $this->db->get('tbl_staff_account');
        $result = $result->result();
        $total_balance = 0;
        if (!empty($result)) {
            $total_loan_amt = 0;
            $total_return_amt = 0;
            foreach ($result as $result_amount) {
                $total_loan_amt += $result_amount->loan_amount;
                $total_return_amt += $result_amount->return_amount;
            }
            $total_balance = $total_loan_amt - $total_return_amt;
        }
        echo $total_balance;
    }

    public function get_already_generated_field_exe_slip_ajx()
    {
        $salary_month = $this->input->post('salary_month');
        $salary_year = $this->input->post('salary_year');
        $from_date = date('Y-m-01', strtotime("$salary_year-$salary_month"));
        $to_date = date('Y-m-t', strtotime("$salary_year-$salary_month"));

        $this->db->where('is_deleted', '0');
        $this->db->where('emp_id', $this->input->post('staff_id'));
        $this->db->where('DATE(from_date)', date("Y-m-d", strtotime($from_date)));
        $this->db->where('DATE(to_date)', date("Y-m-d", strtotime($to_date)));
        $result = $this->db->get('tbl_salon_emp_salary_slip');
        $result = $result->num_rows();
        echo json_encode($result);
    }
    
    public function get_employee_salary_details_ajx()
    {
        $salary_month = $this->input->post('salary_month');
        $salary_year = $this->input->post('salary_year');
        $from_date = date('Y-m-01', strtotime("$salary_year-$salary_month"));
        $to_date = date('Y-m-t', strtotime("$salary_year-$salary_month"));

        $staff_id = $this->input->post('staff_id');

        $this->db->where('is_deleted', '0');
        $this->db->where('id', $staff_id);
        $result = $this->db->get('tbl_salon_employee');
        $emp = $result->row();
        $salary = 0;
        $product_incentive = 0;
        $target_incentive = 0;
        $prev_pending_incentive = 0;
        $active_loan = 0.00;
        $is_loan_active = '0';
        if(!empty($emp)){
            $salary = $emp->salary;
            $product_incentive = $this->get_employee_product_incentive_total($staff_id,$from_date,$to_date);
            $target_incentive = $this->get_employee_target_incentive_total($staff_id,$from_date,$to_date);
            
            $prev_pending_incentive = $emp->current_pending_incentive;

            $active_loan_all_details = $this->get_employee_active_loan($emp->id);
            if($active_loan_all_details['active_loan'] > 0.00){
                $is_loan_active = '1';
            }
        }

        echo json_encode(array(
            'salary'                =>  $salary,
            'product_incentive'     =>  $product_incentive,
            'target_incentive'      =>  $target_incentive,
            'prev_pending_incentive'=>  $prev_pending_incentive,
            'is_loan_active'        =>  $is_loan_active,
            'active_loan'           =>  $active_loan_all_details['active_loan'],
            'active_loan_details'   =>  $active_loan_all_details['active_loan_details'],
        ));
    }
    public function get_employee_active_loan($id){
        $this->db->select('tbl_employee_loan.*,  tbl_salon_employee.full_name');
        $this->db->join(' tbl_salon_employee', ' tbl_salon_employee.id = tbl_employee_loan.employee_id');
        $this->db->where('tbl_employee_loan.is_deleted', '0');
        $this->db->where('tbl_employee_loan.loan_status', '0');
        $this->db->where('tbl_employee_loan.is_deduct_from_salary', '1');
        $this->db->where('tbl_employee_loan.employee_id', $id);
        $this->db->where('tbl_employee_loan.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_employee_loan.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_employee_loan.id', 'DESC');
        $result = $this->db->get('tbl_employee_loan');
        $result = $result->result();
        $total_loan_amt = 0;
        $active_loan_details_ids = [];
        if(!empty($result)){
            foreach($result as $data){
                $total_loan_amt += $data->loan_remaning_amount != "" ? (float)$data->loan_remaning_amount : 0.00;
                $active_loan_details_ids[] = $data->id;
            }
        }

        return array(
            'active_loan'               =>  $total_loan_amt,
            'active_loan_details'       =>  $result,
            'active_loan_details_ids'   =>  !empty($active_loan_details_ids) && $active_loan_details_ids != "" ? implode(',',$active_loan_details_ids) : ''
        );
    }
    public function get_all_staff_salary_slip($length, $start, $search)
    {
        $this->db->select('tbl_salon_emp_salary_slip.*,  tbl_salon_employee.full_name');
        $this->db->where('tbl_salon_emp_salary_slip.is_deleted', '0');
        if ($this->input->post('staff') != "") {
            $this->db->where('tbl_salon_emp_salary_slip.emp_id', $this->input->post('staff'));
        }
        if ($this->input->post('from_date') != "") {
            $this->db->where('tbl_salon_emp_salary_slip.from_date', date("Y-m-d", strtotime($this->input->post('from_date'))));
        }
        if ($this->input->post('to_date') != "") {
            $this->db->where('tbl_salon_emp_salary_slip.to_date', date("Y-m-d", strtotime($this->input->post('to_date'))));
        }
        if ($search != "") {
            $this->db->group_start();
            $this->db->or_like(' tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_salon_emp_salary_slip.salaried_month', $search);
            $this->db->or_like('tbl_salon_emp_salary_slip.salaried_year', $search);
            $this->db->group_end();
        }
        $this->db->join(' tbl_salon_employee', ' tbl_salon_employee.id = tbl_salon_emp_salary_slip.emp_id');
        $this->db->order_by('tbl_salon_emp_salary_slip.id', 'DESC');
        $this->db->limit($length, $start);
        $result = $this->db->get('tbl_salon_emp_salary_slip');
        return $result->result();
    }
    public function get_all_staff_salary_slip_count($search)
    {
        $this->db->select('tbl_salon_emp_salary_slip.*,  tbl_salon_employee.full_name');
        $this->db->where('tbl_salon_emp_salary_slip.is_deleted', '0');
        if ($this->input->post('staff') != "") {
            $this->db->where('tbl_salon_emp_salary_slip.emp_id', $this->input->post('staff'));
        }
        if ($this->input->post('from_date') != "") {
            $this->db->where('tbl_salon_emp_salary_slip.from_date', date("Y-m-d", strtotime($this->input->post('from_date'))));
        }
        if ($this->input->post('to_date') != "") {
            $this->db->where('tbl_salon_emp_salary_slip.to_date', date("Y-m-d", strtotime($this->input->post('to_date'))));
        }
        if ($search != "") {
            $this->db->group_start();
            $this->db->or_like(' tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_salon_emp_salary_slip.salaried_month', $search);
            $this->db->or_like('tbl_salon_emp_salary_slip.salaried_year', $search);
            $this->db->group_end();
        }
        $this->db->join(' tbl_salon_employee', ' tbl_salon_employee.id = tbl_salon_emp_salary_slip.emp_id');
        $this->db->order_by('tbl_salon_emp_salary_slip.id', 'DESC');
        $result = $this->db->get('tbl_salon_emp_salary_slip');
        return $result->num_rows();
    }


    public function get_attendance($day, $month, $year, $student_id)
    {
        $day = $day;
        $this->db->where('student_id', $student_id);
        $this->db->where('Year(att_date)', $year);
        $this->db->where('Month(att_date)', $month);
        $this->db->where('Day(att_date)', $day);
        $this->db->where('attendence_type', '1');
        $result = $this->db->get('tbl_student_attendance');
        if ($result->num_rows() > 0) {
            return $result->row();
        } else {
            return 0;
        }
    }

    public function get_all_active_staff()
    {
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation', 'left');
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_salon_employee.status', '1');
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $result = $this->db->get('tbl_salon_employee');
        $result = $result->result();
        return $result;
    }

    public function get_salary_slip_details()
    {
        $this->db->select('tbl_salon_emp_salary_slip.*,  tbl_salon_employee.account_number,  tbl_salon_employee.ifsc,  tbl_salon_employee.bank_name,  tbl_salon_employee.dob, tbl_salon_employee.full_name,  tbl_salon_employee.whatsapp_number,  tbl_salon_employee.email');
        $this->db->where('tbl_salon_emp_salary_slip.id', $this->uri->segment(2));
        $this->db->where('tbl_salon_emp_salary_slip.is_deleted', '0');
        $this->db->join(' tbl_salon_employee', ' tbl_salon_employee.id = tbl_salon_emp_salary_slip.emp_id');
        $result = $this->db->get('tbl_salon_emp_salary_slip');
        return $result->row();
    }
    public function get_single_student1()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_student');
        $result = $result->row();
        return $result;
    }

    



    // for staff_attendance
    


    public function set_staff_attendance()
    {
        $staff_array = $this->input->post('staff_id_array');
        $exploded_array = explode(',', $staff_array[0]);
        $staff = count($exploded_array);

        // echo "<pre>";print_r($exploded_array);exit;

        for ($i = 0; $i < $staff; $i++) {
                    $this->db->where('id', $exploded_array[$i]);
                    $result = $this->db->get(' tbl_salon_employee');
                    $result_staff = $result->row();
                   

                    if (!empty($result_staff)) {
                        if ($this->input->post('attendence_' . $exploded_array[$i]) != '') {
                            $emp_att = $this->get_employee_attendance_type($exploded_array[$i], $this->input->post('attendance_date'));
                            if (!empty($emp_att)) {
                                if ($emp_att->attendence_type != $this->input->post('attendence_' . $exploded_array[$i])) {
                                    $data = array(
                                        'emp_id'             => $exploded_array[$i],
                                        'attendence_type'     => $this->input->post('attendence_' . $exploded_array[$i]),
                                        'att_date'             => date("Y-m-d", strtotime($this->input->post('attendance_date'))),
                                    );
                                    $this->db->where('id', $emp_att->id);
                                    $this->db->update('tbl_salon_emp_attendance', $data);
                                }
                            } else {
                                
                                $data = array(
                                    'emp_id'             => $exploded_array[$i],
                                    'branch_id'          => $this->session->userdata('branch_id'),
                                    'salon_id'           => $this->session->userdata('salon_id'),
                                    'attendence_type'    => $this->input->post('attendence_' . $exploded_array[$i]),
                                    'shift_name'         => $this->input->post('shift_name'),
                                    'att_date'           => date("Y-m-d", strtotime($this->input->post('attendance_date'))),
                                    'created_on'         => date('Y-m-d H:i:s'),
                                );
                                $this->db->insert('tbl_salon_emp_attendance', $data);
                            }
                        }
                    }
                 
        }
        return true;
    }
    public function punch_in()
    {          
        $staff = $this->input->post('staff_id');
        $shift_name = $this->input->post('shift');
        $date = $this->input->post('date');
        $punch_in = date('H:i:s');   
            
        $timestamp = strtotime($date);        
        $dayOfWeek = date('l', $timestamp);

        if($dayOfWeek == 'Monday'){
            $column = 'is_monday_shift';
            $from = 'monday_shift_from';
            $to = 'monday_shift_to';
            $break_from = 'monday_break_from';
            $break_to = 'monday_break_to';
        }elseif($dayOfWeek == 'Tuesday'){
            $column = 'is_tuesday_shift';
            $from = 'tuesday_shift_from';
            $to = 'tuesday_shift_to';
            $break_from = 'tuesday_break_from';
            $break_to = 'tuesday_break_to';
        }elseif($dayOfWeek == 'Wednesday'){
            $column = 'is_wednesday_shift';
            $from = 'wednesday_shift_from';
            $to = 'wednesday_shift_to';
            $break_from = 'wednesday_break_from';
            $break_to = 'wednesday_break_to';
        }elseif($dayOfWeek == 'Thursday'){
            $column = 'is_thursday_shift';
            $from = 'thursday_shift_from';
            $to = 'thursday_shift_to';
            $break_from = 'thursday_break_from';
            $break_to = 'thursday_break_to';
        }elseif($dayOfWeek == 'Friday'){
            $column = 'is_friday_shift';
            $from = 'friday_shift_from';
            $to = 'friday_shift_to';
            $break_from = 'friday_break_from';
            $break_to = 'friday_break_to';
        }elseif($dayOfWeek == 'Saturday'){
            $column = 'is_saturday_shift';
            $from = 'saturday_shift_from';
            $to = 'saturday_shift_to';
            $break_from = 'saturday_break_from';
            $break_to = 'saturday_break_to';
        }elseif($dayOfWeek == 'Sunday'){
            $column = 'is_sunday_shift';
            $from = 'sunday_shift_from';
            $to = 'sunday_shift_to';
            $break_from = 'sunday_break_from';
            $break_to = 'sunday_break_to';
        }else{
            $column = '';
            $from = '';
            $to = '';
            $break_from = '';
            $break_to = '';
        }

        $this->db->where($column, '1');
        $this->db->where('id',$shift_name);
        $shift_details = $this->db->get('tbl_shift_master')->row();
        if(!empty($shift_details)){
            $shift_start = $shift_details->$from;
            $shift_end = $shift_details->$to;  

            $shift_break_from = $shift_details->$break_from;
            $shift_break_to = $shift_details->$break_to;          

            $this->db->where('is_deleted','0');                      
            $this->db->where('emp_id',$staff);                      
            $this->db->where('DATE(att_date)',date("Y-m-d", strtotime($date)));        
            $single = $this->db->get('tbl_salon_emp_attendance')->row();
            if(!empty($single)){   
                $data = array(
                    'shift_name_text'    => $shift_details->shift_name,
                    'punch_in'           => date("H:i:s", strtotime($punch_in)),
                    'shift_in'           => date("H:i:s", strtotime($shift_start)),
                    'shift_out'          => date("H:i:s", strtotime($shift_end)),
                    'shift_break_from'   => date("H:i:s", strtotime($shift_break_from)),
                    'shift_break_to'     => date("H:i:s", strtotime($shift_break_to)),
                    'attendence_type'    => '1',
                );
                $this->db->where('id',$single->id);
                $this->db->update('tbl_salon_emp_attendance', $data);
            }else{      
                $data = array(
                    'emp_id'             => $staff,
                    'branch_id'          => $this->session->userdata('branch_id'),
                    'salon_id'           => $this->session->userdata('salon_id'),
                    'shift_name'         => $shift_name,
                    'shift_name_text'    => $shift_details->shift_name,
                    'punch_in'           => date("H:i:s", strtotime($punch_in)),
                    'att_date'           => date("Y-m-d", strtotime($date)),
                    'created_on'         => date('Y-m-d H:i:s'),
                    'shift_in'           => date("H:i:s", strtotime($shift_start)),
                    'shift_out'          => date("H:i:s", strtotime($shift_end)),
                    'shift_break_from'   => date("H:i:s", strtotime($shift_break_from)),
                    'shift_break_to'     => date("H:i:s", strtotime($shift_break_to)),
                    'attendence_type'    => '1',
                );
                $this->db->insert('tbl_salon_emp_attendance', $data);
            }
        }
        return true;
    }
    public function add_staff_leave()
    {        
        if($this->input->post('id') == ""){  
            $data = array(
                'emp_id'             => $this->input->post('staff'),
                'branch_id'          => $this->session->userdata('branch_id'),
                'salon_id'           => $this->session->userdata('salon_id'),
                'from_date'          => date("Y-m-d", strtotime($this->input->post('from_date'))),
                'to_date'            => date("Y-m-d", strtotime($this->input->post('to_date'))),
                'days'               => $this->input->post('days'),
                'reason'             => $this->input->post('reason'),
                'created_on'         => date('Y-m-d H:i:s'),
                'leave_submitted_on' => date('Y-m-d H:i:s'),
                'leave_status'       => '1',
            );
            $this->db->insert('tbl_salon_emp_leaves', $data);
            return '1';
        }else{
            $data = array(
                'from_date'          => date("Y-m-d", strtotime($this->input->post('from_date'))),
                'to_date'            => date("Y-m-d", strtotime($this->input->post('to_date'))),
                'days'               => $this->input->post('days'),
                'reason'             => $this->input->post('reason'),
            );                   
            $this->db->where('id',$this->input->post('id'));    
            $this->db->update('tbl_salon_emp_leaves', $data);
            return '0';
        }
    }
    
    public function get_single_leave()
    {          
        $this->db->select('tbl_salon_emp_leaves.*,tbl_salon_employee.full_name');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_salon_emp_leaves.emp_id');
        $this->db->where('tbl_salon_emp_leaves.is_deleted','0');     
        $this->db->where('tbl_salon_emp_leaves.id',$this->uri->segment(2));     
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));                 
        $this->db->order_by('tbl_salon_emp_leaves.leave_submitted_on','desc');                      
        $result = $this->db->get('tbl_salon_emp_leaves')->row(); 
        return $result; 
    }
    
    
    public function get_all_leaves()
    {          
        $this->db->select('tbl_salon_emp_leaves.*,tbl_salon_employee.full_name');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_salon_emp_leaves.emp_id');
        $this->db->where('tbl_salon_emp_leaves.is_deleted','0');     
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));                 
        $this->db->order_by('tbl_salon_emp_leaves.leave_submitted_on','desc');                      
        $result = $this->db->get('tbl_salon_emp_leaves')->result(); 
        return $result; 
    }
    public function punch_out()
    {          
        $staff = $this->input->post('staff_id');
        $shift_name = $this->input->post('shift');
        $date = $this->input->post('date');
        $punch_out = date('H:i:s');

        $this->db->where('is_deleted','0');                      
        $this->db->where('emp_id',$staff);                      
        $this->db->where('DATE(att_date)',date("Y-m-d", strtotime($date)));        
        $single = $this->db->get('tbl_salon_emp_attendance')->row();   
        if(!empty($single)){
            $punch_in = date('H:i:s', strtotime($single->punch_in));
            $shift_out = date('H:i:s', strtotime($single->shift_out));

            $datetime1 = new DateTime($punch_in);
            $datetime2 = new DateTime($punch_out);
            $datetime3 = new DateTime($shift_out);
            
            $interval = $datetime1->diff($datetime2);
            
            $hours = $interval->h + ($interval->d * 24);
            $minutes = $interval->i;
            $seconds = $interval->s;
            
            $working_hrs = sprintf('%02d:%02d', $hours, $minutes);

            if($punch_out > $shift_out){
                $interval2 = $datetime2->diff($datetime3);
                
                $hours = $interval2->h + ($interval2->d * 24);
                $minutes = $interval2->i;
                $seconds = $interval2->s;
                
                $ot_hrs = sprintf('%02d:%02d', $hours, $minutes);
                $is_ot = '1';
            }else{
                $ot_hrs = '';
                $is_ot = '0';
            }

            //HALF DAY CALCULATION
            $type = '1';     
            $shift_break_from = date('H:i:s', strtotime($single->shift_break_from));
            $shift_break_to = date('H:i:s', strtotime($single->shift_break_to));
            if($punch_out < $shift_break_to && $punch_in < $shift_break_to){
                $type = '3';
            }elseif($punch_out >= $shift_break_to && $punch_in >= $shift_break_to){
                $type = '4';
            }

            $data = array(
                'punch_out'           => date("H:i:s", strtotime($punch_out)),
                'working_hrs'         => $working_hrs,
                'ot_hrs'              => $ot_hrs,
                'is_ot_hrs'           => $is_ot,
                'attendence_type'     => $type,
            );
            $this->db->where('id',$single->id);
            $this->db->update('tbl_salon_emp_attendance', $data);
        }
        return true;
    }
    public function get_employee_attendance_type($staff_id, $attendance_date)
    {
        $this->db->where('att_date', date("Y-m-d", strtotime($attendance_date)));
        $this->db->where('is_deleted', '0');
        $this->db->where('emp_id', $staff_id);
        $result = $this->db->get('tbl_salon_emp_attendance');
        return $result->row();
    }
    public function get_employee_attendance($staff_id, $type, $from_date, $to_date)
    {
        if($from_date != ""){
            $this->db->where('DATE(tbl_salon_emp_attendance.att_date) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_salon_emp_attendance.att_date) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if($staff_id != ""){
            $this->db->where('tbl_salon_emp_attendance.emp_id', $staff_id);
        }
        if($type != ""){
            $this->db->where('tbl_salon_emp_attendance.attendence_type', $type);
        }
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_attendance');
        return $result->result();
    }
    
    public function get_employee_attendance_ajx()
    {
        $staff_id = $this->input->post('staff_id');
        $date = $this->input->post('date');

        $month_salary = $this->check_employee_salary_generation($staff_id,date('n',strtotime($date)),date('Y',strtotime($date)));
        if(!empty($month_salary)){
            $is_salary_generated = '1';
        }else{
            $is_salary_generated = '0';
        }

        $emp_details = $this->get_employee_details($staff_id);
        $details = $this->get_employee_single_attendance_details($staff_id,$date);
        if(!empty($emp_details)){
            $shift_name = '';
            $shift_from = '';
            $shift_to = '';
            if(!empty($details['result'])){
                $shift_name = $details['result']->shift_name_text;
                $shift_from = date('h:i A',strtotime($details['result']->shift_in));
                $shift_to = date('h:i A',strtotime($details['result']->shift_out));
            }else{
                if(date("Y-m-d", strtotime($date)) == date('Y-m-d')){
                    $shift_details = $this->get_stylist_shifts($date,$staff_id);
                    if(!empty($shift_details)){
                        $shift_name = $shift_details['shift_name'];
                        $shift_from = date('h:i A',strtotime($shift_details['shift_from']));
                        $shift_to = date('h:i A',strtotime($shift_details['shift_to']));
                    }
                }
            }
            $month_target = $this->get_single_target_details($emp_details->salary_method);
            
            $for_month = date('m',strtotime($this->input->post('date')));
            $for_year = date('Y',strtotime($this->input->post('date')));

            $start_date = date("$for_year-$for_month-01");
            $end_date = date("Y-m-t", strtotime($start_date));
            $start_date_mysql = date("Y-m-d", strtotime($start_date));
            $end_date_mysql = date("Y-m-d", strtotime($end_date));

            $packages_sale = $this->Salon_model->get_employee_package_sale($emp_details->id, $start_date_mysql, $end_date_mysql,'1')['amount'];
            $service_sale = $this->Salon_model->get_employee_service_sale($emp_details->id, $start_date_mysql, $end_date_mysql, '1','1')['amount'];
            $service_product_sale = (float)$this->Salon_model->get_employee_service_product_sale($emp_details->id, $start_date_mysql, $end_date_mysql, '1','1')['amount'];
            $membership_sale = $this->Salon_model->get_employee_membership_sale($emp_details->id, $start_date_mysql, $end_date_mysql,'')['amount'];

            $total_performance = $service_sale + $service_product_sale + $membership_sale + $packages_sale;
            
            $today_packages_sale = $this->Salon_model->get_employee_package_sale($emp_details->id, $date, $date,'1')['amount'];
            $today_service_sale = $this->Salon_model->get_employee_service_sale($emp_details->id, $date, $date, '1','1')['amount'];
            $today_service_product_sale = (float)$this->Salon_model->get_employee_service_product_sale($emp_details->id, $date, $date, '1','1')['amount'];
            $today_membership_sale = $this->Salon_model->get_employee_membership_sale($emp_details->id, $date, $date,'1')['amount'];

            $today_total_performance = $today_service_sale + $today_service_product_sale + $today_membership_sale + $today_packages_sale;
            
            $start_timestamp = strtotime($start_date);
            $end_timestamp = strtotime($end_date);
            $total_days = ($end_timestamp - $start_timestamp) / (60 * 60 * 24) + 1;
            $emp_leaves = $this->get_employee_leaves($emp_details->id,$start_date_mysql,$end_date_mysql);
            $weekly_off = 0;

            $consider_days = $total_days - $emp_leaves - $weekly_off;
            if(!empty($month_target)){
                $start_amount = $month_target->start_amount;
                $end_amount = $month_target->end_amount;
                
                $daily_target_min = $start_amount/$consider_days;
                $daily_target_max = $end_amount/$consider_days;
            }else{
                $daily_target_min = 0;
                $daily_target_max = 0;
            }
        ?>
        	<div class="x_panel">
                <div class="x_title">
                    <h2 style="float:none;"> <span style="color:black; font-weight:400;" class="span_title"><?=$emp_details->full_name; ?> attendance for <?php echo date("d M, Y",strtotime($date)); ?></span></h2>
                </div>
                <div class="x_content">
                    <div class="x_title" style="margin-bottom:0px;">
                        <table class="table" style="width:100%;margin-bottom:0px;">
                            <tbody>
                                <tr>
                                    <th>Shift</th>
                                    <th>Sale</th>
                                    <?php if(date("Y-m-d", strtotime($date)) == date('Y-m-d')){ ?>
                                        <th>Month Sale</th>
                                    <?php } ?>
                                    <?php if(!empty($month_target)){ ?>
                                        <th>Target</th>
                                        <th>Daily Target</th>
                                    <?php } ?>
                                </tr>
                            </tbody>
                            <tbody>
                                <tr>
                                    <td><?php echo $shift_name; echo ($shift_from != "" && $shift_to != "") ? '<br>['.$shift_from.' to '.$shift_to.']' : '-';?></td>
                                    <td>Rs. <?= number_format($today_total_performance, 2, '.', ','); ?></td>
                                    <?php if(date("Y-m-d", strtotime($date)) == date('Y-m-d')){ ?>
                                        <td>Rs. <?=number_format($total_performance, 2, '.', ',');?></td>
                                    <?php } ?>
                                    <?php if(!empty($month_target)){ ?>
                                        <td><?=!empty($month_target) ? 'Rs. '.number_format($month_target->start_amount, 2, '.', ',').' to '.number_format($month_target->end_amount, 2, '.', ',') : '-';?></td>
                                        <td><?='Rs. '.number_format($daily_target_min, 2, '.', ',').' to '.number_format($daily_target_max, 2, '.', ',');?></td>
                                    <?php } ?>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="punch-info">
                        <div class="punch-hours">
                            <span class="spend_hours">
                                <?php if(!empty($details['result']) && $details['result']->working_hrs != ''){ echo $details['result']->working_hrs; }else{ echo "--:--";}?>
                            </span>
                        </div>
                    </div>
                    <?php
                    if($is_salary_generated == '0'){ 
                        if(date('Y-m-d',strtotime($date)) == date('Y-m-d')){ 
                            if($shift_from != "" && $shift_to != ""){ 
                    ?>
                    <div class="punch-btn-section">
                        <?php 
                            if(empty($details['result'])){ 
                        ?>
                            <button onclick="setPunchIn('<?=$staff_id;?>','<?=$date;?>','<?=$emp_details->shift;?>')" type="button" class="btn btn-primary punch-btn" id="punch_in_button" name="punch_in_button" value="punch_in_button">Punch In</button>
                        <?php 
                            }else{ 
                                if($details['result']-> punch_in != "" && $details['result']-> punch_out == ""){
                        ?>
                            <button id="punch_out_button" onclick="setPunchOut('<?=$staff_id;?>','<?=$date;?>','<?=$emp_details->shift;?>')" onclick="CustomAlert.show('Are you sure, you want to punch out? if yes, please press \'Ok\' to punch out.')" type="button" class="btn btn-primary punch-btn">Punch Out</button>
                        <?php 
                                }
                            }
                        ?>
                    </div>
                    <?php }else{ ?>
                        <div class="punch-btn-section">
                            <label class="error">Shift not available</label>
                        </div>
                    <?php }}else{ ?>
                        <div class="punch-btn-section">
                            <!-- <label class="error">Attendance for past date is not allowed</label> -->
                        </div>
                    <?php }}else{ ?>
                        <div class="punch-btn-section">
                            <!-- <label class="error">Salary already generated for selected month</label> -->
                        </div>
                    <?php } ?>
                    <div class="statistics">
                        <div class="row">
                            <div class="col-lg-6 col-lg-6 col-sm-6 col-xs-12 text-center">
                                <div class="stats-box">
                                    <p>In Time</p>
                                    <h6>
                                        <?php if(!empty($details['result']) && $details['result']->punch_in != ''){ echo date("h:i A",strtotime($details['result']->punch_in)); }else{ echo "--:--";}?>
                                    </h6>
                                </div>
                            </div>
                            <div class="col-lg-6 col-lg-6 col-sm-6 col-xs-12 text-center">
                                <div class="stats-box">
                                    <p>Out Time</p>
                                    <h6>
                                        <?php if(!empty($details['result']) && $details['result']->punch_out != ''){ echo date("h:i A",strtotime($details['result']->punch_out)); }else{ echo "--:--";}?>
                                    </h6>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <?php
        }
    }
    public function get_employee_leaves($emp, $from, $to) {
        $fromDate = new DateTime($from);
        $toDate = new DateTime($to);
        
        $this->db->where('is_deleted', '0');
        $this->db->where('emp_id', $emp);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('(from_date <= ' . $this->db->escape($to) . ' AND to_date >= ' . $this->db->escape($from) . ')', NULL, FALSE);
        $query = $this->db->get('tbl_salon_emp_leaves');
        
        $totalDays = 0;
        
        foreach ($query->result() as $row) {
            $leaveFrom = new DateTime($row->from_date);
            $leaveTo = new DateTime($row->to_date);
            
            $overlapStart = max($fromDate, $leaveFrom);
            $overlapEnd = min($toDate, $leaveTo);
            
            if ($overlapStart <= $overlapEnd) {
                $interval = $overlapStart->diff($overlapEnd);
                $days = $interval->days + 1;
                $totalDays += $days;
            }
        }
        
        return $totalDays;
    }
    public function get_employee_attendance_form_ajx()
    {
        $staff_id = $this->input->post('staff_id');
        $date = $this->input->post('date');
        $emp_leave = $this->check_emp_approved_leave($staff_id,date('n',strtotime($date)),date('Y',strtotime($date)));
        
        if(empty($emp_leave)){
            $month_salary = $this->check_employee_salary_generation($staff_id,date('n',strtotime($date)),date('Y',strtotime($date)));
            if(!empty($month_salary)){
                $is_salary_generated = '1';
            }else{
                $is_salary_generated = '0';
            }

            $emp_details = $this->get_employee_details($staff_id);
            $details = $this->get_employee_single_attendance_details($staff_id,$date);
            if(!empty($emp_details)){
                $shift_details = $this->get_stylist_shifts($date,$staff_id);
                $month_target = $this->get_single_target_details($emp_details->salary_method);
                
                $for_month = date('m',strtotime($this->input->post('date')));
                $for_year = date('Y',strtotime($this->input->post('date')));

                $start_date = date("$for_year-$for_month-01");
                $end_date = date("Y-m-t", strtotime($start_date));
                $start_date_mysql = date("Y-m-d", strtotime($start_date));
                $end_date_mysql = date("Y-m-d", strtotime($end_date));

                $packages_sale = $this->Salon_model->get_employee_package_sale($emp_details->id, $start_date_mysql, $end_date_mysql,'1')['amount'];
                $service_sale = $this->Salon_model->get_employee_service_sale($emp_details->id, $start_date_mysql, $end_date_mysql, '1','1')['amount'];
                $service_product_sale = (float)$this->Salon_model->get_employee_service_product_sale($emp_details->id, $start_date_mysql, $end_date_mysql, '1','1')['amount'];
                $membership_sale = $this->Salon_model->get_employee_membership_sale($emp_details->id, $start_date_mysql, $end_date_mysql,'1')['amount'];

                $total_performance = $service_sale + $service_product_sale + $membership_sale + $packages_sale;
                
                $today_packages_sale = $this->Salon_model->get_employee_package_sale($emp_details->id, $date, $date,'1')['amount'];
                $today_service_sale = $this->Salon_model->get_employee_service_sale($emp_details->id, $date, $date, '1','1')['amount'];
                $today_service_product_sale = (float)$this->Salon_model->get_employee_service_product_sale($emp_details->id, $date, $date, '1','1')['amount'];
                $today_membership_sale = $this->Salon_model->get_employee_membership_sale($emp_details->id, $date, $date,'1')['amount'];

                $today_total_performance = $today_service_sale + $today_service_product_sale + $today_membership_sale + $today_packages_sale;
                
                $start_timestamp = strtotime($start_date);
                $end_timestamp = strtotime($end_date);
                $total_days = ($end_timestamp - $start_timestamp) / (60 * 60 * 24) + 1;
                $emp_leaves = $this->get_employee_leaves($emp_details->id,$start_date_mysql,$end_date_mysql);
                $weekly_off = 0;

                $consider_days = $total_days - $emp_leaves - $weekly_off;
                if(!empty($month_target)){
                    $start_amount = $month_target->start_amount;
                    $end_amount = $month_target->end_amount;
                    
                    $daily_target_min = $start_amount/$consider_days;
                    $daily_target_max = $end_amount/$consider_days;
                }else{
                    $daily_target_min = 0;
                    $daily_target_max = 0;
                }
        ?>
        	<div class="x_panel" style="border:none !important; margin-bottom:0px;">
                <div class="x_title">
                    <table class="table" style="width:100%;margin-bottom:0px;">
                        <tbody>
                            <tr>
                                <th>Shift</th>
                                <th>Today Sale</th>
                                <th>Month Sale</th>
                                <?php if(!empty($month_target)){ ?>
                                    <th>Target</th>
                                    <th>Daily Target</th>
                                <?php } ?>
                                <!-- <th>Leaves</th>
                                <th>Consider Days</th> -->
                            </tr>
                        </tbody>
                        <tbody>
                            <tr>
                                <td><?php if(!empty($shift_details)){ echo $shift_details['shift_name'].'<br>['.date('h:i A',strtotime($shift_details['shift_from'])).' to '.date('h:i A',strtotime($shift_details['shift_to'])).']'; }else{ echo "-";}?></td>
                                <td>Rs. <?= number_format($today_total_performance, 2, '.', ','); ?></td>
                                <td>Rs. <?=number_format($total_performance, 2, '.', ',');?></td>
                                <?php if(!empty($month_target)){ ?>
                                    <td><?=!empty($month_target) ? 'Rs. '.number_format($month_target->start_amount, 2, '.', ',').' to '.number_format($month_target->end_amount, 2, '.', ',') : '-';?></td>
                                    <td><?='Rs. '.number_format($daily_target_min, 2, '.', ',').' to '.number_format($daily_target_max, 2, '.', ',');?></td>
                                <?php } ?>
                                <!-- <td><?=$emp_leaves;?></td>
                                <td><?=$consider_days;?></td> -->
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="x_content">
                    <div class="punch-info">
                        <div class="punch-hours">
                            <span class="spend_hours">
                                <?php if(!empty($details['result']) && $details['result']->working_hrs != ''){ echo $details['result']->working_hrs; }else{ echo "--:--";}?>
                            </span>
                        </div>
                    </div>
                    <input type="hidden" id="shift" name="shift" value="<?=$emp_details->shift;?>">
                    <?php
                    if(!empty($shift_details) && $shift_details['shift_from'] != "" && $shift_details['shift_to'] != ""){ 
                        if($is_salary_generated == '0'){ 
                            if(date('Y-m-d',strtotime($date)) == date('Y-m-d')){ 
                    ?>
                    <div class="punch-btn-section">
                        <?php 
                            if(empty($details['result'])){ 
                        ?>  
                            <input type="hidden" id="type" name="type" value="1">
                            <button type="submit" class="btn btn-primary punch-btn" id="attendance_button" name="attendance_button" value="attendance_button">Punch In</button>
                        <?php 
                            }else{ 
                                if($details['result']-> punch_in != "" && $details['result']-> punch_out == ""){
                        ?>
                            <input type="hidden" id="type" name="type" value="2">
                            <button type="submit" id="attendance_button" value="attendance_button" name="attendance_button" class="btn btn-primary punch-btn">Punch Out</button>
                        <?php 
                                }
                            }
                        ?>
                    </div>
                    <?php }else{ ?>
                        <div class="punch-btn-section">
                            <label class="error">Attendance for Today is allowed</label>
                        </div>
                    <?php }}else{ ?>
                        <div class="punch-btn-section">
                            <label class="error">Salary already genearted for selected month</label>
                        </div>
                    <?php }}else{ ?>
                        <div class="punch-btn-section">
                            <label class="error">Shift not available</label>
                        </div>
                    <?php } ?>
                    <div class="statistics">
                        <div class="row">
                            <div class="col-lg-6 col-lg-6 col-sm-6 col-xs-12 text-center">
                                <div class="stats-box">
                                    <p>In Time</p>
                                    <h6>
                                        <?php if(!empty($details['result']) && $details['result']->punch_in != ''){ echo date("h:i A",strtotime($details['result']->punch_in)); }else{ echo "--:--";}?>
                                    </h6>
                                </div>
                            </div>
                            <div class="col-lg-6 col-lg-6 col-sm-6 col-xs-12 text-center">
                                <div class="stats-box">
                                    <p>Out Time</p>
                                    <h6>
                                        <?php if(!empty($details['result']) && $details['result']->punch_out != ''){ echo date("h:i A",strtotime($details['result']->punch_out)); }else{ echo "--:--";}?>
                                    </h6>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        <?php
        }
        }else{
        ?>
            <div class="x_panel" style="text-align:center;border:none !important; margin-bottom:0px;">
                <label class="error">Employee is on leave for selected date</label>
            </div>
        <?php
        }
    }
    public function get_employee_single_attendance($staff_id, $date)
    {
        if($date != ""){
            $this->db->where('DATE(tbl_salon_emp_attendance.att_date)', date("Y-m-d", strtotime($date)));
        }
        if($staff_id != ""){
            $this->db->where('tbl_salon_emp_attendance.emp_id', $staff_id);
        }
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_attendance');
        return $result->row();
    }
    public function get_employee_single_attendance_monthwise($staff_id, $month, $year)
    {
        $emp_details = $this->get_employee_details($staff_id);

        $this->db->where('MONTH(tbl_salon_emp_attendance.att_date)', $month);
        $this->db->where('YEAR(tbl_salon_emp_attendance.att_date)', $year);
        $this->db->where('tbl_salon_emp_attendance.emp_id', $staff_id);
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_attendance')->result();
        $total_ot_seconds  = 0;
        $present = 0;
        $half_days = 0;
        if(!empty($result)){
            foreach($result as $data){
                if ($data->is_ot_hrs == '1') {
                    $ot_parts = explode(':', $data->ot_hrs);
                    
                    if (count($ot_parts) === 3) {
                        list($ot_hours, $ot_minutes, $ot_seconds) = $ot_parts;
                        
                        $total_ot_seconds += ($ot_hours * 3600) + ($ot_minutes * 60) + $ot_seconds;
                    } else {
                        $ot_hours = $ot_minutes = $ot_seconds = 0;
                    }
                }
                if ($data->attendence_type == '1') {
                    $present += 1;
                } elseif ($data->attendence_type == '3' || $data->attendence_type == '4') {
                    $half_days += 1;
                }
            }
        }
        $start_date = date("$year-$month-01");
        $end_date = date("Y-m-t", strtotime($start_date));
        $start_date_mysql = date("Y-m-d", strtotime($start_date));
        $end_date_mysql = date("Y-m-d", strtotime($end_date));

        $this->db->where('tbl_salon_emp_leaves.emp_id', $staff_id);
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
        $this->db->where("(
            (from_date <= '$end_date_mysql' AND to_date >= '$start_date_mysql') OR
            (from_date >= '$start_date_mysql' AND from_date <= '$end_date_mysql')
        )");
        $leaves = $this->db->get('tbl_salon_emp_leaves')->result();

        $total_leave_days = 0;

        foreach ($leaves as $leave) {
            $from_date = date_create($leave->from_date);
            $to_date = date_create($leave->to_date);
        
            $overlap_start = max($from_date, date_create($start_date));
            $overlap_end = min($to_date, date_create($end_date));
        
            if ($overlap_start <= $overlap_end) {
                $interval = date_diff($overlap_start, $overlap_end);
                $total_leave_days += $interval->days + 1;
            }
        }

        $total_hours = floor($total_ot_seconds / 3600);
        $total_minutes = floor(($total_ot_seconds % 3600) / 60);
        $total_seconds = $total_ot_seconds % 60;
        
        $total_ot = sprintf('%02d:%02d', $total_hours, $total_minutes);
        $total_months_days = cal_days_in_month(CAL_GREGORIAN, $month, $year);
        $absent = $total_months_days - ($present + $half_days);
        
        $month_target = $this->get_single_target_details($emp_details->salary_method);

        $packages_sale = $this->Salon_model->get_employee_package_sale($emp_details->id, $start_date_mysql, $end_date_mysql,'1')['amount'];
        $service_sale = $this->Salon_model->get_employee_service_sale($emp_details->id, $start_date_mysql, $end_date_mysql, '1','1')['amount'];
        $service_product_sale = (float)$this->Salon_model->get_employee_service_product_sale($emp_details->id, $start_date_mysql, $end_date_mysql, '1','1')['amount'];
        $membership_sale = $this->Salon_model->get_employee_membership_sale($emp_details->id, $start_date_mysql, $end_date_mysql,'1')['amount'];

        $total_performance = $service_sale + $service_product_sale + $membership_sale + $packages_sale;
            
        $start_timestamp = strtotime($start_date);
        $end_timestamp = strtotime($end_date);
        $total_days = ($end_timestamp - $start_timestamp) / (60 * 60 * 24) + 1;
        $emp_leaves = $this->get_employee_leaves($emp_details->id,$start_date_mysql,$end_date_mysql);
        $weekly_off = 0;

        $consider_days = $total_days - $emp_leaves - $weekly_off;
        if(!empty($month_target)){
            $start_amount = $month_target->start_amount;
            $end_amount = $month_target->end_amount;
            
            $daily_target_min = $start_amount/$consider_days;
            $daily_target_max = $end_amount/$consider_days;
        }else{
            $daily_target_min = 0;
            $daily_target_max = 0;
        }

        return array(
            'present'   =>  $present,
            'total_ot'  =>  $total_ot,
            'absent'    =>  $absent - $total_leave_days,
            'half_days' =>  $half_days,
            'total_leave_days' =>  $total_leave_days,
            'month_sale' =>  $total_performance,
            'month_target' =>  $month_target,
            'daily_target_min'  =>  $daily_target_min,
            'daily_target_max'  =>  $daily_target_max,
        );
    }
    public function get_employee_single_attendance_report_datewise($staff_id, $from, $to)
    {
        $emp_details = $this->get_employee_details($staff_id);
        
        $start_date_mysql = date("Y-m-d", strtotime($from));
        $end_date_mysql = date("Y-m-d", strtotime($to));
        $start_date = $start_date_mysql;
        $end_date = $end_date_mysql;

        $this->db->where('DATE(att_date) >=', $start_date_mysql);
        $this->db->where('DATE(att_date) <=', $end_date_mysql);
        $this->db->where('tbl_salon_emp_attendance.emp_id', $staff_id);
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_attendance')->result();
        $total_ot_seconds  = 0;
        $present = 0;
        $half_days = 0;
        if(!empty($result)){
            foreach($result as $data){
                if ($data->is_ot_hrs == '1') {
                    $ot_parts = explode(':', $data->ot_hrs);
                    
                    if (count($ot_parts) === 3) {
                        list($ot_hours, $ot_minutes, $ot_seconds) = $ot_parts;
                        
                        $total_ot_seconds += ($ot_hours * 3600) + ($ot_minutes * 60) + $ot_seconds;
                    } else {
                        $ot_hours = $ot_minutes = $ot_seconds = 0;
                    }
                }
                if ($data->attendence_type == '1') {
                    $present += 1;
                } elseif ($data->attendence_type == '3' || $data->attendence_type == '4') {
                    $half_days += 1;
                }
            }
        }

        $this->db->where('tbl_salon_emp_leaves.emp_id', $staff_id);
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
        $this->db->where("(
            (from_date <= '$end_date_mysql' AND to_date >= '$start_date_mysql') OR
            (from_date >= '$start_date_mysql' AND from_date <= '$end_date_mysql')
        )");
        $leaves = $this->db->get('tbl_salon_emp_leaves')->result();

        $total_leave_days = 0;

        foreach ($leaves as $leave) {
            $from_date = date_create($leave->from_date);
            $to_date = date_create($leave->to_date);
        
            $overlap_start = max($from_date, date_create($start_date));
            $overlap_end = min($to_date, date_create($end_date));
        
            if ($overlap_start <= $overlap_end) {
                $interval = date_diff($overlap_start, $overlap_end);
                $total_leave_days += $interval->days + 1;
            }
        }

        $total_hours = floor($total_ot_seconds / 3600);
        $total_minutes = floor(($total_ot_seconds % 3600) / 60);
        $total_seconds = $total_ot_seconds % 60;
        
        $total_ot = sprintf('%02d:%02d', $total_hours, $total_minutes);
        
        $start_timestamp = strtotime($start_date_mysql);
        $end_timestamp = strtotime($end_date_mysql);
        $diff_seconds = $end_timestamp - $start_timestamp;
        $total_months_days = ($diff_seconds / 86400) + 1;

        $absent = $total_months_days - ($present + $half_days);
        
        $month_target = $this->get_single_target_details($emp_details->salary_method);

        $packages_sale = $this->Salon_model->get_employee_package_sale($emp_details->id, $start_date_mysql, $end_date_mysql,'1')['amount'];
        $service_sale = $this->Salon_model->get_employee_service_sale($emp_details->id, $start_date_mysql, $end_date_mysql, '1','1')['amount'];
        $service_product_sale = (float)$this->Salon_model->get_employee_service_product_sale($emp_details->id, $start_date_mysql, $end_date_mysql, '1','1')['amount'];
        $membership_sale = $this->Salon_model->get_employee_membership_sale($emp_details->id, $start_date_mysql, $end_date_mysql,'1')['amount'];

        $total_performance = $service_sale + $service_product_sale + $membership_sale + $packages_sale;
            
        $start_timestamp = strtotime($start_date);
        $end_timestamp = strtotime($end_date);
        $total_days = ($end_timestamp - $start_timestamp) / (60 * 60 * 24) + 1;
        $emp_leaves = $this->get_employee_leaves($emp_details->id,$start_date_mysql,$end_date_mysql);
        $weekly_off = 0;

        $consider_days = $total_days - $emp_leaves - $weekly_off;
        if(!empty($month_target) && $consider_days > 0){
            $start_amount = $month_target->start_amount;
            $end_amount = $month_target->end_amount;
            
            $daily_target_min = $start_amount/$consider_days;
            $daily_target_max = $end_amount/$consider_days;
        }else{
            $daily_target_min = 0;
            $daily_target_max = 0;
        }

        return array(
            'present'   =>  $present,
            'total_ot'  =>  $total_ot,
            'absent'    =>  $absent - $total_leave_days,
            'half_days' =>  $half_days,
            'total_leave_days' =>  $total_leave_days,
            'month_sale' =>  $total_performance,
            'month_target' =>  $month_target,
            'daily_target_min'  =>  $daily_target_min,
            'daily_target_max'  =>  $daily_target_max
        );
    }
    
    public function get_employee_leave_days_ajx()
    {
        $salary_month = $this->input->post('salary_month');
        $salary_year = $this->input->post('salary_year');
        $staff_id = $this->input->post('staff_id');

        $start_date = date("$salary_year-$salary_month-01");
        $end_date = date("Y-m-t", strtotime($start_date));
        $start_date_mysql = date("Y-m-d", strtotime($start_date));
        $end_date_mysql = date("Y-m-d", strtotime($end_date));

        $this->db->where('tbl_salon_emp_leaves.emp_id', $staff_id);
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
        $this->db->where("(
            (from_date <= '$end_date_mysql' AND to_date >= '$start_date_mysql') OR
            (from_date >= '$start_date_mysql' AND from_date <= '$end_date_mysql')
        )");
        $leaves = $this->db->get('tbl_salon_emp_leaves')->result();

        $total_leave_days = 0;

        foreach ($leaves as $leave) {
            $from_date = date_create($leave->from_date);
            $to_date = date_create($leave->to_date);
        
            $overlap_start = max($from_date, date_create($start_date));
            $overlap_end = min($to_date, date_create($end_date));
        
            if ($overlap_start <= $overlap_end) {
                $interval = date_diff($overlap_start, $overlap_end);
                $total_leave_days += $interval->days + 1;
            }
        }
        echo $total_leave_days;
    }
    
    public function get_employee_single_attendance_datewise($staff_id, $from, $to)
    {
        $start_date = new DateTime($from);
        $end_date = new DateTime($to);
        $end_date->modify('+1 day');
        
        $interval = $start_date->diff($end_date);
        $total_days = $interval->days;

        $this->db->where('att_date >=', date("Y-m-d", strtotime($from)));
        $this->db->where('att_date <=', date("Y-m-d", strtotime($to)));
        $this->db->where('tbl_salon_emp_attendance.emp_id', $staff_id);
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_attendance')->result();
        $total_ot_seconds  = 0;
        $present = 0;
        $half_days = 0;
        if(!empty($result)){
            foreach($result as $data){
                if ($data->is_ot_hrs == '1') {
                    $ot_parts = explode(':', $data->ot_hrs);
                    
                    if (count($ot_parts) === 3) {
                        list($ot_hours, $ot_minutes, $ot_seconds) = $ot_parts;
                        
                        $total_ot_seconds += ($ot_hours * 3600) + ($ot_minutes * 60) + $ot_seconds;
                    } else {
                        // error_log("Invalid OT hours format: " . $data->ot_hrs);
                        $ot_hours = $ot_minutes = $ot_seconds = 0;
                    }
                }
                if ($data->attendence_type == '1') {
                    $present += 1;
                } elseif ($data->attendence_type == '3' || $data->attendence_type == '4') {
                    $half_days += 1;
                }
            }
        }
        $total_hours = floor($total_ot_seconds / 3600);
        $total_minutes = floor(($total_ot_seconds % 3600) / 60);
        $total_seconds = $total_ot_seconds % 60;
        
        $total_ot = sprintf('%02d:%02d', $total_hours, $total_minutes);
        $absent = $total_days - ($present + $half_days);
        return array(
            'present'   =>  $present,
            'total_ot'  =>  $total_ot,
            'absent'    =>  $absent,
            'half_days' =>  $half_days,
        );
    }
    public function get_employee_single_attendance_details($staff_id, $date)
    {
        $this->db->select('tbl_salon_emp_attendance.*,tbl_shift_master.shift_name');
        $this->db->join('tbl_shift_master','tbl_salon_emp_attendance.shift_name = tbl_shift_master.id');
        if($date != ""){
            $this->db->where('DATE(tbl_salon_emp_attendance.att_date)', date("Y-m-d", strtotime($date)));
        }
        if($staff_id != ""){
            $this->db->where('tbl_salon_emp_attendance.emp_id', $staff_id);
        }
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_attendance')->row();

        $is_on_leave = $this->check_staff_is_on_leave($staff_id, $date);

        $custom = array(
            'result'            =>  $result,
            'is_on_leave'       =>  $is_on_leave,
            'staff_id'          =>  $staff_id,
            'date'              =>  $date,
        );                                  
        return $custom;
    }
    public function check_staff_is_on_leave($staff_id, $date){
        if (!empty($date)) {
            $date_mysql = date("Y-m-d", strtotime($date));
            $this->db->where("DATE('$date_mysql') BETWEEN DATE(tbl_salon_emp_leaves.from_date) AND DATE(tbl_salon_emp_leaves.to_date)");
        }
        if($staff_id != ""){
            $this->db->where('tbl_salon_emp_leaves.emp_id', $staff_id);
        }
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_leaves')->result(); 

        if(!empty($result)){
            return '1';
        }else{
            return '0';
        }
    }
    public function check_staff_is_on_leave_all($staff_id, $date, $branch_id, $salon_id){
        if (!empty($date)) {
            $date_mysql = date("Y-m-d", strtotime($date));
            $this->db->where("DATE('$date_mysql') BETWEEN DATE(tbl_salon_emp_leaves.from_date) AND DATE(tbl_salon_emp_leaves.to_date)");
        }
        if($staff_id != ""){
            $this->db->where('tbl_salon_emp_leaves.emp_id', $staff_id);
        }
        $this->db->where('tbl_salon_emp_leaves.branch_id', $branch_id);
        $this->db->where('tbl_salon_emp_leaves.salon_id', $salon_id);
        $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_leaves')->result(); 

        if(!empty($result)){
            return '1';
        }else{
            return '0';
        }
    }
    public function valdiate_staff_leave_for_period_ajx(){
        $id = $this->input->post('id');
        $from_date = $this->input->post('from_date');
        $to_date = $this->input->post('to_date');
        $staff_id = $this->input->post('staff_id');

        $from_date_mysql = date("Y-m-d", strtotime($from_date));
        $to_date_mysql = date("Y-m-d", strtotime($to_date));

        $from_date_time_mysql = date("Y-m-d H:i:s", strtotime($from_date . ' 00:00:00'));
        $to_date_time_mysql = date("Y-m-d H:i:s", strtotime($to_date . ' 23:59:59'));

        $active_bookings_flag = '0';        
		$this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email,tbl_booking_services_details.service_date,tbl_booking_services_details.service_from,tbl_booking_services_details.service_to,tbl_booking_services_details.stylist_id,tbl_booking_services_details.service_id');
		$this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->join('tbl_booking_services_details','tbl_booking_services_details.booking_id = tbl_new_booking.id');
        $this->db->where('tbl_booking_services_details.stylist_id',$staff_id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where_in('tbl_booking_services_details.service_status',['0','3']);
        $this->db->where('tbl_booking_services_details.service_from >=', $from_date_time_mysql);
        $this->db->where('tbl_booking_services_details.service_from <=', $to_date_time_mysql);
        // $this->db->where('tbl_booking_services_details.service_from >', date('Y-m-d H:i:s'));
        $this->db->group_by('tbl_booking_services_details.booking_id');
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->order_by('tbl_booking_services_details.service_from','asc');
        $result = $this->db->get('tbl_new_booking')->result();
        if(!empty($result)){
            $active_bookings_flag = '1';
        }
        
        $this->db->where('DATE(tbl_salon_emp_attendance.att_date) >=', $from_date_mysql);
        $this->db->where('DATE(tbl_salon_emp_attendance.att_date) <=', $to_date_mysql);
        $this->db->where('tbl_salon_emp_attendance.emp_id', $staff_id);
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $attendance = $this->db->get('tbl_salon_emp_attendance')->result(); 

        if(empty($attendance)){        
            $date_mysql = date("Y-m-d", strtotime($from_date));
            $this->db->where("DATE('$date_mysql') BETWEEN DATE(tbl_salon_emp_leaves.from_date) AND DATE(tbl_salon_emp_leaves.to_date)");
            $this->db->where('tbl_salon_emp_leaves.emp_id', $staff_id);
            $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
            $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
            if($id != ""){
                $this->db->where('tbl_salon_emp_leaves.id !=', $id);
            }
            $from_result = $this->db->get('tbl_salon_emp_leaves')->result(); 
            if(empty($from_result)){        
                $date_mysql = date("Y-m-d", strtotime($to_date));
                $this->db->where("DATE('$date_mysql') BETWEEN DATE(tbl_salon_emp_leaves.from_date) AND DATE(tbl_salon_emp_leaves.to_date)");
                $this->db->where('tbl_salon_emp_leaves.emp_id', $staff_id);
                $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
                $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
                $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
                if($id != ""){
                    $this->db->where('tbl_salon_emp_leaves.id !=', $id);
                }
                $to_result = $this->db->get('tbl_salon_emp_leaves')->result(); 
                if(empty($to_result)){ 
                    $leave_period_flag = '1';
                }else{
                    $leave_period_flag = '0';
                }
            }else{
                $leave_period_flag = '0';
            }
        }else{
            $leave_period_flag = '2';
        }

        echo json_encode(array('leave_period_flag' => $leave_period_flag, 'active_bookings_flag' => $active_bookings_flag, 'result_count' => count($result), 'result' => $result));
    } 
    public function check_emp_leave($emp,$date){        
        $date_mysql = date("Y-m-d", strtotime($date));
        $this->db->where("DATE('$date_mysql') BETWEEN DATE(tbl_salon_emp_leaves.from_date) AND DATE(tbl_salon_emp_leaves.to_date)");
        $this->db->where('tbl_salon_emp_leaves.emp_id', $emp);
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_leaves')->result(); 
        return $result;
    } 
    public function check_emp_approved_leave($emp,$date){        
        $date_mysql = date("Y-m-d", strtotime($date));
        $this->db->where("DATE('$date_mysql') BETWEEN DATE(tbl_salon_emp_leaves.from_date) AND DATE(tbl_salon_emp_leaves.to_date)");
        $this->db->where('tbl_salon_emp_leaves.emp_id', $emp);
        $this->db->where('tbl_salon_emp_leaves.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_leaves.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_leaves.is_deleted', '0');
        $this->db->where('tbl_salon_emp_leaves.leave_status', '1');
        $result = $this->db->get('tbl_salon_emp_leaves')->result(); 
        return $result;
    } 
    public function check_employee_salary_generation($staff_id, $month, $year)
    {
        if($month != ""){
            $this->db->where('tbl_salon_emp_salary_slip.salaried_month', $month);
        }
        if($year != ""){
            $this->db->where('tbl_salon_emp_salary_slip.salaried_year', $year);
        }
        if($staff_id != ""){
            $this->db->where('tbl_salon_emp_salary_slip.emp_id', $staff_id);
        }
        $this->db->where('tbl_salon_emp_salary_slip.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_salary_slip.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_emp_salary_slip.is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_salary_slip');
        return $result->row();
    }
    
    public function get_employee_product_incentive($staff_id, $from_date, $to_date)
    {
        if($from_date != ""){
            $this->db->where('DATE(tbl_employee_incentive_entry.incentive_added_on) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_employee_incentive_entry.incentive_added_on) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if($staff_id != ""){
            $this->db->where('tbl_employee_incentive_entry.employee_id', $staff_id);
        }
        $this->db->where('tbl_employee_incentive_entry.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_employee_incentive_entry.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_employee_incentive_entry.is_deleted', '0');
        $result = $this->db->get('tbl_employee_incentive_entry');
        return $result->result();
    }
    public function get_employee_product_incentive_total($staff_id, $from_date, $to_date){
        $result = $this->get_employee_product_incentive($staff_id, $from_date, $to_date);
        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + $data->incentive_amount;
            }
        }
        return $total;
    }
    public function get_single_target_details($id){
        $this->db->where('id',$id);
        $result = $this->db->get('tbl_salon_employee_incentive')->row();
        return $result;
    }
    public function get_employee_target_incentive_total($staff_id, $from_date, $to_date){
        $total = 0;
        $incentive_amt = 0;
        $employee_details = $this->get_single_emp_details($staff_id);
        if(!empty($employee_details)){
            $target = $this->get_single_target_details($employee_details->salary_method);
            if(!empty($target)){
                $min = (float)$target->start_amount;
                $max = (float)$target->end_amount;
                
                $type = $target->per_or_flat;
                $incentive = $target->incentive;
                if($incentive != "" && $incentive != "0"){
                    $service_sale = (float)$this->get_employee_service_sale($staff_id, $from_date, $to_date, '1','1')['amount'];
                    $service_product_sale = (float)$this->get_employee_service_product_sale($staff_id, $from_date, $to_date, '1','1')['amount'];
                    $membership_sale = (float)$this->get_employee_membership_sale($staff_id, $from_date, $to_date,'1')['amount'];
                    $package_sale = (float)$this->get_employee_package_sale($staff_id, $from_date, $to_date,'1')['amount'];
                    
                    $total = $service_sale + $service_product_sale + $membership_sale + $package_sale;

                    if($total > 0 && $total >= $min){                        
                        if($type == '1'){
                            $incentive_amt = $total * ($incentive / 100);
                        }elseif($type == '2'){
                            $incentive_amt = $incentive;
                        }
                    }
                }
            }
        }
        return $incentive_amt;
    }
    public function get_employee_service_sale($staff_id, $from_date, $to_date, $status, $payment_status){
        if($from_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if($staff_id != ""){
            $this->db->where('tbl_booking_services_details.stylist_id_after_bill', $staff_id);
        }
        if ($status != "") {
            $this->db->where('tbl_booking_services_details.service_status', $status);
        }
        if ($payment_status != "") {
            $this->db->where('tbl_booking_services_details.payment_status', $payment_status);
        }
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_booking_services_details')->result();
        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + (is_numeric($data->service_discounted_price_while_bill) ? $data->service_discounted_price_while_bill : 0);
            }
        }
        return array(
            'result'    =>  $result,
            'amount'    =>  $total,
        );
    }
    public function formatNumberInIndianFormat($number) {
        // Ensure the number is float
        $number = floatval($number);
        
        // Format the number with two decimal places
        $formattedNumber = number_format($number, 2, '.', '');
    
        // Split integer and decimal parts
        list($integerPart, $decimalPart) = explode('.', $formattedNumber);
    
        // Add commas to the integer part
        $lastThree = substr($integerPart, -3);
        $otherNumbers = substr($integerPart, 0, -3);
    
        if ($otherNumbers != '') {
            $lastThree = ',' . $lastThree;
        }
    
        $integerPart = $otherNumbers ? preg_replace('/\B(?=(\d{2})+(?!\d))/', ',', $otherNumbers) . $lastThree : $lastThree;
    
        // Combine integer and decimal parts
        return $integerPart . '.' . $decimalPart;
    }
    
    
    public function get_employee_service_product_sale($staff_id, $from_date, $to_date, $status, $payment_status){
        $this->db->select('tbl_booking_services_products_details.*,tbl_booking_services_details.service_status, tbl_booking_services_details.service_date, tbl_booking_services_details.stylist_id_after_bill');
        $this->db->join('tbl_booking_services_details','tbl_booking_services_products_details.booking_service_details_id = tbl_booking_services_details.id');
        if($from_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if($staff_id != ""){
            $this->db->where('tbl_booking_services_details.stylist_id_after_bill', $staff_id);
        }
        if ($status != "") {
            $this->db->where('tbl_booking_services_details.service_status', $status);
        }
        if ($payment_status != "") {
            $this->db->where('tbl_booking_services_details.payment_status', $payment_status);
            $this->db->where('tbl_booking_services_products_details.payment_status', $payment_status);
        }
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_products_details.is_deleted', '0');
        $result = $this->db->get('tbl_booking_services_products_details')->result();

        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + (is_numeric($data->product_discounted_price_while_bill) ? $data->product_discounted_price_while_bill : 0);
            }
        }
        return array(
            'result'    =>  $result,
            'amount'    =>  $total,
        );
    }
    public function get_employee_product_sale($staff_id, $from_date, $to_date, $payment_status){
        $this->db->select('tbl_only_product_booking_details.*, tbl_product.product_name, tbl_new_booking.booking_date');
        $this->db->join('tbl_product', 'tbl_product.id = tbl_only_product_booking_details.product_id');
        $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
        if ($from_date != "") {
            $this->db->where('DATE(tbl_new_booking.booking_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_new_booking.booking_date) <=', $to_date);
        }
        if ($payment_status != "") {
            $this->db->where('tbl_only_product_booking_details.payment_status', $payment_status);
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        if($staff_id != ""){
            $this->db->where('tbl_only_product_booking_details.stylist_after_bill', $staff_id);
        }

        $this->db->where('tbl_only_product_booking_details.is_deleted', '0');
        $this->db->where('tbl_new_booking.is_deleted', '0');
        $this->db->where('tbl_only_product_booking_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_only_product_booking_details.salon_id', $this->session->userdata('salon_id'));
        
        $result = $this->db->get('tbl_only_product_booking_details');
        $result = $result->result();

        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + (is_numeric($data->product_discounted_price_while_bill) ? $data->product_discounted_price_while_bill : 0);                
            }
        }
        return array(
            'result'    =>  $result,
            'amount'    =>  $total,
        );
    }
    public function get_employee_membership_sale($staff_id, $from_date, $to_date, $payment_status){
        if($from_date != ""){
            $this->db->where('DATE(tbl_customer_membership_history.payment_date) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_customer_membership_history.payment_date) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if($staff_id != ""){
            $this->db->where('tbl_customer_membership_history.employee_id', $staff_id);
        }
        if($payment_status != ""){
            $this->db->where('tbl_customer_membership_history.payment_status', $payment_status);
        }
        $this->db->where('tbl_customer_membership_history.is_deleted', '0');
        $this->db->where('tbl_customer_membership_history.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_customer_membership_history.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_customer_membership_history')->result();

        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + (is_numeric($data->membership_price) ? $data->membership_price : 0);
            }
        }
        return array(
            'result'    =>  $result,
            'amount'    =>  $total,
        );
    }
    
    public function get_employee_package_sale($staff_id, $from_date, $to_date, $payment_status){
        if($payment_status != ""){
            $this->db->select('tbl_customer_package_allocations.*,tbl_new_booking.payment_status');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_customer_package_allocations.allocated_in_booking_id','left');
            $this->db->where('tbl_customer_package_allocations.is_booking_done', $payment_status);
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_customer_package_allocations.created_on) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_customer_package_allocations.created_on) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if($staff_id != ""){
            $this->db->where('tbl_customer_package_allocations.allocated_by', $staff_id);
        }
        $this->db->where('tbl_customer_package_allocations.is_deleted', '0');
        $this->db->where('tbl_customer_package_allocations.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_customer_package_allocations.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_customer_package_allocations')->result();

        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + (is_numeric($data->package_amount) ? $data->package_amount : 0);
            }
        }
        return array(
            'result'    =>  $result,
            'amount'    =>  $total,
        );
    }
    public function get_single_emp_details($id)
    {
        $this->db->where('id', $id);
        $this->db->where('is_deleted', '0');
        $result = $this->db->get('tbl_salon_employee')->row();
        return $result;
    }
    public function get_attendance_emp_details()
    {
        $this->db->where('id', $this->input->post('employee_id'));
        $this->db->where('is_deleted', '0');
        $result = $this->db->get(' tbl_salon_employee');
        echo json_encode($result->row());
    }
    public function get_today_attendance($id)
    {
        $this->db->where('emp_id', $id);
        $this->db->where('att_date', date('Y-m-d'));
        $this->db->where('is_deleted', '0');
        $result = $this->db->get('tbl_salon_emp_attendance');
        return $result->num_rows();
    }
    public function get_today_present_staff()
    {
        $this->db->select('tbl_salon_emp_attendance.*,  tbl_salon_employee.full_name,  tbl_salon_employee.email,  tbl_salon_employee.whatsapp_number');
        $this->db->where('tbl_salon_emp_attendance.att_date', date('Y-m-d'));
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $this->db->join('tbl_salon_employee', ' tbl_salon_employee.id = tbl_salon_emp_attendance.emp_id');
        $result = $this->db->get('tbl_salon_emp_attendance');
        return $result->result();
    }
    public function get_today_staff_attendence($employee_id)
    {
        $this->db->where('att_date', date('Y-m-d'));
        $this->db->where('is_deleted', '0');
        $this->db->where('emp_id', $employee_id);
        $result = $this->db->get('tbl_salon_emp_attendance');
        return $result->row();
    }
    public function get_all_attendance()
    {
        $this->db->select('tbl_salon_emp_attendance.*, tbl_salon_employee.full_name');
        $this->db->from('tbl_salon_emp_attendance');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_salon_emp_attendance.emp_id', 'left');
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_salon_emp_attendance.id', 'DESC');
    
        $result = $this->db->get();
    
        return $result->result();
    }
    
    public function get_employee_by_shift_name_ajx($shift_name)
    {
        $this->db->where_in('full_name', $shift_name);
        $this->db->order_by('id', 'DESC');
        $this->db->where('is_deleted', '0');
        $result = $this->db->get('tbl_salon_employee')->result();
        return $result;
    }

    public function get_today_attendance_ajx()
    {
        // $this->db->where_in('shift_name', $shift_name);
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('att_date',date('Y-m-d'));
    
        $result = $this->db->get('tbl_salon_emp_attendance');
        $result = $result->result();
        return $result;
    }
    
    public function get_emp_by_shift_name_ajx()
    {   
        $date = $this->input->post('date');    
        $shift_name = $this->input->post('shift_name');        
        $this->db->where('tbl_salon_employee.shift_name', $shift_name);
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_employee')->result();
        if(!empty($result)){
            foreach($result as &$data){
                $attendance = $this->get_employee_single_attendance($data->id,$date);
                if(!empty($attendance)){
                    $attendence_type = $attendance->attendence_type;
                }else{
                    $attendence_type = '';
                }
                  
                $month_salary = $this->check_employee_salary_generation($data->id,date('n',strtotime($date)),date('Y',strtotime($date)));
                if(!empty($month_salary)){
                    $is_salary_generated = '1';
                }else{
                    $is_salary_generated = '0';
                }

                $data->attendence_type = $attendence_type;
                $data->is_salary_generated = $is_salary_generated;
            }
        }
        echo json_encode($result);
    }
    public function get_all_salary()
    {
        $this->db->select('tbl_salon_emp_salary_slip.*, tbl_salon_employee.full_name');
        $this->db->from('tbl_salon_emp_salary_slip');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_salon_emp_salary_slip.emp_id', 'left');
        $this->db->where('tbl_salon_emp_salary_slip.is_deleted', '0');
        $this->db->where('tbl_salon_emp_salary_slip.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_salary_slip.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_salon_emp_salary_slip.id', 'DESC');
    
        $result = $this->db->get();
    
        return $result->result();
    }
    public function get_single_emp_salary()
    {
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('is_deleted', '0');
        $this->db->where('id', $this->uri->segment(2)); 
        $result = $this->db->get('tbl_salon_emp_salary_slip');
        return $result->row();
    }




    // For Salon Expense


    public function add_salon_expense(){
        $data = array(
            'branch_id' 			=> $this->session->userdata('branch_id'),
            'add_items' 			=> $this->input->post('add_items') == 'on' ? '1' : '0',
            'salon_id' 				=> $this->session->userdata('salon_id'),
            'branch_name' 			=> $this->session->userdata('branch_name'),
            "expense_type"        	=> $this->input->post("expense_type"),
            "expense_amount"    	=> $this->input->post("expense_amount"),
            "payment_mode"        	=> $this->input->post("payment_mode"),
            "expense_date"        	=> date("Y-m-d", strtotime($this->input->post("expense_date"))),
            "expense_remark"        => $this->input->post("expense_remark"),
            "given_to"        		=> $this->input->post("given_to"),
        );
		 
		$details = array();
        if ($this->input->post('id') == "") {
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_salon_expense', $new_arr);
			$expense_id = $this->db->insert_id(); 
			$item_name = $this->input->post('item_name');
			$quantity = $this->input->post('quantity');
			$rate = $this->input->post('rate');
			$total_amount = $this->input->post('total_amount');
            if($this->input->post('add_items') == 'on'){
                for($i = 0;$i <count($item_name);$i++){
                    if($item_name[$i] != ""){
                        $details[] = array(
                            'expense_id' 	=> $expense_id,
                            'item_name' 	=> $item_name[$i],
                            'quantity' 		=> $quantity[$i],
                            'rate' 			=> $rate[$i],
                            'total_amount' 	=> $total_amount[$i],
                            'created_on' 	=> date("Y-m-d H:i:s"),
                        ); 
                    }
                }
            }
			if(!empty($details)){
				$this->db->insert_batch('tbl_expense_details',$details);
			}
            return 0;
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_salon_expense', $data);
			
			$this->db->where('expense_id',$this->input->post('id'));
			$this->db->delete('tbl_expense_details');
			
			$item_name = $this->input->post('item_name');
			$quantity = $this->input->post('quantity');
			$rate = $this->input->post('rate');
			$total_amount = $this->input->post('total_amount');
            if($this->input->post('add_items') == 'on'){
                for($i = 0;$i <count($item_name);$i++){
                    if($item_name[$i] != ""){
                        $details = array(
                            'expense_id' 	=> $this->input->post('id'),
                            'item_name' 	=> $item_name[$i],
                            'quantity' 		=> $quantity[$i],
                            'rate' 			=> $rate[$i],
                            'total_amount' 	=> $total_amount[$i],
                            'created_on' 	=> date("Y-m-d H:i:s"),
                        );
                        $this->db->insert('tbl_expense_details',$details);
                    }
                }
            }
            return 1;
        }
    }
    public function get_single_salon_expense(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_salon_expense');
        return $result->row();
    }
	public function get_single_expense_details(){
		$this->db->where('is_deleted','0');
		$this->db->where('expense_id',$this->uri->segment(2));
		$result = $this->db->get('tbl_expense_details');
		return $result->result();
	}
	public function get_single_expense_details_single($id){
		$this->db->where('is_deleted','0');
		$this->db->where('expense_id',$id);
		$result = $this->db->get('tbl_expense_details');
		return $result->result();
	}
    public function get_all_salon_expense(){
    $this->db->select('tbl_salon_expense.*, tbl_expenses_category.expenses_name');
    $this->db->from('tbl_salon_expense');
    $this->db->join('tbl_expenses_category', 'tbl_expenses_category.id = tbl_salon_expense.expense_type');
    $this->db->where('tbl_salon_expense.is_deleted', '0');
    $this->db->where('tbl_salon_expense.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_salon_expense.salon_id', $this->session->userdata('salon_id'));
    $this->db->order_by('tbl_salon_expense.id', 'DESC');
    
    $result = $this->db->get();
    
    return $result->result();
}


    

    public function get_all_expense_list_of_salon_ajx($length, $start, $search)
    {
        $this->db->select('tbl_salon_expense.*,tbl_salon_expense_type.expense_type');
        $this->db->where('tbl_salon_expense.is_deleted', '0');
        $this->db->where('tbl_salon_expense.salon_id', $this->input->post('salon_id'));
        if ($search != "") {
            $this->db->group_start();
            $this->db->or_like('tbl_salon_expense.expense_type', $search);
            $this->db->or_like('tbl_salon_expense.expense_amount', $search);
            $this->db->or_like('tbl_salon_expense.expense_date', $search);
            $this->db->group_end();
        }
        $this->db->join('tbl_salon_expense_type', 'tbl_salon_expense_type.id = tbl_salon_expense.expense_type', 'left');
        $this->db->order_by('tbl_salon_expense.id', 'DESC');
        $this->db->limit($length, $start);
        $result = $this->db->get('tbl_salon_expense');
        return $result->result();
    }
    public function get_active_salon()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $result = $this->db->get('tbl_salon');
        $result = $result->result();
        return $result;
    }
    public function get_all_expense_name()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $result = $this->db->get('tbl_expenses_category');
        return $result->result();
    }






  
    // add work shedule

    public function get_schedule_data_ajax()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('schedules_id', $this->input->post('schedule_id'));
        $result = $this->db->get('tbl_work_schedule_days');
        $result = $result->result();
        if (!empty($result)) {
?>
            <div class="row">

                <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <ul class="color-code-section">
                        <li>
                            <span class="colored_div" style="background-color:#4caf50;"></span>
                            <h4>Full Day Work</h4>
                        </li>
                        <li>
                            <span class="colored_div" style="background-color:#ffc107;"></span>
                            <h4>Half Day Work</h4>
                        </li>
                        <li>
                            <span class="colored_div" style="background-color:#ff0000;"></span>
                            <h4>Weekend</h4>
                        </li>
                    </ul>

                    <table style="width:100%;" class="working_days_table">
                        <thead>
                            <tr>
                                <th rowspan="2">
                                    <div style="border-bottom:1px solid #ddd; padding-bottom: 30px;padding-top: 20px;">Weeks</div>
                                </th>
                                <th colspan="7" style="border-bottom:1px solid #ddd;border-left: 1px solid #ddd;">Days</th>
                            </tr>
                            <tr>
                                <th style="border-left: 1px solid #ddd;">
                                    <div style="border-bottom:1px solid #ddd; padding-bottom:10px;">Sunday</div>
                                </th>
                                <th style="border-left: 1px solid #ddd;">
                                    <div style="border-bottom:1px solid #ddd; padding-bottom:10px;">Monday</div>
                                </th>
                                <th style="border-left: 1px solid #ddd;">
                                    <div style="border-bottom:1px solid #ddd; padding-bottom:10px;">Tuesday</div>
                                </th>
                                <th style="border-left: 1px solid #ddd;">
                                    <div style="border-bottom:1px solid #ddd; padding-bottom:10px;">Wednesday</div>
                                </th>
                                <th style="border-left: 1px solid #ddd;">
                                    <div style="border-bottom:1px solid #ddd; padding-bottom:10px;">Thursday</div>
                                </th>
                                <th style="border-left: 1px solid #ddd;">
                                    <div style="border-bottom:1px solid #ddd; padding-bottom:10px;">Friday</div>
                                </th>
                                <th style="border-left: 1px solid #ddd;">
                                    <div style="border-bottom:1px solid #ddd; padding-bottom:10px;">Saturday</div>
                                </th>
                            </tr>
                        </thead>
                        <thead>

                            <?php $f = 1;
                            foreach ($result as $schedule_result) { ?>
                                <tr>
                                    <th><?= $schedule_result->week; ?><?php
                                                                    if ($schedule_result->week == '1') {
                                                                        echo 'st';
                                                                    } else if ($schedule_result->week == '2') {
                                                                        echo 'nd';
                                                                    } else if ($schedule_result->week == '3') {
                                                                        echo 'rd';
                                                                    } else if ($schedule_result->week == '4' || $schedule_result->week == '5' || $schedule_result->week == '6') {
                                                                        echo 'th';
                                                                    }
                                                                    ?>

                                        <input type="hidden" name="week_name[]" id="week_name_<?= $f; ?>" value="<?= $schedule_result->week; ?>">
                                        <input type="hidden" name="weeking_days_row_id[]" id="weeking_days_row_id_<?= $f; ?>" value="<?= $schedule_result->id; ?>">
                                    </th>
                                    <td style="border-left: 1px solid #ddd;" class="custom-checkbox">
                                        <input type="checkbox" name="sun_check[]" id="sun_check_<?= $f; ?>" class="sun_checkBox custom-checkbox-input <?php if ($schedule_result->sunday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->sunday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->sunday_status == '3') { ?>weekendDayClass<?php } ?>" value="<?= $schedule_result->sunday_status; ?>" <?php if ($schedule_result->sunday_status != '') { ?>checked<?php } ?> readonly style="pointer-events: none;">
                                        <label class="custom-checkbox-input <?php if ($schedule_result->sunday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->sunday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->sunday_status == '3') { ?>weekendDayClass<?php } ?>" for="sun_check_<?= $f; ?>" style="pointer-events: none;"></label>
                                    </td>
                                    <td style="border-left: 1px solid #ddd;" class="custom-checkbox">
                                        <input type="checkbox" name="mon_check[]" id="mon_check_<?= $f; ?>" class="mon_checkBox custom-checkbox-input <?php if ($schedule_result->monday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->monday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->monday_status == '3') { ?>weekendDayClass<?php } ?>" value="<?= $schedule_result->monday_status; ?>" <?php if ($schedule_result->monday_status != '') { ?>checked<?php } ?> readonly style="pointer-events: none;">
                                        <label class="custom-checkbox-input <?php if ($schedule_result->monday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->monday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->monday_status == '3') { ?>weekendDayClass<?php } ?>" for="mon_check_<?= $f; ?>" style="pointer-events: none;"></label>
                                    </td>
                                    <td style="border-left: 1px solid #ddd;" class="custom-checkbox">
                                        <input type="checkbox" name="tue_check[]" id="tue_check_<?= $f; ?>" class="tue_checkBox custom-checkbox-input <?php if ($schedule_result->tuesday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->tuesday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->tuesday_status == '3') { ?>weekendDayClass<?php } ?>" value="<?= $schedule_result->tuesday_status; ?>" <?php if ($schedule_result->tuesday_status != '') { ?>checked<?php } ?> readonly style="pointer-events: none;">
                                        <label class="custom-checkbox-input <?php if ($schedule_result->tuesday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->tuesday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->tuesday_status == '3') { ?>weekendDayClass<?php } ?>" for="tue_check_<?= $f; ?>" style="pointer-events: none;"></label>
                                    </td>
                                    <td style="border-left: 1px solid #ddd;" class="custom-checkbox">
                                        <input type="checkbox" name="wed_check[]" id="wed_check_<?= $f; ?>" class="wed_checkBox custom-checkbox-input <?php if ($schedule_result->wednesday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->wednesday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->wednesday_status == '3') { ?>weekendDayClass<?php } ?>" value="<?= $schedule_result->wednesday_status; ?>" <?php if ($schedule_result->wednesday_status != '') { ?>checked<?php } ?> readonly style="pointer-events: none;">
                                        <label class="custom-checkbox-input <?php if ($schedule_result->wednesday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->wednesday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->wednesday_status == '3') { ?>weekendDayClass<?php } ?>" for="wed_check_<?= $f; ?>" style="pointer-events: none;"></label>
                                    </td>
                                    <td style="border-left: 1px solid #ddd;" class="custom-checkbox">
                                        <input type="checkbox" name="thu_check[]" id="thu_check_<?= $f; ?>" class="thu_checkBox custom-checkbox-input <?php if ($schedule_result->thursday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->thursday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->thursday_status == '3') { ?>weekendDayClass<?php } ?>" value="<?= $schedule_result->thursday_status; ?>" <?php if ($schedule_result->thursday_status != '') { ?>checked<?php } ?> readonly style="pointer-events: none;">
                                        <label class="custom-checkbox-input <?php if ($schedule_result->thursday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->thursday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->thursday_status == '3') { ?>weekendDayClass<?php } ?>" for="thu_check_<?= $f; ?>" style="pointer-events: none;"></label>
                                    </td>
                                    <td style="border-left: 1px solid #ddd;" class="custom-checkbox">
                                        <input type="checkbox" name="fri_check[]" id="fri_check_<?= $f; ?>" class="fri_checkBox custom-checkbox-input <?php if ($schedule_result->friday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->friday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->friday_status == '3') { ?>weekendDayClass<?php } ?>" value="<?= $schedule_result->friday_status; ?>" <?php if ($schedule_result->friday_status != '') { ?>checked<?php } ?> readonly style="pointer-events: none;">
                                        <label class="custom-checkbox-input <?php if ($schedule_result->friday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->friday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->friday_status == '3') { ?>weekendDayClass<?php } ?>" for="fri_check_<?= $f; ?>" style="pointer-events: none;"></label>
                                    </td>
                                    <td style="border-left: 1px solid #ddd;" class="custom-checkbox">
                                        <input type="checkbox" name="sat_check[]" id="sat_check_<?= $f; ?>" class="sat_checkBox custom-checkbox-input <?php if ($schedule_result->saturday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->saturday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->saturday_status == '3') { ?>weekendDayClass<?php } ?>" value="<?= $schedule_result->saturday_status; ?>" <?php if ($schedule_result->saturday_status != '') { ?>checked<?php } ?> readonly style="pointer-events: none;">
                                        <label class="custom-checkbox-input <?php if ($schedule_result->saturday_status == '1') { ?>fullDayClass<?php } else if ($schedule_result->saturday_status == '2') { ?>halfDayClass<?php } else if ($schedule_result->saturday_status == '3') { ?>weekendDayClass<?php } ?>" for="sat_check_<?= $f; ?>" style="pointer-events: none;"></label>

                                    </td>
                                </tr>
                            <?php $f++;
                            } ?>
                        </thead>
                    </table>


                    <div class="error checkbox_error" style="text-align:center;"></div>
                </div>
            </div>
	<?php
        }
    }

    public function get_work_schedule_list($length, $start, $search)
    {
        $this->db->where('is_deleted', '0');
        if ($search != "") {
            //$this->db->group_start();
            $this->db->or_like('schedule_name', $search);
            //$this->db->group_end();
        }
        $this->db->order_by('id', 'DESC');
        $this->db->limit($length, $start);
        $result = $this->db->get('tbl_work_schedules');
        return $result->result();
    }
    public function get_work_schedule_list_count($search)
    {
        $this->db->where('is_deleted', '0');
        if ($search != "") {
            //$this->db->group_start();
            $this->db->or_like('schedule_name', $search);
            //$this->db->group_end();
        }
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_work_schedules');
        return $result->num_rows();
    }
    public function add_work_schedule()
    {
        $data = array(
            'branch_id' => $this->session->userdata('branch_id'),
            'salon_id' => $this->session->userdata('salon_id'),
            'schedule_name'            => $this->input->post('schedule_name'),
            'schedule_description'    => $this->input->post('schedule_description'),
            'added_by'                => $this->session->userdata('id'),
        );
        if ($this->input->post('hidden_id') == '') {
            $date = array(
                'created_on'     => date("Y-m-d H:i:s"),
            );
            $newarr = array_merge($data, $date);
            $this->db->insert('tbl_work_schedules', $newarr);
            $schedule_id = $this->db->insert_id();

            $week_name = $this->input->post('week_name');
            $sun_check = $this->input->post('sun_check');
            $mon_check = $this->input->post('mon_check');
            $tue_check = $this->input->post('tue_check');
            $wed_check = $this->input->post('wed_check');
            $thu_check = $this->input->post('thu_check');
            $fri_check = $this->input->post('fri_check');
            $sat_check = $this->input->post('sat_check');


            for ($i = 0; $i < count($week_name); $i++) {
                if (isset($sun_check[$i])) {
                    $sunday = $sun_check[$i];
                } else {
                    $sunday = '';
                }
                if (isset($mon_check[$i])) {
                    $monday = $mon_check[$i];
                } else {
                    $monday = '';
                }
                if (isset($tue_check[$i])) {
                    $tue = $tue_check[$i];
                } else {
                    $tue = '';
                }
                if (isset($wed_check[$i])) {
                    $wed = $wed_check[$i];
                } else {
                    $wed = '';
                }
                if (isset($thu_check[$i])) {
                    $thu = $thu_check[$i];
                } else {
                    $thu = '';
                }
                if (isset($fri_check[$i])) {
                    $fri = $fri_check[$i];
                } else {
                    $fri = '';
                }
                if (isset($sat_check[$i])) {
                    $sat = $sat_check[$i];
                } else {
                    $sat = '';
                }
                $week = array(
                     'branch_id' => $this->session->userdata('branch_id'),
                     'salon_id' => $this->session->userdata('salon_id'), 
                    'schedules_id'        => $schedule_id,
                    'week'                => $week_name[$i],
                    'sunday_status'        => $sunday,
                    'monday_status'        => $monday,
                    'tuesday_status'    => $tue,
                    'wednesday_status'    => $wed,
                    'thursday_status'    => $thu,
                    'friday_status'        => $fri,
                    'saturday_status'    => $sat,
                    'added_by'            => $this->session->userdata('id'),
                    'created_on'         => date("Y-m-d H:i:s"),
                    'shift_name' => $this->input->post('shift_name'),
                );
                $this->db->insert('tbl_work_schedule_days', $week);
            }
            return 1;
        } else {
            $this->db->where('id', $this->input->post('hidden_id'));
            $this->db->update('tbl_work_schedules', $data);
            $schedule_id = $this->input->post('hidden_id');


            $week_name = $this->input->post('week_name');
            $sun_check = $this->input->post('sun_check');
            $mon_check = $this->input->post('mon_check');
            $tue_check = $this->input->post('tue_check');
            $wed_check = $this->input->post('wed_check');
            $thu_check = $this->input->post('thu_check');
            $fri_check = $this->input->post('fri_check');
            $sat_check = $this->input->post('sat_check');
            $weeking_days_row_id = $this->input->post('weeking_days_row_id');


            for ($i = 0; $i < count($week_name); $i++) {
                if (isset($sun_check[$i])) {
                    $sunday = $sun_check[$i];
                } else {
                    $sunday = '';
                }
                if (isset($mon_check[$i])) {
                    $monday = $mon_check[$i];
                } else {
                    $monday = '';
                }
                if (isset($tue_check[$i])) {
                    $tue = $tue_check[$i];
                } else {
                    $tue = '';
                }
                if (isset($wed_check[$i])) {
                    $wed = $wed_check[$i];
                } else {
                    $wed = '';
                }
                if (isset($thu_check[$i])) {
                    $thu = $thu_check[$i];
                } else {
                    $thu = '';
                }
                if (isset($fri_check[$i])) {
                    $fri = $fri_check[$i];
                } else {
                    $fri = '';
                }
                if (isset($sat_check[$i])) {
                    $sat = $sat_check[$i];
                } else {
                    $sat = '';
                }
                $week = array(
                    'schedules_id'        => $schedule_id,
                    'week'                => $week_name[$i],
                    'sunday_status'        => $sunday,
                    'monday_status'        => $monday,
                    'tuesday_status'    => $tue,
                    'wednesday_status'    => $wed,
                    'thursday_status'    => $thu,
                    'friday_status'        => $fri,
                    'saturday_status'    => $sat,
                    'added_by'            => $this->session->userdata('id'),
                );
                $this->db->where('id', $weeking_days_row_id[$i]);
                $this->db->update('tbl_work_schedule_days', $week);
            }
            return 0;
        }
    }
    public function get_single_work_schedule()
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_work_schedules');
        $result = $result->row();
        return $result;
    }
    public function get_work_schedule_working_days($schedule_id)
    {
        $this->db->where('is_deleted', '0');
        $this->db->where('schedules_id', $schedule_id);
        $result = $this->db->get('tbl_work_schedule_days');
        $result = $result->result();
        return $result;
    }

    public function get_work_shedule_ajax()
{
    $work_shift_name = $this->input->post('work_shift_name');
    $this->db->where('shift_name', $work_shift_name);
    $result = $this->db->get('tbl_work_schedule_days')->result();

    if (!empty($result)) {
        echo json_encode($result);
    }
}

//     public function get_work_shedule_ajax()
// {
//     $work_shift_name = $this->input->post('work_shift_name');
//     $this->db->where('shift_name', $work_shift_name);
//     // $this->db->where('tbl_work_schedule_days.branch_id', $this->session->userdata('branch_id'));
//     // $this->db->where('tbl_work_schedule_days.salon_id', $this->session->userdata('salon_id'));
//     $result = $this->db->get('tbl_work_schedule_days')->row();


//     if (!empty($result)) {
//         echo json_encode($result);
//     }
// }
    public function get_ready_coupon_code(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }

		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		if(!empty($servicable_genders)){
			$this->db->where_in('gender',$servicable_genders);
        }
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
		$result = $this->db->get('tbl_admin_coupon_code');
		return $result->result();
	}
    public function get_ready_coupon_single_setup(){
		$this->db->where('is_deleted','0');
		$this->db->where('id',$_GET['value']);
		$result = $this->db->get('tbl_admin_coupon_code');
		return $result->row();
	}
	public function set_coupon_code(){
        $data = array(
            'branch_id' 	=> $this->session->userdata('branch_id'),
            'salon_id' 		=> $this->session->userdata('salon_id'),
            'coupon_id' 	=> $this->input->post('coupon_id'),
            'coupon_name' 	=> $this->input->post('coupon_name'),
            'coupan_code' 	=> $this->input->post('coupan_code'),
            'coupan_expiry' => date('Y-m-d',strtotime($this->input->post('coupan_expiry'))),
            'coupon_offers' => $this->input->post('coupon_offers'),
            'min_price' 	=> $this->input->post('min_price'),
            'gender' 	=> $this->input->post('gender'),
        );

        $this->set_onboarding_status('11');

        if($this->input->post('id') == ""){
            $date = array(
                'created_on'  => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_coupon_code', $new_arr);
            return 0;
        }else{
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_coupon_code', $data);
            return 1;
        }
    } 
    public function get_all_coupon_list(){
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_coupon_code');
        return $result->result();
    } 
    public function get_all_active_coupon_list(){
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('DATE(coupan_expiry) >=', date('Y-m-d'));
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_coupon_code');
        return $result->result();
    } 
    public function get_all_coupon_code(){
        $this->db->where('is_deleted','0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_coupon_code');
        return $result->result();
    } 
    public function get_single_coupon_code(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('id',$_GET['edit']);
        $result = $this->db->get('tbl_coupon_code');
        return $result->row();
    }
    public function get_unique_coupan_code(){
        $this->db->where('coupan_code', $this->input->post('coupan_code'));
        if($this->input->post('id') != "0"){
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_coupon_code');
        echo $result->num_rows();
    }
    public function get_unique_customer_mobile(){
        if($this->input->post('id') != "0" && $this->input->post('id') != ""){
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('customer_phone', $this->input->post('customer_phone'));
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_customer');
        echo $result->num_rows();
    }
    public function set_offer_expiry(){
        $this->db->where('is_deleted', '0');
        $result = $this->db->get('tbl_offers');
        $result = $result->result();
        if(!empty($result)){
            foreach($result as $row){
                if ($row->offer_starts == "") {
                    if ($row->offer_starts != "") {
                        $offer_starts = date('d-m-Y', strtotime($row->offer_starts));
                        $startDate = new DateTime($row->offer_starts);
                    } else {
                        $offer_starts = date('d-m-Y', strtotime($row->created_on));
                        $startDate = new DateTime($row->created_on);
                    }
                    $duration = (int)$row->duration;
                    $startDate->modify('+' . ($duration * 7) . ' days');

                    $offer_ends = $row->offer_ends != "" ? date('d-m-Y',strtotime($row->offer_ends)) : $startDate->format('d-m-Y');
                    
                    $validity_status = '1';
                    $today = new DateTime();
                    if (new DateTime($offer_ends) < $today) {
                        $validity_status = '0';
                    }

                    $data = array(
                        'offer_starts' 		=> $offer_starts != "" ? date('Y-m-d',strtotime($offer_starts)) : null,
                        'offer_ends' 		=> $offer_ends != "" ? date('Y-m-d',strtotime($offer_ends)) : null,
                        'validity_status'   => $validity_status
                    );
                    $this->db->where('id', $row->id);
                    $this->db->update('tbl_offers', $data);
                }
            }
        }
        return true;
    }
	public function set_offers(){
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'offers_name' 		=> $this->input->post('offers_name'),
            'offer_id' 			=> $this->input->post('offer_id'),
            'service_name' 		=> implode(',', $this->input->post('service_name')),
            'discount' 			=> $this->input->post('discount'),
            'gender' 			=> $this->input->post('gender'),
            'reward_point' 		=> $this->input->post('reward_point'),
            'duration' 			=> $this->input->post('duration'),
            'description' 		=> $this->input->post('description'),
            'discount_in' 		=> $this->input->post('discount_in'),
            'regular_price' 	=> $this->input->post('regular_price'),
            'offer_price' 		=> $this->input->post('offer_price'),
        );

        $this->set_onboarding_status('12');
        
        if($this->input->post('id') == ""){
            if ($this->input->post('offer_starts') != "") {
                $offer_starts = date('d-m-Y', strtotime($this->input->post('offer_starts')));
                $startDate = new DateTime($this->input->post('offer_starts'));
            } else {
                $offer_starts = date('d-m-Y');
                $startDate = new DateTime($offer_starts);
            }
            $duration = (int)$this->input->post('duration');
            $startDate->modify('+' . ($duration * 7) . ' days');

            $offer_ends = $this->input->post('offer_ends') != "" ? date('d-m-Y',strtotime($this->input->post('offer_ends'))) : $startDate->format('d-m-Y');
            
            $validity_status = '1';
            $today = new DateTime();
            if (new DateTime($offer_ends) < $today) {
                $validity_status = '0';
            }
            
            $date = array(
                'created_on'        => date("Y-m-d H:i:s"),
                'offer_starts' 		=> $offer_starts != "" ? date('Y-m-d',strtotime($offer_starts)) : null,
                'offer_ends' 		=> $offer_ends != "" ? date('Y-m-d',strtotime($offer_ends)) : null,
                'validity_status'   => $validity_status
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_offers', $new_arr);
            return 0;
        }else{
            $this->db->where('is_deleted', '0');
            $this->db->where('id', $this->input->post('id'));
            $result = $this->db->get('tbl_offers');
            $row = $result->row();
            if(!empty($row)){
                if ($this->input->post('offer_starts') != "") {
                    $offer_starts = date('d-m-Y', strtotime($this->input->post('offer_starts')));
                    $startDate = new DateTime($this->input->post('offer_starts'));
                } else {
                    $offer_starts = date('d-m-Y',strtotime($row->created_on));
                    $startDate = new DateTime($row->created_on);
                }
                $duration = (int)$this->input->post('duration');
                $startDate->modify('+' . ($duration * 7) . ' days');

                $offer_ends = $this->input->post('offer_ends') != "" ? date('d-m-Y',strtotime($this->input->post('offer_ends'))) : $startDate->format('d-m-Y');
                
                $validity_status = '1';
                $today = new DateTime();
                if (new DateTime($offer_ends) < $today) {
                    $validity_status = '0';
                }
                
                $date = array(
                    'offer_starts' 		=> $offer_starts != "" ? date('Y-m-d',strtotime($offer_starts)) : null,
                    'offer_ends' 		=> $offer_ends != "" ? date('Y-m-d',strtotime($offer_ends)) : null,
                    'validity_status'   => $validity_status
                );
                $new_arr = array_merge($data, $date);

                // echo '<pre>'; print_r($new_arr); exit;
                $this->db->where('id', $this->input->post('id'));
                $this->db->update('tbl_offers', $new_arr);
            }
            return 1;
        }
    } 
    public function get_single_offer_details($id){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('id', $id);
        $result = $this->db->get('tbl_offers');
        return $result->row();
    } 
    public function get_single_coupon_details($id){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('id', $id);
        $result = $this->db->get('tbl_coupon_code');
        return $result->row();
    } 
    public function get_single_giftcard_details($id){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('id', $id);
        $result = $this->db->get('tbl_gift_card');
        return $result->row();
    } 
    public function get_all_offers(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_offers');
        return $result->result();
    } 
    public function get_all_active_offers(){
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_offers');
        return $result->result();
    } 
    public function get_all_active_offers_all($branch_id,$salon_id){
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('branch_id', $branch_id);
        $this->db->where('salon_id', $salon_id);
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_offers');
        return $result->result();
    } 
    public function get_single_offer(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $_GET['edit']);
        $result = $this->db->get('tbl_offers');
        return $result->row();
    }
    public function get_services($services){
        $this->db->where_in('id',$services);
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_salon_emp_service');
        return $result->result(); 
    }
    public function get_services_for_offers(){
		$this->db->select('tbl_salon_emp_service.*,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_cat_name,tbl_admin_sub_category.sub_category_marathi');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_salon_emp_service.status', '1');
        $this->db->where('tbl_salon_emp_service.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id',$this->session->userdata('salon_id'));
		$this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
		$this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
        $this->db->order_by('tbl_salon_emp_service.id', 'DESC');
        $result = $this->db->get('tbl_salon_emp_service');
        return $result->result(); 
    }
    public function get_services_for_offers_genderwise($gender){
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('gender', $gender);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_salon_emp_service');
        return $result->result(); 
    }
    public function get_services_for_offers_genderwise_new($gender){
        /*$this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('gender', $gender);
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_salon_emp_service');
        return $result->result(); */ 
		
		$this->db->select('tbl_salon_emp_service.*,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_cat_name,tbl_admin_sub_category.sub_category_marathi');
        $this->db->where('tbl_salon_emp_service.is_deleted', '0');
        $this->db->where('tbl_salon_emp_service.status', '1');
        $this->db->where('tbl_salon_emp_service.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id',$this->session->userdata('salon_id'));
		$this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
		$this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
        $this->db->order_by('tbl_salon_emp_service.id', 'DESC');
        $result = $this->db->get('tbl_salon_emp_service');
        return $result->result(); 
    }
    public function get_services_for_offers_genderwise_ajx(){
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('gender', $this->input->post('gender'));
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id', 'DESC');
        $result = $this->db->get('tbl_salon_emp_service');
        echo json_encode($result->result()); 
    }
    public function get_ready_offer(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }

		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		if(!empty($servicable_genders)){
			$this->db->where_in('gender',$servicable_genders);
        }
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
		$result = $this->db->get('tbl_admin_offers');
		return $result->result();
	}
    public function get_single_ready_offer(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }
		if(!empty($servicable_genders)){
			$this->db->where_in('gender',$servicable_genders);
        }
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$this->db->where('id',$_GET['value']);
		$result = $this->db->get('tbl_admin_offers');
		return $result->row();
	}
    public function get_customer_bookings_reminders($from_date,$to_date,$payment_status,$reminder_on){
        $this->db->select('tbl_new_booking.*, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_new_booking.customer_name');
        if($payment_status != ""){
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_new_booking.service_start_date) >=', $from_date);
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_new_booking.service_start_date) <=', $to_date);
        }
        $this->db->where('tbl_new_booking.is_deleted', '0');
        $this->db->where('tbl_new_booking.booking_status !=', '2');
        if($reminder_on != ""){
            $this->db->where('tbl_new_booking.reminder', $reminder_on);
        }
        $result = $this->db->get('tbl_new_booking')->result();
        return $result;
    }
    public function get_customer_bookings($from_date,$to_date,$payment_status){
        $this->db->select('tbl_new_booking.*, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_new_booking.customer_name');
        if($payment_status != ""){
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_new_booking.service_start_date) >=', $from_date);
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_new_booking.service_start_date) <=', $to_date);
        }
        $this->db->where('tbl_new_booking.is_deleted', '0');
        $result = $this->db->get('tbl_new_booking')->result();
        return $result;
    }
    public function get_trying_bookings($booking_status,$from_date,$to_date,$length = '',$start = '',$search = ''){
        $this->db->select('tbl_trying_for_booking.*, tbl_salon_customer.full_name as customer_name, tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name as service_names, tbl_salon_emp_service.service_name_marathi as service_names_marathi,tbl_salon_employee.full_name');
        $this->db->select('GROUP_CONCAT(tbl_salon_emp_service.service_name) as service_names', false);
        $this->db->select('GROUP_CONCAT(tbl_salon_emp_service.service_name_marathi) as service_names_marathi', false);
        $this->db->join('tbl_salon_emp_service', 'FIND_IN_SET(tbl_salon_emp_service.id, tbl_trying_for_booking.services)', 'left');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_trying_for_booking.stylist_id','left');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_trying_for_booking.customer_id');
        $this->db->where('tbl_trying_for_booking.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_trying_for_booking.salon_id', $this->session->userdata('salon_id'));
        if($search != ""){
            $this->db->like('tbl_trying_for_booking.created_on');
            $this->db->or_like('tbl_trying_for_booking.booking_date');
            $this->db->or_like('tbl_trying_for_booking.slot');
            $this->db->or_like('tbl_salon_emp_service.service_name');
            $this->db->or_like('tbl_salon_employee.full_name');
            $this->db->or_like('tbl_salon_customer.full_name');
            $this->db->or_like('tbl_salon_customer.customer_phone');
        }
        if($booking_status != ""){
            $this->db->where('tbl_trying_for_booking.booking_status', $booking_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_trying_for_booking.created_on) >=', $from_date);
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_trying_for_booking.created_on) <=', $to_date);
        }
        $this->db->where('tbl_trying_for_booking.booking_status', '0');
        $this->db->where('tbl_trying_for_booking.is_deleted', '0');
        $this->db->order_by('tbl_trying_for_booking.updated_on', 'desc');
        if($length != "" && $start != ""){
            $this->db->limit($length, $start);
        }
        $this->db->group_by('tbl_trying_for_booking.id');
        $result = $this->db->get('tbl_trying_for_booking')->result();
        return $result;
    }
    public function get_bookings($status,$from_date,$to_date,$payment_status){
        $this->db->select('tbl_booking_services_details.*, tbl_salon_emp_service.service_name, tbl_salon_emp_service.service_name_marathi,tbl_salon_employee.full_name');
        $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        if($status != ""){
            $this->db->where('tbl_booking_services_details.service_status', $status);
        }
        if($payment_status != ""){
            $this->db->where('tbl_booking_services_details.payment_status', $payment_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) >=', $from_date);
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) <=', $to_date);
        }
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->group_by('tbl_booking_services_details.booking_id');
        $result = $this->db->get('tbl_booking_services_details')->result();
        return $result;
    }
    public function get_bookings_staffwise($staff,$status,$from_date,$to_date){
        $this->db->select('tbl_booking_services_details.*, tbl_salon_emp_service.service_name, tbl_salon_emp_service.service_name_marathi,tbl_salon_employee.full_name');
        $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        // if($payment_status != ""){
        //     $this->db->where('tbl_booking_services_details.payment_status', $payment_status);
        // }
        if($status != ""){
            $this->db->where('tbl_booking_services_details.service_status', $status);
        }
        if($staff != ""){
            $this->db->where('tbl_booking_services_details.stylist_id_after_bill', $staff);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) >=', $from_date);
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) <=', $to_date);
        }
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_booking_services_details')->result();
        return $result;
    }
    public function get_total_expense($from_date, $to_date){
        $this->db->select_sum('expense_amount', 'total_expense_amount');
        if ($from_date != "") {
            $this->db->where('DATE(expense_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(expense_date) <=', $to_date);
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        
        $query = $this->db->get('tbl_salon_expense');
        $result = $query->result();
        
        $total_expense_amount = 0;
        if (!empty($result)) {
            $total_expense_amount = $query->row()->total_expense_amount;
        }
        
        return array(
            'result'        => $result,
            'total_expense' => $total_expense_amount
        );
    }
    public function get_dashboard_counts_ajx(){   
        $custom = array(
            'in_process'    =>  0,
            'trying_booking'=>  count($this->get_trying_bookings('0',date('Y-m-d'),date('Y-m-d'),'','','')),
            'pending'       =>  count($this->get_bookings('0',date('Y-m-d'),date('Y-m-d'),'')),
            'completed'     =>  count($this->get_bookings('1',date('Y-m-d'),date('Y-m-d'),'')),
            'cancelled'     =>  count($this->get_bookings('2',date('Y-m-d'),date('Y-m-d'),'')),
            'today_all'     =>  count($this->get_bookings('',date('Y-m-d'),date('Y-m-d'),'')),
        );
		echo json_encode($custom);
	}
    public function get_total_product_sale($status, $from_date, $to_date, $payment_status, $is_counter='') {
        $this->db->select('tbl_booking_services_products_details.*,tbl_booking_services_details.service_status,tbl_booking_services_details.payment_status as service_payment_status,tbl_booking_services_details.service_date, tbl_product.product_name');
        $this->db->join('tbl_product', 'tbl_product.id = tbl_booking_services_products_details.product_id');
        $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_booking_services_products_details.booking_id');
        $this->db->join('tbl_booking_services_details', 'tbl_booking_services_details.id = tbl_booking_services_products_details.booking_service_details_id');
        if ($status != "") {
            $this->db->where('tbl_booking_services_details.service_status', $status);
        }
        if ($is_counter == "Yes") {
            $this->db->where('tbl_new_booking.is_counter', 'Yes');
        }elseif($is_counter == "No"){
            $this->db->group_start();
                $this->db->where('tbl_new_booking.is_counter', '');
                $this->db->or_where('tbl_new_booking.is_counter', null);
            $this->db->group_end();
        }
        if ($from_date != "") {
            $this->db->where('DATE(tbl_booking_services_details.service_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_booking_services_details.service_date) <=', $to_date);
        }
        if ($payment_status != "") {
            $this->db->where('tbl_booking_services_details.payment_status', $payment_status);
            $this->db->where('tbl_booking_services_products_details.payment_status', $payment_status);
        }
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_products_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_products_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_products_details.salon_id', $this->session->userdata('salon_id'));
        
        $query = $this->db->get('tbl_booking_services_products_details');
        $result = $query->result();
        
        $total_discounted_product_price = 0;
        if (!empty($result)) {
            foreach($result as $data){
                $total_discounted_product_price = $total_discounted_product_price + ($data->product_discounted_price_while_bill != "" ? $data->product_discounted_price_while_bill : 0);                
            }
        }
        
        $this->db->select('tbl_only_product_booking_details.*, tbl_product.product_name, tbl_new_booking.booking_date');
        $this->db->join('tbl_product', 'tbl_product.id = tbl_only_product_booking_details.product_id');
        $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
        if ($from_date != "") {
            $this->db->where('DATE(tbl_new_booking.booking_date) >=', $from_date);
        }
        if ($is_counter == "Yes") {
            $this->db->where('tbl_new_booking.is_counter', 'Yes');
        }elseif($is_counter == "No"){
            $this->db->group_start();
                $this->db->where('tbl_new_booking.is_counter', '');
                $this->db->or_where('tbl_new_booking.is_counter', null);
            $this->db->group_end();
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_new_booking.booking_date) <=', $to_date);
        }
        if ($payment_status != "") {
            $this->db->where('tbl_only_product_booking_details.payment_status', $payment_status);
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        $this->db->where('tbl_only_product_booking_details.is_deleted', '0');
        $this->db->where('tbl_new_booking.is_deleted', '0');
        $this->db->where('tbl_only_product_booking_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_only_product_booking_details.salon_id', $this->session->userdata('salon_id'));
        
        $queryOnlyProduct = $this->db->get('tbl_only_product_booking_details');
        $resultOnlyProduct = $queryOnlyProduct->result();
        
        $total_discounted_product_price_only_product = 0;
        if (!empty($resultOnlyProduct)) {
            foreach($resultOnlyProduct as $data){
                $total_discounted_product_price_only_product = $total_discounted_product_price_only_product + ($data->product_discounted_price_while_bill != "" ? $data->product_discounted_price_while_bill : 0);                
            }
        }
        
        return array(
            'result'                    => $result,
            'resultOnlyProduct'         => $resultOnlyProduct,
            'total_price'               => (float)$total_discounted_product_price + (float)$total_discounted_product_price_only_product,
            'total_service_product_price'    => (float)$total_discounted_product_price,
            'total_only_product_price'       => (float)$total_discounted_product_price_only_product
        );
    }
    public function get_total_service_sale($status, $from_date, $to_date, $payment_status, $is_counter = '') {
        $this->db->select('tbl_booking_services_details.*, tbl_salon_emp_service.service_name, tbl_salon_emp_service.service_name_marathi, tbl_salon_employee.full_name');
        $this->db->select_sum('tbl_booking_services_details.service_discounted_price_while_bill', 'total_discounted_service_price');
        $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_booking_services_details.booking_id');
        if ($is_counter == "Yes") {
            $this->db->where('tbl_new_booking.is_counter', 'Yes');
        }elseif($is_counter == "No"){
            $this->db->group_start();
                $this->db->where('tbl_new_booking.is_counter', '');
                $this->db->or_where('tbl_new_booking.is_counter', null);
            $this->db->group_end();
        }

        if ($status != "") {
            $this->db->where('tbl_booking_services_details.service_status', $status);
        }
        if ($from_date != "") {
            $this->db->where('DATE(tbl_booking_services_details.service_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_booking_services_details.service_date) <=', $to_date);
        } 
        if ($payment_status != "") {
            $this->db->where('tbl_booking_services_details.payment_status', $payment_status);
        }
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));        
        
        $query = $this->db->get('tbl_booking_services_details');
        $result = $query->result();
        $total_discounted_service_price = 0;
        if (!empty($result)) {
            $total_discounted_service_price = $query->row()->total_discounted_service_price;
        }
        
        return array(
            'result'      => $result,
            'total_price' => $total_discounted_service_price
        );
    }
    
    public function get_dashboard_sales_counts_ajx(){   
        $custom = array(
            'total_service_sale'            =>  (float)$this->get_employee_service_sale('','','','','1')['amount'],
            'total_service_product_sale'    =>  (float)$this->get_employee_service_product_sale('','','','','1')['amount'],
            'total_product_sale'            =>  (float)$this->get_employee_product_sale('','','','1')['amount'],
            'total_membership_sale'         =>  (float)$this->get_employee_membership_sale('','','','1')['amount'],
            'total_package_sale'            =>  (float)$this->get_employee_package_sale('','','','')['amount'],
            'total_giftcard_sale'           =>  (float)$this->get_employee_giftcard_sale('','','','')['amount'],
            
            'today_service_sale'            =>  (float)$this->get_employee_service_sale('',date('Y-m-d'),date('Y-m-d'),'','1')['amount'],
            'today_service_product_sale'    =>  (float)$this->get_employee_service_product_sale('',date('Y-m-d'),date('Y-m-d'),'','1')['amount'],
            'today_product_sale'            =>  (float)$this->get_employee_product_sale('',date('Y-m-d'),date('Y-m-d'),'1')['amount'],
            'today_membership_sale'         =>  (float)$this->get_employee_membership_sale('',date('Y-m-d'),date('Y-m-d'),'1')['amount'],
            'today_package_sale'            =>  (float)$this->get_employee_package_sale('',date('Y-m-d'),date('Y-m-d'),'')['amount'],
            'today_giftcard_sale'           =>  (float)$this->get_employee_giftcard_sale('',date('Y-m-d'),date('Y-m-d'),'')['amount'],

        );
		echo json_encode($custom);
	}
    public function get_total_package_sale($payment_status,$from_date,$to_date, $is_counter = ''){        
        if($payment_status != ""){
            $this->db->select('tbl_customer_package_allocations.*,tbl_new_booking.payment_status');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_customer_package_allocations.allocated_in_booking_id','left');
            $this->db->where('tbl_customer_package_allocations.is_booking_done', $payment_status);
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_customer_package_allocations.created_on) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_customer_package_allocations.created_on) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if ($is_counter == "Yes") {
            $this->db->where('tbl_customer_package_allocations.is_counter', 'Yes');
        }elseif($is_counter == "No"){
            $this->db->group_start();
                $this->db->where('tbl_customer_package_allocations.is_counter', '');
                $this->db->or_where('tbl_customer_package_allocations.is_counter', null);
            $this->db->group_end();
        }
        $this->db->where('tbl_customer_package_allocations.is_deleted', '0');
        $this->db->where('tbl_customer_package_allocations.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_customer_package_allocations.salon_id', $this->session->userdata('salon_id'));   
        $result = $this->db->get('tbl_customer_package_allocations')->result();

        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + (is_numeric($data->package_amount) ? $data->package_amount : 0);
            }
        }
        
        return array(
            'result'      => $result,
            'total_price' => $total
        );
    }
    public function get_package_redemption_result($payment_status,$from_date,$to_date){        
        $this->db->select('tbl_booking_services_details.*,tbl_new_booking.payment_status,tbl_salon_emp_service.final_price as service_final_price,tbl_package.package_name,tbl_package.amount as package_amount');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id','left');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_package','tbl_package.id = tbl_booking_services_details.package_id');
        if($payment_status != ""){
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) <= ', date("Y-m-d", strtotime($to_date)));
        }
        $this->db->where('tbl_booking_services_details.service_added_from', '1');
        $this->db->where('tbl_booking_services_details.package_id !=', '');
        $this->db->where('tbl_booking_services_details.package_id !=', null);
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));   
        $result = $this->db->get('tbl_booking_services_details')->result();
        
        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + ($data->service_final_price != "" ? (float)$data->service_final_price : 0);
            }
        }
        
        return array(
            'result'                => $result,
            'total_service_price'   => $total
        );
    }
    public function get_total_membership_sale($membership_id,$from_date,$to_date,$payment_status, $is_counter = ''){
        if ($membership_id != "") {
            $this->db->where('tbl_customer_membership_history.membership_id', $membership_id);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_customer_membership_history.payment_date) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_customer_membership_history.payment_date) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if($payment_status != ""){
            $this->db->where('tbl_customer_membership_history.payment_status', $payment_status);
        }
        if ($is_counter == "Yes") {
            $this->db->where('tbl_customer_membership_history.is_counter', 'Yes');
        }elseif($is_counter == "No"){
            $this->db->group_start();
                $this->db->where('tbl_customer_membership_history.is_counter', '');
                $this->db->or_where('tbl_customer_membership_history.is_counter', null);
            $this->db->group_end();
        }
        $this->db->where('tbl_customer_membership_history.is_deleted', '0');
        $this->db->where('tbl_customer_membership_history.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_customer_membership_history.salon_id', $this->session->userdata('salon_id')); 
        $result = $this->db->get('tbl_customer_membership_history')->result();

        $total = 0;
        if(!empty($result)){
            foreach($result as $data){
                $total = $total + (is_numeric($data->membership_price) ? $data->membership_price : 0);
            }
        }
        
        return array(
            'result'      => $result,
            'total_price' => $total
        );
    }
    
    public function get_total_payments($type,$mode,$from_date,$to_date){
        $this->db->select('tbl_booking_payment_entry.*');
        $this->db->select_sum('tbl_booking_payment_entry.paid_amount', 'total_paid_amount');
        if ($type != "") {
            $this->db->where('tbl_booking_payment_entry.type', $type);
        }
        if ($mode != "") {
            $this->db->where_in('tbl_booking_payment_entry.payment_mode', $mode);
        }
        if ($from_date != "") {
            $this->db->where('DATE(tbl_booking_payment_entry.payment_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_booking_payment_entry.payment_date) <=', $to_date);
        }
        $this->db->where('tbl_booking_payment_entry.is_deleted', '0');
        $this->db->where('tbl_booking_payment_entry.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_payment_entry.salon_id', $this->session->userdata('salon_id')); 
        
        $query = $this->db->get('tbl_booking_payment_entry');
        $result = $query->result();
        
        $total_paid_amount = 0;
        if (!empty($result)) {
            $total_paid_amount = $query->row()->total_paid_amount;
        }
        
        return array(
            'result'      => $result,
            'total_price' => $total_paid_amount
        );
    }
    
    public function get_employee_giftcard_sale($staff_id, $from_date, $to_date, $payment_status){        
        $this->db->select('tbl_booking_payment_entry.*');
        $this->db->select_sum('tbl_booking_payment_entry.giftcard_final_amount', 'total_paid_amount');
        if ($from_date != "") {
            $this->db->where('DATE(tbl_booking_payment_entry.payment_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_booking_payment_entry.payment_date) <=', $to_date);
        }
        if($staff_id != ""){
            $this->db->where('tbl_booking_payment_entry.giftcard_added_by', $staff_id);
        }
        $this->db->where('tbl_booking_payment_entry.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_payment_entry.salon_id', $this->session->userdata('salon_id')); 
        $this->db->where('tbl_booking_payment_entry.is_deleted', '0');
        $this->db->where('tbl_booking_payment_entry.type', '3');
        $this->db->where('tbl_booking_payment_entry.paid_amount !=', '0.00');
        
        $query = $this->db->get('tbl_booking_payment_entry');
        $result = $query->result();
        
        $total_paid_amount = 0;
        if (!empty($result)) {
            $total_paid_amount = $query->row()->total_paid_amount;
        }
        
        return array(
            'result'      => $result,
            'amount' => $total_paid_amount
        );
    }
    public function get_total_giftcard_sale($giftcard_id,$from_date,$to_date, $is_counter = ''){
        $this->db->select('tbl_booking_payment_entry.*');
        $this->db->select_sum('tbl_booking_payment_entry.giftcard_final_amount', 'total_paid_amount');
        if ($giftcard_id != "") {
            $this->db->where('tbl_booking_payment_entry.giftcard_id', $giftcard_id);
        }
        if ($from_date != "") {
            $this->db->where('DATE(tbl_booking_payment_entry.payment_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_booking_payment_entry.payment_date) <=', $to_date);
        }
        if ($is_counter == "Yes") {
            $this->db->where('tbl_booking_payment_entry.is_counter', 'Yes');
        }elseif($is_counter == "No"){
            $this->db->group_start();
                $this->db->where('tbl_booking_payment_entry.is_counter', '');
                $this->db->or_where('tbl_booking_payment_entry.is_counter', null);
            $this->db->group_end();
        }
        $this->db->where('tbl_booking_payment_entry.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_payment_entry.salon_id', $this->session->userdata('salon_id')); 
        $this->db->where('tbl_booking_payment_entry.is_deleted', '0');
        $this->db->where('tbl_booking_payment_entry.type', '3');
        $this->db->where('tbl_booking_payment_entry.paid_amount !=', '0.00');
        
        $query = $this->db->get('tbl_booking_payment_entry');
        $result = $query->result();
        
        $total_paid_amount = 0;
        if (!empty($result)) {
            $total_paid_amount = $query->row()->total_paid_amount;
        }
        
        return array(
            'result'      => $result,
            'total_price' => $total_paid_amount
        );
    }
    public function get_all_products($category,$sub_category){        
        $this->db->select('tbl_product.*,tbl_product_category.product_category as productcategory,tbl_product_sub_category.product_sub_category as product_sub_category_name');
        $this->db->from('tbl_product');
        $this->db->join('tbl_product_category', 'tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->join('tbl_product_sub_category', 'tbl_product.product_subcategory = tbl_product_sub_category.id', 'left');
        $this->db->where('tbl_product.is_deleted', '0');
        $this->db->where('tbl_product.status', '1');
        $this->db->where('tbl_product.current_stock >', '0');
        if($category != ""){
            $this->db->where('tbl_product.product_category', $category);
        }
        if($sub_category != ""){
            $this->db->where('tbl_product.product_subcategory', $sub_category);
        }
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(tbl_product.order AS UNSIGNED)', 'asc');
        $result = $this->db->get();
        return $result->result();
    }
    public function get_all_products_array($ids){        
        $this->db->select('tbl_product.*,tbl_product_category.product_category as productcategory,tbl_product_sub_category.product_sub_category as product_sub_category_name');
        $this->db->from('tbl_product');
        $this->db->join('tbl_product_category', 'tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->join('tbl_product_sub_category', 'tbl_product.product_subcategory = tbl_product_sub_category.id', 'left');
        $this->db->where('tbl_product.is_deleted', '0');
        $this->db->where('tbl_product.status', '1');
        $this->db->where('tbl_product.current_stock >', '0');
        if(!empty($ids)){
            $this->db->where_in('tbl_product.id', $ids);
        }
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(tbl_product.order AS UNSIGNED)', 'asc');
        $result = $this->db->get();
        return $result->result();
    }
    public function get_products($category,$high_low){
        if($category != ""){
            $this->db->where('product_category', $category);
        }
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        if($high_low == '1'){
            $this->db->where('low_stock_alert', '1');
            $this->db->where('CAST(current_stock AS UNSIGNED) <= CAST(low_stock AS UNSIGNED)', NULL, FALSE);
        }elseif($high_low == '2'){
            $this->db->where('CAST(current_stock AS UNSIGNED) >= CAST(high_stock AS UNSIGNED)', NULL, FALSE);
        }
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product');
        $result = $result->result();
        return $result;
    }
    public function get_dashboard_redemption_counts_ajx(){   
        $custom = array(
            'total_used_memberships_count'      =>  count($this->get_total_used_memberships(date('Y-m-d'),date('Y-m-d'))),
            'total_used_coupons_count'          =>  count($this->get_total_used_coupons(date('Y-m-d'),date('Y-m-d'))),
            'total_used_offers_count'           =>  count($this->get_total_used_offers(date('Y-m-d'),date('Y-m-d'))),
            'total_used_package_count'          =>  count($this->get_total_used_package(date('Y-m-d'),date('Y-m-d'))),
            'total_used_giftcards_count'        =>  count($this->get_total_used_giftcards(date('Y-m-d'),date('Y-m-d'))),            
        );
		echo json_encode($custom);
	}
    public function get_dashboard_product_counts_ajx(){   
        $custom = array(
            'low_stock_product_count'      =>  count($this->get_products('','1')),
            'high_stock_product_count'     =>  count($this->get_products('','2')),       
        );
		echo json_encode($custom);
	}
    public function get_total_used_giftcards($from_date = '', $to_date = ''){
        $this->db->select('tbl_service_payment.*, tbl_gift_card.gift_name');
        $this->db->join('tbl_gift_card', 'tbl_gift_card.id = tbl_service_payment.applied_giftcard_id');
        $this->db->where('tbl_service_payment.is_deleted', '0');
        // $this->db->where('tbl_service_payment.booking_type','0');
		$this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_service_payment.is_giftcard_applied', '1');
        $this->db->where('tbl_service_payment.applied_giftcard_id !=', '');
        $this->db->where('tbl_service_payment.applied_giftcard_id !=', '0');
        $this->db->where('tbl_service_payment.applied_giftcard_id !=', null);
        if ($from_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) <=', $to_date);
        }
        // $this->db->group_by('tbl_service_payment.applied_giftcard_id');        
        $query = $this->db->get('tbl_service_payment');
        $result = $query->result();
        return $result;
    }
    public function get_total_used_memberships($from_date = '', $to_date = ''){
        $this->db->select('tbl_service_payment.*, tbl_memebership.membership_name');
        $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_service_payment.membership_id');
        $this->db->where('tbl_service_payment.is_deleted', '0');
		$this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
        // $this->db->where('tbl_service_payment.booking_type','0');
        $this->db->where('tbl_service_payment.is_membership_booking', '1');
        $this->db->where('tbl_service_payment.membership_id !=', '');
        $this->db->where('tbl_service_payment.membership_id !=', '0');
        $this->db->where('tbl_service_payment.membership_id !=', null);
        if ($from_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) <=', $to_date);
        }
        // $this->db->group_by('tbl_service_payment.membership_id');   
        $query = $this->db->get('tbl_service_payment');
        $result = $query->result();
        return $result;
    }
    public function get_total_used_coupons($from_date = '', $to_date = ''){
        $this->db->select('tbl_service_payment.*, tbl_coupon_code.coupon_name');
        $this->db->join('tbl_coupon_code', 'tbl_coupon_code.id = tbl_service_payment.selected_coupon_id');
		$this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_service_payment.is_deleted', '0');
        // $this->db->where('tbl_service_payment.booking_type','0');
        $this->db->where('tbl_service_payment.selected_coupon_id !=', '');
        $this->db->where('tbl_service_payment.selected_coupon_id !=', '0');
        $this->db->where('tbl_service_payment.selected_coupon_id !=', null);
        if ($from_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) <=', $to_date);
        }
        // $this->db->group_by('tbl_service_payment.selected_coupon_id');        
        $query = $this->db->get('tbl_service_payment');
        $result = $query->result();
        return $result;
    }
    public function get_total_used_package($from_date = '', $to_date = ''){
        $this->db->select('tbl_service_payment.*, tbl_package.package_name');
        $this->db->join('tbl_package', 'tbl_package.id = tbl_service_payment.pacakge_id');
		$this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_service_payment.is_package_included', '1');
        // $this->db->where('tbl_service_payment.used_package_type', '1');
        $this->db->where('tbl_service_payment.is_deleted', '0');
        // $this->db->where('tbl_service_payment.booking_type','0');
        $this->db->where('tbl_service_payment.pacakge_id !=', '');
        $this->db->where('tbl_service_payment.pacakge_id !=', '0');
        $this->db->where('tbl_service_payment.pacakge_id !=', null);
        if ($from_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) <=', $to_date);
        }
        // $this->db->group_by('tbl_service_payment.pacakge_id');        
        $query = $this->db->get('tbl_service_payment');
        $result = $query->result();
        return $result;
    }
    public function get_total_used_offers($from_date = '', $to_date = ''){        
        $this->db->select('tbl_service_payment.*, tbl_offers.offers_name');
        $this->db->join('tbl_offers', 'tbl_offers.id = tbl_service_payment.applied_offer_id');
		$this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_service_payment.is_offer_applied', '1');
        $this->db->where('tbl_service_payment.is_deleted', '0');
        $this->db->where('tbl_offers.is_deleted', '0');
        $this->db->where('tbl_service_payment.applied_offer_id !=', '');
        $this->db->where('tbl_service_payment.applied_offer_id !=', '0');
        $this->db->where('tbl_service_payment.applied_offer_id !=', null);
        if ($from_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_service_payment.payment_date) <=', $to_date);
        }
        $query = $this->db->get('tbl_service_payment');
        $result = $query->result();
        return $result;
    }
    public function get_service_price_details_ajax(){   
		$service_name_id = $this->input->post('service_name_id');
		$this->db->where_in('id', $service_name_id);
		$this->db->where('status', '1');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_emp_service')->result();
		if (!empty($result)) {
			echo json_encode($result);
		}
	}
    public function get_product_details_div_ajx(){   
		$product_ids = explode(',',$this->input->post('product_ids'));

		$this->db->where_in('id', $product_ids);
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
		$result = $this->db->get('tbl_product')->result();

        if(!empty($result)){
        ?>
            <table>
                <thead>
                    <tr>
                        <th>Select</th>
                        <th>Product</th>
                        <th>Price</th>
                    </tr>
                <thead>
                <tbody>
                    <?php 
                        foreach($result as $data){ 
                    ?>
                    <tr>
                        <th><input type="checkbox"></th>
                        <th><?=$data->product_name;?></th>
                        <th><?=$data->selling_price;?></th>
                    </tr>
                    <?php 
                        } 
                    ?>
                </tbody>
            </table>
        <?php 
        }
	}
	public function get_service_info_details_ajax(){   
		$service_name_id = $this->input->post('service_name_id');
		$this->db->where_in('id', $service_name_id);
		$this->db->where('status', '1');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_emp_service')->row();
		if (!empty($result)) {
			echo json_encode($result);
		}
	}
	public function get_service_details_array($ids){
		$this->db->where_in('id',$ids);
		$this->db->where('is_deleted', '0');
		$this->db->order_by('id', 'DESC');
		$result = $this->db->get('tbl_salon_emp_service');
		return $result->result();
		
	}
	public function get_single_service_details($id){
		$this->db->where('id',$id);
		$this->db->where('is_deleted', '0');
		$this->db->order_by('id', 'DESC');
		$result = $this->db->get('tbl_salon_emp_service');
		return $result->row();		
	}
	public function get_selected_service_name_for_offer($service_name){
		$exp = explode(',',$service_name);
		$this->db->where_in('id',$exp);
		$this->db->where('is_deleted', '0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('id', 'DESC');
		$result = $this->db->get('tbl_salon_emp_service');
		return $result->result();
		
	}
	// public function get_selected_product_name_for_offer($product_name){
	// 	$exp = explode(',',$product_name);
	// 	$this->db->where_in('id',$exp);
	// 	$this->db->where('is_deleted', '0');
	// 	$this->db->where('branch_id', $this->session->userdata('branch_id'));
	// 	$this->db->where('salon_id', $this->session->userdata('salon_id'));
    //     $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
	// 	$result = $this->db->get('tbl_product');
	// 	return $result->result(); 
	// }
    public function get_selected_product_name_for_offer($product_name){
        if (empty($product_name)) {
            return []; 
        }
        $exp = explode(',', $product_name);
        $this->db->where_in('id', $exp);
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product');
        return $result->result();
    }
	public function get_ready_gift_card(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }
		if(!empty($servicable_genders)){
			$this->db->where_in('gender',$servicable_genders);
        }
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$result = $this->db->get('tbl_admin_gift_card');
		return $result->result();
	}
	public function get_single_ready_gift_card(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }
		if(!empty($servicable_genders)){
			$this->db->where_in('gender',$servicable_genders);
        }
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$this->db->where('id',$_GET['value']);
		$result = $this->db->get('tbl_admin_gift_card');
		return $result->row();
	}
	public function set_gift_card(){
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'giftcard_id' 		=> $this->input->post('giftcard_id'),
            'gift_name' 		=> $this->input->post('gift_name'),
            'service_name' 		=> $this->input->post('service_name') != "" && is_array($this->input->post('service_name')) && !empty($this->input->post('service_name')) ? implode(',',$this->input->post('service_name')) : '',
            'gender' 			=> $this->input->post('gender'),
            'regular_price' 	=> $this->input->post('regular_price'),
            'discount' 			=> $this->input->post('discount'),
            'discount_in' 		=> $this->input->post('discount_in'),
            'gift_price' 		=> $this->input->post('regular_price'),
            // 'gift_price' 		=> $this->input->post('gift_price'),
            'bg_color_input' 	=> $this->input->post('bg_color_input'),
            'bg_color' 			=> $this->input->post('bg_color'),
            'text_color_input' 	=> $this->input->post('text_color_input'),
            'text_color' 		=> $this->input->post('text_color'),
            'gift_card_code' 	=> $this->input->post('gift_card_code'),
            'min_booking_amt' 	=> $this->input->post('min_booking_amt'),
        ); 

        $this->set_onboarding_status('13');

        if($this->input->post('id') == ""){
            $date = array(
                'created_on'  => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_gift_card', $new_arr);
            return 0;
        }else{
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_gift_card', $data);
            return 1;
        }
    } 
    public function get_all_gift_list(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_gift_card');
        return $result->result();
    }
    public function get_single_gift_card(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('id',$_GET['edit']);
        $result = $this->db->get('tbl_gift_card');
        return $result->row();
    } 
    public function get_uinique_gift_code_ajax(){
        $gift_card_code = $this->input->post('gift_card_code');
        $this->db->where('is_deleted', '0');
        $this->db->where('gift_card_code', $gift_card_code);
        $result = $this->db->get('tbl_gift_card')->row(); 
        if(!empty($result)){
            echo json_encode($result);
        } else {
            echo 0;
        }
    } 
	public function get_ready_packages(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }
		if(!empty($servicable_genders)){
			$this->db->where_in('gender',$servicable_genders);
        }
		$this->db->where('is_deleted', '0'); 
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
		$this->db->where('status','1');
		$result = $this->db->get('tbl_admin_package');
		return $result->result();
	}
	public function get_single_ready_package(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }
		if(!empty($servicable_genders)){
			$this->db->where_in('gender',$servicable_genders);
        }
		$this->db->where('is_deleted', '0'); 
		$this->db->where('status','1');
		$this->db->where('id',$_GET['value']);
		$result = $this->db->get('tbl_admin_package');
		return $result->row();
	}
	public function get_active_salon_package_customers($id){
        $this->db->select('tbl_customer_package_allocations.*,tbl_package.package_image, tbl_package.description as package_desc, tbl_package.service_name as package_service_name,tbl_package.product_name as package_product_name,tbl_package.package_name,tbl_package.package_name_marathi,tbl_package.discount_in,tbl_package.actual_price,tbl_package.discount');
        $this->db->join('tbl_package','tbl_package.id = tbl_customer_package_allocations.package_id');
        $this->db->where('tbl_customer_package_allocations.is_lapsed', '0');
        $this->db->where('tbl_customer_package_allocations.is_deleted', '0');
        $this->db->where('tbl_customer_package_allocations.package_id', $id);
		$this->db->where('tbl_customer_package_allocations.branch_id',$this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_package_allocations.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('DATE(tbl_customer_package_allocations.package_start_date) <=', date('Y-m-d'));
        $this->db->where('DATE(tbl_customer_package_allocations.package_end_date) >=', date('Y-m-d'));
        $this->db->order_by('tbl_customer_package_allocations.id', 'DESC');                
        $result = $this->db->get('tbl_customer_package_allocations');
        $packages = $result->result();
		return $packages;
	} 
	public function get_active_salon_memberships_customers($id){
        $this->db->select('tbl_customer_membership_history.*, tbl_memebership.membership_name');
        $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_customer_membership_history.membership_id');
        $this->db->where('tbl_customer_membership_history.membership_id',$id);
        $this->db->where('DATE(tbl_customer_membership_history.membership_start) <=', date('Y-m-d'));
        $this->db->where('DATE(tbl_customer_membership_history.membership_end) >=', date('Y-m-d'));
		$this->db->where('tbl_customer_membership_history.branch_id',$this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_membership_history.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_customer_membership_history.is_deleted','0');
        $this->db->where('tbl_customer_membership_history.membership_status','0');
        $membership_details = $this->db->get('tbl_customer_membership_history')->result();
		return $membership_details;
	} 
	public function get_all_package(){
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$this->session->userdata('branch_id'));
		$this->db->where('salon_id',$this->session->userdata('salon_id'));
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
		$this->db->order_by('id','DESC');
		$result = $this->db->get('tbl_package');
		return $result->result();
	} 
	public function get_salon_packages_ajx(){
        if($this->input->post('gender') != ""){
            $this->db->where('gender',$this->input->post('gender'));
        }
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$this->session->userdata('branch_id'));
		$this->db->where('salon_id',$this->session->userdata('salon_id'));
		$this->db->order_by('id','DESC');
		$result = $this->db->get('tbl_package');
		echo json_encode($result->result());
	} 
	public function get_salon_giftcards_ajx(){
        if($this->input->post('gender') != ""){
            $this->db->where('gender',$this->input->post('gender'));
        }
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$this->session->userdata('branch_id'));
		$this->db->where('salon_id',$this->session->userdata('salon_id'));
		$this->db->order_by('id','DESC');
		$result = $this->db->get('tbl_gift_card');
		echo json_encode($result->result());
	} 
	public function get_salon_memberships_ajx(){
        if($this->input->post('gender') != ""){
            $this->db->where('gender',$this->input->post('gender'));
        }
		$this->db->where('is_deleted','0');
		$this->db->where('branch_id',$this->session->userdata('branch_id'));
		$this->db->where('salon_id',$this->session->userdata('salon_id'));
		$this->db->order_by('id','DESC');
		$result = $this->db->get('tbl_memebership');
		echo json_encode($result->result());
	} 
	public function get_single_package(){
		$this->db->select('tbl_package.*');
		$this->db->from('tbl_package');
		$this->db->where('tbl_package.is_deleted', '0');
		$this->db->where('tbl_package.id',$_GET['edit']);
		$result = $this->db->get();
		return $result->row();
	}
    public function get_product_for_package_ajax_new(){
		$service_name_id = $this->input->post('service_name_id'); 
		$this->db->where_in('tbl_salon_emp_service.id', $service_name_id);
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_emp_service')->result(); 

        $allowed_products = [];
        $allowed_products_array = array();

		if(!empty($result)){
            foreach($result as $data){
                $single_products = explode(',',$data->product);
                $this->db->where_in('id', $single_products);
                $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
                $products = $this->db->get('tbl_product')->result(); 
                if(!empty($products)){
                    foreach($products as $products_result){
                        // if(!in_array($products_result->id,$allowed_products)){
                            $allowed_products[] = $products_result->id;
                            $allowed_products_array[] = array(
                                'id'                =>  $products_result->id,
                                'service_name'      =>  $data->service_name,
                                'product_name'      =>  $products_result->product_name,
                            );
                        // }
                    }
                }
            }
			echo json_encode(array(
                'result'                    =>  $result,
                'allowed_products_array'    =>  $allowed_products_array,
                'allowed_products'          =>  $allowed_products,
            ));
		}else{
			echo '[]';
		}
	}
    
    public function get_service_product_for_package_ajax(){
		$service_name_id = $this->input->post('service_name_id'); 
		$this->db->where_in('tbl_salon_emp_service.id', $service_name_id);
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_emp_service')->result(); 

		if(!empty($result)){
            foreach($result as &$data){
                $single_products = explode(',',$data->product);
                $this->db->where_in('id', $single_products);
                $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
                $products = $this->db->get('tbl_product')->result(); 

                // $data->products = $products;
                $data->products = [];
            }
        }

        echo json_encode($result);
	}
    public function get_product_for_package_ajax(){
		$service_name_id = $this->input->post('service_name_id'); 
		$this->db->where_in('tbl_salon_emp_service.id', $service_name_id);
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
		$this->db->group_by('product');
		$result = $this->db->get('tbl_salon_emp_service')->result(); 
		if(!empty($result)){
			echo json_encode($result);
		}else{
			echo '[]';
		}
	}
	public function get_product_for_package_by_service($service_name_id){
		$service_name_id = explode(",",$service_name_id); 
		$this->db->where_in('tbl_salon_emp_service.id', $service_name_id);
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
		$this->db->group_by('product');
		$result = $this->db->get('tbl_salon_emp_service');
		return $result->result(); 
		 
	}
	public function get_product_for_package_by_service_during_update_new($service_name_id){
		$service_name_id = explode(",",$service_name_id); 

		$this->db->where_in('tbl_salon_emp_service.id', $service_name_id);
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_salon_emp_service');
		$result = $result->result(); 

		if(!empty($result)){
			foreach($result as &$result_res){
                $this->db->where_in('id',explode(',',$result_res->product)); 
                $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
                $product = $this->db->get('tbl_product')->result();
                $result_res->products = $product;
			}
		}

        return $result;
	}
	public function get_product_for_package_by_service_during_update($service_name_id){
		$service_name_id = explode(",",$service_name_id); 
		$this->db->where_in('tbl_salon_emp_service.id', $service_name_id);
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
		$this->db->group_by('product');
		$result = $this->db->get('tbl_salon_emp_service');
		$result = $result->result(); 
		$product_ids = array();
		if(!empty($result)){
			foreach($result as $result_res){
				$products_id = explode(",",$result_res->product);
				for($i=0;$i<count($products_id);$i++){
					$product_ids[] = $products_id[$i];
				}
			}
		}
		if(!empty($product_ids)){
			$this->db->where_in('id',$product_ids); 
			$this->db->where('branch_id', $this->session->userdata('branch_id'));
			$this->db->where('salon_id', $this->session->userdata('salon_id'));
            $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
			$product = $this->db->get('tbl_product');
			return $product->result();
		}
	}
	public function set_package($package_image){
        $services = $this->input->post('service_name');
		$data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'package_id' 		=> $this->input->post('package_id'),
            'package_name' 		=> $this->input->post('package_name'),
            'service_name' 		=> ($this->input->post('service_name') != "") ? implode(',', $this->input->post('service_name')) : null,
            'actual_price' 		=> $this->input->post('actual_price'),
            'discount' 			=> $this->input->post('discount'),
            'amount' 			=> $this->input->post('amount'),
            'count_value' 		=> $this->input->post('count_value'),
            'count_type' 		=> $this->input->post('count_type'),
            'reward_point' 		=> $this->input->post('reward_point'),
            'bg_color_input' 	=> $this->input->post('bg_color_input'),
            'bg_color' 			=> $this->input->post('bg_color'),
            'text_color_input' 	=> $this->input->post('text_color_input'),
            'text_color' 		=> $this->input->post('text_color'),
            'discount_in' 		=> $this->input->post('discount_in'),
            'gender' 			=> $this->input->post('gender'),
            'package_image'     => $package_image,
            'package_name_marathi' 			=> $this->input->post('package_name_marathi'),
            'description' 	    => $this->input->post('description'),
        ); 
        // echo '<pre>'; print_r($data); exit();

        $this->set_onboarding_status('10');

		if($this->input->post('id') == ""){
            $date = array(
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_package', $new_arr);
            $package_id = $this->db->insert_id();

            // $all_products = [];
            // if($services != ""){
            //     for($i=0;$i<count($services);$i++){
            //         $service_details = $this->get_service_details($services[$i]);
            //         if(!empty($service_details) && $service_details->product != "" && $service_details->product != null){
            //             $package_product_data = array(
            //                 'branch_id' 		=> $this->session->userdata('branch_id'),
            //                 'salon_id' 			=> $this->session->userdata('salon_id'),
            //                 'tbl_package_id' 	=> $package_id,
            //                 'service_id' 	    => $services[$i],
            //                 'product_ids' 	    => $service_details->product,
            //                 'created_on'        => date("Y-m-d H:i:s")
            //             );
            //             $this->db->insert('tbl_package_products', $package_product_data);

            //             for($j=0;$j<count(explode(',',$service_details->product));$j++){
            //                 $all_products[] = explode(',',$service_details->product)[$j];
            //             }
            //         }
            //     }
            // }

            $products_data = array(
                'product_name' 		=> (!empty($all_products) && count($all_products) > 0 && is_array($all_products)) ? implode(',', $all_products) : null,
            );
            $this->db->where('id', $package_id);
            $this->db->update('tbl_package', $products_data);

            return 0;
        }else{
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_package', $data);
            $package_id = $this->input->post('id');

            $this->db->where('tbl_package_id',$package_id);
            $this->db->delete('tbl_package_products');

            $all_products = [];
            if($services != ""){
                for($i=0;$i<count($services);$i++){
                    $service_details = $this->get_service_details($services[$i]);
                    if(!empty($service_details) && $service_details->product != "" && $service_details->product != null){
                        $package_product_data = array(
                            'branch_id' 		=> $this->session->userdata('branch_id'),
                            'salon_id' 			=> $this->session->userdata('salon_id'),
                            'tbl_package_id' 	=> $package_id,
                            'service_id' 	    => $services[$i],
                            'product_ids' 	    => $service_details->product,
                            'created_on'        => date("Y-m-d H:i:s")
                        );
                        $this->db->insert('tbl_package_products', $package_product_data);

                        for($j=0;$j<count(explode(',',$service_details->product));$j++){
                            $all_products[] = explode(',',$service_details->product)[$j];
                        }
                    }
                }
            }

            $products_data = array(
                'product_name' 		=> (!empty($all_products) && count($all_products) > 0 && is_array($all_products)) ? implode(',', $all_products) : null,
            );
            $this->db->where('id', $package_id);
            $this->db->update('tbl_package', $products_data);

            return 1;
        }
    }
	public function get_product_category_list(){
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');
		$result = $this->db->get('tbl_product_category');
		return $result->result();
	}
	public function get_product_single_category(){
		$this->db->where('id',$this->uri->segment(2));
		$result = $this->db->get('tbl_product_category');
		return $result->row();
	}
	public function get_product_single_sub_category($id){
		$this->db->where('id',$id);
		$result = $this->db->get('tbl_product_sub_category');
		return $result->row();
	}
	public function get_all_sub_category($id){
		$this->db->where('status','1');
		$this->db->where('is_deleted','0');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');
		$this->db->where('product_category',$id);
		$result = $this->db->get('tbl_product_sub_category');
		return $result->result();
	}
	public function get_product_list_by_category(){
		$this->db->where('product_category',$this->uri->segment(2));
		$this->db->where('sub_category',$this->uri->segment(3));
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$result = $this->db->get('tbl_admin_product');
		return $result->result();
	}
	public function get_single_product_setup_details(){
		$this->db->where('id',$_GET['id']);
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$result = $this->db->get('tbl_admin_product');
		return $result->row();
	}
	public function get_single_product_id($id){        
        $this->db->select('tbl_product.*,tbl_branch.branch_name, tbl_salon.salon_name, tbl_product_category.product_category as productcategory,tbl_product_unit.product_unit as productunit');
        $this->db->join('tbl_product_category','tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->join('tbl_product_unit','tbl_product.product_unit = tbl_product_unit.id', 'left');
        $this->db->join('tbl_branch','tbl_product.branch_id = tbl_branch.id', 'left');
        $this->db->join('tbl_salon','tbl_product.salon_id = tbl_salon.id', 'left');
        $this->db->where('tbl_product.status','0'); 
		$this->db->where('tbl_product.id',$id);
        $result = $this->db->get('tbl_product');
        return $result->row();
	}
	public function get_single_product_details(){
		$this->db->where('id',$_GET['edit']);
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
		$result = $this->db->get('tbl_product');
		return $result->row();
	}
	public function get_my_added_product(){ 
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
		$result = $this->db->get('tbl_product');
		return $result->result();
	}
	public function set_product($product_photo){
        if($product_photo == ''){
            $product_photo = $this->input->post('old_product_photo');
        }
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'product_id' 		=> $this->input->post('product_id'),
            'product_category' 	=> $this->input->post('product_category') != "" ? $this->input->post('product_category') : $this->input->post('selected_product_category'),
            'product_subcategory' 	=> $this->input->post('product_sub_category') != "" ? $this->input->post('product_sub_category') : $this->input->post('selected_product_sub_category'),
            'product_name' 		=> $this->input->post('product_name'),
            'low_stock' 		=> $this->input->post('low_stock'),
            'high_stock' 		=> $this->input->post('high_stock'),
            'hsn_code' 			=> $this->input->post('hsn_code'),
            'date_require' 		=> $this->input->post('date_require'),
            'expiry_date' 		=> $this->input->post('expiry_date') != "" ? date('Y-m-d', strtotime($this->input->post('expiry_date'))) : '',
            'mfg_date' 			=> $this->input->post('mfg_date') != "" ? date('Y-m-d', strtotime($this->input->post('mfg_date'))) : '',
            'discount' 			=> $this->input->post('discount'),
            'discount_in'		=> $this->input->post('discount_in'),
            'incentive' 		=> $this->input->post('incentive'),
            'description' 		=> $this->input->post('description'),
            'product_unit' 		=> $this->input->post('product_unit'),
            'selling_price' 	=> $this->input->post('selling_price'),
            'low_stock_alert' 	=> $this->input->post('low_stock_alert'),
            'online_store' 		=> $this->input->post('online_store'),
            'product_photo' 	=> $product_photo,
        ); 

        $this->set_onboarding_status('7');

        if($this->input->post('id') == ""){
            if($this->input->post('is_pending_product') == '1'){
			    $status = '0';
            }else{
			    $status = '1';
            }

            $this->db->where('is_deleted', '0'); 
            $this->db->where('product_category', $this->input->post('product_category') != "" ? $this->input->post('product_category') : $this->input->post('selected_product_category'));
            $this->db->where('branch_id', $this->session->userdata('branch_id'));
            $this->db->where('salon_id', $this->session->userdata('salon_id'));
            $current_order = $this->db->get('tbl_product')->num_rows();
            $date=array( 
                'order'         => (int)$current_order + 1,
                'created_on'    => date("Y-m-d H:i:s"),
				'status'		=> $status,
            ); 
            $new_arr = array_merge($data,$date);
            $this->db->insert('tbl_product', $new_arr);
            return '0@@@'.( $this->input->post('product_category') != "" ? $this->input->post('product_category') : $this->input->post('selected_product_category'));
        } else {
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_product', $data);
            return '1@@@'.( $this->input->post('product_category') != "" ? $this->input->post('product_category') : $this->input->post('selected_product_category'));
        }
    } 
    public function get_all_active_product(){
        $this->db->select('tbl_product.*, tbl_product_category.product_category');
        $this->db->from('tbl_product');
        $this->db->join('tbl_product_category', 'tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->where('tbl_product.is_deleted', '0');
        $this->db->where('tbl_product.status', '1');
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_product.id', 'DESC'); 
        $result = $this->db->get();
        return $result->result();
    } 
    public function get_all_active_product_new($customer){
        $this->db->select('tbl_product.*, tbl_product_category.product_category');
        $this->db->from('tbl_product');
        $this->db->join('tbl_product_category', 'tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->where('tbl_product.is_deleted', '0');
        $this->db->where('tbl_product.status', '1');
        $this->db->where('tbl_product.current_stock >', '0');
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_product.id', 'DESC'); 
        $result = $this->db->get();
        $result = $result->result();
        if(!empty($result)){
            foreach($result as &$products_result){   
                $product_discount_in = '';
                $product_discount_type = '';
                $product_discount_amount_value = '';
                $product_discount_row_id = '';
                $is_product_discount_applied = '0';
        
                $product_discount_text = '';
                $product_discount_amount = 0;
                $product_slab_increment = '5';
                $product_slab_consider = '';
                $product_min_slab = '';
                $product_max_slab = '';
        
                $product_applied_discount = $this->get_customer_product_applied_discount($customer,$products_result->id);
                if($product_applied_discount['is_discount_applied'] == '1'){
                    $is_product_discount_applied = '1';
                    $product_discount_row_id = $product_applied_discount['discount_row_id'];
                    $product_discount_type = $product_applied_discount['discount_type'];
                    $product_discount_in = $product_applied_discount['discount_in'];
                    $product_discount_amount_value = (float)$product_applied_discount['discount_amount'];
                    $product_min_slab = $product_applied_discount['min_flexible'];
                    $product_max_slab = $product_applied_discount['max_flexible'];
                    if($product_discount_type == '1'){    //Flexible
                        $customer_last_service_product_booking = $this->get_customer_last_service_product_booking($customer,$products_result->id);
                        if(!empty($customer_last_service_product_booking)){      
                            $prev_Applied_product_slab = $customer_last_service_product_booking->product_applied_flexible_slab;
        
                            if($prev_Applied_product_slab != ""){
                                $next_product_slab = $prev_Applied_product_slab + $product_slab_increment;
                            }else{
                                $next_product_slab = $product_min_slab + $product_slab_increment;
                            }
        
                            if($next_product_slab > $product_max_slab){
                                $product_slab_consider = $product_min_slab;
                            }else{
                                $product_slab_consider = $next_product_slab;
                            }
                        }else{
                            $product_slab_consider = $product_min_slab;
                        }
        
                        if($product_discount_in == '0'){  //percentage
                            $product_discount_amount = ((float)$product_slab_consider * (float)$products_result->selling_price) / 100;
                            $product_discount_text = '<p style="color:#01a900;font-size:10px;">' . $product_slab_consider . '% Off</p>';
                        }elseif($product_discount_in == '1'){ //flat
                            $product_discount_amount = (float)$product_slab_consider;
                            $product_discount_text = '<p style="color:#01a900;font-size:10px;">Flat Rs. ' . $product_slab_consider . ' Off</p>';
                        }
                    }elseif($product_discount_type == '0'){   //Fixed
                        if($product_discount_in == '0'){  //percentage
                            $product_discount_amount = ((float)$product_discount_amount_value * (float)$products_result->selling_price) / 100;
                            $product_discount_text = '<p style="color:#01a900;font-size:10px;">' . $product_discount_amount_value . '% Off</p>';
                        }elseif($product_discount_in == '1'){ //flat
                            $product_discount_amount = (float)$product_discount_amount_value;
                            $product_discount_text = '<p style="color:#01a900;font-size:10px;">Flat Rs. ' . $product_discount_amount_value . ' Off</p>';
                        }
                    }
                }
        
                $service_product_price_consider = $products_result->selling_price - $product_discount_amount;
                $original_product_price = $products_result->selling_price;

                $products_result->original_product_price = $original_product_price;
                $products_result->service_product_price_consider = $service_product_price_consider;
                $products_result->product_discount_text = $product_discount_text;
                $products_result->product_discount_amount = $product_discount_amount;
                $products_result->product_discount_in = $product_discount_in;
                $products_result->product_discount_type = $product_discount_type;
                $products_result->product_discount_amount_value = $product_discount_amount_value;
                
                $products_result->product_slab_consider = $product_slab_consider;
                $products_result->product_min_slab = $product_min_slab;
                $products_result->product_max_slab = $product_max_slab;
                $products_result->product_slab_increment = $product_slab_increment;
                $products_result->product_discount_row_id = $product_discount_row_id;
                $products_result->is_product_discount_applied = $is_product_discount_applied;
            }
        }    
        
        return $result;
    } 
    public function get_all_product_master(){
        $this->db->select('tbl_product.*, tbl_product_category.product_category as product_category_name, tbl_product_sub_category.product_sub_category as product_sub_category_name');
        $this->db->from('tbl_product');
        $this->db->join('tbl_product_category', 'tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->join('tbl_product_sub_category', 'tbl_product.product_subcategory = tbl_product_sub_category.id', 'left');
        $this->db->where('tbl_product.is_deleted', '0');
        $this->db->where('tbl_product.status', '1');
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_product.id', 'DESC'); 
        $result = $this->db->get();
        return $result->result();
    } 
    public function get_all_product_by_category($category_id){
        $this->db->select('tbl_product.*,tbl_product_category.product_category as productcategory,tbl_product_unit.product_unit as productunit');
        $this->db->from('tbl_product');
        $this->db->join('tbl_product_category', 'tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->join('tbl_product_unit', 'tbl_product.product_unit = tbl_product_unit.id', 'left');
        $this->db->where('tbl_product.is_deleted', '0');
        $this->db->where('tbl_product.status', '1');
        $this->db->where('tbl_product.product_category', $category_id);
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(tbl_product.order AS UNSIGNED)', 'asc');
        $result = $this->db->get();
        return $result->result();
    }
    public function get_all_pending_products(){
        $this->db->select('tbl_product.*,tbl_product_category.product_category as productcategory,tbl_product_unit.product_unit as productunit');
        $this->db->join('tbl_product_category','tbl_product.product_category = tbl_product_category.id', 'left');
        $this->db->join('tbl_product_unit','tbl_product.product_unit = tbl_product_unit.id', 'left');
        // $this->db->where('tbl_product.is_deleted','0');
        $this->db->where('tbl_product.status','0'); 
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(tbl_product.order AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product');
        return $result->result();
    } 
    public function get_single_product_master(){
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('id', $this->uri->segment(2));
        $result = $this->db->get('tbl_product');
        return $result->row();
    }  
    // public function get_unique_hsn_code(){
    //     $this->db->where('hsn_code', $this->input->post('hsn_code'));
    //     if($this->input->post('id') != "0"){
    //         $this->db->where('id !=', $this->input->post('id'));
    //     }
    //     $this->db->where('is_deleted', '0');
    //     $this->db->where('branch_id', $this->session->userdata('branch_id'));
    //     $this->db->where('salon_id', $this->session->userdata('salon_id'));
    //     $result = $this->db->get('tbl_product');
    //     echo $result->num_rows();
    // }
    

    public function get_unique_hsn_code(){
        $this->db->where('hsn_code', $this->input->post('hsn_code'));
        if($this->input->post('id') != "0"){
            $this->db->where('id !=', $this->input->post('id'));
        }
        $this->db->where('is_deleted', '0');
        // $this->db->where('branch_id', $this->session->userdata('branch_id'));
        // $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_admin_product');
        echo $result->num_rows();
    }
    public function get_unique_barcode_id(){
        $this->db->where('barcode_id', $this->input->post('barcode_id'));
        $this->db->where('is_deleted', '0');
        $result = $this->db->get('tbl_product_stock');
        echo $result->num_rows();
    }

    public function get_all_product_barcode(){
		$this->db->select('tbl_product_barcode.*, tbl_product.product_name');
		$this->db->from('tbl_product_barcode');
		$this->db->join('tbl_product', 'tbl_product_barcode.product_name = tbl_product.id', 'left');
		$this->db->where('tbl_product_barcode.is_deleted', '0');
		$this->db->where('tbl_product_barcode.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_product_barcode.salon_id', $this->session->userdata('salon_id'));

        if(isset($_GET['status']) && $_GET['status'] != ""){
            $this->db->where('tbl_product_barcode.product_status', $_GET['status']);
        }
        if(isset($_GET['product']) && $_GET['product'] != ""){
            $this->db->where('tbl_product_barcode.product_name', $_GET['product']);
        }

		$this->db->order_by('tbl_product_barcode.id', 'DESC'); 
		$result = $this->db->get();
		return $result->result();
	}
    
    public function get_rotational_shifts_ajx_list($length, $start, $search) {
        $this->db->where('shift_type', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));

        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('shift_name', $search);
            $this->db->group_end();
        }
        
        $this->db->limit($length, $start);
        $this->db->order_by('order', 'asc');
        
        $result = $this->db->get();
        return $result->result();
    }    
    
    public function get_rotational_shifts_ajx_count($search){
        $this->db->where('shift_type', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));

        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('shift_name', $search);
            $this->db->group_end();
        }

        $this->db->order_by('order', 'asc');
		$result = $this->db->get();
		return $result->num_rows();
	}
    public function get_product_barcodes_ajx_list($length, $start, $search) {
        $this->db->select('tbl_product_barcode.*, tbl_product.product_subcategory, tbl_product_category.product_category as product_category_name, tbl_product.product_name, tbl_product_stock.created_on as inward_date');
        $this->db->from('tbl_product_barcode');
        $this->db->join('tbl_product', 'tbl_product_barcode.product_name = tbl_product.id', 'left');
        $this->db->join('tbl_product_stock', 'tbl_product_barcode.stock_entry_id = tbl_product_stock.id', 'left');
        $this->db->join('tbl_product_category', 'tbl_product_barcode.product_category = tbl_product_category.id', 'left');
        $this->db->where('tbl_product_barcode.is_deleted', '0');
        $this->db->where('tbl_product_barcode.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product_barcode.salon_id', $this->session->userdata('salon_id'));
    
        if ($this->input->post('status') !== "") {
            $this->db->where('tbl_product_barcode.product_status', $this->input->post('status'));
        }
        if ($this->input->post('barcodes') !== "") {
            $this->db->where_in('tbl_product_barcode.id', explode(',',$this->input->post('barcodes')));
        }
        if ($this->input->post('product') !== "") {
            $this->db->where('tbl_product_barcode.product_name', $this->input->post('product'));
        }
        if ($this->input->post('category') !== "") {
            $this->db->where('tbl_product_barcode.product_category', $this->input->post('category'));
        }
        if ($this->input->post('from_date') !== "") {
            $this->db->where('DATE(tbl_product_stock.created_on) >=', date('Y-m-d',strtotime($this->input->post('from_date'))));
        }
        if ($this->input->post('to_date') !== "") {
            $this->db->where('DATE(tbl_product_stock.created_on) <=', date('Y-m-d',strtotime($this->input->post('to_date'))));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_product.product_name', $search);
            $this->db->or_like('tbl_product_barcode.barcode_id', $search);
            $this->db->group_end();
        }
        
        $this->db->limit($length, $start);
        $this->db->order_by('tbl_product_barcode.id', 'DESC');
        
        $result = $this->db->get();
        return $result->result();
    }    
    
    public function get_product_barcodes_ajx_count($search){
        $this->db->select('tbl_product_barcode.*, tbl_product.product_subcategory, tbl_product_category.product_category as product_category_name, tbl_product.product_name, tbl_product_stock.created_on as inward_date');
        $this->db->from('tbl_product_barcode');
        $this->db->join('tbl_product', 'tbl_product_barcode.product_name = tbl_product.id', 'left');
        $this->db->join('tbl_product_stock', 'tbl_product_barcode.stock_entry_id = tbl_product_stock.id', 'left');
        $this->db->join('tbl_product_category', 'tbl_product_barcode.product_category = tbl_product_category.id', 'left');
        $this->db->where('tbl_product_barcode.is_deleted', '0');
        $this->db->where('tbl_product_barcode.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product_barcode.salon_id', $this->session->userdata('salon_id'));

        if ($this->input->post('status') !== "") {
            $this->db->where('tbl_product_barcode.product_status', $this->input->post('status'));
        }
        if ($this->input->post('product') !== "") {
            $this->db->where('tbl_product_barcode.product_name', $this->input->post('product'));
        }
        if ($this->input->post('barcodes') !== "") {
            $this->db->where_in('tbl_product_barcode.id', explode(',',$this->input->post('barcodes')));
        }
        if ($this->input->post('category') !== "") {
            $this->db->where('tbl_product_barcode.product_category', $this->input->post('category'));
        }
        if ($this->input->post('from_date') !== "") {
            $this->db->where('DATE(tbl_product_stock.created_on) >=', date('Y-m-d',strtotime($this->input->post('from_date'))));
        }
        if ($this->input->post('to_date') !== "") {
            $this->db->where('DATE(tbl_product_stock.created_on) <=', date('Y-m-d',strtotime($this->input->post('to_date'))));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_product.product_name', $search);
            $this->db->or_like('tbl_product_barcode.barcode_id', $search);
            $this->db->group_end();
        }

        $this->db->order_by('tbl_product_barcode.id', 'DESC');
		$result = $this->db->get();
		return $result->num_rows();
	}
    public function get_single_designation_row($id){
        $this->db->where('tbl_emp_designation.is_deleted','0');
        $this->db->where('tbl_emp_designation.id',$id);
        $single = $this->db->get('tbl_emp_designation')->row();
        return $single;
    }
    public function set_employee_attendance_ajx(){
        $this->db->select('tbl_salon_emp_attendance.*,tbl_salon_employee.full_name,tbl_salon_employee.designation');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_salon_emp_attendance.emp_id');
        $this->db->where('tbl_salon_emp_attendance.is_deleted','0');
        $this->db->where('tbl_salon_emp_attendance.id',$this->input->post('attendance_id'));
        $single = $this->db->get('tbl_salon_emp_attendance')->row();
        if(!empty($single)){
            $designation = $this->get_single_designation_row($single->designation);
        ?>
        <table class="table">
            <thead>
                <tr>
                    <th>Employee</th>
                    <th>Shift</th>
                    <th>Shift In</th>
                    <th>Shift Out</th>
                    <th>Break</th>
                    <th>Punch In</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><?=$single->full_name;?> <?=!empty($designation) ? '['.$designation->designation.']' : ''; ?></td>
                    <td><?=$single->shift_name_text != "" ? $single->shift_name_text : '-';?></td>
                    <td><?=date('h:i A',strtotime($single->shift_in));?></td>
                    <td><?=date('h:i A',strtotime($single->shift_out));?></td>
                    <td><?=date('h:i A',strtotime($single->shift_break_from));?> To <?=date('h:i A',strtotime($single->shift_break_to));?></td>
                    <td><?=date('h:i A',strtotime($single->punch_in));?></td>
                </tr>
            </tbody>
        </table>
        <form id="punch_out_form" method="POST" action="<?=base_url();?>set-punch-out">
            <div class="form-group col-lg-12 col-lg-12 col-md-12 col-sm-12" style="text-align:center;">
                <div class="row" style="display: flex;justify-content: start;">
                    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12" style="text-align:left;">
                        <label for="punch_out" style="display:block;">Punch Out Time</label>
                        <input autocomplete="off" style="width:100%;" type="text" class="basicExample" placeholder="Select Shift From Time" name="punch_out" id="punch_out" value="">
                    </div>
                    <input type="hidden" name="attendance_id" id="attendance_id" value="<?=$single->id;?>">
                    <input type="hidden" name="to" id="to" value="<?php echo date('h:iA',strtotime('11:59PM')); ?>">
                    <input type="hidden" name="from" id="from" value="<?php echo date('h:iA',strtotime($single->punch_in)); ?>">
                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12" style="text-align:left;">
                        <label style="display:block;visibility:hidden;">Punch Out Time</label>
                        <input class="btn btn-info" type="submit" name="punch_out_button" id="punch_out_button" value="Submit">
                    </div>
                </div>
            </div>
        </form>
        <script>
            $('#punch_out').clockpicker({
                donetext: 'Done', 
                twelvehour: true
            });
            function parseTime(time) {
                var timeSplit = time.match(/(\d{1,2}):(\d{2})([AP]M)/i);
                if (timeSplit && timeSplit.length === 4) {
                    var hour = parseInt(timeSplit[1]);
                    var minute = parseInt(timeSplit[2]);
                    var period = timeSplit[3].toUpperCase();
                    
                    if (period === 'PM' && hour !== 12) {
                        hour += 12;
                    } else if (period === 'AM' && hour === 12) {
                        hour = 0;
                    }
                    
                    return hour * 60 + minute;
                }
                return NaN; 
            }

            $.validator.addMethod("timeInBetween", function(value, element, params) {
                var startTime = $(params[0]).val();
                var endTime = $(params[1]).val();
                if (!startTime || !endTime || !value) {
                    return true;
                }
                var start = parseTime(startTime);
                var end = parseTime(endTime);
                var time = parseTime(value);
                return (time >= start && time <= end);
            }, "Please enter a time between {0} and {1}.");
            $("#punch_out_form").validate({
                rules: {
                    punch_out: {
                        required: true,
                        timeInBetween: ["#from", "#to"],
                    }
                },
                messages: {
                    punch_out: {
                        required: 'Please select punch out time',
                        timeInBetween: 'Punch out time must be greater than punch in time'
                    }
                },
                submitHandler: function(form) {
                    if (confirm("Are you sure you want set punch out time?")) {
                        form.submit();
                    }
                }
            });
        </script>
        <?php }else{ ?>
            <p style="text-align:center;">Attendance not available</p>
        <?php
        }
    }
    public function set_punch_out(){
        $this->db->where('tbl_salon_emp_attendance.is_deleted','0');
        $this->db->where('tbl_salon_emp_attendance.id',$this->input->post('attendance_id'));
        $single = $this->db->get('tbl_salon_emp_attendance')->row();
        if(!empty($single)){
            $staff = $single->emp_id;
            $punch_out = date('H:i:s',strtotime($this->input->post('punch_out')));

            $punch_in = date('H:i:s', strtotime($single->punch_in));
            $shift_out = date('H:i:s', strtotime($single->shift_out));

            $datetime1 = new DateTime($punch_in);
            $datetime2 = new DateTime($punch_out);
            $datetime3 = new DateTime($shift_out);
            
            $interval = $datetime1->diff($datetime2);
            
            $hours = $interval->h + ($interval->d * 24);
            $minutes = $interval->i;
            $seconds = $interval->s;
            
            $working_hrs = sprintf('%02d:%02d', $hours, $minutes);

            if($punch_out > $shift_out){
                $interval2 = $datetime2->diff($datetime3);
                
                $hours = $interval2->h + ($interval2->d * 24);
                $minutes = $interval2->i;
                $seconds = $interval2->s;
                
                $ot_hrs = sprintf('%02d:%02d', $hours, $minutes);
                $is_ot = '1';
            }else{
                $ot_hrs = '';
                $is_ot = '0';
            }

            //HALF DAY CALCULATION
            $type = '1';     
            $shift_break_from = date('H:i:s', strtotime($single->shift_break_from));
            $shift_break_to = date('H:i:s', strtotime($single->shift_break_to));
            if($punch_out < $shift_break_to && $punch_in < $shift_break_to){
                $type = '3';
            }elseif($punch_out >= $shift_break_to && $punch_in >= $shift_break_to){
                $type = '4';
            }

            $data = array(
                'punch_out'           => date("H:i:s", strtotime($punch_out)),
                'working_hrs'         => $working_hrs,
                'ot_hrs'              => $ot_hrs,
                'is_ot_hrs'           => $is_ot,
                'attendence_type'     => $type,
            );
            // echo '<pre>'; print_r($data); exit();
            $this->db->where('id',$single->id);
            $this->db->update('tbl_salon_emp_attendance', $data);            
            return true;
        }else{
            return false;
        }
    }
    public function get_employee_attendance_ajx_list($length, $start, $search) {
        $this->db->select('tbl_salon_emp_attendance.*, tbl_salon_employee.full_name');
        $this->db->from('tbl_salon_emp_attendance');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_salon_emp_attendance.emp_id', 'left');
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));

        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_salon_emp_attendance.att_date', $search);
            $this->db->or_like('tbl_salon_emp_attendance.punch_in', $search);
            $this->db->or_like('tbl_salon_emp_attendance.punch_out', $search);
            $this->db->group_end();
        }
        
        $this->db->limit($length, $start);
        $this->db->order_by('tbl_salon_emp_attendance.id', 'DESC');
        
        $result = $this->db->get();
        return $result->result();
    }    
    
    public function get_employee_attendance_ajx_count($search){
        $this->db->select('tbl_salon_emp_attendance.*, tbl_salon_employee.full_name');
        $this->db->from('tbl_salon_emp_attendance');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_salon_emp_attendance.emp_id', 'left');
        $this->db->where('tbl_salon_emp_attendance.is_deleted', '0');
        $this->db->where('tbl_salon_emp_attendance.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_attendance.salon_id', $this->session->userdata('salon_id'));
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_salon_emp_attendance.att_date', $search);
            $this->db->or_like('tbl_salon_emp_attendance.punch_in', $search);
            $this->db->or_like('tbl_salon_emp_attendance.punch_out', $search);
            $this->db->group_end();
        }
        $this->db->order_by('tbl_salon_emp_attendance.id', 'DESC');
		$result = $this->db->get();
		return $result->num_rows();
	}
    
    public function get_customer_report_data_ajx_list($length, $start, $search) {
        $customer_report_type = $this->input->post('customer_report_type');
    
        if($customer_report_type == '2'){
            //new customers
            $to = date('Y-m-d');
            $from = date('Y-m-d', strtotime('-10 days'));    
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));        
            $this->db->where('DATE(tbl_salon_customer.created_on) >=', $from);
            $this->db->where('DATE(tbl_salon_customer.created_on) <=', $to);
        }elseif ($customer_report_type == '3') {
            // Recently not visited
            $comparedate = date('Y-m-d', strtotime('-10 days'));
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->select('tbl_salon_customer.*');
            $this->db->join('tbl_new_booking', 'tbl_new_booking.customer_name = tbl_salon_customer.id', 'left');
            $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));

            $this->db->having("MAX(DATE(tbl_new_booking.booking_date)) <= '$comparedate' OR MAX(tbl_new_booking.booking_date) IS NULL");
        }elseif($customer_report_type == '4'){
            // Without booking
            $this->db->select('tbl_salon_customer.*, COALESCE(COUNT(tbl_new_booking.id), 0) AS booking_count');
            $this->db->from('tbl_salon_customer');
            $this->db->join('tbl_new_booking', 'tbl_new_booking.customer_name = tbl_salon_customer.id', 'left');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->having('booking_count <=', 0);
        }elseif($customer_report_type == '5'){
            //premium customer
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->join('tbl_new_booking','tbl_new_booking.customer_name = tbl_salon_customer.id','left');
            $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
            $this->db->select('tbl_salon_customer.*, COUNT(tbl_new_booking.id) AS booking_count');
            $this->db->having('booking_count >', 10);
        }elseif($customer_report_type == '6'){
            //normal customer
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->join('tbl_new_booking','tbl_new_booking.customer_name = tbl_salon_customer.id','left');
            $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
            $this->db->select('tbl_salon_customer.*, COUNT(tbl_new_booking.id) AS booking_count');
            $this->db->having('booking_count <=', 10);
        }elseif($customer_report_type == '7'){
            //membership customer
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->select('tbl_salon_customer.*');
            $this->db->join('tbl_customer_membership_history','tbl_customer_membership_history.id = tbl_salon_customer.membership_pkey','left');
            $this->db->where('tbl_salon_customer.membership_pkey !=', '');
            $this->db->where('tbl_salon_customer.membership_id !=', '');
            $this->db->where('DATE(tbl_customer_membership_history.membership_end) >= ', date('Y-m-d'));
            $this->db->where('DATE(tbl_customer_membership_history.membership_start) <=', date('Y-m-d'));
            $this->db->where('tbl_customer_membership_history.membership_status','0');
        }elseif ($customer_report_type == '8') {
            // Upcoming birthday
            $currentMonth = date('m');
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->where('MONTH(tbl_salon_customer.dob)', $currentMonth);
            $this->db->where("DATE(CONCAT(YEAR(CURDATE()), '-', MONTH(tbl_salon_customer.dob), '-', DAY(tbl_salon_customer.dob))) >= CURDATE()");
        } elseif ($customer_report_type == '9') {
            // Upcoming anniversary
            $currentMonth = date('m');
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->where('MONTH(tbl_salon_customer.doa)', $currentMonth);
            $this->db->where("DATE(CONCAT(YEAR(CURDATE()), '-', MONTH(tbl_salon_customer.doa), '-', DAY(tbl_salon_customer.doa))) >= CURDATE()");
        }else{
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->or_like('tbl_salon_customer.doa', $search);
            $this->db->group_end();
        }
        
        $this->db->group_by('tbl_salon_customer.id');
        $this->db->limit($length, $start);
        $this->db->order_by('tbl_salon_customer.id', 'DESC');
        
        $result = $this->db->get();
        return $result->result();
    }   
    
    public function get_customer_package_redemption_report_data_ajx_list($length, $start, $search) {
        $payment_status = $this->input->post('payment_status');
        $from_date = $this->input->post('from_date');
        $to_date = $this->input->post('to_date');
        $this->db->select('tbl_booking_services_details.*,
        tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email,
        tbl_new_booking.is_direct_billing,tbl_new_booking.payment_status,tbl_new_booking.receipt_no,
        tbl_salon_emp_service.final_price as service_final_price,tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,
        tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,
        tbl_salon_employee.full_name as stylist_full_name,
        tbl_package.package_name,tbl_package.amount as package_amount');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id','left');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_package','tbl_package.id = tbl_booking_services_details.package_id');
        $this->db->join('tbl_salon_customer', 'tbl_booking_services_details.customer_name = tbl_salon_customer.id', 'left');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id_after_bill', 'left');
        if($payment_status != ""){
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_booking_services_details.service_date', $search);
            $this->db->or_like('tbl_booking_services_details.service_from', $search);
            $this->db->or_like('tbl_booking_services_details.service_to', $search);
            $this->db->or_like('tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_package.package_name', $search);
            $this->db->or_like('tbl_package.amount', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_new_booking.receipt_no', $search);
            $this->db->or_like('tbl_salon_emp_service.final_price', $search);
            $this->db->or_like('tbl_salon_emp_service.service_name', $search);
            $this->db->or_like('tbl_salon_emp_service.service_name_marathi', $search);            
            $this->db->or_like('tbl_admin_sub_category.sub_category', $search);
            $this->db->or_like('tbl_admin_sub_category.sub_category_marathi', $search);
            $this->db->or_like('tbl_admin_service_category.sup_category', $search);
            $this->db->or_like('tbl_admin_service_category.sup_category_marathi', $search);
            $this->db->group_end();
        }
        $this->db->where('tbl_booking_services_details.service_added_from', '1');
        $this->db->where('tbl_booking_services_details.package_id !=', '');
        $this->db->where('tbl_booking_services_details.package_id !=', null);
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id')); 
        $this->db->order_by('tbl_booking_services_details.service_date', 'DESC');
        $this->db->limit($length, $start);  
        $result = $this->db->get('tbl_booking_services_details')->result();
        return $result;
    }    
    
    public function get_membership_report_data_ajx_list($length, $start, $search) {
        $customer_report_type = $this->input->post('customer_report_type');
        if($customer_report_type == '1'){
            //today
            $from = date('Y-m-d'); 
            $to = date('Y-m-d');   
        }elseif($customer_report_type == '2'){
            //Yesterday
            $from = date('Y-m-d', strtotime('-1 day'));
            $to = $from;
        }elseif($customer_report_type == '3'){
            //This week
            $from = date('Y-m-d', strtotime('monday this week'));
            $to = date('Y-m-d');
        }elseif($customer_report_type == '4'){
            //This month
            $from = date('Y-m-01');
            $to = date('Y-m-d');
        }elseif($customer_report_type == '5'){
            //Last month
            $from = date('Y-m-d', strtotime('first day of previous month'));
            $to = date('Y-m-d', strtotime('last day of previous month'));
        }elseif($customer_report_type == '6'){
            //Custom
            $from = $this->input->post('from_date');
            $to = $this->input->post('to_date');
        }else{
            $from = '';
            $to = '';
        }
		$this->db->select('tbl_customer_membership_history.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_memebership.membership_name, tbl_memebership.membership_price');
		$this->db->from('tbl_customer_membership_history');
		$this->db->join('tbl_memebership', 'tbl_customer_membership_history.membership_id = tbl_memebership.id');
		$this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_membership_history.customer_id');
		
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->or_like('tbl_salon_customer.doa', $search);
            $this->db->or_like('tbl_memebership.membership_name', $search);
            $this->db->or_like('tbl_customer_membership_history.membership_start', $search);
            $this->db->or_like('tbl_customer_membership_history.membership_end', $search);
            $this->db->or_like('tbl_customer_membership_history.membership_price', $search);
            $this->db->group_end();
        }

        if($from != "" && $to != ""){       
            $this->db->where('DATE(tbl_customer_membership_history.created_on) >=',date('Y-m-d',strtotime($from)));
            $this->db->where('DATE(tbl_customer_membership_history.created_on) <=', date('Y-m-d',strtotime($to)));
        }

		$this->db->where('tbl_customer_membership_history.is_deleted', '0');
		$this->db->where('tbl_customer_membership_history.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_membership_history.salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('tbl_customer_membership_history.id', 'DESC');
        $this->db->limit($length, $start);        
        $result = $this->db->get();
        return $result->result();
    }  
    
    public function get_package_report_data_ajx_list($length, $start, $search) {
        $customer_report_type = $this->input->post('customer_report_type');
        if($customer_report_type == '1'){
            //today
            $from = date('Y-m-d'); 
            $to = date('Y-m-d');   
        }elseif($customer_report_type == '2'){
            //Yesterday
            $from = date('Y-m-d', strtotime('-1 day'));
            $to = $from;
        }elseif($customer_report_type == '3'){
            //This week
            $from = date('Y-m-d', strtotime('monday this week'));
            $to = date('Y-m-d');
        }elseif($customer_report_type == '4'){
            //This month
            $from = date('Y-m-01');
            $to = date('Y-m-d');
        }elseif($customer_report_type == '5'){
            //Last month
            $from = date('Y-m-d', strtotime('first day of previous month'));
            $to = date('Y-m-d', strtotime('last day of previous month'));
        }elseif($customer_report_type == '6'){
            //Custom
            $from = $this->input->post('from_date');
            $to = $this->input->post('to_date');
        }else{
            $from = '';
            $to = '';
        }
        $this->db->select('tbl_customer_package_allocations.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_package.package_name, tbl_package.bg_color, tbl_package.text_color');
        $this->db->join('tbl_package', 'tbl_package.id = tbl_customer_package_allocations.package_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_package_allocations.customer_name');

        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->or_like('tbl_salon_customer.doa', $search);
            $this->db->or_like('tbl_package.package_name', $search);
            $this->db->or_like('tbl_customer_package_allocations.package_amount', $search);
            $this->db->or_like('tbl_customer_package_allocations.package_start_date', $search);
            $this->db->or_like('tbl_customer_package_allocations.package_end_date', $search);
            $this->db->group_end();
        }        

        if($from != "" && $to != ""){       
            $this->db->where('DATE(tbl_customer_package_allocations.created_on) >=',date('Y-m-d',strtotime($from)));
            $this->db->where('DATE(tbl_customer_package_allocations.created_on) <=', date('Y-m-d',strtotime($to)));
        }

		$this->db->where('tbl_customer_package_allocations.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_package_allocations.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_customer_package_allocations.is_deleted','0');
        $this->db->order_by('tbl_customer_package_allocations.created_on','desc');
        $this->db->limit($length, $start); 
        $result = $this->db->get('tbl_customer_package_allocations');       
        return $result->result();
    }   
    
    public function get_giftcard_report_data_ajx_list($length, $start, $search) {
        $customer_report_type = $this->input->post('customer_report_type');
        if($customer_report_type == '1'){
            //today
            $from = date('Y-m-d'); 
            $to = date('Y-m-d');   
        }elseif($customer_report_type == '2'){
            //Yesterday
            $from = date('Y-m-d', strtotime('-1 day'));
            $to = $from;
        }elseif($customer_report_type == '3'){
            //This week
            $from = date('Y-m-d', strtotime('monday this week'));
            $to = date('Y-m-d');
        }elseif($customer_report_type == '4'){
            //This month
            $from = date('Y-m-01');
            $to = date('Y-m-d');
        }elseif($customer_report_type == '5'){
            //Last month
            $from = date('Y-m-d', strtotime('first day of previous month'));
            $to = date('Y-m-d', strtotime('last day of previous month'));
        }elseif($customer_report_type == '6'){
            //Custom
            $from = $this->input->post('from_date');
            $to = $this->input->post('to_date');
        }else{
            $from = '';
            $to = '';
        }
        $this->db->select('tbl_booking_payment_entry.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_gift_card.gender, tbl_gift_card.gift_name, tbl_gift_card.bg_color_input, tbl_gift_card.bg_color, tbl_gift_card.text_color_input, tbl_gift_card.text_color');
        $this->db->join('tbl_gift_card', 'tbl_gift_card.id = tbl_booking_payment_entry.giftcard_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_payment_entry.customer_id');

        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->or_like('tbl_salon_customer.doa', $search);
            $this->db->or_like('tbl_gift_card.gift_name', $search);
            $this->db->or_like('tbl_booking_payment_entry.giftcard_customer_uid', $search);
            $this->db->or_like('tbl_booking_payment_entry.gift_card_regular_price', $search);
            $this->db->group_end();
        }        

        if($from != "" && $to != ""){       
            $this->db->where('DATE(tbl_booking_payment_entry.created_on) >=',date('Y-m-d',strtotime($from)));
            $this->db->where('DATE(tbl_booking_payment_entry.created_on) <=', date('Y-m-d',strtotime($to)));
        }
        $this->db->where('tbl_booking_payment_entry.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_payment_entry.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_payment_entry.is_deleted','0');
        $this->db->where('tbl_booking_payment_entry.type','3');
        $this->db->order_by('tbl_booking_payment_entry.created_on','desc');
        $this->db->limit($length, $start);        
        $result = $this->db->get('tbl_booking_payment_entry');
        return $result->result();
    }    
    public function get_customer_booking($id){
        $this->db->select('tbl_booking_services_details.*, tbl_new_booking.receipt_no, tbl_new_booking.booking_payment_id , tbl_new_booking.booking_type, tbl_salon_emp_service.service_name, tbl_salon_emp_service.service_name_marathi,tbl_salon_employee.full_name');
        $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->where('tbl_booking_services_details.customer_name', $id);
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->order_by('tbl_booking_services_details.id', 'desc');
        $this->db->group_by('tbl_booking_services_details.booking_id');
        $result = $this->db->get('tbl_booking_services_details')->result();
        return $result;
    }    
    public function get_customer_first_booking($id){
        $this->db->where('is_deleted', '0');
        $this->db->where('customer_name', $id);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('service_start_date','asc');
        $this->db->limit(1);
        $result = $this->db->get('tbl_new_booking');
        return $result->row();
    }   
    public function get_customer_last_booking($id){
        $this->db->where('id', $id);
        $customer = $this->db->get('tbl_salon_customer');
        $customer = $customer->row();
        
        if($customer->salon_id != ''){
            $salon_id = $customer->salon_id;
        }else{
            $salon_id = $this->session->userdata('salon_id');
        }

        if($customer->branch_id != ''){
            $branch_id = $customer->branch_id;
        }else{
            $branch_id = $this->session->userdata('branch_id');
        }

        $this->db->where('is_deleted', '0');
        $this->db->where('customer_name', $id);
        $this->db->where('branch_id', $branch_id);
        $this->db->where('salon_id', $salon_id);
        $this->db->order_by('service_start_date','desc');
        $this->db->limit(1);
        $result = $this->db->get('tbl_new_booking');
        return $result->row();
    }
    public function get_customer_report_data_ajx_count($search){
        $customer_report_type = $this->input->post('customer_report_type');

        if($customer_report_type == '2'){
            //new customers
            $to = date('Y-m-d');
            $from = date('Y-m-d', strtotime('-10 days'));    
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));        
            $this->db->where('DATE(tbl_salon_customer.created_on) >=', $from);
            $this->db->where('DATE(tbl_salon_customer.created_on) <=', $to);
        }elseif ($customer_report_type == '3') {
            // Recently not visited
            $comparedate = date('Y-m-d', strtotime('-10 days'));
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->select('tbl_salon_customer.*');
            $this->db->join('tbl_new_booking', 'tbl_new_booking.customer_name = tbl_salon_customer.id', 'left');
            $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));

            $this->db->having("MAX(DATE(tbl_new_booking.booking_date)) <= '$comparedate' OR MAX(tbl_new_booking.booking_date) IS NULL");
        }elseif($customer_report_type == '4'){
            // Without booking
            $this->db->select('tbl_salon_customer.*, COALESCE(COUNT(tbl_new_booking.id), 0) AS booking_count');
            $this->db->from('tbl_salon_customer');
            $this->db->join('tbl_new_booking', 'tbl_new_booking.customer_name = tbl_salon_customer.id', 'left');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->having('booking_count <=', 0);
        }elseif($customer_report_type == '5'){
            //premium customer
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->join('tbl_new_booking','tbl_new_booking.customer_name = tbl_salon_customer.id','left');
            $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
            $this->db->select('tbl_salon_customer.*, COUNT(tbl_new_booking.id) AS booking_count');
            $this->db->having('booking_count >', 10);
        }elseif($customer_report_type == '6'){
            //normal customer
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->join('tbl_new_booking','tbl_new_booking.customer_name = tbl_salon_customer.id','left');
            $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
            $this->db->select('tbl_salon_customer.*, COUNT(tbl_new_booking.id) AS booking_count');
            $this->db->having('booking_count <=', 10);
        }elseif($customer_report_type == '7'){
            //membership customer
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->select('tbl_salon_customer.*');
            $this->db->join('tbl_customer_membership_history','tbl_customer_membership_history.id = tbl_salon_customer.membership_pkey','left');
            $this->db->where('tbl_salon_customer.membership_pkey !=', '');
            $this->db->where('tbl_salon_customer.membership_id !=', '');
            $this->db->where('DATE(tbl_customer_membership_history.membership_end) >= ', date('Y-m-d'));
        }elseif ($customer_report_type == '8') {
            // Upcoming birthday
            $currentMonth = date('m');
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->where('MONTH(tbl_salon_customer.dob)', $currentMonth);
            $this->db->where("DATE(CONCAT(YEAR(CURDATE()), '-', MONTH(tbl_salon_customer.dob), '-', DAY(tbl_salon_customer.dob))) >= CURDATE()");
        } elseif ($customer_report_type == '9') {
            // Upcoming anniversary
            $currentMonth = date('m');
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            $this->db->where('MONTH(tbl_salon_customer.doa)', $currentMonth);
            $this->db->where("DATE(CONCAT(YEAR(CURDATE()), '-', MONTH(tbl_salon_customer.doa), '-', DAY(tbl_salon_customer.doa))) >= CURDATE()");
        }else{
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->or_like('tbl_salon_customer.doa', $search);
            $this->db->group_end();
        }

        $this->db->group_by('tbl_salon_customer.id');
        $this->db->order_by('tbl_salon_customer.id', 'DESC');
		$result = $this->db->get();
		return $result->num_rows();
	}
    
    public function get_customer_package_redemption_report_data_ajx_count($search){
        $payment_status = $this->input->post('payment_status');
        $from_date = $this->input->post('from_date');
        $to_date = $this->input->post('to_date');
        $this->db->select('tbl_booking_services_details.*,
        tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email,
        tbl_new_booking.is_direct_billing,tbl_new_booking.payment_status,tbl_new_booking.receipt_no,
        tbl_salon_emp_service.final_price as service_final_price,tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,
        tbl_admin_sub_category.sub_category as subcategory,tbl_admin_sub_category.sub_category_marathi,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,
        tbl_salon_employee.full_name as stylist_full_name,
        tbl_package.package_name,tbl_package.amount as package_amount');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id','left');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_package','tbl_package.id = tbl_booking_services_details.package_id');
        $this->db->join('tbl_salon_customer', 'tbl_booking_services_details.customer_name = tbl_salon_customer.id', 'left');
        $this->db->join('tbl_admin_sub_category', 'tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category', 'left');
        $this->db->join('tbl_admin_service_category', 'tbl_admin_service_category.id = tbl_salon_emp_service.category', 'left');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id_after_bill', 'left');
        if($payment_status != ""){
            $this->db->where('tbl_new_booking.payment_status', $payment_status);
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) >= ', date("Y-m-d", strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date) <= ', date("Y-m-d", strtotime($to_date)));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_booking_services_details.service_date', $search);
            $this->db->or_like('tbl_booking_services_details.service_from', $search);
            $this->db->or_like('tbl_booking_services_details.service_to', $search);
            $this->db->or_like('tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_package.package_name', $search);
            $this->db->or_like('tbl_package.amount', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_new_booking.receipt_no', $search);
            $this->db->or_like('tbl_salon_emp_service.final_price', $search);
            $this->db->or_like('tbl_salon_emp_service.service_name', $search);
            $this->db->or_like('tbl_salon_emp_service.service_name_marathi', $search);            
            $this->db->or_like('tbl_admin_sub_category.sub_category', $search);
            $this->db->or_like('tbl_admin_sub_category.sub_category_marathi', $search);
            $this->db->or_like('tbl_admin_service_category.sup_category', $search);
            $this->db->or_like('tbl_admin_service_category.sup_category_marathi', $search);
            $this->db->group_end();
        }
        $this->db->where('tbl_booking_services_details.service_added_from', '1');
        $this->db->where('tbl_booking_services_details.package_id !=', '');
        $this->db->where('tbl_booking_services_details.package_id !=', null);
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id')); 
        $this->db->order_by('tbl_booking_services_details.service_date', 'DESC');
        $result = $this->db->get('tbl_booking_services_details')->num_rows();
        return $result;
	}
    
    public function get_membership_report_data_ajx_count($search){
        $customer_report_type = $this->input->post('customer_report_type');
        if($customer_report_type == '1'){
            //today
            $from = date('Y-m-d'); 
            $to = date('Y-m-d');   
        }elseif($customer_report_type == '2'){
            //Yesterday
            $from = date('Y-m-d', strtotime('-1 day'));
            $to = $from;
        }elseif($customer_report_type == '3'){
            //This week
            $from = date('Y-m-d', strtotime('monday this week'));
            $to = date('Y-m-d');
        }elseif($customer_report_type == '4'){
            //This month
            $from = date('Y-m-01');
            $to = date('Y-m-d');
        }elseif($customer_report_type == '5'){
            //Last month
            $from = date('Y-m-d', strtotime('first day of previous month'));
            $to = date('Y-m-d', strtotime('last day of previous month'));
        }elseif($customer_report_type == '6'){
            //Custom
            $from = $this->input->post('from_date');
            $to = $this->input->post('to_date');
        }else{
            $from = '';
            $to = '';
        }
		$this->db->select('tbl_customer_membership_history.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_memebership.membership_name, tbl_memebership.membership_price');
		$this->db->from('tbl_customer_membership_history');
		$this->db->join('tbl_memebership', 'tbl_customer_membership_history.membership_id = tbl_memebership.id');
		$this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_membership_history.customer_id');
		
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->or_like('tbl_salon_customer.doa', $search);
            $this->db->or_like('tbl_memebership.membership_name', $search);
            $this->db->or_like('tbl_customer_membership_history.membership_start', $search);
            $this->db->or_like('tbl_customer_membership_history.membership_end', $search);
            $this->db->or_like('tbl_customer_membership_history.membership_price', $search);
            $this->db->group_end();
        }        

        if($from != "" && $to != ""){       
            $this->db->where('DATE(tbl_customer_membership_history.created_on) >=',date('Y-m-d',strtotime($from)));
            $this->db->where('DATE(tbl_customer_membership_history.created_on) <=', date('Y-m-d',strtotime($to)));
        }

		$this->db->where('tbl_customer_membership_history.is_deleted', '0');
		$this->db->where('tbl_customer_membership_history.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_membership_history.salon_id', $this->session->userdata('salon_id'));
		$this->db->order_by('tbl_customer_membership_history.id', 'DESC');
		$result = $this->db->get();
		return $result->num_rows();
	}
    
    public function get_package_report_data_ajx_count($search){
        $customer_report_type = $this->input->post('customer_report_type');
        if($customer_report_type == '1'){
            //today
            $from = date('Y-m-d'); 
            $to = date('Y-m-d');   
        }elseif($customer_report_type == '2'){
            //Yesterday
            $from = date('Y-m-d', strtotime('-1 day'));
            $to = $from;
        }elseif($customer_report_type == '3'){
            //This week
            $from = date('Y-m-d', strtotime('monday this week'));
            $to = date('Y-m-d');
        }elseif($customer_report_type == '4'){
            //This month
            $from = date('Y-m-01');
            $to = date('Y-m-d');
        }elseif($customer_report_type == '5'){
            //Last month
            $from = date('Y-m-d', strtotime('first day of previous month'));
            $to = date('Y-m-d', strtotime('last day of previous month'));
        }elseif($customer_report_type == '6'){
            //Custom
            $from = $this->input->post('from_date');
            $to = $this->input->post('to_date');
        }else{
            $from = '';
            $to = '';
        }
        $this->db->select('tbl_customer_package_allocations.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_package.package_name, tbl_package.bg_color, tbl_package.text_color');
        $this->db->join('tbl_package', 'tbl_package.id = tbl_customer_package_allocations.package_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_customer_package_allocations.customer_name');

        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->or_like('tbl_salon_customer.doa', $search);
            $this->db->or_like('tbl_package.package_name', $search);
            $this->db->or_like('tbl_customer_package_allocations.package_amount', $search);
            $this->db->or_like('tbl_customer_package_allocations.package_start_date', $search);
            $this->db->or_like('tbl_customer_package_allocations.package_end_date', $search);
            $this->db->group_end();
        }        

        if($from != "" && $to != ""){       
            $this->db->where('DATE(tbl_customer_package_allocations.created_on) >=',date('Y-m-d',strtotime($from)));
            $this->db->where('DATE(tbl_customer_package_allocations.created_on) <=', date('Y-m-d',strtotime($to)));
        }

		$this->db->where('tbl_customer_package_allocations.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_customer_package_allocations.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_customer_package_allocations.is_deleted','0');
        $this->db->order_by('tbl_customer_package_allocations.created_on','desc');
        $result = $this->db->get('tbl_customer_package_allocations');
		return $result->num_rows();
	}
    
    public function get_giftcard_report_data_ajx_count($search){
        $customer_report_type = $this->input->post('customer_report_type');
        if($customer_report_type == '1'){
            //today
            $from = date('Y-m-d'); 
            $to = date('Y-m-d');   
        }elseif($customer_report_type == '2'){
            //Yesterday
            $from = date('Y-m-d', strtotime('-1 day'));
            $to = $from;
        }elseif($customer_report_type == '3'){
            //This week
            $from = date('Y-m-d', strtotime('monday this week'));
            $to = date('Y-m-d');
        }elseif($customer_report_type == '4'){
            //This month
            $from = date('Y-m-01');
            $to = date('Y-m-d');
        }elseif($customer_report_type == '5'){
            //Last month
            $from = date('Y-m-d', strtotime('first day of previous month'));
            $to = date('Y-m-d', strtotime('last day of previous month'));
        }elseif($customer_report_type == '6'){
            //Custom
            $from = $this->input->post('from_date');
            $to = $this->input->post('to_date');
        }else{
            $from = '';
            $to = '';
        }
        $this->db->select('tbl_booking_payment_entry.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_gift_card.gender, tbl_gift_card.gift_name, tbl_gift_card.bg_color_input, tbl_gift_card.bg_color, tbl_gift_card.text_color_input, tbl_gift_card.text_color');
        $this->db->join('tbl_gift_card', 'tbl_gift_card.id = tbl_booking_payment_entry.giftcard_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_payment_entry.customer_id');

        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->or_like('tbl_salon_customer.doa', $search);
            $this->db->or_like('tbl_gift_card.gift_name', $search);
            $this->db->or_like('tbl_booking_payment_entry.giftcard_customer_uid', $search);
            $this->db->or_like('tbl_booking_payment_entry.gift_card_regular_price', $search);
            $this->db->group_end();
        }        

        if($from != "" && $to != ""){       
            $this->db->where('DATE(tbl_booking_payment_entry.created_on) >=',date('Y-m-d',strtotime($from)));
            $this->db->where('DATE(tbl_booking_payment_entry.created_on) <=', date('Y-m-d',strtotime($to)));
        }
        $this->db->where('tbl_booking_payment_entry.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_payment_entry.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_payment_entry.is_deleted','0');
        $this->db->where('tbl_booking_payment_entry.type','3');
        $this->db->order_by('tbl_booking_payment_entry.created_on','desc');
        $result = $this->db->get('tbl_booking_payment_entry');
		return $result->num_rows();
	}
    public function get_employee_whatsapp_coins_report_list($length, $start, $search) {
        $from = $this->input->post('from_date');
        $to = $this->input->post('to_date');
        $ids = $this->input->post('ids') != "" ? explode(',',$this->input->post('ids')) : [];
        $this->db->select('tbl_messages_history.*,tbl_salon_customer.dob, tbl_salon_customer.doa, tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon.salon_name,tbl_branch.branch_name');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_messages_history.send_customer');
        $this->db->join('tbl_branch','tbl_branch.id = tbl_messages_history.branch_id');
        $this->db->join('tbl_salon','tbl_salon.id = tbl_messages_history.salon_id');
        $this->db->where('tbl_messages_history.is_deleted', '0');
        $this->db->where('tbl_messages_history.send_on', '1');
        $this->db->where('tbl_messages_history.wp_gateway', '1');
		if($this->input->post('type') != ''){
            $this->db->where('tbl_messages_history.type', $this->input->post('type'));
        }
        if(!empty($ids)){
            $this->db->where_in('tbl_messages_history.id', $ids);
        }
		if($this->input->post('salon') != ''){
            $this->db->where('tbl_messages_history.salon_id', $this->input->post('salon'));
        }
		if($this->input->post('cron_id') != ''){
            $this->db->where('tbl_messages_history.cron_id', $this->input->post('cron_id'));
        }
        if($from != ""){       
            $this->db->where('DATE(tbl_messages_history.created_on) >=',date('Y-m-d',strtotime($from)));
        }
        if($to != ""){       
            $this->db->where('DATE(tbl_messages_history.created_on) <=', date('Y-m-d',strtotime($to)));
        }
            
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_messages_history.created_on', $search);
            $this->db->or_like('tbl_messages_history.content', $search);
            $this->db->or_like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->group_end();
        }
        
        $this->db->limit($length, $start);
        $this->db->order_by('tbl_messages_history.created_on', 'DESC');
        $result = $this->db->get('tbl_messages_history');
        return $result->result();
    } 
    
    public function get_employee_whatsapp_coins_report_count($search){
        $from = $this->input->post('from_date');
        $to = $this->input->post('to_date');
        $ids = $this->input->post('ids') != "" ? explode(',',$this->input->post('ids')) : [];
        $this->db->select('tbl_messages_history.*,tbl_salon_customer.dob, tbl_salon_customer.doa, tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon.salon_name,tbl_branch.branch_name');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_messages_history.send_customer');
        $this->db->join('tbl_branch','tbl_branch.id = tbl_messages_history.branch_id');
        $this->db->join('tbl_salon','tbl_salon.id = tbl_messages_history.salon_id');
        $this->db->where('tbl_messages_history.is_deleted', '0');
        $this->db->where('tbl_messages_history.send_on', '1');
        $this->db->where('tbl_messages_history.wp_gateway', '1');
		if($this->input->post('type') != ''){
            $this->db->where('tbl_messages_history.type', $this->input->post('type'));
        }
		if($this->input->post('branch') != ''){
            $this->db->where('tbl_messages_history.branch_id', $this->input->post('branch'));
        }
        if(!empty($ids)){
            $this->db->where_in('tbl_messages_history.id', $ids);
        }
		if($this->input->post('salon') != ''){
            $this->db->where('tbl_messages_history.salon_id', $this->input->post('salon'));
        }
		if($this->input->post('cron_id') != ''){
            $this->db->where('tbl_messages_history.cron_id', $this->input->post('cron_id'));
        }
        if($from != ""){       
            $this->db->where('DATE(tbl_messages_history.created_on) >=',date('Y-m-d',strtotime($from)));
        }
        if($to != ""){       
            $this->db->where('DATE(tbl_messages_history.created_on) <=', date('Y-m-d',strtotime($to)));
        }
            
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_messages_history.created_on', $search);
            $this->db->or_like('tbl_messages_history.content', $search);
            $this->db->or_like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->group_end();
        }

        $this->db->order_by('tbl_messages_history.id', 'DESC');
		$result = $this->db->get('tbl_messages_history');
		return $result->num_rows();
	}
    
    public function get_notification_report_data_ajx($length, $start, $search) {
        $from = $this->input->post('from_date');
        $to = $this->input->post('to_date');
        $ids = $this->input->post('ids') != "" ? explode(',',$this->input->post('ids')) : [];
        $this->db->select('tbl_customer_notifications.*,tbl_salon_customer.dob, tbl_salon_customer.doa, tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon.salon_name,tbl_branch.branch_name');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_customer_notifications.send_customer');
        $this->db->join('tbl_branch','tbl_branch.id = tbl_customer_notifications.branch_id');
        $this->db->join('tbl_salon','tbl_salon.id = tbl_customer_notifications.salon_id');
        $this->db->where('tbl_customer_notifications.is_deleted', '0');
		if($this->input->post('type') != ''){
            $this->db->where('tbl_customer_notifications.type', $this->input->post('type'));
        }
        if(!empty($ids)){
            $this->db->where_in('tbl_customer_notifications.id', $ids);
        }
		if($this->input->post('salon') != ''){
            $this->db->where('tbl_customer_notifications.salon_id', $this->input->post('salon'));
        }
		if($this->input->post('cron_id') != ''){
            $this->db->where('tbl_customer_notifications.cron_id', $this->input->post('cron_id'));
        }
        if($from != ""){       
            $this->db->where('DATE(tbl_customer_notifications.created_on) >=',date('Y-m-d',strtotime($from)));
        }
        if($to != ""){       
            $this->db->where('DATE(tbl_customer_notifications.created_on) <=', date('Y-m-d',strtotime($to)));
        }
            
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_customer_notifications.created_on', $search);
            $this->db->or_like('tbl_customer_notifications.content', $search);
            $this->db->or_like('tbl_customer_notifications.title', $search);
            $this->db->or_like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->group_end();
        }
        
        $this->db->limit($length, $start);
        $this->db->order_by('tbl_customer_notifications.created_on', 'DESC');
        $result = $this->db->get('tbl_customer_notifications');
        return $result->result();
    } 
    
    public function get_notification_report_data_ajx_count($search){
        $from = $this->input->post('from_date');
        $to = $this->input->post('to_date');
        $ids = $this->input->post('ids') != "" ? explode(',',$this->input->post('ids')) : [];
        $this->db->select('tbl_customer_notifications.*,tbl_salon_customer.dob, tbl_salon_customer.doa, tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon.salon_name,tbl_branch.branch_name');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_customer_notifications.send_customer');
        $this->db->join('tbl_branch','tbl_branch.id = tbl_customer_notifications.branch_id');
        $this->db->join('tbl_salon','tbl_salon.id = tbl_customer_notifications.salon_id');
        $this->db->where('tbl_customer_notifications.is_deleted', '0');
		if($this->input->post('type') != ''){
            $this->db->where('tbl_customer_notifications.type', $this->input->post('type'));
        }
        if(!empty($ids)){
            $this->db->where_in('tbl_customer_notifications.id', $ids);
        }
		if($this->input->post('salon') != ''){
            $this->db->where('tbl_customer_notifications.salon_id', $this->input->post('salon'));
        }
		if($this->input->post('cron_id') != ''){
            $this->db->where('tbl_customer_notifications.cron_id', $this->input->post('cron_id'));
        }
        if($from != ""){       
            $this->db->where('DATE(tbl_customer_notifications.created_on) >=',date('Y-m-d',strtotime($from)));
        }
        if($to != ""){       
            $this->db->where('DATE(tbl_customer_notifications.created_on) <=', date('Y-m-d',strtotime($to)));
        }
            
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_customer_notifications.created_on', $search);
            $this->db->or_like('tbl_customer_notifications.content', $search);
            $this->db->or_like('tbl_customer_notifications.title', $search);
            $this->db->or_like('tbl_salon_customer.full_name', $search);
            $this->db->or_like('tbl_salon_customer.customer_phone', $search);
            $this->db->or_like('tbl_salon_customer.email', $search);
            $this->db->or_like('tbl_salon_customer.dob', $search);
            $this->db->group_end();
        }
        
        $this->db->order_by('tbl_customer_notifications.created_on', 'DESC');
        $result = $this->db->get('tbl_customer_notifications');
        return $result->num_rows();
	}
    
    public function get_trying_booking_report_data_ajx($length, $start, $search) {
        $result = $this->get_trying_bookings('', $this->input->post('from_date'), $this->input->post('to_date'), $length, $start, $search);
        return $result;
    } 
    
    public function get_trying_booking_report_data_ajx_count($search){
        $result = $this->get_trying_bookings('', $this->input->post('from_date'), $this->input->post('to_date'), '', '', $search);
        return count($result);
	}
    public function get_employee_short_break_ajx_list($length, $start, $search, $from_date = '', $to_date = '') {
        $this->db->select('tbl_stylist_short_breaks.*, tbl_salon_employee.whatsapp_number, tbl_salon_employee.full_name,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_salon_employee', 'tbl_stylist_short_breaks.stylist_id = tbl_salon_employee.id', 'left');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');
        $this->db->where('tbl_stylist_short_breaks.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_stylist_short_breaks.salon_id', $this->session->userdata('salon_id'));
        if($this->input->post('selected_employee') != ""){
            $this->db->where('tbl_stylist_short_breaks.stylist_id', $this->input->post('selected_employee'));
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_stylist_short_breaks.from) >=', date('Y-m-d',strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_stylist_short_breaks.to) <=', date('Y-m-d',strtotime($to_date)));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_salon_employee.whatsapp_number', $search);
            $this->db->or_like('tbl_emp_designation.designation', $search);
            $this->db->or_like('tbl_stylist_short_breaks.from', $search);
            $this->db->or_like('tbl_stylist_short_breaks.to', $search);
            $this->db->or_like('tbl_stylist_short_breaks.break_date', $search);
            $this->db->group_end();
        }
        $this->db->where('tbl_stylist_short_breaks.is_deleted', '0');
        $this->db->order_by('tbl_stylist_short_breaks.from', 'DESC');        
        $this->db->limit($length, $start);        
        $result = $this->db->get('tbl_stylist_short_breaks');
        return $result->result();
    }    
    
    public function get_employee_short_break_ajx_count($search, $from_date = '', $to_date = ''){
        $this->db->select('tbl_stylist_short_breaks.*, tbl_salon_employee.whatsapp_number, tbl_salon_employee.full_name,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_salon_employee', 'tbl_stylist_short_breaks.stylist_id = tbl_salon_employee.id', 'left');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');
        $this->db->where('tbl_stylist_short_breaks.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_stylist_short_breaks.salon_id', $this->session->userdata('salon_id'));
        if($this->input->post('selected_employee') != ""){
            $this->db->where('tbl_stylist_short_breaks.stylist_id', $this->input->post('selected_employee'));
        }
        if($from_date != ""){
            $this->db->where('DATE(tbl_stylist_short_breaks.from) >=', date('Y-m-d',strtotime($from_date)));
        }
        if($to_date != ""){
            $this->db->where('DATE(tbl_stylist_short_breaks.to) <=', date('Y-m-d',strtotime($to_date)));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_salon_employee.whatsapp_number', $search);
            $this->db->or_like('tbl_emp_designation.designation', $search);
            $this->db->or_like('tbl_stylist_short_breaks.from', $search);
            $this->db->or_like('tbl_stylist_short_breaks.to', $search);
            $this->db->or_like('tbl_stylist_short_breaks.break_date', $search);
            $this->db->group_end();
        }
        $this->db->where('tbl_stylist_short_breaks.is_deleted', '0');
        $this->db->order_by('tbl_stylist_short_breaks.from', 'DESC');        
        $result = $this->db->get('tbl_stylist_short_breaks');
        return $result->num_rows();
	}
    public function get_employee_ajx_list($length, $start, $search) {
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        if($this->input->post('selected_employee') != ""){
            $this->db->where('tbl_salon_employee.id', $this->input->post('selected_employee'));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_salon_employee.whatsapp_number', $search);
            $this->db->or_like('tbl_salon_employee.email', $search);
            $this->db->or_like('tbl_emp_designation.designation', $search);
            $this->db->or_like('tbl_salon_employee.salary', $search);
            $this->db->group_end();
        }
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');        
        $this->db->limit($length, $start);        
        $result = $this->db->get('tbl_salon_employee');
        return $result->result();
    }    
    
    public function get_employee_ajx_count($search){
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        if($this->input->post('selected_employee') != ""){
            $this->db->where('tbl_salon_employee.id', $this->input->post('selected_employee'));
        }
        if ($search !== "") {
            $this->db->group_start();
            $this->db->like('tbl_salon_employee.full_name', $search);
            $this->db->or_like('tbl_salon_employee.whatsapp_number', $search);
            $this->db->or_like('tbl_salon_employee.email', $search);
            $this->db->or_like('tbl_emp_designation.designation', $search);
            $this->db->or_like('tbl_salon_employee.salary', $search);
            $this->db->group_end();
        }
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->order_by('tbl_salon_employee.id', 'DESC');     
        $result = $this->db->get('tbl_salon_employee');
        return $result->num_rows();
	}
    
    public function add_employee_incentive_master(){
        $data = array(
            'branch_id' 		=> $this->session->userdata('branch_id'),
            'salon_id' 			=> $this->session->userdata('salon_id'),
            'level'             =>$this->input->post('level'),
            'start_amount'             =>$this->input->post('start_amount'),
            'end_amount'             =>$this->input->post('end_amount'),
            'incentive'             =>$this->input->post('incentive'),
            'per_or_flat'             =>$this->input->post('per_or_flat'),
        );

        $this->set_onboarding_status('16');

        if($this->input->post('id') == ""){
            $date = array(
                'created_on'  => date("Y-m-d H:i:s")
            );
            $new_arr =array_merge($data, $date);
            $this->db->where('is_deleted','0');
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('level',$this->input->post('level'));
            $exits_entry=$this->db->get('tbl_salon_employee_incentive')->row();
            if(!empty($exits_entry)){
                $this->db->where('id',$exits_entry->id);
                $this->db->update('tbl_salon_employee_incentive',$data);
                return 1;
            }else{
                $this->db->insert('tbl_salon_employee_incentive', $new_arr);
                return 0;
            }
           
        }else{
            $this->db->where('id', $this->input->post('id'));
            $this->db->update('tbl_salon_employee_incentive', $data);
            return 1;
        }
    } 
    public function get_employee_incetive(){
        $this->db->where('is_deleted','0');
        $this->db->where('id',$this->uri->segment(2));
        return $this->db->get('tbl_salon_employee_incentive')->row();
    }
    public function get_all_added_employee_incetive(){
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        return $this->db->get('tbl_salon_employee_incentive')->result();
    }
    public function get_single_salary_method($id){
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('id',$id);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        return $this->db->get('tbl_salon_employee_incentive')->row();
    }
    public function get_salary_method(){
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        // $this->db->where('id',$salary_method);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        return $this->db->get('tbl_salon_employee_incentive')->result();
    }
    public function check_unique_field($table,$column,$label,$id){
        $this->db->where('is_deleted', '0');
        if($id != ""){
            $this->db->where('id !=', $id);
        }
        $this->db->where($column, $label);
        $result = $this->db->get($table)->num_rows(); 

        if($result > 0){
            echo '1';
        }else{
            echo '0';
        }
    } 
    public function check_unique_shift(){
        $table = 'tbl_shift_master';
        $column = 'shift_name';
        $label = $this->input->post('label');
        $id = $this->input->post('id');

		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->check_unique_field($table,$column,$label,$id);
    } 
    public function get_services_ajax(){
        $category = $this->input->post('category');

        $this->db->where('id',$category);
        $single = $this->db->get('tbl_admin_service_category')->row();
        
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('category',$category);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_emp_service')->result();

        echo json_encode(array(
            'single' => $single,
            'result' => $result,
        ));
    }
    public function formatIndianNumber($num) {
        $explrestunits = "";
        if (strlen($num) > 3) {
            $lastthree = substr($num, strlen($num) - 3, strlen($num));
            $restunits = substr($num, 0, strlen($num) - 3);
            $restunits = (strlen($restunits) % 2 == 1) ? "0" . $restunits : $restunits;
            $expunit = str_split($restunits, 2);
            for ($i = 0; $i < sizeof($expunit); $i++) {
                // create array of 2 digits from first part
                // and then add the other part
                if ($i == 0) {
                    $explrestunits .= (int) $expunit[$i] . ",";
                } else {
                    $explrestunits .= $expunit[$i] . ",";
                }
            }
            $thecash = $explrestunits . $lastthree;
        } else {
            $thecash = $num;
        }
        return $thecash;
    }
    public function get_india_state(){
		$this->db->where('country_id','101');
		$result = $this->db->get('states');
		return $result->result();
	} 
    public function get_all_ready_memebership(){
        $this->db->where('is_deleted', '0');
        $this->db->where('id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_branch');
        $result = $result->row(); 

        $servicable_genders = [];
        if(!empty($result)){
            if($result->category == '1' || $result->category == '0'){
                $servicable_genders = [$result->category];
            }elseif($result->category == '2'){
                $servicable_genders = ['0','1'];
            }
        }
		if(!empty($servicable_genders)){
			$this->db->where_in('gender',$servicable_genders);
        }
		$this->db->where('is_deleted','0');
        if(isset($_GET['filter_gender']) && $_GET['filter_gender'] != ""){
            $this->db->where('gender', $_GET['filter_gender']);
        }
		$this->db->where('status','1');
		$result = $this->db->get('tbl_admin_memebership');
		return $result->result();
	}
    public function get_ready_membership_single_setup(){
		$this->db->where('id',$_GET['value']);
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$result = $this->db->get('tbl_admin_memebership');
		return $result->row();
	}
	public function get_single_membership(){
		$this->db->where('id',$_GET['edit']);
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$result = $this->db->get('tbl_memebership');
		return $result->row();
	}
    
	public function get_customer_last_any_service_booking($customer_id){
		$this->db->where('customer_name',$customer_id);
		$this->db->where('service_added_from','0');
		$this->db->where_in('service_status',['0','1']);
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
        $this->db->where('applied_flexible_slab !=', '');
		$this->db->order_by('id','desc');
		$this->db->limit(1);
		$result = $this->db->get('tbl_booking_services_details');
		return $result->row();
	}
	public function get_customer_last_service_booking($customer_id,$service_id){
		$this->db->where('customer_name',$customer_id);
		$this->db->where('service_id',$service_id);
		$this->db->where('service_added_from','0');
		$this->db->where_in('service_status',['0','1']);
		$this->db->where('is_deleted','0');
		$this->db->where('status','1');
		$this->db->order_by('id','desc');
		$this->db->limit(1);
		$result = $this->db->get('tbl_booking_services_details');
		return $result->row();
	}
	public function get_customer_last_service_product_booking($customer_id,$product_id){
        $this->db->select('tbl_booking_services_products_details.*');
        $this->db->join('tbl_booking_services_details', 'tbl_booking_services_products_details.booking_service_details_id = tbl_booking_services_details.id');
		$this->db->where('tbl_booking_services_products_details.customer_name',$customer_id);
		$this->db->where('tbl_booking_services_products_details.product_id',$product_id);
		$this->db->where('tbl_booking_services_products_details.product_added_from','0');
		$this->db->where_in('tbl_booking_services_details.service_status',['0','1']);
		$this->db->where('tbl_booking_services_products_details.is_deleted','0');
		$this->db->where('tbl_booking_services_products_details.status','1');
		$this->db->order_by('tbl_booking_services_products_details.id','desc');
		$this->db->limit(1);
		$result = $this->db->get('tbl_booking_services_products_details');
		return $result->row();
	}
	public function get_customer_last_product_booking($customer_id,$product_id){
        $this->db->select('tbl_only_product_booking_details.*');
		$this->db->where('tbl_only_product_booking_details.customer_name',$customer_id);
		$this->db->where('tbl_only_product_booking_details.product_id',$product_id);
		$this->db->where_in('tbl_only_product_booking_details.payment_status','1');
		$this->db->where('tbl_only_product_booking_details.is_deleted','0');
		$this->db->where('tbl_only_product_booking_details.status','1');
		$this->db->order_by('tbl_only_product_booking_details.id','desc');
		$this->db->limit(1);
		$result = $this->db->get('tbl_only_product_booking_details');
		return $result->row();
	}
    public function get_customer_criteria($id){
        $total_bookings = $this->get_customer_booking($id);
        if(count($total_bookings) <= 0){
            return '0';
        } else {
            $backend_setups = $this->get_backend_setups();
            $lost_customer_criteria_days = !empty($backend_setups) ? $backend_setups->lost_customer_criteria : '120';
            $lost_customer_cutoff_date = date('Y-m-d', strtotime("-$lost_customer_criteria_days days", strtotime(date('Y-m-d'))));

            $lost_customer_criteria_expire_days = $lost_customer_criteria_days + 30;
            $lost_customer_cutoff_stop_date = date('Y-m-d', strtotime("-$lost_customer_criteria_expire_days days", strtotime(date('Y-m-d'))));
            
            $last_booking = $this->get_customer_last_booking($id);
            // if($id == 9801){
            //     echo '<pre>'; print_r($last_booking); exit;
            // }
            if (!empty($last_booking)) {
                $last_booking_date = date('Y-m-d', strtotime($last_booking->service_start_date));
                if ($last_booking_date <= $lost_customer_cutoff_date && $last_booking_date > $lost_customer_cutoff_stop_date) {
                    return '2';
                }
            }
        }
        return '1';
    }
    public function get_customer_service_applied_discount($id,$service){
        $this->db->where('is_deleted','0');
        $this->db->where('id',$id);
        $customer = $this->db->get('tbl_salon_customer')->row();
        $is_discount_applied = '0';
        $discount_row_id = '';
        $customer_criteria = '';
        $discount_type = '';
        $discount_in = '';
        $discount_amount = '';
        $max_flexible = '';
        $min_flexible = '';
        if(!empty($customer)){
            $discount_row = array();
            if(date('m-d') === date('m-d', strtotime($customer->dob))){
                $customer_criteria = '3';

                $this->db->where('is_deleted','0');
                $this->db->where('discount_status','1');
                $this->db->where('branch_id',$customer->branch_id);
                $this->db->where('salon_id',$customer->salon_id);
                $this->db->where('marketing_type','3');
                $discount_row = $this->db->get('tbl_automated_marketing')->row();
            }

            if(empty($discount_row) && date('m-d') === date('m-d', strtotime($customer->doa))){
                $customer_criteria = '4';

                $this->db->where('is_deleted','0');
                $this->db->where('discount_status','1');
                $this->db->where('branch_id',$customer->branch_id);
                $this->db->where('salon_id',$customer->salon_id);
                $this->db->where('marketing_type','4');
                $discount_row = $this->db->get('tbl_automated_marketing')->row();
            }
            
            if(empty($discount_row)){                
                $customer_criteria = $this->get_customer_criteria($customer->id);
                $this->db->where('is_deleted','0');
                $this->db->where('discount_status','1');
                $this->db->where('branch_id',$customer->branch_id);
                $this->db->where('salon_id',$customer->salon_id);
                $this->db->where('marketing_type',$customer_criteria);
                $discount_row = $this->db->get('tbl_automated_marketing')->row();
            }

            if(!empty($discount_row)){
                if($discount_row->for_service == '1'){
                    $services = $discount_row->selected_service != "" && $discount_row->selected_service != null ? explode(',',$discount_row->selected_service) : [];
                    if(in_array($service,$services)){
                        $is_discount_applied = '1';
                        $discount_row_id = $discount_row->id;
                        $discount_type = $discount_row->discount_type == null || $discount_row->discount_type == "" ? '0' : $discount_row->discount_type;
                        $discount_in = $discount_row->discount_in;
                        $discount_amount = $discount_row->discount_amount;
                        $max_flexible = $discount_row->flexible_max;
                        $min_flexible = $discount_row->flexible_min;
                    }
                }else{
                    $is_discount_applied = '1';
                    $discount_row_id = $discount_row->id;
                    $discount_type = $discount_row->discount_type == null || $discount_row->discount_type == "" ? '0' : $discount_row->discount_type;
                    $discount_in = $discount_row->discount_in;
                    $discount_amount = $discount_row->discount_amount;
                    $max_flexible = $discount_row->flexible_max;
                    $min_flexible = $discount_row->flexible_min;
                }
            }

            // echo 'customer_criteria: ' . $customer_criteria;
        }

        return array(
            'is_discount_applied'   =>  $is_discount_applied,
            'discount_row_id'       =>  $is_discount_applied == '1' ? $discount_row_id : '',
            'customer_criteria'     =>  $is_discount_applied == '1' ? $customer_criteria : '',
            'discount_type'         =>  $is_discount_applied == '1' ? $discount_type : '',
            'discount_in'           =>  $is_discount_applied == '1' ? $discount_in : '',
            'discount_amount'       =>  $is_discount_applied == '1' && $discount_type == '0' ? (float)$discount_amount : 0.00,
            'max_flexible'          =>  $is_discount_applied == '1' && $discount_type == '1' ? (float)$max_flexible : 0.00,
            'min_flexible'          =>  $is_discount_applied == '1' && $discount_type == '1' ? (float)$min_flexible : 0.00,
        );
    }
    
    public function get_customer_product_applied_discount($id,$product){
        $this->db->where('is_deleted','0');
        $this->db->where('id',$id);
        $customer = $this->db->get('tbl_salon_customer')->row();
        $is_discount_applied = '0';
        $discount_row_id = '';
        $customer_criteria = '';
        $discount_type = '';
        $discount_in = '';
        $discount_amount = '';
        $max_flexible = '';
        $min_flexible = '';
        $employee_product_incentive = '';
        if(!empty($customer)){               
            $this->db->where('is_deleted','0');
            $this->db->where('discount_status','1');
            $this->db->where('branch_id',$customer->branch_id);
            $this->db->where('salon_id',$customer->salon_id);
            $this->db->where('marketing_type','5');
            $discount_row = $this->db->get('tbl_automated_marketing')->row();

            if(!empty($discount_row)){
                if($discount_row->for_product == '1'){
                    $products = $discount_row->selected_product != "" && $discount_row->selected_product != null ? explode(',',$discount_row->selected_product) : [];
                    if(in_array($product,$products)){
                        $is_discount_applied = '1';
                        $discount_row_id = $discount_row->id;
                        $discount_type = $discount_row->discount_type == null || $discount_row->discount_type == "" ? '0' : $discount_row->discount_type;
                        $discount_in = $discount_row->discount_in;
                        $discount_amount = $discount_row->discount_amount;
                        $max_flexible = $discount_row->flexible_max;
                        $min_flexible = $discount_row->flexible_min;
                    }
                }else{
                    $is_discount_applied = '1';
                    $discount_row_id = $discount_row->id;
                    $discount_type = $discount_row->discount_type == null || $discount_row->discount_type == "" ? '0' : $discount_row->discount_type;
                    $discount_in = $discount_row->discount_in;
                    $discount_amount = $discount_row->discount_amount;
                    $max_flexible = $discount_row->flexible_max;
                    $min_flexible = $discount_row->flexible_min;
                }
                $employee_product_incentive = $discount_row->employee_product_incentive;
            }
        }

        return array(
            'is_discount_applied'   =>  $is_discount_applied,
            'discount_row_id'       =>  $is_discount_applied == '1' ? $discount_row_id : '',
            'discount_type'         =>  $is_discount_applied == '1' ? $discount_type : '',
            'discount_in'           =>  $is_discount_applied == '1' ? $discount_in : '',
            'discount_amount'       =>  $is_discount_applied == '1' && $discount_type == '0' ? (float)$discount_amount : 0.00,
            'max_flexible'          =>  $is_discount_applied == '1' && $discount_type == '1' ? (float)$max_flexible : 0.00,
            'min_flexible'          =>  $is_discount_applied == '1' && $discount_type == '1' ? (float)$min_flexible : 0.00,
            'employee_product_incentive' =>  $employee_product_incentive != '' ? (float)$employee_product_incentive : 0.00,
        );
    }
    
    public function create_services_div_ajx(){
        $custID = $this->input->post('custID');        
        $gender = $this->input->post('gender');        
        $category = $this->input->post('category');
        $type = $this->input->post('type');
        $active_offers = $this->input->post('active_offers');

        if($gender != ""){
            $this->db->where('gender',$gender);
        }
        $this->db->where('id',$category);
        $single = $this->db->get('tbl_admin_service_category')->row();
        
		$this->db->select('tbl_salon_emp_service.*,tbl_admin_sub_category.sub_category as sub_category_name ,tbl_admin_sub_category.sub_category_marathi');
		$this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id=tbl_salon_emp_service.sub_category');
        $this->db->where('tbl_salon_emp_service.is_deleted','0');
        $this->db->where('tbl_salon_emp_service.status','1');
        $this->db->where('tbl_salon_emp_service.category',$category);
        if($gender != ""){
            $this->db->where('tbl_salon_emp_service.gender',$gender);
        }
		$this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_emp_service')->result();
        
        if(!empty($single)){
        ?>
        <div class="row single_service_details_append category_services_box" id="single_service_details_append_<?=$single->id;?>">
            <div class="row ">
                <div class="col-md-8 col-sm-12 col-xs-12">
                    <div class="title_c" id="category_name_t_<?=$single->id;?>"><?=$single->sup_category;?> | <?=$single->sup_category_marathi;?> <?=$single->gender == '0' ? '<small>(Male)</small>' : ($single->gender == '1' ? '<small>(Female)</small>' : ''); ?></div>
                </div>
                <?php
                    if($type == 'manual'){
                ?>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                    <a class="service-search-icon" onclick="removeCategory(<?=$single->id;?>)"><i class="fa fa-trash"></i></a>
                </div>
                <?php } ?>
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <input autocomplete="off" onkeyup="search_service(<?=$single->id;?>)" class="form-control ss-search" type="text" name="search_services" id="search_services_<?=$single->id;?>" value="" placeholder="Search services by service name"><a class="service-search-icon" href="#"><i class="fa fa-search"></i></a>
                </div>
            </div>
            <?php if(!empty($result)){ ?>
            <div class="all_services_div" id="all_services_div_<?=$single->id;?>">
                <?php 
                    if(!empty($result)){
                        foreach($result as $data){
                            $this->db->where_in('id', explode(',',$data->product));
                            $this->db->where('is_deleted', '0');
                            $this->db->where('status', '1');
                            $this->db->where('current_stock >', '0');
                            $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
                            $products = $this->db->get('tbl_product')->result();
                            $rewards = $data->reward_point;

                            if(!empty($active_offers)){
                                $count = count($active_offers);
                                $count = 0;
                            }else{
                                $count = 0;
                            }
                            $service_offer_discount = 0;
                            $single_offer_discount_type = '';
                            $single_offer_discount = '';
                            $applied_offer_id = '';
                            for ($i = 0; $i < $count; $i++) {
                                $single_offer_services = explode(',',$active_offers[$i]['service_name']);
                                if (in_array($data->id,$single_offer_services)) {
                                    $single_offer_discount_type = $active_offers[$i]['discount_in'];
                                    if($single_offer_discount_type == '0'){
                                        $service_offer_discount = ($data->final_price * $active_offers[$i]['discount']) / 100;
                                    }else{
                                        $service_offer_discount = $active_offers[$i]['discount'];
                                    }
                                    $single_offer_discount = $active_offers[$i]['discount'];
                                    $rewards = $active_offers[$i]['reward_point'];
                                    $applied_offer_id = $active_offers[$i]['id'];
                                    break;
                                }
                            }

                            $service_discount_rewards_type = '';
                            $discount_in = '';
                            $discount_type = '';
                            $discount_amount_value = '';
                            $discount_row_id = '';
                            $customer_criteria = '';
                            $is_discount_applied = '0';

                            $discount_text = '';
                            $discount_amount = 0;
                            $slab_increment = '5';
                            $slab_consider = '';
                            $min_slab = '';
                            $max_slab = '';

                            $rewards_text = '';
                            $rewards_discount_amount = 0;
                            $rewards_slab_increment = '5';
                            $rewards_slab_consider = '';
                            $rewards_min_slab = '';
                            $rewards_max_slab = '';
                            $marketing_criteria = '';
                            $marketing_criteria_discount_text = '';

                            $service_applied_discount = $this->get_customer_service_applied_discount($custID,$data->id);
                            if($service_applied_discount['is_discount_applied'] == '1'){
                                $is_discount_applied = '1';
                                $discount_row_id = $service_applied_discount['discount_row_id'];
                                $customer_criteria = $service_applied_discount['customer_criteria'];
                                $discount_type = $service_applied_discount['discount_type'];
                                $discount_in = $service_applied_discount['discount_in'];
                                $discount_amount_value = (float)$service_applied_discount['discount_amount'];
                                $min_slab = $service_applied_discount['min_flexible'];
                                $max_slab = $service_applied_discount['max_flexible'];                                

                                if($customer_criteria == '0'){
                                    $marketing_criteria = 'New Client Benefits Applied: ';
                                    $marketing_criteria_discount_text = 'New Client Benefits';
                                }elseif($customer_criteria == '1'){
                                    $marketing_criteria = 'Regular Client Benefits Applied: ';
                                    $marketing_criteria_discount_text = 'Regular Client Benefits';
                                }elseif($customer_criteria == '2'){
                                    $marketing_criteria = 'Lost Client Benefits Applied: ';
                                    $marketing_criteria_discount_text = 'Lost Client Benefits';
                                }elseif($customer_criteria == '3'){
                                    $marketing_criteria = 'Birthday Benefits Applied: ';
                                    $marketing_criteria_discount_text = 'Birthday Benefits';
                                }elseif($customer_criteria == '4'){
                                    $marketing_criteria = 'Anniversary Benefits Applied: ';
                                    $marketing_criteria_discount_text = 'Anniversary Benefits';
                                }elseif($customer_criteria == '5'){
                                    $marketing_criteria = 'Products Marketing Benefits Applied: ';
                                    $marketing_criteria_discount_text = 'Products Marketing Benefits';
                                }

                                if($discount_type == '1'){    //Flexible
                                    $customer_last_service_booking = $this->get_customer_last_service_booking($custID,$data->id);
                                    if(!empty($customer_last_service_booking)){            
                                        if($customer_criteria == '1'){                             
                                            $prev_Applied_slab = $customer_last_service_booking->rewards_applied_flexible_slab;
                                        }else{
                                            $prev_Applied_slab = $customer_last_service_booking->applied_flexible_slab;
                                        }

                                        if($prev_Applied_slab != ""){
                                            $next_slab = $prev_Applied_slab + $slab_increment;
                                        }else{
                                            $next_slab = $min_slab + $slab_increment;
                                        }

                                        if($next_slab > $max_slab){
                                            $slab_consider = $min_slab;
                                        }else{
                                            $slab_consider = $next_slab;
                                        }
                                    }else{
                                        $slab_consider = $min_slab;
                                    }

                                    if($discount_in == '0'){  //percentage
                                        $discount_amount = ((float)$slab_consider * (float)$data->final_price) / 100;
                                        $discount_text = '<p style="color:#01a900;font-size:10px;">' . $marketing_criteria . '' . $slab_consider . '% Off</p>';
                                    }elseif($discount_in == '1'){ //flat
                                        $discount_amount = (float)$slab_consider;
                                        $discount_text = '<p style="color:#01a900;font-size:10px;">' . $marketing_criteria . 'Flat Rs. ' . $slab_consider . ' Off</p>';
                                    }
                                }elseif($discount_type == '0'){   //Fixed
                                    if($discount_in == '0'){  //percentage
                                        $discount_amount = ((float)$discount_amount_value * (float)$data->final_price) / 100;
                                        $discount_text = '<p style="color:#01a900;font-size:10px;">' . $marketing_criteria . '' . $discount_amount_value . '% Off</p>';
                                    }elseif($discount_in == '1'){ //flat
                                        $discount_amount = (float)$discount_amount_value;
                                        $discount_text = '<p style="color:#01a900;font-size:10px;">' . $marketing_criteria . 'Flat Rs. ' . $discount_amount_value . ' Off</p>';
                                    }
                                }
                            }

                            if($is_discount_applied == '1'){
                                if($customer_criteria == '1'){  //for regular customer rewards are given
                                    $rewards_discount_amount = $discount_amount;
                                    $rewards_slab_increment = $slab_increment;
                                    $rewards_slab_consider = $slab_consider;
                                    $rewards_min_slab = $min_slab;
                                    $rewards_max_slab = $max_slab;
                                    $rewards_text = '<p style="color:#01a900;font-size:10px;">' . $marketing_criteria . 'Earn ' . $rewards_discount_amount . ' Reward Points</p>';

                                    $discount_text = '';
                                    $discount_amount = 0;
                                    $slab_increment = '5';
                                    $slab_consider = '';
                                    $min_slab = '';
                                    $max_slab = '';

                                    $service_discount_rewards_type = '1';   // rewards
                                }else{                                    
                                    $service_discount_rewards_type = '0';   // discount
                                }
                            }

                            $service_price_consider = $data->final_price - $discount_amount;
                            $original_price = $data->final_price;
                ?>
                <div class="row">
                    <div class="col-md-6 col-sm-12 col-xs-12 hoz_pack" id="package_service_name_<?=$data->id;?>">
                        <input onclick="setServicePrice(<?=$data->id;?>)" class="service_name_check" type="checkbox" name="service_name_check[]" id="service_name_check_<?=$data->id;?>" value="<?=$data->id;?>">
                        <div class="selected_service_name hoz_pack_span service_name_t_<?=$single->id;?>" id="service_name_t_<?=$data->id;?>">
                            <span><b><?=$data->sub_category_name;?>|<?=$data->sub_category_marathi;?></b></span>
                            <span><?=$data->service_name;?>|<?=$data->service_name_marathi;?></span>
                            <span> <?=$rewards_text;?></span>
                            <span> <?=$discount_text;?></span>
                           
                           
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 service_price_t" id="service_price_t_<?=$data->id;?>">
                        <?php if($original_price != $service_price_consider){ $is_offer_applied = '0'; ?>
                            <div class="service_price_title"  title="Offer Price"><b>Rs. <s><?=$original_price;?></s> <?=$service_price_consider;?></b></div>
                        <?php }else{ $is_offer_applied = '0'; ?>
                            <div class="service_price_title" ><b>Rs. <?=$original_price;?></b></div>
                        <?php } ?>
                        <input type="hidden" name="service_discount_in_<?=$data->id;?>" id="service_discount_in_<?=$data->id;?>" value="<?=$discount_in;?>">
                        <input type="hidden" name="service_discount_type_<?=$data->id;?>" id="service_discount_type_<?=$data->id;?>" value="<?=$discount_type;?>">
                        <input type="hidden" name="service_discount_value_<?=$data->id;?>" id="service_discount_value_<?=$data->id;?>" value="<?=$discount_amount_value;?>">

                        <input type="hidden" name="is_service_discount_applied_<?=$data->id;?>" id="is_service_discount_applied_<?=$data->id;?>" value="<?=$is_discount_applied;?>">
                        <input type="hidden" class="marketing_criteria_discount_text" name="marketing_criteria_discount_text_<?=$data->id;?>" id="marketing_criteria_discount_text_<?=$data->id;?>" value="<?=$marketing_criteria_discount_text;?>">
                        <input type="hidden" name="service_discount_rewards_type_<?=$data->id;?>" id="service_discount_rewards_type_<?=$data->id;?>" value="<?=$service_discount_rewards_type;?>">
                        <input type="hidden" name="service_discount_row_id_<?=$data->id;?>" id="service_discount_row_id_<?=$data->id;?>" value="<?=$discount_row_id;?>">
                        <input type="hidden" name="service_discount_customer_criteria_<?=$data->id;?>" id="service_discount_customer_criteria_<?=$data->id;?>" value="<?=$customer_criteria;?>">

                        <input type="hidden" name="service_discount_slab_min_<?=$data->id;?>" id="service_discount_slab_min_<?=$data->id;?>" value="<?=$min_slab;?>">
                        <input type="hidden" name="service_discount_slab_max_<?=$data->id;?>" id="service_discount_slab_max_<?=$data->id;?>" value="<?=$max_slab;?>">
                        <input type="hidden" name="service_slab_increment_<?=$data->id;?>" id="service_slab_increment_<?=$data->id;?>" value="<?=$slab_increment;?>">
                        <input type="hidden" name="service_applied_flexible_slab_<?=$data->id;?>" id="service_applied_flexible_slab_<?=$data->id;?>" value="<?=$slab_consider;?>">
                        <input type="hidden" name="service_received_discount_<?=$data->id;?>" id="service_received_discount_<?=$data->id;?>" value="<?=$discount_amount;?>">
                        
                        <input type="hidden" name="service_rewards_discount_slab_min_<?=$data->id;?>" id="service_rewards_discount_slab_min_<?=$data->id;?>" value="<?=$rewards_min_slab;?>">
                        <input type="hidden" name="service_rewards_discount_slab_max_<?=$data->id;?>" id="service_rewards_discount_slab_max_<?=$data->id;?>" value="<?=$rewards_max_slab;?>">
                        <input type="hidden" name="service_rewards_slab_increment_<?=$data->id;?>" id="service_rewards_slab_increment_<?=$data->id;?>" value="<?=$rewards_slab_increment;?>">
                        <input type="hidden" name="service_rewards_applied_flexible_slab_<?=$data->id;?>" id="service_rewards_applied_flexible_slab_<?=$data->id;?>" value="<?=$rewards_slab_consider;?>">
                        <input type="hidden" name="service_rewards_received_discount_<?=$data->id;?>" id="service_rewards_received_discount_<?=$data->id;?>" value="<?=$rewards_discount_amount;?>">

                        <input type="hidden" name="service_original_price_<?=$data->id;?>" id="service_original_price_<?=$data->id;?>" value="<?=$original_price;?>">
                        <input type="hidden" name="applied_offer_id_<?=$data->id;?>" id="applied_offer_id_<?=$data->id;?>" value="<?=$applied_offer_id;?>">
                        <input type="hidden" name="is_service_offer_applied_<?=$data->id;?>" id="is_service_offer_applied_<?=$data->id;?>" value="<?=$is_offer_applied;?>">
                        <input type="hidden" name="service_offer_discount_<?=$data->id;?>" id="service_offer_discount_<?=$data->id;?>" value="<?=$single_offer_discount;?>">
                        <input type="hidden" name="service_offer_discount_type_<?=$data->id;?>" id="service_offer_discount_type_<?=$data->id;?>" value="<?=$single_offer_discount_type;?>">
                        <input type="hidden" name="service_offer_discount_amount_<?=$data->id;?>" id="service_offer_discount_amount_<?=$data->id;?>" value="<?=$service_offer_discount;?>">

                        <input type="hidden" name="service_added_from_<?=$data->id;?>" id="service_added_from_<?=$data->id;?>" value="<?=$type;?>">
                        <input type="hidden" name="service_duration_<?=$data->id;?>" id="service_duration_<?=$data->id;?>" value="<?=$data->service_duration;?>">
                        <input type="hidden" name="service_price_<?=$data->id;?>" id="service_price_<?=$data->id;?>" value="<?=$service_price_consider;?>">
                        <input type="hidden" name="service_name_<?=$data->id;?>" id="service_name_<?=$data->id;?>" value="<?=$data->service_name;?>">
                        <input type="hidden" name="service_rewards_hidden_<?=$data->id;?>" id="service_rewards_hidden_<?=$data->id;?>" value="<?=$rewards;?>">
                    </div>
                    <div class="col-md-2 col-sm-12 col-xs-12 text-center" id="service_product_model_<?=$data->id;?>">
                        <button type="button" class="product_model_a" id="product_modal_button_<?=$data->id;?>" data-toggle="modal" data-target="#exampleModal_<?=$data->id;?>" onclick="showPopup('exampleModal_<?=$data->id;?>')">
                            <span id="selected_product_<?=$data->id;?>">0</span>/<?=count($products);?>
                        </button>                                 
                        <div class="modal fade" style="background-color: #00000080;" id="exampleModal_<?=$data->id;?>" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel_<?=$data->id;?>" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLabel_<?=$data->id;?>"><?=$data->service_name;?> Products:</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="float:none !important; position:absolute;right:10px;top:10px;" onclick="closePopup('exampleModal_<?=$data->id;?>')">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <?php if(!empty($products)){ $button_text = 'Save'; ?>
                                        <table class="table" style="width:100%;">
                                            <thead>
                                                <tr>
                                                    <th>Select</th>
                                                    <th>Product</th>
                                                    <th>Price <small>(In INR)</small></th>
                                                </tr>
                                            <thead>
                                            <tbody>
                                            <?php 
                                                if(!empty($products)){
                                                    foreach($products as $products_result){  
                                                        $discount_in = $products_result->discount_in;
                                                        $discount = $products_result->discount != "" ? (float)$products_result->discount : 0;
                                                        $selling_price = $products_result->selling_price != "" ? (float)$products_result->selling_price : 0.00;
                                                        if($discount_in == '0'){
                                                            $selling_price = $selling_price - ($selling_price * $discount) / 100;
                                                        }elseif($discount_in == '1'){
                                                            $selling_price = $selling_price - $discount;
                                                        }else{
                                                            $selling_price = $selling_price;
                                                        }                                                        

                                                        $product_discount_in = '';
                                                        $product_discount_type = '';
                                                        $product_discount_amount_value = '';
                                                        $product_discount_row_id = '';
                                                        $is_product_discount_applied = '0';

                                                        $product_discount_text = '';
                                                        $product_discount_amount = 0;
                                                        $product_slab_increment = '5';
                                                        $product_slab_consider = '';
                                                        $product_min_slab = '';
                                                        $product_max_slab = '';

                                                        $product_applied_discount = $this->get_customer_product_applied_discount($custID,$products_result->id);
                                                        if($product_applied_discount['is_discount_applied'] == '1'){
                                                            $is_product_discount_applied = '1';
                                                            $product_discount_row_id = $product_applied_discount['discount_row_id'];
                                                            $product_discount_type = $product_applied_discount['discount_type'];
                                                            $product_discount_in = $product_applied_discount['discount_in'];
                                                            $product_discount_amount_value = (float)$product_applied_discount['discount_amount'];
                                                            $product_min_slab = $product_applied_discount['min_flexible'];
                                                            $product_max_slab = $product_applied_discount['max_flexible'];
                                                            if($product_discount_type == '1'){    //Flexible
                                                                $customer_last_service_product_booking = $this->get_customer_last_service_product_booking($custID,$products_result->id);
                                                                if(!empty($customer_last_service_product_booking)){      
                                                                    $prev_Applied_product_slab = $customer_last_service_product_booking->product_applied_flexible_slab;

                                                                    if($prev_Applied_product_slab != ""){
                                                                        $next_product_slab = $prev_Applied_product_slab + $product_slab_increment;
                                                                    }else{
                                                                        $next_product_slab = $product_min_slab + $product_slab_increment;
                                                                    }

                                                                    if($next_product_slab > $product_max_slab){
                                                                        $product_slab_consider = $product_min_slab;
                                                                    }else{
                                                                        $product_slab_consider = $next_product_slab;
                                                                    }
                                                                }else{
                                                                    $product_slab_consider = $product_min_slab;
                                                                }

                                                                if($product_discount_in == '0'){  //percentage
                                                                    $product_discount_amount = ((float)$product_slab_consider * (float)$selling_price) / 100;
                                                                    $product_discount_text = '<p style="color:#01a900;font-size:10px;">' . $product_slab_consider . '% Off</p>';
                                                                }elseif($product_discount_in == '1'){ //flat
                                                                    $product_discount_amount = (float)$product_slab_consider;
                                                                    $product_discount_text = '<p style="color:#01a900;font-size:10px;">Flat Rs. ' . $product_slab_consider . ' Off</p>';
                                                                }
                                                            }elseif($product_discount_type == '0'){   //Fixed
                                                                if($product_discount_in == '0'){  //percentage
                                                                    $product_discount_amount = ((float)$product_discount_amount_value * (float)$selling_price) / 100;
                                                                    $product_discount_text = '<p style="color:#01a900;font-size:10px;">' . $product_discount_amount_value . '% Off</p>';
                                                                }elseif($product_discount_in == '1'){ //flat
                                                                    $product_discount_amount = (float)$product_discount_amount_value;
                                                                    $product_discount_text = '<p style="color:#01a900;font-size:10px;">Flat Rs. ' . $product_discount_amount_value . ' Off</p>';
                                                                }
                                                            }
                                                        }

                                                        $service_product_price_consider = $selling_price - $product_discount_amount;
                                                        $original_product_price = $selling_price;
                                            ?>                                            
                                            <input type="hidden" name="product_discount_in_<?=$data->id;?>_<?=$products_result->id;?>" id="product_discount_in_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_discount_in;?>">
                                            <input type="hidden" name="product_discount_type_<?=$data->id;?>_<?=$products_result->id;?>" id="product_discount_type_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_discount_type;?>">
                                            <input type="hidden" name="product_discount_value_<?=$data->id;?>_<?=$products_result->id;?>" id="product_discount_value_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_discount_amount_value;?>">

                                            <input type="hidden" name="is_product_discount_applied_<?=$data->id;?>_<?=$products_result->id;?>" id="is_product_discount_applied_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$is_product_discount_applied;?>">
                                            <input type="hidden" name="product_discount_row_id_<?=$data->id;?>_<?=$products_result->id;?>" id="product_discount_row_id_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_discount_row_id;?>">

                                            <input type="hidden" name="product_discount_slab_min_<?=$data->id;?>_<?=$products_result->id;?>" id="product_discount_slab_min_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_min_slab;?>">
                                            <input type="hidden" name="product_discount_slab_max_<?=$data->id;?>_<?=$products_result->id;?>" id="product_discount_slab_max_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_max_slab;?>">
                                            <input type="hidden" name="product_slab_increment_<?=$data->id;?>_<?=$products_result->id;?>" id="product_slab_increment_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_slab_increment;?>">
                                            <input type="hidden" name="product_applied_flexible_slab_<?=$data->id;?>_<?=$products_result->id;?>" id="product_applied_flexible_slab_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_slab_consider;?>">
                                            <input type="hidden" name="product_received_discount_<?=$data->id;?>_<?=$products_result->id;?>" id="product_received_discount_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$product_discount_amount;?>">
                                            <tr>
                                                <th><input disabled class="product_checkbox_<?=$data->id;?>" onclick="setServiceProductPrice(<?=$data->id;?>,<?=$products_result->id;?>)" type="checkbox" name="product_checkbox_<?=$data->id;?>[]" id="product_checkbox_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$products_result->id;?>"></th>
                                                <th>
                                                    <?=$products_result->product_name;?>
                                                    <?=$product_discount_text;?>
                                                </th>
                                                <th>                                                    
                                                    <?php if($original_product_price != $service_product_price_consider){ ?>
                                                        <div class="service_price_title"  title="Offer Price"><b>Rs. <s><?=$original_product_price;?></s> <?=$service_product_price_consider;?></b></div>
                                                    <?php }else{ ?>
                                                        <div class="service_price_title" ><b>Rs. <?=$original_product_price;?></b></div>
                                                    <?php } ?>
                                                </th>
                                                <input type="hidden" class="product_price_<?=$data->id;?>" name="product_added_from_<?=$data->id;?>_<?=$products_result->id;?>" id="product_added_from_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$type;?>">
                                                <input type="hidden" class="product_price_<?=$data->id;?>" name="product_original_price_<?=$data->id;?>_<?=$products_result->id;?>" id="product_original_price_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$original_product_price;?>">
                                                <input type="hidden" class="product_price_<?=$data->id;?>" name="product_price_<?=$data->id;?>_<?=$products_result->id;?>" id="product_price_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$service_product_price_consider;?>">
                                                <input type="hidden" class="product_name_<?=$data->id;?>" name="product_name_<?=$data->id;?>_<?=$products_result->id;?>" id="product_name_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$products_result->product_name;?>">
                                            </tr>
                                            <?php }} ?>
                                            </tbody>
                                        </table>
                                        <?php }else{ $button_text = 'Close'; ?>
                                        <table class="table" style="width:100%;">
                                            <tbody>
                                                <tr>
                                                    <td colspan=3 style="text-align:center;border: none;font-size:12px;color:red;"><b>Products not available</b ></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                        <?php } ?>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="closePopup('exampleModal_<?=$data->id;?>')"><?=$button_text;?></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <?php }} ?>
            </div>
            <?php }else{ ?>
                <div class="all_services_div">
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <label class="error noserviceavl" >Services not available</label>
                        </div>
                    </div>
                </div>
            <?php } ?>
        </div>
        <?php }
    }
    
    public function create_product_div_ajx(){
        $customer_id = $this->input->post('customer_id');
        $category = $this->input->post('category');
        $selected_booking = $this->input->post('selected_booking');
        $this->db->where('id',$selected_booking);
        $single_booking = $this->db->get('tbl_new_booking')->row(); 
        $single_booking_products = [];
        if(!empty($single_booking)){
            $single_booking_products = $single_booking->products != '' ? explode(',',$single_booking->products) : [];
        }

        $this->db->where('id',$category);
        $single = $this->db->get('tbl_product_category')->row();
        
        if(!empty($single_booking_products)){
            $this->db->where_not_in('id',$single_booking_products);
        }
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('product_category',$category);
        // $this->db->where('current_stock >','0');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product')->result();

        if(!empty($single)){
        ?>
        <div class="row single_service_details_append category_services_box" id="single_product_details_append_<?=$single->id;?>">
            <div class="row ">
                <div class="col-md-8 col-sm-12 col-xs-12">
                    <div class="title_c" id="category_name_t_<?=$single->id;?>"><?=$single->product_category;?> | <?=$single->product_category_marathi;?></div>
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                    <a class="service-search-icon" onclick="removeCategory(<?=$single->id;?>)"><i class="fa fa-trash"></i></a>
                </div>
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <input autocomplete="off" onkeyup="search_product(<?=$single->id;?>)" class="form-control ss-search" type="text" name="search_services" id="search_services_<?=$single->id;?>" value="" placeholder="Search product by product name"><a class="service-search-icon" href="#"><i class="fa fa-search"></i></a>
                </div>
            </div>
            <?php if(!empty($result)){ ?>
            <div class="all_services_div" id="all_services_div_<?=$single->id;?>">
                <?php 
                    if(!empty($result)){
                        foreach($result as $data){
                            $selling_price = (float)$data->selling_price;

                            $product_discount_in = '';
                            $product_discount_type = '';
                            $product_discount_amount_value = '';
                            $product_discount_row_id = '';
                            $is_product_discount_applied = '0';

                            $product_discount_text = '';
                            $product_discount_amount = 0;
                            $product_slab_increment = '5';
                            $product_slab_consider = '';
                            $product_min_slab = '';
                            $product_max_slab = '';
                            $employee_product_incentive = '';

                            $product_applied_discount = $this->Salon_model->get_customer_product_applied_discount($customer_id,$data->id);
                            if($product_applied_discount['is_discount_applied'] == '1'){
                                $is_product_discount_applied = '1';
                                $product_discount_row_id = $product_applied_discount['discount_row_id'];
                                $product_discount_type = $product_applied_discount['discount_type'];
                                $product_discount_in = $product_applied_discount['discount_in'];
                                $product_discount_amount_value = (float)$product_applied_discount['discount_amount'];
                                $product_min_slab = $product_applied_discount['min_flexible'];
                                $product_max_slab = $product_applied_discount['max_flexible'];
                                $employee_product_incentive = $product_applied_discount['employee_product_incentive'];
                                if($product_discount_type == '1'){    //Flexible
                                    $customer_last_service_product_booking = $this->Salon_model->get_customer_last_service_product_booking($customer_id,$data->id);
                                    if(!empty($customer_last_service_product_booking)){      
                                        $prev_Applied_product_slab = $customer_last_service_product_booking->product_applied_flexible_slab;

                                        if($prev_Applied_product_slab != ""){
                                            $next_product_slab = $prev_Applied_product_slab + $product_slab_increment;
                                        }else{
                                            $next_product_slab = $product_min_slab + $product_slab_increment;
                                        }

                                        if($next_product_slab > $product_max_slab){
                                            $product_slab_consider = $product_min_slab;
                                        }else{
                                            $product_slab_consider = $next_product_slab;
                                        }
                                    }else{
                                        $product_slab_consider = $product_min_slab;
                                    }

                                    if($product_discount_in == '0'){  //percentage
                                        $product_discount_amount = ((float)$product_slab_consider * (float)$selling_price) / 100;
                                        $product_discount_text = '<p style="color:#01a900;font-size:10px;">' . $product_slab_consider . '% Off</p>';
                                    }elseif($product_discount_in == '1'){ //flat
                                        $product_discount_amount = (float)$product_slab_consider;
                                        $product_discount_text = '<p style="color:#01a900;font-size:10px;">Flat Rs. ' . $product_slab_consider . ' Off</p>';
                                    }
                                }elseif($product_discount_type == '0'){   //Fixed
                                    if($product_discount_in == '0'){  //percentage
                                        $product_discount_amount = ((float)$product_discount_amount_value * (float)$selling_price) / 100;
                                        $product_discount_text = '<p style="color:#01a900;font-size:10px;">' . $product_discount_amount_value . '% Off</p>';
                                    }elseif($product_discount_in == '1'){ //flat
                                        $product_discount_amount = (float)$product_discount_amount_value;
                                        $product_discount_text = '<p style="color:#01a900;font-size:10px;">Flat Rs. ' . $product_discount_amount_value . ' Off</p>';
                                    }
                                }
                            }

                            $service_product_price_consider = $selling_price - $product_discount_amount;
                            $original_product_price = $selling_price;
                ?>
                <input type="hidden" name="product_discount_in_<?=$data->id;?>" id="product_discount_in_<?=$data->id;?>" value="<?=$product_discount_in;?>">
                <input type="hidden" name="product_discount_type_<?=$data->id;?>" id="product_discount_type_<?=$data->id;?>" value="<?=$product_discount_type;?>">
                <input type="hidden" name="product_discount_value_<?=$data->id;?>" id="product_discount_value_<?=$data->id;?>" value="<?=$product_discount_amount_value;?>">

                <input type="hidden" name="is_product_discount_applied_<?=$data->id;?>" id="is_product_discount_applied_<?=$data->id;?>" value="<?=$is_product_discount_applied;?>">
                <input type="hidden" name="product_discount_row_id_<?=$data->id;?>" id="product_discount_row_id_<?=$data->id;?>" value="<?=$product_discount_row_id;?>">

                <input type="hidden" name="product_discount_slab_min_<?=$data->id;?>" id="product_discount_slab_min_<?=$data->id;?>" value="<?=$product_min_slab;?>">
                <input type="hidden" name="product_discount_slab_max_<?=$data->id;?>" id="product_discount_slab_max_<?=$data->id;?>" value="<?=$product_max_slab;?>">
                <input type="hidden" name="product_slab_increment_<?=$data->id;?>" id="product_slab_increment_<?=$data->id;?>" value="<?=$product_slab_increment;?>">
                <input type="hidden" name="product_applied_flexible_slab_<?=$data->id;?>" id="product_applied_flexible_slab_<?=$data->id;?>" value="<?=$product_slab_consider;?>">
                <input type="hidden" name="product_received_discount_<?=$data->id;?>" id="product_received_discount_<?=$data->id;?>" value="<?=$product_discount_amount;?>">
                <input type="hidden" name="employee_product_incentive_<?=$data->id;?>" id="employee_product_incentive_<?=$data->id;?>" value="<?=$employee_product_incentive;?>">
                                            
                <div class="row">
                    <div <?php if($data->current_stock > 0){ echo ''; }else{ echo 'title="Product Stock Not Available"'; }?> class="col-md-8 col-sm-12 col-xs-12" id="package_service_name_<?=$data->id;?>">
                        <input <?php if($data->current_stock > 0){ echo ''; }else{ echo 'disabled'; }?> onclick="setProductDetails(<?=$single->id;?>,<?=$data->id;?>)" class="service_name_check" type="checkbox" name="service_name_check[]" id="service_name_check_<?=$data->id;?>" value="<?=$single->id;?>@@@<?=$data->id;?>">
                        <div class="selected_service_name service_name_t_<?=$single->id;?>" id="service_name_t_<?=$data->id;?>"><?=$data->product_name;?><?=$product_discount_text;?></div>
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 service_price_t" id="service_price_t_<?=$data->id;?>">
                        <?php if($original_product_price != $service_product_price_consider){ ?>
                            <div class="service_price_title"  title="Offer Price"><b>Rs. <s><?=$original_product_price;?></s> <?=$service_product_price_consider;?></b></div>
                        <?php }else{ ?>
                            <div class="service_price_title" ><b>Rs. <?=$service_product_price_consider;?></b></div>
                        <?php } ?>
                        <input type="hidden" name="is_discount_applied_<?=$data->id;?>" id="is_discount_applied_<?=$data->id;?>" value="<?=$is_product_discount_applied;?>">
                        <input type="hidden" name="product_original_price_<?=$data->id;?>" id="product_original_price_<?=$data->id;?>" value="<?=$original_product_price;?>">
                        <input type="hidden" name="product_stock_<?=$data->id;?>" id="product_stock_<?=$data->id;?>" value="<?=$data->current_stock;?>">
                        <input type="hidden" name="product_price_<?=$data->id;?>" id="product_price_<?=$data->id;?>" value="<?=$service_product_price_consider;?>">
                        <input type="hidden" name="product_name_<?=$data->id;?>" id="product_name_<?=$data->id;?>" value="<?=$data->product_name;?>">
                    </div>
                </div>
                <?php }} ?>
            </div>
            <?php }else{ ?>
                <div class="all_services_div">
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <label class="error noserviceavl" >Products not available</label>
                        </div>
                    </div>
                </div>
            <?php } ?>
        </div>
        <?php
        }
    }
    public function check_customer_package_items_used_status($allocation_id,$customer,$package,$item_id,$item_type){
        $this->db->where('allocation_id',$allocation_id);
        $this->db->where('customer_name',$customer);
        $this->db->where('pacakge_id',$package);
        $this->db->where('is_deleted','0');
        $this->db->where('item_type',$item_type);
        $this->db->where('item_id',$item_id);
        $customer_package_details = $this->db->get('tbl_booking_package_detail_status')->row();
        if(!empty($customer_package_details)){
            if($customer_package_details->used_status == '0'){
                return '1@@'.$customer_package_details->id;
            }else{
                return '0@@'.$customer_package_details->id;
            }
        }else{
            return '1@@';
        }
    }
    public function check_is_unused_item_available($booking,$customer){
        $this->db->where('customer_name',$customer);
        $this->db->where('is_deleted','0');
        $this->db->where('used_status','0');
        $this->db->where('added_in_booking_id',$booking);
        $result = $this->db->get('tbl_booking_package_detail_status')->result();
        return $result;
    }
    public function get_customer_active_package_allocation($customer_id,$package){
        $this->db->where('customer_name',$customer_id);
        $this->db->where('package_id',$package);
        $this->db->where('is_deleted','0');
        $this->db->where('is_lapsed','0');
        $result = $this->db->get('tbl_customer_package_allocations')->row();
        return $result;
    }
    public function get_customer_booking_package_allocation($id){
		$this->db->select('tbl_customer_package_allocations.*, tbl_package.package_name, tbl_package.bg_color, tbl_package.text_color');
		$this->db->join('tbl_package', 'tbl_customer_package_allocations.package_id = tbl_package.id');
        $this->db->where('tbl_customer_package_allocations.id',$id);
        $this->db->where('tbl_customer_package_allocations.is_deleted','0');
        $this->db->where('tbl_customer_package_allocations.is_lapsed','0');
        $result = $this->db->get('tbl_customer_package_allocations')->result();
        return $result;
    }
    public function get_customer_all_active_package_allocation($customer_id){
		$this->db->select('tbl_customer_package_allocations.*, tbl_package.package_name, tbl_package.bg_color, tbl_package.text_color');
		$this->db->join('tbl_package', 'tbl_customer_package_allocations.package_id = tbl_package.id');
        $this->db->where('tbl_customer_package_allocations.customer_name',$customer_id);
        $this->db->where('tbl_customer_package_allocations.is_deleted','0');
        $this->db->where('tbl_customer_package_allocations.is_lapsed','0');
        $result = $this->db->get('tbl_customer_package_allocations')->result();
        return $result;
    }
    public function get_customer_active_package_services($customer_id,$allocation_id){
        $this->db->where('customer_name',$customer_id);
        $this->db->where('allocation_id',$allocation_id);
        $this->db->where('is_deleted','0');
        $this->db->where('item_type','0');
        $this->db->where('used_status','0');
        $result = $this->db->get('tbl_booking_package_detail_status')->result();
        return $result;
    }
    public function create_package_div_ajx(){
        $customer_id = $this->input->post('customer');
        $package = $this->input->post('package');
        $type = $this->input->post('type');

        $this->db->where('id',$package);
        $package = $this->db->get('tbl_package')->row();

        if($customer_id != ""){   
            if(!empty($package)){  
                $active_package_allocation = $this->get_customer_active_package_allocation($customer_id,$package->id);
                $this->db->where_in('id',explode(',',$package->service_name));
                $this->db->where('branch_id', $this->session->userdata('branch_id'));
                $this->db->where('salon_id', $this->session->userdata('salon_id'));
                $services = $this->db->get('tbl_salon_emp_service')->result();
                
                $this->db->where_in('id', explode(',',$package->product_name));
                $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
                $products = $this->db->get('tbl_product')->result();
            ?>
            <div class="row single_service_details_append" id="single_package_details_append_<?=$package->id;?>">
                <div class="row">
                    <div class="col-md-10 col-sm-12 col-xs-12">
                        <div class="title_c" id="package_id_<?=$package->id;?>">
                            <!-- <?=$package->package_name;?> -->
                            <button class="btn btn-sm" style="float:left; background-color:<?=$package->bg_color;?>; color:<?=$package->text_color?>"><?=$package->package_name;?></button>
                        </div>
                    </div>
                    <?php 
                        if(!empty($active_package_allocation)){ 
                            if($active_package_allocation->is_booking_done == '1'){ 
                                $original_price = $active_package_allocation->actual_price;
                                $package_price_to_consider = 0;
                            }else{
                                $original_price = $active_package_allocation->actual_price;
                                $package_price_to_consider = $active_package_allocation->package_amount;
                            }
                        }else{
                            $original_price = $package->actual_price;
                            $package_price_to_consider = $package->amount;
                        }
                    ?>
                    <div class="col-md-2 col-sm-12 col-xs-12">
                        <a style="float:right;" class="service-search-icon" onclick="removePackage(<?=$package->id;?>)"><i class="fa fa-times" style="color: red;"></i></a>
                    </div>
                    <div class="col-md-10 col-sm-12 col-xs-12">
                        <?php if($package_price_to_consider >= $original_price){ ?>
                            <div style="padding: 0px 8px !important; width: 35% !important;" class="title_c package_price_title" id="package_price_<?=$package->id;?>">Rs. <?= number_format($package_price_to_consider, 2); ?></div>
                        <?php }else{ ?>
                            <div style="padding: 0px 8px !important; width: 35% !important;" class="title_c package_price_title" id="package_price_<?=$package->id;?>">Rs. <s><?= number_format($original_price, 2); ?></s> <?= number_format($package_price_to_consider, 2); ?></div>
                        <?php } ?>
                        <input type="hidden" name="package_price_hidden_<?=$package->id;?>" id="package_price_hidden_<?=$package->id;?>" value="<?=$package_price_to_consider;?>">
                        <input type="hidden" name="package_name_hidden_<?=$package->id;?>" id="package_name_hidden_<?=$package->id;?>" value="<?=$package->package_name;?>">
                    </div>
                </div>
                <?php if(!empty($active_package_allocation)){ ?>
                <!-- <div class="row">
                    <div class="col-md-2 col-sm-12 col-xs-12">
                        <label class="label label-success">Active Package Available</label>
                    </div> -->
                    <input type="hidden" name="is_old_package" id="is_old_package" value="1">
                    <input type="hidden" name="old_package_allocation_id" id="old_package_allocation_id" value="<?=$active_package_allocation->id;?>">
                <!-- </div> -->
                <?php } ?>
                <?php if(!empty($services)){ ?>
                <div class="" id="all_package_services_div_<?=$package->id;?>">
                    <!-- <h5><b>Package Services</b></h5> -->
                    <?php 
                        if(!empty($services)){
                            foreach($services as $data){
                                if(!empty($active_package_allocation)){    
                                    $service_availability_status = $this->check_customer_package_items_used_status($active_package_allocation->id,$customer_id,$package->id,$data->id,'0');
                                    $is_available = explode('@@',$service_availability_status)[0];
                                    $old_id = explode('@@',$service_availability_status)[1];
                                }else{
                                    $is_available = '1';
                                    $old_id = '';
                                }
                                $package_products = $this->get_package_products($package->id,$data->id);                                
                    ?>
                    <div class="row">
                        <div class="col-md-10 col-sm-12 col-xs-12" id="package_service_<?=$data->id;?>">
                            <input <?php if(!empty($active_package_allocation)){ if($is_available == '1'){ echo ''; }else{ echo 'disabled'; }}else{ echo ''; } ?> onclick="setPackageService(<?=$package->id;?>,<?=$data->id;?>)" class="service_name_check" type="checkbox" name="package_service_name_check_<?=$package->id;?>[]" id="package_service_name_check_<?=$package->id;?>_<?=$data->id;?>" value="<?=$data->id;?>">
                            <div class="selected_service_name package_service_name_t_<?=$package->id;?>_<?=$data->id;?>" id="package_service_name_t_<?=$package->id;?>_<?=$data->id;?>"><?=$data->service_name;?>|<?=$data->service_name_marathi;?></div>
                            <input type="hidden" name="package_service_name_hidden_<?=$package->id;?>_<?=$data->id;?>" id="package_service_name_hidden_<?=$package->id;?>_<?=$data->id;?>" value="<?=$data->service_name;?>">
                            <input type="hidden" name="package_service_duration_<?=$package->id;?>_<?=$data->id;?>" id="package_service_duration_<?=$package->id;?>_<?=$data->id;?>" value="<?=$data->service_duration;?>">
                            <input type="hidden" name="package_service_rewards_hidden_<?=$package->id;?>_<?=$data->id;?>" id="package_service_rewards_hidden_<?=$package->id;?>_<?=$data->id;?>" value="<?=$data->reward_point;?>">
                            <input type="hidden" name="old_package_service_details_table_id_<?=$package->id;?>_<?=$data->id;?>" id="old_package_service_details_table_id_<?=$package->id;?>_<?=$data->id;?>" value="<?=$old_id;?>">
                        </div>                        
                        <div class="col-md-2 col-sm-12 col-xs-12" id="package_service_product_model_<?=$package->id;?>_<?=$data->id;?>">
                            <!-- <button type="button" class="product_model_a" id="package_product_modal_button_<?=$package->id;?>_<?=$data->id;?>" data-toggle="modal" data-target="#PackageProductModal_<?=$package->id;?>_<?=$data->id;?>" onclick="showPopup('PackageProductModal_<?=$package->id;?>_<?=$data->id;?>')">
                                <span id="selected_package_product_<?=$package->id;?>_<?=$data->id;?>">0</span>/<?=($package_products && !empty($package_products)) ? count($package_products) : '0';?>
                            </button>                                  -->
                            <div class="modal fade" style="background-color: #00000080;" id="PackageProductModal_<?=$package->id;?>_<?=$data->id;?>" tabindex="-1" role="dialog" aria-labelledby="PackageProductModalLabel_<?=$package->id;?>_<?=$data->id;?>" aria-hidden="true">
                                <div class="modal-dialog" role="document" 
                                >
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="PackageProductModalLabel_<?=$package->id;?>_<?=$data->id;?>"><?=$data->service_name;?> Products:</h5>
                                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="float:none !important; position:absolute;right:10px;top:10px;" onclick="closePopup('PackageProductModal_<?=$package->id;?>_<?=$data->id;?>')">
                                                <span aria-hidden="true">&times;</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            <?php 
                                            $package_products = array();
                                            if(!empty($package_products)){ $button_text = 'Save'; ?>
                                            <table class="table" style="width:100%;">
                                                <thead>
                                                    <tr>
                                                        <th>Select</th>
                                                        <th>Product</th>
                                                    </tr>
                                                <thead>
                                                <tbody>
                                                <?php 
                                                    if($package_products && !empty($package_products)){
                                                        foreach($package_products as $products_result){                                       
                                                ?>
                                                <tr>
                                                    <th><input disabled class="package_product_checkbox_<?=$package->id;?>_<?=$data->id;?>" onclick="setPackageServiceProduct(<?=$package->id;?>,<?=$data->id;?>,<?=$products_result->id;?>)" type="checkbox" name="package_product_name_check_<?=$package->id;?>_<?=$data->id;?>[]" id="package_product_name_check_<?=$package->id;?>_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$products_result->id;?>"></th>
                                                    <th><?=$products_result->product_name;?></th>
                                                    <input type="hidden" name="package_product_name_hidden_<?=$package->id;?>_<?=$data->id;?>_<?=$products_result->id;?>" id="package_product_name_hidden_<?=$package->id;?>_<?=$data->id;?>_<?=$products_result->id;?>" value="<?=$products_result->product_name;?>">
                                                </tr>
                                                <?php }} ?>
                                                </tbody>
                                            </table>
                                            <?php }else{ $button_text = 'Close'; ?>
                                            <table class="table" style="width:100%;">
                                                <tbody>
                                                    <tr>
                                                        <td colspan=3 style="text-align:center;border: none;font-size:12px;color:red;"><b>Products not available</b ></td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                            <?php } ?>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="closePopup('PackageProductModal_<?=$package->id;?>_<?=$data->id;?>')"><?=$button_text;?></button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <?php }} ?>
                </div>
                <?php }else{ ?>
                    <label class="error">Services not available</label>
                <?php } ?>
                <!-- <?php if(!empty($products)){ ?>
                <div class="" id="all_package_products_div_<?=$package->id;?>">
                    <h5><b>Package Products</b></h5>
                    <?php 
                        if(!empty($products)){
                            foreach($products as $data){                 
                                if(!empty($active_package_allocation)){    
                                    $product_availability_status = $this->check_customer_package_items_used_status($active_package_allocation->id,$customer_id,$package->id,$data->id,'1');
                                    $is_available = explode('@@',$product_availability_status)[0];
                                    $old_id = explode('@@',$product_availability_status)[1];
                                }else{
                                    $is_available = '1';
                                    $old_id = '';
                                }
                    ?>
                    <div class="row">
                        <div class="col-md-12 col-sm-12 col-xs-12" id="package_product_<?=$data->id;?>">
                            <input <?php if(!empty($active_package_allocation)){ if($is_available == '1'){ echo ''; }else{ echo 'disabled'; }}else{ echo ''; } ?> onclick="setPackageServiceProduct(<?=$package->id;?>,<?=$data->id;?>)" class="package_product_name_check" type="checkbox" name="package_product_name_check_<?=$package->id;?>[]" id="package_product_name_check_<?=$package->id;?>_<?=$data->id;?>" value="<?=$data->id;?>">
                            <div class="selected_service_name package_product_name_t_<?=$package->id;?>_<?=$data->id;?>" id="package_product_name_t_<?=$package->id;?>_<?=$data->id;?>"><?=$data->product_name;?></div>
                            <input type="hidden" name="old_package_product_details_table_id_<?=$package->id;?>_<?=$data->id;?>" id="old_package_product_details_table_id_<?=$package->id;?>_<?=$data->id;?>" value="<?=$old_id;?>">
                            <input type="hidden" name="package_product_name_hidden_<?=$package->id;?>_<?=$data->id;?>" id="package_product_name_hidden_<?=$package->id;?>_<?=$data->id;?>" value="<?=$data->product_name;?>">
                        </div>                        
                    </div>
                    <?php }} ?>
                </div>
                <?php }else{ ?>
                    <label class="error">Products not available</label>
                <?php } ?> -->
            </div>
            <?php
            }
        }else{ ?>
            <label class="error">Please select customer first</label>
        <?php }
    }
    public function get_package_products_all($package,$service,$salon_id,$branch_id){
        $this->db->where('tbl_package_products.salon_id', $salon_id);
        $this->db->where('tbl_package_products.branch_id', $branch_id);
        $this->db->where('tbl_package_products.tbl_package_id', $package);
        $this->db->where('tbl_package_products.service_id', $service);
        $single = $this->db->get('tbl_package_products')->row();
        if(!empty($single)){
            $products = explode(',',$single->product_ids);
            $this->db->where_in('id',$products);
            $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
            $products = $this->db->get('tbl_product')->result();
            return $products;
        }
        return false;
    }
    public function get_package_products($package,$service){
        $this->db->where('tbl_package_products.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_package_products.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_package_products.tbl_package_id', $package);
        $this->db->where('tbl_package_products.service_id', $service);
        $single = $this->db->get('tbl_package_products')->row();
        if(!empty($single)){
            $products = explode(',',$single->product_ids);
            $this->db->where_in('id',$products);
            $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
            $products = $this->db->get('tbl_product')->result();
            return $products;
        }
        return false;
    }
    public function get_package_products_single($package,$service){
        $this->db->where('tbl_package_products.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_package_products.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_package_products.tbl_package_id', $package);
        $this->db->where('tbl_package_products.service_id', $service);
        $single = $this->db->get('tbl_package_products')->row();
        return $single;
    }
    public function get_package_products_single_all($package,$service,$branch_id,$salon_id){
        $this->db->where('tbl_package_products.salon_id', $salon_id);
        $this->db->where('tbl_package_products.branch_id', $branch_id);
        $this->db->where('tbl_package_products.tbl_package_id', $package);
        $this->db->where('tbl_package_products.service_id', $service);
        $single = $this->db->get('tbl_package_products')->row();
        return $single;
    }
    public function set_store_booking_rules($branch_id,$salon_id){
        $store_type = $this->Salon_model->check_salon_type($branch_id,$salon_id);
        // echo $store_type; exit;
        $this->db->where('salon_id', $salon_id);
        $this->db->where('branch_id', $branch_id);
        $this->db->where('is_deleted', '0');
        $exist = $this->db->get('tbl_booking_rules')->row();
        if(!empty($exist)){
            if($exist->salon_type != $store_type){
                $this->db->where('type', $store_type);
                $this->db->where('is_deleted', '0');
                $single = $this->db->get('tbl_rules_setup')->row();
                if(!empty($single)){
                    $data = array(
                        'salon_id'                                  =>  $salon_id,
                        'branch_id'                                 =>  $branch_id,
                        'salon_type'                                =>  $store_type,
                        'employee_selection'                        =>  $single->employee_selection,
                        'slot_time'                                 =>  $single->slot_time,
                        'buffering_time'                            =>  $single->buffering_time,
                        'booking_rescheduling'                      =>  $single->booking_rescheduling,
                        'cancellation'                              =>  $single->cancellation,
                        'reward_point_cancellation'                 =>  $single->reward_point_cancellation,
                        'reward_point_cancellation_late_customer'   =>  $single->reward_point_cancellation_late_customer,
                        'booking_time_range'                        =>  $single->booking_time_range,
                        'max_booking_range_day'                     =>  $single->max_booking_range_day,
                        'booking_reminder_type'                     =>  $single->booking_reminder_type,
                        'availability_mode'                         =>  $single->availability_mode,
                    );
                    $this->db->where('salon_id', $salon_id);
                    $this->db->where('branch_id', $branch_id);
                    $this->db->where('id', $exist->id);
                    $this->db->update('tbl_booking_rules',$data);                    
                
                    $branch_array = array(
                        'salon_type'             =>  $store_type,
                        'salon_type_rules_id'    =>  $single->id,                    
                    );
                    $this->db->where('salon_id', $salon_id);
                    $this->db->where('id', $branch_id);
                    $this->db->update('tbl_branch',$branch_array);
                }
            }
        }else{
            $this->db->where('type', $store_type);
            $this->db->where('is_deleted', '0');
            $single = $this->db->get('tbl_rules_setup')->row();
            if(!empty($single)){
                $data = array(
                    'salon_id'                                  =>  $salon_id,
                    'branch_id'                                 =>  $branch_id,
                    'salon_type'                                =>  $store_type,
                    'employee_selection'                        =>  $single->employee_selection,
                    'slot_time'                                 =>  $single->slot_time,
                    'buffering_time'                            =>  $single->buffering_time,
                    'booking_rescheduling'                      =>  $single->booking_rescheduling,
                    'cancellation'                              =>  $single->cancellation,
                    'reward_point_cancellation'                 =>  $single->reward_point_cancellation,
                    'reward_point_cancellation_late_customer'   =>  $single->reward_point_cancellation_late_customer,
                    'booking_time_range'                        =>  $single->booking_time_range,
                    'max_booking_range_day'                     =>  $single->max_booking_range_day,
                    'booking_reminder_type'                     =>  $single->booking_reminder_type,
                    'availability_mode'                         =>  $single->availability_mode,
                );
                $date = array('created_on'=>date('Y-m-d H:i:s'));
                $new_array = array_merge($data,$date);
                $this->db->insert('tbl_booking_rules',$new_array);
                
                $branch_array = array(
                    'salon_type'             =>  $store_type,
                    'salon_type_rules_id'    =>  $single->id,                    
                );
                $this->db->where('salon_id', $salon_id);
                $this->db->where('id', $branch_id);
                $this->db->update('tbl_branch',$branch_array);
            }
        }
        return $store_type;
    }
    public function get_salon_booking_rules($branch_id,$salon_id){  
        $this->db->select('tbl_booking_rules.*,tbl_salon_type.type as salon_type_title');
        $this->db->join('tbl_salon_type','tbl_salon_type.id = tbl_booking_rules.salon_type');
        $this->db->where('tbl_booking_rules.salon_id', $salon_id);
        $this->db->where('tbl_booking_rules.branch_id', $branch_id);
        $this->db->where('tbl_booking_rules.is_deleted', '0');
        $rules = $this->db->get('tbl_booking_rules')->row();
        return $rules;
    }
    public function get_booking_rules(){       
        //new booking rule logic
        $this->db->select('tbl_booking_rules.*,tbl_salon_type.type as salon_type_title');
        $this->db->join('tbl_salon_type','tbl_salon_type.id = tbl_booking_rules.salon_type');
        $this->db->where('tbl_booking_rules.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_rules.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_rules.is_deleted', '0');
        $rules = $this->db->get('tbl_booking_rules')->row();
        return $rules;

        //old booking rule logic
        // $this->db->select('tbl_rules_setup.*');
        // $this->db->join('tbl_rules_setup','tbl_rules_setup.id = tbl_branch.salon_type_rules_id');
        // $this->db->where('tbl_branch.id', $this->session->userdata('branch_id'));
        // $this->db->where('tbl_branch.is_deleted', '0');
        // $this->db->where('tbl_rules_setup.is_deleted', '0');
        // $single = $this->db->get('tbl_branch')->row();
        // return $single;
    }
    public function get_booking_rules_all($branch_id,$salon_id){        
        // new booking rule logic
        $this->db->select('tbl_booking_rules.*,tbl_salon_type.type as salon_type_title');
        $this->db->join('tbl_salon_type','tbl_salon_type.id = tbl_booking_rules.salon_type');
        $this->db->where('tbl_booking_rules.salon_id', $salon_id);
        $this->db->where('tbl_booking_rules.branch_id', $branch_id);
        $this->db->where('tbl_booking_rules.is_deleted', '0');
        $rules = $this->db->get('tbl_booking_rules')->row();
        return $rules;

        // old booking rule logic
        // $this->db->select('tbl_rules_setup.*');
        // $this->db->join('tbl_rules_setup','tbl_rules_setup.id = tbl_branch.salon_type_rules_id');
        // $this->db->where('tbl_branch.id', $branch_id);
        // $this->db->where('tbl_branch.is_deleted', '0');
        // $this->db->where('tbl_rules_setup.is_deleted', '0');
        // $single = $this->db->get('tbl_branch')->row();
        // return $single;
    }
    public function get_salon_employee_single_booking_services($booking_id,$id){
        $date = date("Y-m-d H:i:s", strtotime(date('Y-m-d') . ' 00:00:00'));
        $this->db->select('tbl_booking_services_details.*,tbl_new_booking.amount_to_paid,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where('tbl_booking_services_details.booking_id',$booking_id);
        $this->db->where('tbl_booking_services_details.stylist_id',$id);
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where_in('tbl_booking_services_details.service_status',['0','3']);
        // $this->db->where('tbl_booking_services_details.service_from >', date('Y-m-d H:i:s'));
        $this->db->where('tbl_booking_services_details.service_from >', $date);
        $appointments = $this->db->get('tbl_booking_services_details')->result();
        
        if(!empty($appointments)){
            foreach($appointments as &$row){                
                $service = $row->service_id;
                $previous_stylist = $row->stylist_id;

                $selectedfrom = date('Y-m-d H:i:s', strtotime($row->service_from));
                $selectedto = date('Y-m-d H:i:s', strtotime($row->service_to));

                $selected_from_date = date('Y-m-d', strtotime($selectedfrom));

                $salon_employee_list = $this->get_all_salon_stylists_datewise($selected_from_date);

                $custom_array = array();
                $selected_stylist_id = null;

                if (!empty($salon_employee_list)) {
                    foreach ($salon_employee_list as $result) {
                        $short_break_flag = '0';
                        $break_flag = '1';
                        $shift_flag = '0';
                        $store_flag = '0';
                        $booking_flag = '1';
                        $is_service_available = '0';

                        $stylist_services = explode(',', $result->service_name);
                        if (in_array($service, $stylist_services)) {
                            $is_service_available = '1';
                        }

                        $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise($selectedfrom, $selectedto);
                        if ($is_stylist_available_storewise) {
                            $store_flag = '1';
                        }

                        $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d', strtotime($selectedfrom)));
                        if ($is_emergency) {
                            $is_emergency_flag = '1';
                        } else {
                            $is_emergency_flag = '0';
                        }

                        $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_shiftwise) {
                            $shift_flag = '1';
                        }

                        $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_breakwise) {
                            $break_flag = '0';
                        }

                        $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_short_breakwise) {
                            $short_break_flag = '1';
                        }

                        $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_bookingwise) {
                            $booking_flag = '0';
                        }

                        $leave_flag = $this->check_staff_is_on_leave($result->id, date('Y-m-d', strtotime($selectedfrom)));

                        $to_be_selected = '0';
                        if ($previous_stylist == $result->id) {
                            if ($is_service_available == '1' && $store_flag == '1' && $is_emergency_flag == '0' && $leave_flag == '0' && $shift_flag == '1' && $booking_flag == '0' && $break_flag == '0' && $short_break_flag == '1') {
                                $to_be_selected = '1';
                                $selected_stylist_id = $result->id;
                            }
                        }

                        // if ($is_service_available == '1' && $store_flag == '1' && $is_emergency_flag == '0' && $leave_flag == '0' && $shift_flag == '1' && $booking_flag == '0' && $break_flag == '0') {
                            $custom_array[] = array(
                                'is_service_available' => $is_service_available,
                                'is_shift_available' => $shift_flag,
                                'is_on_break' => $break_flag,
                                'is_booking_present' => $booking_flag,
                                'store_flag' => $store_flag,
                                'is_on_leave_flag' => $leave_flag,
                                'is_emergency_flag' => $is_emergency_flag,
                                'stylist_details' => $result,
                                'to_be_selected' => $to_be_selected,
                                'short_break_flag' => $short_break_flag,
                            );
                        // }
                    }

                    // If the previously selected stylist is not available, find another available stylist
                    if (is_null($selected_stylist_id)) {
                        foreach ($custom_array as &$stylist) {
                            if ($stylist['is_service_available'] == '1' && $stylist['store_flag'] == '1' && $stylist['is_emergency_flag'] == '0' && $stylist['is_on_leave_flag'] == '0' && $stylist['is_shift_available'] == '1' && $stylist['is_booking_present'] == '0' && $stylist['is_on_break'] == '0' && $stylist['short_break_flag'] == '1') {
                                $stylist['to_be_selected'] = '1';
                                $selected_stylist_id = $stylist['stylist_details']->id;
                                break;
                            }
                        }
                        unset($stylist); // Break reference to the last element
                    }
                }

                $row->stylists = $custom_array;
            }
        }
        return $appointments;
    }
    public function transfer_bookings(){
        $transfer_from = $this->input->post('transfer_from');
        if($transfer_from != ""){
            $booking_ids = $this->input->post('booking_ids');
            for($i=0;$i<count($booking_ids);$i++){
                $single_booking = $booking_ids[$i];
                $booking_service_details_ids = $this->input->post('booking_service_details_ids_' . $single_booking);
                for($j=0;$j<count($booking_service_details_ids);$j++){
                    $single_booking_service_details_id = $booking_service_details_ids[$j];
                    $this->db->where('id',$single_booking_service_details_id);
                    $this->db->where('booking_id',$single_booking);
                    $this->db->where('salon_id', $this->session->userdata('salon_id'));
                    $this->db->where('branch_id', $this->session->userdata('branch_id'));
                    $details = $this->db->get('tbl_booking_services_details')->row();
                    if(!empty($details)){
                        $transfer_to = $this->input->post('transfer_to_' . $single_booking . '_' . $single_booking_service_details_id);
                        if($transfer_to != ""){
                            $update_data = array(
                                'stylist_id'    =>  $transfer_to
                            );
                            $this->db->where('id',$single_booking_service_details_id);
                            $this->db->where('booking_id',$single_booking);
                            $this->db->where('salon_id', $this->session->userdata('salon_id'));
                            $this->db->where('branch_id', $this->session->userdata('branch_id'));
                            $this->db->update('tbl_booking_services_details',$update_data);

                            $update_history_data = array(
                                'booking_id'            =>  $single_booking,
                                'service_details_id'    =>  $single_booking_service_details_id,
                                'customer_id'           =>  $details->customer_name,
                                'salon_id'              =>  $this->session->userdata('salon_id'),
                                'branch_id'             =>  $this->session->userdata('branch_id'),
                                'transfer_from_id'      =>  $details->stylist_id,
                                'transfer_to_id'        =>  $transfer_to,
                                'service_id'            =>  $details->service_id,
                                'transfered_on'         =>  date('Y-m-d H:i:s'),
                                'created_on'            =>  date('Y-m-d H:i:s')
                            );
                            $this->db->insert('tbl_appointment_transfer_history',$update_history_data);
                        }
                    }
                }
            }
            return true;
        }else{
            return false;
        }
    }
    public function get_salon_employee_upcoming_appointments($id){
        $date = date("Y-m-d H:i:s", strtotime(date('Y-m-d') . ' 00:00:00'));
		$this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email,tbl_booking_services_details.service_date,tbl_booking_services_details.service_from,tbl_booking_services_details.service_to,tbl_booking_services_details.stylist_id,tbl_booking_services_details.service_id');
		$this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->join('tbl_booking_services_details','tbl_booking_services_details.booking_id = tbl_new_booking.id');
        $this->db->where('tbl_booking_services_details.stylist_id',$id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where_in('tbl_booking_services_details.service_status',['0','3']);
        $this->db->where('tbl_booking_services_details.service_from >', $date);
        $this->db->group_by('tbl_booking_services_details.booking_id');
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->order_by('tbl_booking_services_details.service_from','asc');
        $result = $this->db->get('tbl_new_booking')->result();
        return $result;
    }
    public function get_stylist_shifts($date,$exe){
        $booking_rules = $this->get_booking_rules();
        $timestamp = strtotime($date);        
        $dayOfWeek = date('l', $timestamp);

        $this->db->where('id', $exe);
        $single = $this->db->get('tbl_salon_employee')->row();

        if(!empty($booking_rules)){
            if(!empty($single)){
                $this->db->where('id', $single->shift);
                $this->db->where('salon_id',$single->salon_id);
                $this->db->where('branch_id',$single->branch_id);
                $prv_shift = $this->db->get('tbl_shift_master')->row();
                if(!empty($prv_shift)){
                    $column = '';
                    $from = '';
                    $to = '';
                    $break_from = '';
                    $break_to = '';

                    if($prv_shift->shift_type == '1'){
                        $today_date = date('Y-m-d');
                        $next_week_start = date('Y-m-d', strtotime('next Monday', strtotime($today_date)));
                        $next_week_end = date('Y-m-d', strtotime('next Sunday', strtotime($next_week_start)));  
                        if (date('Y-m-d', strtotime($date)) >= $next_week_start && date('Y-m-d', strtotime($date)) <= $next_week_end) {
                            $this->db->where('order >', $prv_shift->order);
                            $this->db->where('salon_id',$single->salon_id);
                            $this->db->where('branch_id',$single->branch_id);
                            $this->db->where('shift_type','1');
                            $this->db->order_by('order', 'ASC');
                            $this->db->limit(1);
                            $next_shift = $this->db->get('tbl_shift_master')->row();
                        
                            if (empty($next_shift)) {
                                $this->db->where('shift_type','1');
                                $this->db->where('salon_id',$single->salon_id);
                                $this->db->where('branch_id',$single->branch_id);
                                $this->db->order_by('order', 'ASC');
                                $this->db->limit(1);
                                $next_shift = $this->db->get('tbl_shift_master')->row();
                            }

                            if (!empty($next_shift)) {                                
                                $shift = $next_shift->id;
                                $shift_type = $next_shift->shift_type;
                            }else{
                                $shift = $single->shift;
                                $shift_type = $single->shift_type;
                            }
                        }else{
                            $shift = $single->shift;
                            $shift_type = $single->shift_type;
                        }
                    }else{
                        $shift = $single->shift;
                        $shift_type = $single->shift_type;
                    }

                    if($dayOfWeek == 'Monday'){
                        $column = 'is_monday_shift';
                        $from = 'monday_shift_from';
                        $to = 'monday_shift_to';
                        $break_from = 'monday_break_from';
                        $break_to = 'monday_break_to';
                    }elseif($dayOfWeek == 'Tuesday'){
                        $column = 'is_tuesday_shift';
                        $from = 'tuesday_shift_from';
                        $to = 'tuesday_shift_to';
                        $break_from = 'tuesday_break_from';
                        $break_to = 'tuesday_break_to';
                    }elseif($dayOfWeek == 'Wednesday'){
                        $column = 'is_wednesday_shift';
                        $from = 'wednesday_shift_from';
                        $to = 'wednesday_shift_to';
                        $break_from = 'wednesday_break_from';
                        $break_to = 'wednesday_break_to';
                    }elseif($dayOfWeek == 'Thursday'){
                        $column = 'is_thursday_shift';
                        $from = 'thursday_shift_from';
                        $to = 'thursday_shift_to';
                        $break_from = 'thursday_break_from';
                        $break_to = 'thursday_break_to';
                    }elseif($dayOfWeek == 'Friday'){
                        $column = 'is_friday_shift';
                        $from = 'friday_shift_from';
                        $to = 'friday_shift_to';
                        $break_from = 'friday_break_from';
                        $break_to = 'friday_break_to';
                    }elseif($dayOfWeek == 'Saturday'){
                        $column = 'is_saturday_shift';
                        $from = 'saturday_shift_from';
                        $to = 'saturday_shift_to';
                        $break_from = 'saturday_break_from';
                        $break_to = 'saturday_break_to';
                    }elseif($dayOfWeek == 'Sunday'){
                        $column = 'is_sunday_shift';
                        $from = 'sunday_shift_from';
                        $to = 'sunday_shift_to';
                        $break_from = 'sunday_break_from';
                        $break_to = 'sunday_break_to';
                    }

                    $this->db->where($column, '1');
                    $this->db->where('is_deleted', '0');
                    $this->db->where('is_bookings_allowed', '1');
                    $this->db->where('id',$shift);
                    $shift_details = $this->db->get('tbl_shift_master')->row();
                
                    if(!empty($shift_details)){
                        $shift_start_from = $shift_details->$from;
                        $shift_end_to = $shift_details->$to;
                        $shift_break_start_from = $shift_details->$break_from;
                        $shift_break_end_to = $shift_details->$break_to;

                        if($this->input->post('dashboard_calendar') == '1'){
                            if(date('Y-m-d', strtotime($date)) <= date('Y-m-d')){
                                $shift_end_to = date('H:i:s',strtotime(date('Y-m-d 23:59:59', strtotime($date))));
                            }
                        }
                        
                        return array(
                            'shift_id'          =>  $shift,
                            'shift_type'        =>  $shift_type,
                            'shift_from'        =>  $shift_start_from,
                            'shift_to'          =>  $shift_end_to,
                            'shift_break_from'  =>  $shift_break_start_from,
                            'shift_break_to'    =>  $shift_break_end_to,
                            'shift_name'        =>  $shift_details->shift_name
                        );
                    }else{
                        return array();
                    }
                }else{
                    return array();
                }
            }else{
                return array();
            }
        }else{
            return array();
        }
    }
    public function get_salon_working_hr_times($date,$salon_id,$branch_id){
        $timestamp = strtotime($date);        
        $dayOfWeek = date('l', $timestamp);
        if($dayOfWeek == 'Monday'){
            $column = 'is_monday';
            $from = 'from_monday';
            $to = 'to_monday';
        }elseif($dayOfWeek == 'Tuesday'){
            $column = 'is_tuesday';
            $from = 'from_tuesday';
            $to = 'to_tuesday';
        }elseif($dayOfWeek == 'Wednesday'){
            $column = 'is_wednesday';
            $from = 'from_wednesday';
            $to = 'to_wednesday';
        }elseif($dayOfWeek == 'Thursday'){
            $column = 'is_thursday';
            $from = 'from_thursday';
            $to = 'to_thursday';
        }elseif($dayOfWeek == 'Friday'){
            $column = 'is_friday';
            $from = 'from_friday';
            $to = 'to_friday';
        }elseif($dayOfWeek == 'Saturday'){
            $column = 'is_saturday';
            $from = 'from_saturday';
            $to = 'to_saturday';
        }elseif($dayOfWeek == 'Sunday'){
            $column = 'is_sunday';
            $from = 'from_sunday';
            $to = 'to_sunday';
        }

        $this->db->where($column, '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('salon_id',$salon_id);
        $this->db->where('branch_id',$branch_id);
        $shift_details = $this->db->get('tbl_booking_rules')->row();
    
        if(!empty($shift_details)){
            $shift_start_from = $shift_details->$from;
            $shift_end_to = $shift_details->$to;

            if($this->input->post('dashboard_calendar') == '1'){
                if(date('Y-m-d', strtotime($date)) <= date('Y-m-d')){
                    $shift_end_to = date('H:i:s',strtotime(date('Y-m-d 23:59:59', strtotime($date))));
                }
            }
            
            return array(
                'from'        =>  $shift_start_from,
                'to'          =>  $shift_end_to,
            );
        }else{
            return array();
        }
    }

    public function get_stylist_shifts_all($date,$exe,$branch_id,$salon_id){
        $booking_rules = $this->get_booking_rules_all($branch_id,$salon_id);
        
        $timestamp = strtotime($date);        
        $dayOfWeek = date('l', $timestamp);

        $this->db->where('id', $exe);
        $single = $this->db->get('tbl_salon_employee')->row();

        if(!empty($booking_rules)){
            if(!empty($single)){
                $this->db->where('id', $single->shift);
                $this->db->where('salon_id',$single->salon_id);
                $this->db->where('branch_id',$single->branch_id);
                $prv_shift = $this->db->get('tbl_shift_master')->row();
                if(!empty($prv_shift)){
                    $column = '';
                    $from = '';
                    $to = '';
                    $break_from = '';
                    $break_to = '';

                    if($prv_shift->shift_type == '1'){
                        $today_date = date('Y-m-d');
                        $next_week_start = date('Y-m-d', strtotime('next Monday', strtotime($today_date)));
                        $next_week_end = date('Y-m-d', strtotime('next Sunday', strtotime($next_week_start)));    
                        if (date('Y-m-d', strtotime($date)) >= $next_week_start && date('Y-m-d', strtotime($date)) <= $next_week_end) {
                            $this->db->where('order >', $prv_shift->order);
                            $this->db->where('salon_id',$single->salon_id);
                            $this->db->where('branch_id',$single->branch_id);
                            $this->db->where('shift_type','1');
                            $this->db->order_by('order', 'ASC');
                            $this->db->limit(1);
                            $next_shift = $this->db->get('tbl_shift_master')->row();
                        
                            if (empty($next_shift)) {
                                $this->db->where('shift_type','1');
                                $this->db->where('salon_id',$single->salon_id);
                                $this->db->where('branch_id',$single->branch_id);
                                $this->db->order_by('order', 'ASC');
                                $this->db->limit(1);
                                $next_shift = $this->db->get('tbl_shift_master')->row();
                            }

                            if (!empty($next_shift)) {                                
                                $shift = $next_shift->id;
                                $shift_type = $next_shift->shift_type;
                            }else{
                                $shift = $single->shift;
                                $shift_type = $single->shift_type;
                            }
                        }else{
                            $shift = $single->shift;
                            $shift_type = $single->shift_type;
                        }
                    }else{
                        $shift = $single->shift;
                        $shift_type = $single->shift_type;
                    }

                    if($dayOfWeek == 'Monday'){
                        $column = 'is_monday_shift';
                        $from = 'monday_shift_from';
                        $to = 'monday_shift_to';
                        $break_from = 'monday_break_from';
                        $break_to = 'monday_break_to';
                    }elseif($dayOfWeek == 'Tuesday'){
                        $column = 'is_tuesday_shift';
                        $from = 'tuesday_shift_from';
                        $to = 'tuesday_shift_to';
                        $break_from = 'tuesday_break_from';
                        $break_to = 'tuesday_break_to';
                    }elseif($dayOfWeek == 'Wednesday'){
                        $column = 'is_wednesday_shift';
                        $from = 'wednesday_shift_from';
                        $to = 'wednesday_shift_to';
                        $break_from = 'wednesday_break_from';
                        $break_to = 'wednesday_break_to';
                    }elseif($dayOfWeek == 'Thursday'){
                        $column = 'is_thursday_shift';
                        $from = 'thursday_shift_from';
                        $to = 'thursday_shift_to';
                        $break_from = 'thursday_break_from';
                        $break_to = 'thursday_break_to';
                    }elseif($dayOfWeek == 'Friday'){
                        $column = 'is_friday_shift';
                        $from = 'friday_shift_from';
                        $to = 'friday_shift_to';
                        $break_from = 'friday_break_from';
                        $break_to = 'friday_break_to';
                    }elseif($dayOfWeek == 'Saturday'){
                        $column = 'is_saturday_shift';
                        $from = 'saturday_shift_from';
                        $to = 'saturday_shift_to';
                        $break_from = 'saturday_break_from';
                        $break_to = 'saturday_break_to';
                    }elseif($dayOfWeek == 'Sunday'){
                        $column = 'is_sunday_shift';
                        $from = 'sunday_shift_from';
                        $to = 'sunday_shift_to';
                        $break_from = 'sunday_break_from';
                        $break_to = 'sunday_break_to';
                    }else{
                        $column = '';
                        $from = '';
                        $to = '';
                        $break_from = '';
                        $break_to = '';
                    }

                    $this->db->where($column, '1');
                    $this->db->where('is_deleted', '0');
                    $this->db->where('is_bookings_allowed', '1');
                    $this->db->where('id',$shift);
                    $shift_details = $this->db->get('tbl_shift_master')->row();
                    
                    if(!empty($shift_details)){
                        $shift_start_from = $shift_details->$from;
                        $shift_end_to = $shift_details->$to;
                        $shift_break_start_from = $shift_details->$break_from;
                        $shift_break_end_to = $shift_details->$break_to;
                        
                        return array(
                            'shift_id'          =>  $shift,
                            'shift_type'        =>  $shift_type,
                            'shift_from'        =>  $shift_start_from,
                            'shift_to'          =>  $shift_end_to,
                            'shift_break_from'  =>  $shift_break_start_from,
                            'shift_break_to'    =>  $shift_break_end_to,
                            'shift_name'        =>  $shift_details->shift_name,
                        );
                    }else{
                        return array();
                    }
                }else{
                    return array();
                }
            }else{
                return array();
            }
        }else{
            return array();
        }
    }
    public function get_stylistwise_shift_ajx(){
        // echo $this->input->post('date');
        $shift_details = $this->get_stylist_shifts($this->input->post('date'),$this->input->post('exe'));

        echo json_encode($shift_details);
    }
    public function get_stylist_timeslots_ajx(){
        $booking_rules = $this->get_booking_rules();
        
        $date = $this->input->post('date');
        $exe = $this->input->post('exe');
        $duration = $this->input->post('duration');
        $service_id = $this->input->post('service_id');
        $selected_start = $this->input->post('selected_start');

        if(!empty($booking_rules)){
            if($exe != ""){
                $shift_details = $this->get_stylist_shifts($date,$exe);
                if(!empty($shift_details)){
                    $shift_from = strtotime($shift_details['shift_from']);
                    $shift_to = strtotime($shift_details['shift_to']);
                    $shift_break_from = strtotime($shift_details['shift_break_from']);
                    $shift_break_to = strtotime($shift_details['shift_break_to']);
                    $buffer = $booking_rules->buffering_time;
                    $minutes_early_booking = $booking_rules->booking_time_range;
                    // $interval = $booking_rules->slot_time;
                    $interval = $duration;

                    $slots = $this->generateTimePairs($date,$shift_from,$shift_to,$interval,$buffer,$minutes_early_booking,$shift_break_from,$shift_break_to);
                ?>
                <div class="row timeslot_row">
                <?php
                    for($i=0;$i<count($slots);$i++){
                        $from_slot = date('Y-m-d H:i:s',strtotime($date.' '.$slots[$i]['from']));
                        $to_slot = date('Y-m-d H:i:s',strtotime($date.' '.$slots[$i]['to']));
                        $current_time = date('Y-m-d H:i:s');
                        if($selected_start != ""){
                            $selected_start_formated = date('Y-m-d H:i:s',strtotime($selected_start));
                            if($selected_start_formated <= $from_slot) {
                                if($current_time < $from_slot) {
                                    $is_allowed = '1';
                                }else{
                                    $is_allowed = '0';
                                }
                            }else{
                                $is_allowed = '0';
                            }
                        }else{
                            if($current_time < $from_slot) {
                                $is_allowed = '1';
                            }else{
                                $is_allowed = '0';
                            }
                        }
                        // echo $current_time;
                        if($is_allowed == '1') {
                            $is_available = $this->check_stylist_timeslot_availability($exe,$from_slot,$to_slot);
                ?>
                    <div class="single_timeslot" style="background:<?php if($is_available){ echo '#01a900'; }else{ echo '#ff0000'; } ?>;">
                        <input <?php if($is_available){ echo ''; }else{ echo 'disabled'; } ?> type="radio" class="service_stylist_time_slots_<?=$service_id;?>" name="service_stylist_time_slots_<?=$service_id;?>" id="service_stylist_time_slots_<?=$service_id;?>_<?=$slots[$i]['from'];?>@@@<?=$slots[$i]['to'];?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>@@@<?=date('h:i A',strtotime($slots[$i]['to']));?>">
                        <label><?=date('h:i A',strtotime($slots[$i]['from']));?> to <?=date('h:i A',strtotime($slots[$i]['to']));?></label>
                    </div>
                <?php
                    }}
                ?>
                </div>
                <?php }else{ ?>
                    <div class="col-lg-12">
                        <label class="error">Shift not available for this date</label>
                    </div>
                <?php }
            }else{ ?>
                <div class="col-lg-12">
                    <label class="error">Please select Stylist</label>
                </div>
            <?php }
        }else{ ?>
            <div class="col-lg-12">
                <label class="error">Booking Rules not available</label>
            </div>
        <?php }
    }
    public function get_saloon_working_hrs($date){   
        $timestamp = strtotime($date);        
        $dayOfWeek = date('l', $timestamp);

        $start = '';
        $end ='';
        $is_allowed = 0;

        if($dayOfWeek == 'Monday'){
            $column = 'is_monday';
            $from = 'from_monday';
            $to = 'to_monday';
        }elseif($dayOfWeek == 'Tuesday'){
            $column = 'is_tuesday';
            $from = 'from_tuesday';
            $to = 'to_tuesday';
        }elseif($dayOfWeek == 'Wednesday'){
            $column = 'is_wednesday';
            $from = 'from_wednesday';
            $to = 'to_wednesday';
        }elseif($dayOfWeek == 'Thursday'){
            $column = 'is_thursday';
            $from = 'from_thursday';
            $to = 'to_thursday';
        }elseif($dayOfWeek == 'Friday'){
            $column = 'is_friday';
            $from = 'from_friday';
            $to = 'to_friday';
        }elseif($dayOfWeek == 'Saturday'){
            $column = 'is_saturday';
            $from = 'from_saturday';
            $to = 'to_saturday';
        }elseif($dayOfWeek == 'Sunday'){
            $column = 'is_sunday';
            $from = 'from_sunday';
            $to = 'to_sunday';
        }else{
            $column = '';
            $from = '';
            $to = '';
        }
        $this->db->where($column, '1');
        $this->db->where('status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $working_hrs = $this->db->get('tbl_booking_rules')->row();
        if(!empty($working_hrs)){
            $start = $working_hrs->$from;
            $end = $working_hrs->$to;
            $is_allowed = 1;
        }
        return array('is_allowed'=>$is_allowed,'start'=>$start,'end'=>$end);
    }
    public function get_salon_avg_start() {
        $this->db->where('status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $working_hrs = $this->db->get('tbl_booking_rules')->row();

        $earliest_start = null;
        $latest_end = null;
        $is_allowed = 0; // Default to not allowed

        if (!empty($working_hrs)) {
            $days = [
                'Monday' => ['is' => 'is_monday', 'from' => 'from_monday', 'to' => 'to_monday'],
                'Tuesday' => ['is' => 'is_tuesday', 'from' => 'from_tuesday', 'to' => 'to_tuesday'],
                'Wednesday' => ['is' => 'is_wednesday', 'from' => 'from_wednesday', 'to' => 'to_wednesday'],
                'Thursday' => ['is' => 'is_thursday', 'from' => 'from_thursday', 'to' => 'to_thursday'],
                'Friday' => ['is' => 'is_friday', 'from' => 'from_friday', 'to' => 'to_friday'],
                'Saturday' => ['is' => 'is_saturday', 'from' => 'from_saturday', 'to' => 'to_saturday'],
                'Sunday' => ['is' => 'is_sunday', 'from' => 'from_sunday', 'to' => 'to_sunday'],
            ];

            foreach ($days as $day_data) {
                if ($working_hrs->{$day_data['is']} == '1') {
                    $is_allowed = 1; // At least one day is active
                    $start_time = $working_hrs->{$day_data['from']};
                    $end_time = $working_hrs->{$day_data['to']};

                    if ($start_time && ($earliest_start === null || $start_time < $earliest_start)) {
                        $earliest_start = $start_time;
                    }

                    if ($end_time && ($latest_end === null || $end_time > $latest_end)) {
                        $latest_end = $end_time;
                    }
                }
            }
        }

        return array('is_allowed' => $is_allowed, 'start' => $earliest_start == null ? '07:00:00' : $earliest_start, 'end' => '24:00:00');
    }
    public function get_saloon_working_hrs_all($date,$branch_id,$salon_id){   
        $timestamp = strtotime($date);        
        $dayOfWeek = date('l', $timestamp);

        $start = '';
        $end ='';
        $is_allowed = 0;

        if($dayOfWeek == 'Monday'){
            $column = 'is_monday';
            $from = 'from_monday';
            $to = 'to_monday';
        }elseif($dayOfWeek == 'Tuesday'){
            $column = 'is_tuesday';
            $from = 'from_tuesday';
            $to = 'to_tuesday';
        }elseif($dayOfWeek == 'Wednesday'){
            $column = 'is_wednesday';
            $from = 'from_wednesday';
            $to = 'to_wednesday';
        }elseif($dayOfWeek == 'Thursday'){
            $column = 'is_thursday';
            $from = 'from_thursday';
            $to = 'to_thursday';
        }elseif($dayOfWeek == 'Friday'){
            $column = 'is_friday';
            $from = 'from_friday';
            $to = 'to_friday';
        }elseif($dayOfWeek == 'Saturday'){
            $column = 'is_saturday';
            $from = 'from_saturday';
            $to = 'to_saturday';
        }elseif($dayOfWeek == 'Sunday'){
            $column = 'is_sunday';
            $from = 'from_sunday';
            $to = 'to_sunday';
        }else{
            $column = '';
            $from = '';
            $to = '';
        }
        $this->db->where($column, '1');
        $this->db->where('status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id',$branch_id);
        $this->db->where('salon_id',$salon_id);
        $working_hrs = $this->db->get('tbl_booking_rules')->row();
        if(!empty($working_hrs)){
            $start = $working_hrs->$from;
            $end = $working_hrs->$to;
            $is_allowed = 1;
        }
        return array('is_allowed'=>$is_allowed,'start'=>$start,'end'=>$end);
    }
    public function generateServiceTimePairs($booking_date, $start_time, $end_time, $duration) {
        $time_pairs = array();
        
        // Get the current date and time
        $current_date = new DateTime();
        
        // Convert start and end times to DateTime objects
        $start = new DateTime($start_time);
        $end = new DateTime($end_time);

        // Validate if start time is before end time
        if ($start >= $end) {
            // Handle invalid input
            return $time_pairs;
        }
        
        // Ensure booking date is today or later
        $booking_date_obj = new DateTime($booking_date);
        if ($booking_date_obj->format('Y-m-d') < $current_date->format('Y-m-d')) {
            // Handle invalid booking date
            return $time_pairs;
        }
        
        // Loop through the time range with the specified duration
        while ($start < $end) {
            // Check if 'from' time is greater than or equal to current time
            if ($start >= $current_date) {
                $to = clone $start;
                $to->add(new DateInterval('PT' . $duration . 'M'));
                
                // Check if 'to' time exceeds the end time
                if ($to > $end) {
                    $to = $end;
                }
                
                // Add current time pair to the array
                $time_pairs[] = array(
                    'from' => $start->format('Y-m-d H:i:s'),
                    'to' => $to->format('Y-m-d H:i:s')
                );
                
                // Move to the next interval
                $start = $to;
            } else {
                // Move to the next interval
                $start->add(new DateInterval('PT' . $duration . 'M'));
            }
        }
        
        return $time_pairs;
    }
    
    public function generateCommonTimePairs($booking_date, $start_time, $end_time, $duration) {
        $time_pairs = array();
        
        // Get the current date and time
        $current_date = new DateTime();
        
        // Convert start and end times to DateTime objects
        $start = new DateTime($start_time);
        $end = new DateTime($end_time);

        // Validate if start time is before end time
        if ($start >= $end) {
            // Handle invalid input
            return $time_pairs;
        }
        
        if($this->input->post('source') != 'vendor_panel'){
            // Ensure booking date is today or later
            $booking_date_obj = new DateTime($booking_date);
            if ($booking_date_obj->format('Y-m-d') < $current_date->format('Y-m-d')) {
                // Handle invalid booking date
                return $time_pairs;
            }
        }
        
        // Loop through the time range with the specified duration
        while ($start < $end) {
            if($this->input->post('source') != 'vendor_panel'){
                // Check if 'from' time is greater than or equal to current time
                if ($start >= $current_date) {
                    $to = clone $start;
                    $to->add(new DateInterval('PT' . $duration . 'M'));
                    
                    // Check if 'to' time exceeds the end time
                    if ($to > $end) {
                        $to = $end;
                    }
                    
                    // Add current time pair to the array
                    $time_pairs[] = array(
                        'from' => $start->format('Y-m-d H:i:s'),
                        'to' => $to->format('Y-m-d H:i:s')
                    );
                    
                    // Move to the next interval
                    $start = $to;
                } else {
                    // Move to the next interval
                    $start->add(new DateInterval('PT' . $duration . 'M'));
                }
            }else{
                $to = clone $start;
                $to->add(new DateInterval('PT' . $duration . 'M'));
                
                // Check if 'to' time exceeds the end time
                if ($to > $end) {
                    $to = $end;
                }
                
                // Add current time pair to the array
                $time_pairs[] = array(
                    'from' => $start->format('Y-m-d H:i:s'),
                    'to' => $to->format('Y-m-d H:i:s')
                );
                
                // Move to the next interval
                $start = $to;
            }
        }
        
        return $time_pairs;
    }
    
    public function check_stylist_booking_available($stylist, $from_date, $from_time, $to_date, $to_time) {
        $this->db->where('service_status', '0');
        $this->db->where('is_deleted', '0');
        $this->db->where('stylist_id', $stylist);
        $this->db->where('DATE(service_date)', date('Y-m-d', strtotime($from_date)));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $bookings = $this->db->get('tbl_booking_services_details')->result();
        
        if (!empty($bookings)) {
            foreach($bookings as $result){
                $from = date('Y-m-d H:i:s',strtotime($result->service_from));
                $to = date('Y-m-d H:i:s',strtotime($result->service_to));
                
                $selected_from = date('Y-m-d H:i:s',strtotime($from_date . ' ' . $from_time));
                $selected_to = date('Y-m-d H:i:s',strtotime($to_date . ' ' . $to_time));

                if(($selected_from >= $from && $selected_from <= $to) || ($selected_to >= $from && $selected_to <= $to)){
                    return true;
                }
            }
            return false;
        } else {
            return false;
        }
    }
    
    public function check_customer_booking_available_reschedule($customer, $from_date, $from_time, $to_date, $to_time) {
        $this->db->where('service_status', '0');
        $this->db->where('is_deleted', '0');
        $this->db->where('customer_name', $customer);
        $this->db->where('DATE(service_date)', date('Y-m-d', strtotime($from_date)));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $bookings = $this->db->get('tbl_booking_services_details')->result();
        
        return $bookings;
    }
    
    public function check_stylist_booking_available_reschedule($stylist, $from_date, $from_time, $to_date, $to_time) {
        $this->db->where('service_status', '0');
        $this->db->where('is_deleted', '0');
        $this->db->where('stylist_id', $stylist);
        $this->db->where('DATE(service_date)', date('Y-m-d', strtotime($from_date)));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $bookings = $this->db->get('tbl_booking_services_details')->result();
        
        return $bookings;
    }

    // public function check_stylist_booking_available($stylist,$from_date,$from_time,$to_date,$to_time){
    //     $this->db->where('service_status', '0');
    //     $this->db->where('is_deleted', '0');
    //     $this->db->where('stylist_id',$stylist);
    //     $this->db->where('DATE(service_date)',date('Y-m-d',strtotime($from_date)));
    //     $this->db->where('branch_id',$this->session->userdata('branch_id'));
    //     $this->db->where('salon_id',$this->session->userdata('salon_id'));
    //     $bookings = $this->db->get('tbl_booking_services_details')->result();

    //     if(!empty($bookings)){
    //         foreach($bookings as $result){
    //             $booking_service_from = date('Y-m-d H:i:s',strtotime($result->service_from));
    //             $booking_service_to = date('Y-m-d H:i:s',strtotime($result->service_to));

    //             $selected_service_from = date('Y-m-d H:i:s',strtotime($from_date.' ' .$from_time));
    //             $selected_service_to = date('Y-m-d H:i:s',strtotime($to_date.' ' .$to_time));

    //             if(($selected_service_from >= $booking_service_from && $selected_service_from <= $booking_service_to) ||
    //             ($selected_service_to >= $booking_service_from && $selected_service_to <= $booking_service_to)) {
    //                 return true;
    //             }                
    //         }
    //     }else{
    //         return false;
    //     }
    //     return false;
    // }
    public function check_stylist_shift_available($stylist,$date,$time){
        $this->db->where('id', $stylist);
        $single = $this->db->get('tbl_salon_employee')->row();

        if(!empty($single)){
            $shift = $single->shift;
            $shift_type = $single->shift_type;

            $details = $this->get_stylist_shift_details($shift,$shift_type,$date);
            if(!empty($details)){
                $shift_from = date('Y-m-d H:i:s',strtotime($date.' '.$details['shift_from']));
                $shift_to = date('Y-m-d H:i:s',strtotime($date.' '.$details['shift_to']));
                $shift_break_from = date('Y-m-d H:i:s',strtotime($date.' '.$details['shift_break_from']));
                $shift_break_to = date('Y-m-d H:i:s',strtotime($date.' '.$details['shift_break_to']));

                $booking_date_time = date('Y-m-d H:i:s',strtotime($date.' '.$time));

                if ($booking_date_time >= $shift_from && $booking_date_time <= $shift_to) {
                    if ($booking_date_time >= $shift_break_from && $booking_date_time <= $shift_break_to) {
                        return '0@@@break';
                    } else {
                        return '1@@@';
                    }
                } else {
                    return '0@@@'; 
                }
            }else{
                return '0@@@';
            }
        }else{
            return '0@@@';
        }
    }
    public function get_stylist_shift_details($shift_id,$shift_type,$date){        
        $booking_rules = $this->get_booking_rules();
        
        $timestamp = strtotime($date);        
        $dayOfWeek = date('l', $timestamp);

        if(!empty($booking_rules) && $shift_id != "" && $shift_id != null){
            $shift = $shift_id;
            $shift_type = $shift_type;

            if($dayOfWeek == 'Monday'){
                $column = 'is_monday_shift';
                $from = 'monday_shift_from';
                $to = 'monday_shift_to';
                $break_from = 'monday_break_from';
                $break_to = 'monday_break_to';
            }elseif($dayOfWeek == 'Tuesday'){
                $column = 'is_tuesday_shift';
                $from = 'tuesday_shift_from';
                $to = 'tuesday_shift_to';
                $break_from = 'tuesday_break_from';
                $break_to = 'tuesday_break_to';
            }elseif($dayOfWeek == 'Wednesday'){
                $column = 'is_wednesday_shift';
                $from = 'wednesday_shift_from';
                $to = 'wednesday_shift_to';
                $break_from = 'wednesday_break_from';
                $break_to = 'wednesday_break_to';
            }elseif($dayOfWeek == 'Thursday'){
                $column = 'is_thursday_shift';
                $from = 'thursday_shift_from';
                $to = 'thursday_shift_to';
                $break_from = 'thursday_break_from';
                $break_to = 'thursday_break_to';
            }elseif($dayOfWeek == 'Friday'){
                $column = 'is_friday_shift';
                $from = 'friday_shift_from';
                $to = 'friday_shift_to';
                $break_from = 'friday_break_from';
                $break_to = 'friday_break_to';
            }elseif($dayOfWeek == 'Saturday'){
                $column = 'is_saturday_shift';
                $from = 'saturday_shift_from';
                $to = 'saturday_shift_to';
                $break_from = 'saturday_break_from';
                $break_to = 'saturday_break_to';
            }elseif($dayOfWeek == 'Sunday'){
                $column = 'is_sunday_shift';
                $from = 'sunday_shift_from';
                $to = 'sunday_shift_to';
                $break_from = 'sunday_break_from';
                $break_to = 'sunday_break_to';
            }else{
                $column = '';
                $from = '';
                $to = '';
                $break_from = '';
                $break_to = '';
            }

            $this->db->where($column, '1');
            $this->db->where('id',$shift);
            $shift_details = $this->db->get('tbl_shift_master')->row();
            
            if(!empty($shift_details)){
                $shift_from = $shift_details->$from;
                $shift_to = $shift_details->$to;
                $shift_break_from = $shift_details->$break_from;
                $shift_break_to = $shift_details->$break_to;
                
                return array(
                    'shift_from'        =>  $shift_from,
                    'shift_to'          =>  $shift_to,
                    'shift_break_from'  =>  $shift_break_from,
                    'shift_break_to'    =>  $shift_break_to,
                );
            }else{
                return array();
            }
        }else{
            return array();
        }
    }
    
    
    
    public function get_all_salon_employee_datewise($date)
    {       
        // Get today's date
        $today_date = $date;

        // Select the necessary columns and join with tbl_emp_designation
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');

        // Filter based on branch, salon, and not deleted
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');

        // Order by id in descending order
        $this->db->order_by('id', 'DESC');

        // Get all salon employees
        $salon_employees = $this->db->get('tbl_salon_employee')->result();

        // Initialize an array to store the sorted employees
        $sorted_employees = array();

        // Loop through each salon employee
        foreach ($salon_employees as $employee) {
            // Count the number of services for the stylist for today's date
            $this->db->where('stylist_id', $employee->id);
            $this->db->where('service_date', $today_date);
            $services_count = $this->db->count_all_results('tbl_booking_services_details');

            // Add the count as a new property to the employee object
            $employee->services_count_today = $services_count;

            // Add the employee to the sorted array
            $sorted_employees[$employee->id] = $employee;
        }

        // Sort the array based on the services count for today in asending order
        usort($sorted_employees, function($a, $b) {
            return $a->services_count_today - $b->services_count_today;
        });

        return $sorted_employees;
    }
    public function get_stylist_emps()
    {      
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');

        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_emp_designation.designation', 'Stylist');

        $this->db->order_by('id', 'DESC');

        $salon_employees = $this->db->get('tbl_salon_employee')->result();
        return $salon_employees;
    }
    public function get_all_salon_stylists_datewise($date)
    {       
        // Get today's date
        $today_date = $date;

        // Select the necessary columns and join with tbl_emp_designation
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');

        // Filter based on branch, salon, and not deleted
        $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        if($this->input->post('selected_employee') != "" && $this->input->post('employee_selection_rule') == '2'){
            $this->db->where('tbl_salon_employee.id', $this->input->post('selected_employee'));
        }
        $this->db->where('tbl_emp_designation.designation', 'Stylist');

        // Order by id in descending order
        $this->db->order_by('id', 'DESC');

        // Get all salon employees
        $salon_employees = $this->db->get('tbl_salon_employee')->result();

        // Initialize an array to store the sorted employees
        $sorted_employees = array();

        // Loop through each salon employee
        foreach ($salon_employees as $employee) {
            // Count the number of services for the stylist for today's date
            $this->db->where_in('service_status', ['0','1']);
            $this->db->where('stylist_id', $employee->id);
            $this->db->where('service_date', $today_date);
            $services_count = $this->db->count_all_results('tbl_booking_services_details');

            // Add the count as a new property to the employee object
            $employee->services_count_today = $services_count;

            // Add the employee to the sorted array
            $sorted_employees[$employee->id] = $employee;
        }

        // Sort the array based on the services count for today in asending order
        usort($sorted_employees, function($a, $b) {
            return $a->services_count_today - $b->services_count_today;
        });

        return $sorted_employees;
    }
    public function get_all_salon_stylists_datewise_all($date,$branch_id,$salon_id)
    {       
        // Get today's date
        $today_date = $date;

        // Select the necessary columns and join with tbl_emp_designation
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');

        // Filter based on branch, salon, and not deleted
        $this->db->where('tbl_salon_employee.branch_id', $branch_id);
        $this->db->where('tbl_salon_employee.salon_id', $salon_id);
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_emp_designation.designation', 'Stylist');

        // Order by id in descending order
        $this->db->order_by('full_name', 'DESC');

        // Get all salon employees
        $salon_employees = $this->db->get('tbl_salon_employee')->result();

        // Initialize an array to store the sorted employees
        $sorted_employees = array();

        // Loop through each salon employee
        foreach ($salon_employees as $employee) {
            // Count the number of services for the stylist for today's date
            $this->db->where('stylist_id', $employee->id);
            $this->db->where_in('service_status', ['0','1']);
            $this->db->where('service_date', $today_date);
            $services_count = $this->db->count_all_results('tbl_booking_services_details');

            // Add the count as a new property to the employee object
            $employee->services_count_today = $services_count;

            // Add the employee to the sorted array
            $sorted_employees[$employee->id] = $employee;
        }

        // Sort the array based on the services count for today in asending order
        usort($sorted_employees, function($a, $b) {
            return $a->services_count_today - $b->services_count_today;
        });

        return $sorted_employees;
    }
    public function get_all_salon_stylists_datewise_all_stylist($date,$branch_id,$salon_id,$stylist_id)
    {       
        // Get today's date
        $today_date = $date;

        // Select the necessary columns and join with tbl_emp_designation
        $this->db->select('tbl_salon_employee.*, tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation', 'tbl_salon_employee.designation = tbl_emp_designation.id', 'left');

        // Filter based on branch, salon, and not deleted
        $this->db->where('tbl_salon_employee.branch_id', $branch_id);
        $this->db->where('tbl_salon_employee.salon_id', $salon_id);
        if($stylist_id != ""){
            $this->db->where('tbl_salon_employee.id', $stylist_id);
        }
        $this->db->where('tbl_salon_employee.is_deleted', '0');
        $this->db->where('tbl_emp_designation.designation', 'Stylist');

        // Order by id in descending order
        $this->db->order_by('full_name', 'DESC');

        // Get all salon employees
        $salon_employees = $this->db->get('tbl_salon_employee')->result();

        // Initialize an array to store the sorted employees
        $sorted_employees = array();

        // Loop through each salon employee
        foreach ($salon_employees as $employee) {
            // Count the number of services for the stylist for today's date
            $this->db->where('stylist_id', $employee->id);
            $this->db->where('service_date', $today_date);
            $services_count = $this->db->count_all_results('tbl_booking_services_details');

            // Add the count as a new property to the employee object
            $employee->services_count_today = $services_count;

            // Add the employee to the sorted array
            $sorted_employees[$employee->id] = $employee;
        }

        // Sort the array based on the services count for today in asending order
        usort($sorted_employees, function($a, $b) {
            return $a->services_count_today - $b->services_count_today;
        });

        return !empty($sorted_employees) ? $sorted_employees[0] : [];
    }
    public function get_available_stylists_servicewise_ajx(){
        $service = $this->input->post('service');
        $booking_date = $this->input->post('booking_date');
        $previous_stylist = $this->input->post('previous_stylist');
        $selected_employee = $this->input->post('selected_employee');
        $employee_selection_rule = $this->input->post('employee_selection_rule');

        $selectedTimeSlot = $this->input->post('selectedTimeSlot');
        $selectedfrom = date('Y-m-d H:i:s', strtotime(explode('@@@', $selectedTimeSlot)[0]));
        $selectedto = date('Y-m-d H:i:s', strtotime(explode('@@@', $selectedTimeSlot)[1]));

        $selected_from_date = date('Y-m-d', strtotime($selectedfrom));
        
        $working_hrs = $this->get_saloon_working_hrs($selected_from_date);

        $late_flag = false;
        if($working_hrs['is_allowed'] == 1){
            $store_end = date('Y-m-d H:i:s',strtotime($selected_from_date.' '.$working_hrs['end']));
            if((date('Y-m-d', strtotime($booking_date)) == date('Y-m-d')) && (date('Y-m-d H:i:s', strtotime($selectedfrom)) >= $store_end || date('Y-m-d H:i:s', strtotime($selectedto)) >= $store_end)){
                $late_flag = true;
            }
        }

        if($late_flag){
            $salon_employee_list = $this->get_all_salon_stylists_datewise($selected_from_date);
            $custom_array = [];
            if (!empty($salon_employee_list)) {
                foreach ($salon_employee_list as $result) {
                    $short_break_flag = '0';
                    $break_flag = '0';
                    $shift_flag = '1';
                    $store_flag = '1';
                    $booking_flag = '0';
                    $is_service_available = '1';
                    $leave_flag = '0';
                    $is_emergency_flag = '0';
                    $to_be_selected = '1';
                    
                    $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_details($result->id, $selectedfrom, $selectedto);

                    $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($result->id, $selectedfrom, $selectedto);
                    if ($is_stylist_available_short_breakwise) {
                        $short_break_flag = '1';
                    }

                    $custom_array[] = array(
                        'selectedTimeSlot' => $selectedTimeSlot,
                        'is_service_available' => $is_service_available,
                        'is_shift_available' => $shift_flag,
                        'is_on_break' => $break_flag,
                        'is_booking_present' => $booking_flag,
                        'store_flag' => $store_flag,
                        'is_on_leave_flag' => $leave_flag,
                        'is_emergency_flag' => $is_emergency_flag,
                        'stylist_details' => $result,
                        'to_be_selected' => $to_be_selected,
                        'short_break_flag'  =>  $short_break_flag,

                        'shift_id'      =>  $shift_flag == '1' ? $is_stylist_available_shiftwise['shift_id'] : '',
                        'shift_type'    =>  $shift_flag == '1' ? $is_stylist_available_shiftwise['shift_type'] : ''
                    );
                }
            }
        }else{
            if($employee_selection_rule == '2' && $selected_employee != ''){    //select stylist from front
                $salon_employee_list = $this->get_all_salon_stylists_datewise($selected_from_date);

                $custom_array = [];
                $selected_stylist_id = null;

                if (!empty($salon_employee_list)) {
                    foreach ($salon_employee_list as $result) {
                        $short_break_flag = '0';
                        $break_flag = '1';
                        $shift_flag = '0';
                        $store_flag = '0';
                        $booking_flag = '1';
                        $is_service_available = '0';

                        $stylist_services = explode(',', $result->service_name);
                        if (in_array($service, $stylist_services)) {
                            $is_service_available = '1';
                        }

                        $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise($selectedfrom, $selectedto);
                        if ($is_stylist_available_storewise) {
                            $store_flag = '1';
                        }

                        $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d', strtotime($selectedfrom)));
                        if ($is_emergency) {
                            $is_emergency_flag = '1';
                        } else {
                            $is_emergency_flag = '0';
                        }

                        $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_details($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_shiftwise['is_allowed']) {
                            $shift_flag = '1';
                        }

                        $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_breakwise) {
                            $break_flag = '0';
                        }

                        $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_short_breakwise) {
                            $short_break_flag = '1';
                        }

                        $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_bookingwise) {
                            $booking_flag = '0';
                        }

                        $leave_flag = $this->check_staff_is_on_leave($result->id, date('Y-m-d', strtotime($selectedfrom)));

                        $to_be_selected = '0';
                        if ($previous_stylist == $result->id) {
                            if ($is_service_available == '1' && $store_flag == '1' && $is_emergency_flag == '0' && $leave_flag == '0' && $shift_flag == '1' && $booking_flag == '0' && $break_flag == '0' && $short_break_flag == '1') {
                                $to_be_selected = '1';
                                $selected_stylist_id = $result->id;
                            }
                        }

                        $custom_array[] = array(
                            'selectedTimeSlot' => $selectedTimeSlot,
                            'is_service_available' => $is_service_available,
                            'is_shift_available' => $shift_flag,
                            'is_on_break' => $break_flag,
                            'is_booking_present' => $booking_flag,
                            'store_flag' => $store_flag,
                            'is_on_leave_flag' => $leave_flag,
                            'is_emergency_flag' => $is_emergency_flag,
                            'stylist_details' => $result,
                            'to_be_selected' => $to_be_selected,
                            'short_break_flag'  =>  $short_break_flag,

                            'shift_id'      =>  $shift_flag == '1' ? $is_stylist_available_shiftwise['shift_id'] : '',
                            'shift_type'    =>  $shift_flag == '1' ? $is_stylist_available_shiftwise['shift_type'] : ''
                        );
                    }

                    // If the previously selected stylist is not available, find another available stylist
                    if (is_null($selected_stylist_id)) {
                        foreach ($custom_array as &$stylist) {
                            if ($stylist['is_service_available'] == '1' && $stylist['store_flag'] == '1' && $stylist['is_emergency_flag'] == '0' && $stylist['is_on_leave_flag'] == '0' && $stylist['is_shift_available'] == '1' && $stylist['is_booking_present'] == '0' && $stylist['is_on_break'] == '0' && $stylist['short_break_flag'] == '1') {
                                $stylist['to_be_selected'] = '1';
                                $selected_stylist_id = $stylist['stylist_details']->id;
                                break;
                            }
                        }
                        unset($stylist); // Break reference to the last element
                    }
                }
            }else{    //select stylist from backend
                $salon_employee_list = $this->get_all_salon_stylists_datewise($selected_from_date);

                $custom_array = [];
                $selected_stylist_id = null;

                if (!empty($salon_employee_list)) {
                    foreach ($salon_employee_list as $result) {
                        $short_break_flag = '0';
                        $break_flag = '1';
                        $shift_flag = '0';
                        $store_flag = '0';
                        $booking_flag = '1';
                        $is_service_available = '0';

                        $stylist_services = explode(',', $result->service_name);
                        if (in_array($service, $stylist_services)) {
                            $is_service_available = '1';
                        }

                        $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise($selectedfrom, $selectedto);
                        if ($is_stylist_available_storewise) {
                            $store_flag = '1';
                        }

                        $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d', strtotime($selectedfrom)));
                        if ($is_emergency) {
                            $is_emergency_flag = '1';
                        } else {
                            $is_emergency_flag = '0';
                        }

                        $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_details($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_shiftwise['is_allowed']) {
                            $shift_flag = '1';
                        }

                        $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_breakwise) {
                            $break_flag = '0';
                        }

                        $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_short_breakwise) {
                            $short_break_flag = '1';
                        }

                        $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise($result->id, $selectedfrom, $selectedto);
                        if ($is_stylist_available_bookingwise) {
                            $booking_flag = '0';
                        }

                        $leave_flag = $this->check_staff_is_on_leave($result->id, date('Y-m-d', strtotime($selectedfrom)));

                        $to_be_selected = '0';
                        if ($previous_stylist == $result->id) {
                            if ($is_service_available == '1' && $store_flag == '1' && $is_emergency_flag == '0' && $leave_flag == '0' && $shift_flag == '1' && $booking_flag == '0' && $break_flag == '0' && $short_break_flag == '1') {
                                $to_be_selected = '1';
                                $selected_stylist_id = $result->id;
                            }
                        }

                        if ($to_be_selected == '1') {
                            $custom_array[] = array(
                                'selectedTimeSlot' => $selectedTimeSlot,
                                'is_service_available' => $is_service_available,
                                'is_shift_available' => $shift_flag,
                                'is_on_break' => $break_flag,
                                'is_booking_present' => $booking_flag,
                                'store_flag' => $store_flag,
                                'is_on_leave_flag' => $leave_flag,
                                'is_emergency_flag' => $is_emergency_flag,
                                'stylist_details' => $result,
                                'to_be_selected' => $to_be_selected,
                                'short_break_flag' => $short_break_flag,

                                'shift_id'      =>  $shift_flag == '1' ? $is_stylist_available_shiftwise['shift_id'] : '',
                                'shift_type'    =>  $shift_flag == '1' ? $is_stylist_available_shiftwise['shift_type'] : ''
                            );
                            break; 
                        }
                    }

                    if (empty($custom_array)) {
                        foreach ($salon_employee_list as $result) {
                            $short_break_flag = '0';
                            $break_flag = '1';
                            $shift_flag = '0';
                            $store_flag = '0';
                            $booking_flag = '1';
                            $is_service_available = '0';
            
                            $stylist_services = explode(',', $result->service_name);
                            if (in_array($service, $stylist_services)) {
                                $is_service_available = '1';
                            }
            
                            $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise($selectedfrom, $selectedto);
                            if ($is_stylist_available_storewise) {
                                $store_flag = '1';
                            }
            
                            $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d', strtotime($selectedfrom)));
                            if ($is_emergency) {
                                $is_emergency_flag = '1';
                            } else {
                                $is_emergency_flag = '0';
                            }
            
                            $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_details($result->id, $selectedfrom, $selectedto);
                            if ($is_stylist_available_shiftwise['is_allowed']) {
                                $shift_flag = '1';
                            }
            
                            $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($result->id, $selectedfrom, $selectedto);
                            if ($is_stylist_available_breakwise) {
                                $break_flag = '0';
                            }

                            $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($result->id, $selectedfrom, $selectedto);
                            if ($is_stylist_available_short_breakwise) {
                                $short_break_flag = '1';
                            }
            
                            $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise($result->id, $selectedfrom, $selectedto);
                            if ($is_stylist_available_bookingwise) {
                                $booking_flag = '0';
                            }
            
                            $leave_flag = $this->check_staff_is_on_leave($result->id, date('Y-m-d', strtotime($selectedfrom)));
            
                            if ($is_service_available == '1' && $store_flag == '1' && $is_emergency_flag == '0' && $leave_flag == '0' && $shift_flag == '1' && $booking_flag == '0' && $break_flag == '0' && $short_break_flag == '1') {
                                $custom_array[] = array(
                                    'selectedTimeSlot' => $selectedTimeSlot,
                                    'is_service_available' => $is_service_available,
                                    'is_shift_available' => $shift_flag,
                                    'is_on_break' => $break_flag,
                                    'is_booking_present' => $booking_flag,
                                    'store_flag' => $store_flag,
                                    'is_on_leave_flag' => $leave_flag,
                                    'is_emergency_flag' => $is_emergency_flag,
                                    'stylist_details' => $result,
                                    'to_be_selected' => '1',
                                    'short_break_flag'  =>  $short_break_flag,
            
                                    'shift_id'      =>  $shift_flag == '1' ? $is_stylist_available_shiftwise['shift_id'] : '',
                                    'shift_type'    =>  $shift_flag == '1' ? $is_stylist_available_shiftwise['shift_type'] : ''
                                );
                                break; // Stop the loop once the first eligible stylist is found
                            }
                        }
                    }
                }
            }
        }

        echo json_encode($custom_array);
    }
    
    public function get_available_stylists_edit_servicewise_ajx(){
        $service = $this->input->post('service');
        $previous_stylist = $this->input->post('previous_stylist');
        $selected_employee = $this->input->post('selected_employee');
        $employee_selection_rule = $this->input->post('employee_selection_rule');

        $booking_details_id = $this->input->post('booking_details_id');
        $this->db->where('id',$booking_details_id);
        $booking_details = $this->db->get('tbl_booking_services_details')->row();
        
        $selectedTimeSlot = $this->input->post('selectedTimeSlot');
        $selectedfrom = date('Y-m-d H:i:s',strtotime(explode('@@@',$selectedTimeSlot)[0]));
        $selectedto = date('Y-m-d H:i:s',strtotime(explode('@@@',$selectedTimeSlot)[1]));

        $selected_from_date = date('Y-m-d',strtotime($selectedfrom));

        if($employee_selection_rule == '2' && $selected_employee != ""){  // select stylist from front
            $salon_employee_list = $this->get_all_salon_stylists_datewise($selected_from_date);

            $custom_array = [];
            $selected_stylist_id = null;
            if(!empty($salon_employee_list)){
                foreach($salon_employee_list as $result){
                    $short_break_flag = '0';
                    $break_flag = '1';
                    $shift_flag = '0';
                    $store_flag = '0';
                    $booking_flag = '1';
                    $is_service_available = '0';
                    
                    $stylist_services = explode(',',$result->service_name);
                    if(in_array($service,$stylist_services)){
                        $is_service_available = '1';
                    }

                    // $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise($selectedfrom,$selectedto);
                    // if($is_stylist_available_storewise){
                    //     $store_flag = '1';
                    // }
                    $store_flag = '1';

                    // $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d',strtotime($selectedfrom)));
                    // if($is_emergency){
                    //     $is_emergency_flag = '1';
                    // }else{
                    //     $is_emergency_flag = '0';
                    // }
                    $is_emergency_flag = '0';

                    $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_details($result->id,$selectedfrom,$selectedto);
                    // $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise($result->id,$selectedfrom,$selectedto);
                    if($is_stylist_available_shiftwise['is_allowed']){
                        $shift_flag = '1';
                    }

                    // $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($result->id,$selectedfrom,$selectedto);
                    // if($is_stylist_available_breakwise){
                    //     $break_flag = '0';
                    // }
                    $break_flag = '0';

                    $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($result->id,$selectedfrom,$selectedto);
                    if($is_stylist_available_short_breakwise){
                        $short_break_flag = '1';
                    }

                    $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise_edit($booking_details_id,$result->id,$selectedfrom,$selectedto);
                    if($is_stylist_available_bookingwise){
                        $booking_flag = '0';
                    }

                    $leave_flag = $this->check_staff_is_on_leave($result->id,date('Y-m-d',strtotime($selectedfrom)));

                    $to_be_selected = '0';
                    if ($previous_stylist == $result->id) {
                        if ($is_service_available == '1' && $store_flag == '1' && $is_emergency_flag == '0' && $leave_flag == '0' && $shift_flag == '1' && $booking_flag == '0' && $break_flag == '0' && $short_break_flag == '1') {
                            $to_be_selected = '1';
                            $selected_stylist_id = $result->id;
                        }
                    }

                    $custom_array[] = array(
                        'selectedTimeSlot'      =>  $selectedTimeSlot,
                        'is_service_available'  =>  $is_service_available,
                        'is_shift_available'    =>  $shift_flag,
                        'is_on_break'           =>  $break_flag,
                        'is_booking_present'    =>  $booking_flag,
                        'store_flag'            =>  $store_flag,
                        'is_on_leave_flag'      =>  $leave_flag,
                        'is_emergency_flag'     =>  $is_emergency_flag,
                        'stylist_details'       =>  $result,
                        'to_be_selected'        =>  $to_be_selected,
                        'short_break_flag'      =>  $short_break_flag,

                        'shift_id'              =>  $is_stylist_available_shiftwise['shift_id'],
                        'shift_type'            =>  $is_stylist_available_shiftwise['shift_type'],
                    );
                }

                // If the previously selected stylist is not available, find another available stylist
                if (is_null($selected_stylist_id)) {
                    foreach ($custom_array as &$stylist) {
                        if ($stylist['is_service_available'] == '1' && $stylist['store_flag'] == '1' && $stylist['is_emergency_flag'] == '0' && $stylist['is_on_leave_flag'] == '0' && $stylist['is_shift_available'] == '1' && $stylist['is_booking_present'] == '0' && $stylist['is_on_break'] == '0' && $stylist['short_break_flag'] == '1') {
                            $stylist['to_be_selected'] = '1';
                            $selected_stylist_id = $stylist['stylist_details']->id;
                            break;
                        }
                    }
                    unset($stylist); // Break reference to the last element
                }
            }
        }else{  // select stylist from backend
            $salon_employee_list = $this->get_all_salon_stylists_datewise($selected_from_date);

            $custom_array = [];
            $selected_stylist_id = null;
            if(!empty($salon_employee_list)){
                foreach($salon_employee_list as $result){
                    $short_break_flag = '0';
                    $break_flag = '1';
                    $shift_flag = '0';
                    $store_flag = '0';
                    $booking_flag = '1';
                    $is_service_available = '0';
                    
                    $stylist_services = explode(',',$result->service_name);
                    if(in_array($service,$stylist_services)){
                        $is_service_available = '1';
                    }

                    $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise($selectedfrom,$selectedto);
                    if($is_stylist_available_storewise){
                        $store_flag = '1';
                    }

                    $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d',strtotime($selectedfrom)));
                    if($is_emergency){
                        $is_emergency_flag = '1';
                    }else{
                        $is_emergency_flag = '0';
                    }

                    $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_details($result->id,$selectedfrom,$selectedto);
                    if($is_stylist_available_shiftwise['is_allowed']){
                        $shift_flag = '1';
                    }

                    $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($result->id,$selectedfrom,$selectedto);
                    if($is_stylist_available_breakwise){
                        $break_flag = '0';
                    }

                    $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($result->id,$selectedfrom,$selectedto);
                    if($is_stylist_available_short_breakwise){
                        $short_break_flag = '1';
                    }

                    $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise_edit($booking_details_id,$result->id,$selectedfrom,$selectedto);
                    if($is_stylist_available_bookingwise){
                        $booking_flag = '0';
                    }

                    $leave_flag = $this->check_staff_is_on_leave($result->id,date('Y-m-d',strtotime($selectedfrom)));

                    $to_be_selected = '0';
                    if ($previous_stylist == $result->id) {
                        if ($is_service_available == '1' && $store_flag == '1' && $is_emergency_flag == '0' && $leave_flag == '0' && $shift_flag == '1' && $booking_flag == '0' && $break_flag == '0' && $short_break_flag == '1') {
                            $to_be_selected = '1';
                            $selected_stylist_id = $result->id;
                        }
                    }       
                    // echo '<pre>to_be_selected: '.$to_be_selected;
                    // echo '<pre>stylist: '.$result->full_name;
                    if ($to_be_selected == '1') {
                        $custom_array[] = array(
                            'selectedTimeSlot'      =>  $selectedTimeSlot,
                            'is_service_available'  =>  $is_service_available,
                            'is_shift_available'    =>  $shift_flag,
                            'is_on_break'           =>  $break_flag,
                            'is_booking_present'    =>  $booking_flag,
                            'store_flag'            =>  $store_flag,
                            'is_on_leave_flag'      =>  $leave_flag,
                            'is_emergency_flag'     =>  $is_emergency_flag,
                            'stylist_details'       =>  $result,
                            'to_be_selected'        =>  $to_be_selected,
                            'short_break_flag'      =>  $short_break_flag,
    
                            'shift_id'              =>  $is_stylist_available_shiftwise['shift_id'],
                            'shift_type'            =>  $is_stylist_available_shiftwise['shift_type'],
                        );
                        break;
                    }
                }
            }
        }

        echo json_encode($custom_array);
    }
    public function get_available_stylists_servicewise_reschedule_ajx(){
        $booking_details_id = $this->input->post('booking_details_id');
        $selectedTimeSlot = $this->input->post('selectedTimeSlot');

        $this->db->where('id',$booking_details_id);
        $single = $this->db->get('tbl_booking_services_details')->row();

        $custom_array = array();

        if(!empty($single)){
            $service = $single->service_id;
            $customer_name = $single->customer_name;
            
            $selectedfrom = date('Y-m-d H:i:s',strtotime(explode('@@@',$selectedTimeSlot)[0]));
            $selectedto = date('Y-m-d H:i:s',strtotime(explode('@@@',$selectedTimeSlot)[1]));

            $selected_from_date = date('Y-m-d',strtotime($selectedfrom));
            $selected_from_time = date('H:i:s',strtotime($selectedfrom));
            $selected_to_date = date('Y-m-d',strtotime($selectedto));
            $selected_to_time = date('H:i:s',strtotime($selectedto));

            $salon_employee_list = $this->get_all_salon_stylists_datewise($selected_from_date);

            if(!empty($salon_employee_list)){
                foreach($salon_employee_list as $result){
                    $break_flag = '0';
                    $shift_flag = '0';
                    $booking_flag = '0';
                    $is_service_available = '0';
                    $is_customer_booking_present_flag = '0';
                    
                    $stylist_services = explode(',',$result->service_name);
                    if(in_array($service,$stylist_services)){
                        $is_service_available = '1';
                    }

                    $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d',strtotime($selected_from_date)));
                    if($is_emergency){
                        $is_emergency_flag = '1';
                    }else{
                        $is_emergency_flag = '0';
                    }

                    $is_shift_available = $this->check_stylist_shift_available($result->id,$selected_from_date,$selected_from_time);
                    $shift_status = explode('@@@',$is_shift_available)[0];
                    $shift_type = explode('@@@',$is_shift_available)[1];
                    if($shift_status == '1'){
                        $shift_flag = '1';
                    }else{
                        if($shift_type == 'break'){
                            $break_flag = '1';
                        }
                    }

                    $is_booking_present = $this->check_stylist_booking_available_reschedule($result->id,$selected_from_date,$selected_from_time,$selected_to_date,$selected_to_time);
                    if(!empty($is_booking_present)){
                        foreach($is_booking_present as $booking_result){
                            $from = date('Y-m-d H:i:s',strtotime($booking_result->service_from));
                            $to = date('Y-m-d H:i:s',strtotime($booking_result->service_to));
                            
                            $selected_from = date('Y-m-d H:i:s',strtotime($selected_from_date . ' ' . $selected_from_time));
                            $selected_to = date('Y-m-d H:i:s',strtotime($selected_to_date . ' ' . $selected_to_time));

                            if(($selected_from >= $from && $selected_from <= $to) || ($selected_to >= $from && $selected_to <= $to)){
                                if($booking_result->id == $booking_details_id){
                                    $booking_flag = '0';
                                }else{
                                    $booking_flag = '1';
                                    break;
                                }
                            }
                        }
                    }

                    $is_customer_booking_present = $this->check_customer_booking_available_reschedule($customer_name,$selected_from_date,$selected_from_time,$selected_to_date,$selected_to_time);
                    if(!empty($is_customer_booking_present)){
                        foreach($is_customer_booking_present as $booking_result){
                            $from = date('Y-m-d H:i:s',strtotime($booking_result->service_from));
                            $to = date('Y-m-d H:i:s',strtotime($booking_result->service_to));
                            
                            $selected_from = date('Y-m-d H:i:s',strtotime($selected_from_date . ' ' . $selected_from_time));
                            $selected_to = date('Y-m-d H:i:s',strtotime($selected_to_date . ' ' . $selected_to_time));

                            if(($selected_from >= $from && $selected_from <= $to) || ($selected_to >= $from && $selected_to <= $to)){
                                if($booking_result->id == $booking_details_id){
                                    $is_customer_booking_present_flag = '0';
                                }else{
                                    $is_customer_booking_present_flag = '1';
                                    break;
                                }
                            }
                        }
                    }

                    $leave_flag = $this->check_staff_is_on_leave($result->id,date('Y-m-d',strtotime($selected_from_date)));

                    $custom_array[] = array(
                        'is_service_available'  =>  $is_service_available,
                        'is_shift_available'    =>  $shift_flag,
                        'is_on_break'           =>  $break_flag,
                        'is_booking_present'    =>  $booking_flag,
                        'is_customer_booking_present'    =>  $is_customer_booking_present_flag,
                        'stylist_details'       =>  $result,
                        'is_on_leave_flag'      =>  $leave_flag,
                        'is_emergency_flag'     =>  $is_emergency_flag,
                    );
                }
            }
        }
        // echo '<pre>'; print_r($custom_array);

        echo json_encode($custom_array);
    }
    
    public function get_service_timeslots_ajx(){        
        $date = date('Y-m-d',strtotime($this->input->post('date')));
        $duration = $this->input->post('duration');
        $service_id = $this->input->post('service_id');

        $selected_start = date('Y-m-d H:i:s',strtotime($this->input->post('selected_start')));
        $selected_end = date('Y-m-d H:i:s',strtotime($this->input->post('selected_end')));
        // $selected_end = date('Y-m-d H:i:s', strtotime($selected_start . ' +' . $duration . ' minutes'));
        ?>
        <div class="row timeslot_row">
            <div class="single_timeslot" style="display: inline-block;padding: 5px 5px !important;">
                <input type="radio" class="stylists_timeslots_<?=$service_id;?> service_stylist_time_slots_<?=$service_id;?>" name="service_stylist_time_slots_<?=$service_id;?>" id="service_stylist_time_slots_<?=$service_id;?>" value="<?=date('Y-m-d H:i:s',strtotime($selected_start));?>@@@<?=date('Y-m-d H:i:s',strtotime($selected_end));?>" onchange="setStylist(this, '<?=$service_id;?>')">
                <label><?=date('h:i A',strtotime($selected_start));?> to <?=date('h:i A',strtotime($selected_end));?></label>
            </div>
        </div>
        <?php
    }
    public function get_service_timeslot_stylists_ajx(){        
        $date = date('Y-m-d',strtotime($this->input->post('date')));
        $duration = $this->input->post('duration');
        $service_id = $this->input->post('service_id');

        $selected_start = date('Y-m-d H:i:s',strtotime($this->input->post('selected_start')));
        $selected_end = date('Y-m-d H:i:s', strtotime($selected_start . ' +' . $duration . ' minutes'));
        ?>
        <div class="row timeslot_row">
            <div class="single_timeslot" style="display: inline-block;padding: 5px 5px !important;">
                <input type="radio" class="stylists_timeslots_<?=$service_id;?> service_stylist_time_slots_<?=$service_id;?>" name="service_stylist_time_slots_<?=$service_id;?>" id="service_stylist_time_slots_<?=$service_id;?>" value="<?=date('Y-m-d H:i:s',strtotime($selected_start));?>@@@<?=date('Y-m-d H:i:s',strtotime($selected_end));?>" onchange="setStylist(this, '<?=$service_id;?>')">
                <label><?=date('h:i A',strtotime($selected_start));?> to <?=date('h:i A',strtotime($selected_end));?></label>
            </div>
        </div>
        <?php
    }
    
    public function get_stylist_reschedule_timeslots_updated_ajx(){    
        $booking_rules = $this->get_booking_rules();
        
        $date = date('Y-m-d',strtotime($this->input->post('date')));
        $duration = $this->input->post('duration');
        $booking_details_id = $this->input->post('booking_details_id');
        if(!empty($booking_rules)){
            $working_hrs = $this->get_saloon_working_hrs($date);
            if($working_hrs['is_allowed'] == 1){
                $minutes_early_booking = !empty($booking_rules->booking_time_range) ? $booking_rules->booking_time_range : 0;

                $store_start = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['start']));
                $store_end = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['end']));
                $slots = $this->generateServiceTimePairs($date,$store_start,$store_end,$duration);                
                ?>
                <div class="row timeslot_row" style="justify-content: center;">
                <?php
                    for($i=0;$i<count($slots);$i++){
                        $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                        $current_date = date('Y-m-d H:i:s');
                        if ($current_date <= $allowed_booking_datetime) {
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                ?>
                    <div class="single_timeslot">
                        <input type="radio" class="stylists_timeslots_<?=$booking_details_id;?> service_stylist_time_slots_<?=$booking_details_id;?>" name="service_stylist_time_slots_<?=$booking_details_id;?>" id="service_stylist_time_slots_<?=$booking_details_id;?>" value="<?=date('Y-m-d H:i:s',strtotime($slots[$i]['from']));?>@@@<?=date('Y-m-d H:i:s',strtotime($slots[$i]['to']));?>" onchange="setStylist(this, '<?=$booking_details_id;?>')">
                        <label><?=date('h:i A',strtotime($slots[$i]['from']));?> to <?=date('h:i A',strtotime($slots[$i]['to']));?></label>
                    </div>
                <?php }}}} ?>
                </div>
            <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Booking Rules not available</label>
            </div>
            <?php }
    }
    public function get_stylist_reschedule_timeslots_ajx(){
        $booking_rules = $this->get_booking_rules();
        
        $date = $this->input->post('date');
        $exe = $this->input->post('exe');
        $duration = $this->input->post('duration');
        $booking_details_id = $this->input->post('booking_details_id');
        if(!empty($booking_rules)){
            if($exe != ""){
                $shift_details = $this->get_stylist_shifts($date,$exe);
                if(!empty($shift_details)){
                    $shift_from = strtotime($shift_details['shift_from']);
                    $shift_to = strtotime($shift_details['shift_to']);
                    $shift_break_from = strtotime($shift_details['shift_break_from']);
                    $shift_break_to = strtotime($shift_details['shift_break_to']);
                    $buffer = $booking_rules->buffering_time;
                    $minutes_early_booking = $booking_rules->booking_time_range;
                    // $interval = $booking_rules->slot_time;
                    $interval = $duration;

                    $slots = $this->generateTimePairs($date,$shift_from,$shift_to,$interval,$buffer,$minutes_early_booking,$shift_break_from,$shift_break_to);
                
                ?>
                <div class="row timeslot_row" style="justify-content: center;">
                <?php
                    for($i=0;$i<count($slots);$i++){
                        $from_slot = date('Y-m-d H:i:s',strtotime($date.' '.$slots[$i]['from']));
                        $to_slot = date('Y-m-d H:i:s',strtotime($date.' '.$slots[$i]['to']));
                        $current_time = date('Y-m-d H:i:s');

                        if($current_time < $from_slot) {
                            $is_allowed = '1';
                        }else{
                            $is_allowed = '0';
                        }
                        if($is_allowed == '1') {
                            $is_available = $this->check_stylist_timeslot_availability_reschedule($exe,$from_slot,$to_slot,$booking_details_id);
                ?>
                    <div class="single_timeslot" style="width:19%;background:<?php if(empty($is_available)){ echo '#01a900'; }else{ if($is_available->id == $booking_details_id){ echo '#01a900'; }else{ echo '#ff0000'; }} ?>;">
                        <input <?php if(empty($is_available)){ echo ''; }else{ if($is_available->id == $booking_details_id){ echo 'checked';}else{ echo 'disabled'; }} ?> type="radio" name="service_stylist_time_slots_<?=$booking_details_id;?>" id="service_stylist_time_slots_<?=$booking_details_id;?>_<?=$slots[$i]['from'];?>@@@<?=$slots[$i]['to'];?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>@@@<?=date('h:i A',strtotime($slots[$i]['to']));?>">
                        <label style="font-size:10px;"><?=date('h:i A',strtotime($slots[$i]['from']));?> to <?=date('h:i A',strtotime($slots[$i]['to']));?></label>
                    </div>
                <?php
                    }}
                ?>
                </div>
                <?php }else{ ?>
                    <div class="col-lg-12">
                        <label class="error">Shift not available for this date</label>
                    </div>
                <?php }
            }else{ ?>
                <div class="col-lg-12">
                    <label class="error">Please select Stylist</label>
                </div>
            <?php }
        }else{ ?>
            <div class="col-lg-12">
                <label class="error">Booking Rules not available</label>
            </div>
        <?php }
    }
    public function reschedule_service($service_details_id){
        $this->db->where('id',$service_details_id);
        $single = $this->db->get('tbl_booking_services_details')->row();
        if(!empty($single)){
            $time_slot = $this->input->post('service_stylist_timeslot_hidden_' . $service_details_id);
            $service_from = explode('@@@',$time_slot)[0];
            $service_to = explode('@@@',$time_slot)[1];
            $service_date = $this->input->post('service_date_' . $service_details_id);
            $service_executive = $this->input->post('service_executive_' . $service_details_id);

            $old_service_from = $single->service_from;
            $old_service_to = $single->service_to;
            $old_service_executive = $single->stylist_id;

            $data = array(
                'stylist_id'        =>  $service_executive,
                'service_date'      =>  date('Y-m-d',strtotime($service_date)),
                'service_from'    	=>  date('Y-m-d H:i:s',strtotime($service_from)),
                'service_to'    	=>  date('Y-m-d H:i:s',strtotime($service_to)),
            );
            // echo '<pre>'; print_r($data); exit;
            $this->db->where('id',$service_details_id);
            $this->db->update('tbl_booking_services_details',$data);
            
            if($single->service_added_from == '1'){
                $this->db->where('allocated_in_booking_id',$single->booking_id);
                $this->db->where('customer_name',$single->customer_name);
                $package_allocation = $this->db->get('tbl_customer_package_allocations')->row();
                if(!empty($package_allocation)){
                    $this->db->where('customer_name',$package_allocation->customer_name);
                    $this->db->where('pacakge_id',$package_allocation->package_id);
                    $this->db->where('added_in_booking_id',$single->booking_id);
                    $this->db->where('allocation_id',$package_allocation->id);
                    $this->db->where('item_id',$single->service_id);
                    $this->db->where('item_type','0');
                    $package_allocation_details = $this->db->get('tbl_booking_package_detail_status')->row();
                    if(!empty($package_allocation_details)){
                        $update_data = array(
                            'service_date'      =>  date('Y-m-d',strtotime($service_date)),
                            'service_from'    	=>  date('Y-m-d H:i:s',strtotime($service_from)),
                            'service_to'    	=>  date('Y-m-d H:i:s',strtotime($service_to)),
                        );
                        $this->db->where('id',$package_allocation_details->id);
                        $this->db->update('tbl_booking_package_detail_status',$update_data);
                    }
                }
            }

            $reschedule_data = array(
                'customer_id'       =>  $single->customer_name,
                'branch_id'         =>  $single->branch_id,
                'salon_id'          =>  $single->salon_id,
                'booking_id'        =>  $single->booking_id,
                'service_details_id'=>  $single->id,
                'service_id'        =>  $single->service_id,
                'old_details'       =>  date('Y-m-d H:i:s',strtotime($old_service_from)).'@@@'.date('Y-m-d H:i:s',strtotime($old_service_to)).'@@@'.$old_service_executive,
                'new_details'       =>  date('Y-m-d H:i:s',strtotime($service_from)).'@@@'.date('Y-m-d H:i:s',strtotime($service_to)).'@@@'.$service_executive,
                'created_on'        =>  date("Y-m-d H:i:s")
            );
            $this->db->insert('tbl_customer_rescheduled_bookings',$reschedule_data);

            return true;
        }else{
            return false;
        }
    }
    public function reschedule_service_ajx(){
        $service_details_id = $this->input->post('booking_service_details_id');
        $service_date = $this->input->post('service_date');
        $service_executive = $this->input->post('service_executive');
        $service_stylist_timeslot_hidden = $this->input->post('service_stylist_timeslot_hidden');

        $this->db->where('id',$service_details_id);
        $single = $this->db->get('tbl_booking_services_details')->row();
        if(!empty($single)){
            $time_slot = $service_stylist_timeslot_hidden;
            $service_from = explode('@@@',$time_slot)[0];
            $service_to = explode('@@@',$time_slot)[1];
            $service_date = $service_date;
            $service_executive = $service_executive;

            $old_service_from = $single->service_from;
            $old_service_to = $single->service_to;
            $old_service_executive = $single->stylist_id;

            $data = array(
                'stylist_id'        =>  $service_executive,
                'service_date'      =>  date('Y-m-d',strtotime($service_date)),
                'service_from'    	=>  date('Y-m-d H:i:s',strtotime($service_from)),
                'service_to'    	=>  date('Y-m-d H:i:s',strtotime($service_to)),
            );
            // echo '<pre>'; print_r($data); exit;
            $this->db->where('id',$service_details_id);
            $this->db->update('tbl_booking_services_details',$data);
            
            if($single->service_added_from == '1'){
                $this->db->where('allocated_in_booking_id',$single->booking_id);
                $this->db->where('customer_name',$single->customer_name);
                $package_allocation = $this->db->get('tbl_customer_package_allocations')->row();
                if(!empty($package_allocation)){
                    $this->db->where('customer_name',$package_allocation->customer_name);
                    $this->db->where('pacakge_id',$package_allocation->package_id);
                    $this->db->where('added_in_booking_id',$single->booking_id);
                    $this->db->where('allocation_id',$package_allocation->id);
                    $this->db->where('item_id',$single->service_id);
                    $this->db->where('item_type','0');
                    $package_allocation_details = $this->db->get('tbl_booking_package_detail_status')->row();
                    if(!empty($package_allocation_details)){
                        $update_data = array(
                            'service_date'      =>  date('Y-m-d',strtotime($service_date)),
                            'service_from'    	=>  date('Y-m-d H:i:s',strtotime($service_from)),
                            'service_to'    	=>  date('Y-m-d H:i:s',strtotime($service_to)),
                        );
                        $this->db->where('id',$package_allocation_details->id);
                        $this->db->update('tbl_booking_package_detail_status',$update_data);
                    }
                }
            }

            $reschedule_data = array(
                'customer_id'       =>  $single->customer_name,
                'branch_id'         =>  $single->branch_id,
                'salon_id'          =>  $single->salon_id,
                'booking_id'        =>  $single->booking_id,
                'service_details_id'=>  $single->id,
                'service_id'        =>  $single->service_id,
                'old_details'       =>  date('Y-m-d H:i:s',strtotime($old_service_from)).'@@@'.date('Y-m-d H:i:s',strtotime($old_service_to)).'@@@'.$old_service_executive,
                'new_details'       =>  date('Y-m-d H:i:s',strtotime($service_from)).'@@@'.date('Y-m-d H:i:s',strtotime($service_to)).'@@@'.$service_executive,
                'created_on'        =>  date("Y-m-d H:i:s")
            );
            $this->db->insert('tbl_customer_rescheduled_bookings',$reschedule_data);

            echo '1';
        }else{
            echo '0';
        }
    }
    public function complete_service_ajx(){
        $service_details_id = $this->input->post('booking_service_details_id');
        $booking_id = $this->input->post('booking_id');

        $this->db->where('id',$booking_id);
        $this->db->where('is_deleted','0');
        $single = $this->db->get('tbl_new_booking')->row();

        $this->db->where('booking_id',$booking_id);
        $this->db->where('is_deleted','0');
        $this->db->where('service_status','0');
        $services = $this->db->get('tbl_booking_services_details')->result();
        if(!empty($single)){
            if(!empty($services)){
                $details_data = array(
                    'service_status'    =>  '1',
                    'completed_on'      =>  date("Y-m-d H:i:s")
                );
                $this->db->where('booking_id',$booking_id);
                $this->db->where('is_deleted','0');
                $this->db->where('service_status','0');
                $this->db->update('tbl_booking_services_details',$details_data);
                
                $details_data = array(
                    'booking_status'    =>  '5',
                    'completed_on'      =>  date("Y-m-d H:i:s")
                );
                $this->db->where('id',$booking_id);
                $this->db->where('is_deleted','0');
                $this->db->update('tbl_new_booking',$details_data);

                foreach($services as $single_service_details){
                    if($single_service_details->is_service_discount_applied == '1' && $single_service_details->service_marketing_discount_type == '1'){ //earn rewards
                        $this->db->where('id',$single->customer_name);
                        $customer_rewards = $this->db->get('tbl_salon_customer')->row();
                        if(!empty($customer_rewards)){
                            $rewards = $single_service_details->rewards_received_discount != "" && $single_service_details->rewards_received_discount != null ? (int)$single_service_details->rewards_received_discount : 0;
                            if($rewards > 0){
                                $pre_balance = $customer_rewards->rewards_balance != "" && $customer_rewards->rewards_balance != null ? (int)$customer_rewards->rewards_balance : 0;
                                $new_balance = $pre_balance + $rewards;

                                $reward_data = array(
                                    'customer_id'                   =>  $single->customer_name,
                                    'branch_id'                     =>  $this->session->userdata('branch_id'),
                                    'salon_id'                      =>  $this->session->userdata('salon_id'),
                                    'booking_id'                    =>  $booking_id,
                                    'rewards_for'                   =>  '0',
                                    'for_service'                   =>  $single_service_details->service_id,
                                    'booking_service_details_id'    =>  $single_service_details->id,
                                    'transaction_type'              =>  '0',
                                    'remark'                        =>  'Reward points credited for service payment',
                                    'previous_reward_balance'       =>  $pre_balance,
                                    'reward_value'                  =>  $rewards,
                                    'new_reward_balance'            =>  $new_balance,
                                    'created_on'                    =>  date("Y-m-d H:i:s")
                                );
                                $this->db->insert('tbl_customer_rewards_history',$reward_data);

                                $this->db->where('id',$single->customer_name);
                                $this->db->update('tbl_salon_customer',array('rewards_balance'=>$new_balance));
                            }
                        }
                    }
                }

                $this->update_booking_service_end($single->id);

                // echo '<pre>'; print_r($services); exit;
                echo '1';
            }else{
                echo '0';
            }
        }else{
            echo '0';
        }
    }
    public function complete_booking_service($service_details_id){
        $this->db->where('id',$service_details_id);
        $single = $this->db->get('tbl_booking_services_details')->row();
        if(!empty($single)){
            // $payment_date = date('Y-m-d',strtotime($this->input->post('payment_date_' . $service_details_id)));
            // $payment_mode = $this->input->post('payment_mode_' . $service_details_id);

            // if($single->payment_status == '0'){
            //     $data = array(
            //         'payment_date'      =>  $payment_date,
            //         'payment_mode'      =>  $payment_mode,
            //         'payment_status'    =>  '1',
            //     );
            //     $this->db->where('id',$single->booking_id);
            //     $this->db->update('tbl_new_booking',$data);

            //     $details_all_data = array(
            //         'payment_date'      =>  $payment_date,
            //         'payment_mode'      =>  $payment_mode,
            //         'payment_status'    =>  '1',
            //     );
            //     $this->db->where('booking_id',$single->booking_id);
            //     $this->db->update('tbl_booking_services_details',$details_all_data);
            // }

            $details_data = array(
                'service_status'    =>  '1',
                'completed_on'      =>  date("Y-m-d H:i:s")
            );
            $this->db->where('id',$service_details_id);
            $this->db->update('tbl_booking_services_details',$details_data);

            return '1@@'.$single->booking_id;
        }else{
            return '0@@'.$single->booking_id;
        }
    }
    
    public function cancel_booking_service($service_details_id){
        $booking_rules = $this->get_booking_rules();
        if(!empty($booking_rules) && $booking_rules->reward_point_cancellation == "1"){
            $servicewise_cancellation = 1;
        }else{
            $servicewise_cancellation = 0;
        }

        $this->db->where('id',$service_details_id);
        $single = $this->db->get('tbl_booking_services_details')->row();
        if(!empty($single)){
            $data = array(
                'service_status'    =>  '2',
                'cancel_remark'     =>  $this->input->post('remark_' . $service_details_id),
                'cancelled_on'      =>  date("Y-m-d H:i:s"),
                'is_emergency_closure_cancellation'     =>  '0'
            );
            // echo '<pre>'; print_r($data); exit;
            $this->db->where('id',$service_details_id);
            $this->db->update('tbl_booking_services_details',$data);
            
            if($single->service_added_from == '1'){
                $this->db->where('allocated_in_booking_id',$single->booking_id);
                $this->db->where('customer_name',$single->customer_name);
                $package_allocation = $this->db->get('tbl_customer_package_allocations')->row();
                if(!empty($package_allocation)){
                    $this->db->where('customer_name',$package_allocation->customer_name);
                    $this->db->where('pacakge_id',$package_allocation->package_id);
                    $this->db->where('added_in_booking_id',$single->booking_id);
                    $this->db->where('allocation_id',$package_allocation->id);
                    $this->db->where('item_id',$single->service_id);
                    $this->db->where('item_type','0');
                    $package_allocation_details = $this->db->get('tbl_booking_package_detail_status')->row();
                    if(!empty($package_allocation_details)){
                        $update_data = array(
                            'used_status'               =>  '0',
                            'item_used_in_booking_id'   =>  null,
                            'service_date'              =>  null,
                            'service_from'              =>  null,
                            'service_to'                =>  null,
                        );
                        $this->db->where('id',$package_allocation_details->id);
                        $this->db->update('tbl_booking_package_detail_status',$update_data);
                    }
                }
            }

            // if(!empty($booking_rules) && $servicewise_cancellation == 1){
            //     if($single->service_reward_points != "" && $single->service_reward_points != null){
            //         $deduct_rewards = $single->service_reward_points;
            //     }else{
            //         $deduct_rewards = 0;
            //     }
            //     $this->db->where('branch_id',$single->branch_id);
            //     $this->db->where('salon_id',$single->salon_id);
            //     $this->db->where('id',$single->customer_name);
            //     $customer = $this->db->get('tbl_salon_customer')->row();
            //     if(!empty($customer)){
            //         $pre_balance = $customer->rewards_balance;
            //         $rewards = $deduct_rewards;
            //         $new_balance = $pre_balance - $rewards;

            //         $reward_data = array(
            //             'customer_id'                   =>  $single->customer_name,
            //             'branch_id'                     =>  $single->branch_id,
            //             'salon_id'                      =>  $single->salon_id,
            //             'booking_id'                    =>  $single->booking_id,
            //             'rewards_for'                   =>  ($single->service_added_from == "1") ? '1' : '0',
            //             'for_service'                   =>  $single->service_id,
            //             'booking_service_details_id'    =>  $single->id,
            //             'transaction_type'              =>  '1',
            //             'remark'                        =>  'Reward points deducted because of service cancellation',
            //             'previous_reward_balance'       =>  $pre_balance,
            //             'reward_value'                  =>  $rewards,
            //             'new_reward_balance'            =>  $new_balance,
            //             'created_on'                    =>  date("Y-m-d H:i:s")
            //         );
            //         $this->db->insert('tbl_customer_rewards_history',$reward_data);

            //         $this->db->where('id',$customer->id);
            //         $this->db->update('tbl_salon_customer',array('rewards_balance'=>$new_balance));
            //     }
            // }

            $this->update_booking_service_end($single->booking_id);
            return true;
        }else{
            return false;
        }
    }
    public function cancel_service_ajx(){
        $booking_id = $this->input->post('booking_id');
        $services_to_cancel = $this->input->post('services_to_cancel');
        $remark = $this->input->post('remark');
        $booking_rules = $this->get_booking_rules();
        if(!empty($booking_rules) && $booking_rules->reward_point_cancellation == "1"){
            $servicewise_cancellation = 1;
        }else{
            $servicewise_cancellation = 0;
        }

        $this->db->where('id',$booking_id);
        $single = $this->db->get('tbl_new_booking')->row();

        if(!empty($single)){
            $this->db->where('booking_id',$single->id);
            $this->db->where('is_deleted','0');
            $services = $this->db->get('tbl_booking_services_details')->result();
            if(!empty($services)){
                foreach($services as $services_result){
                    if(in_array($services_result->id,$services_to_cancel)){
                        $data = array(
                            'service_status'    =>  '2',
                            'canceled_by'       =>  '0',
                            'cancel_remark'     =>  $remark,
                            'cancelled_on'      =>  date("Y-m-d H:i:s"),
                            'is_emergency_closure_cancellation'     =>  '0'
                        );
                        // echo '<pre>'; print_r($data); exit;
                        $this->db->where('id',$services_result->id);
                        $this->db->update('tbl_booking_services_details',$data);                    
                
                        if($services_result->service_added_from == '1'){
                            $this->db->where('allocated_in_booking_id',$services_result->booking_id);
                            $this->db->where('customer_name',$services_result->customer_name);
                            $package_allocation = $this->db->get('tbl_customer_package_allocations')->row();
                            if(!empty($package_allocation)){
                                $this->db->where('customer_name',$package_allocation->customer_name);
                                $this->db->where('pacakge_id',$package_allocation->package_id);
                                $this->db->where('added_in_booking_id',$services_result->booking_id);
                                $this->db->where('allocation_id',$package_allocation->id);
                                $this->db->where('item_id',$services_result->service_id);
                                $this->db->where('item_type','0');
                                $package_allocation_details = $this->db->get('tbl_booking_package_detail_status')->row();
                                if(!empty($package_allocation_details)){
                                    $update_data = array(
                                        'used_status'               =>  '0',
                                        'item_used_in_booking_id'   =>  null,
                                        'service_date'              =>  null,
                                        'service_from'              =>  null,
                                        'service_to'                =>  null,
                                    );
                                    $this->db->where('id',$package_allocation_details->id);
                                    $this->db->update('tbl_booking_package_detail_status',$update_data);
                                }
                            }
                        }                    

                        if(!empty($booking_rules) && $servicewise_cancellation == 1){
                            if($services_result->service_marketing_discount_type == '1' && $services_result->is_service_discount_applied == '1' && $services_result->rewards_received_discount != "" && $services_result->rewards_received_discount != null){
                                $deduct_rewards = (int)$services_result->rewards_received_discount;
                            
                                $this->db->where('branch_id',$services_result->branch_id);
                                $this->db->where('salon_id',$services_result->salon_id);
                                $this->db->where('id',$services_result->customer_name);
                                $customer = $this->db->get('tbl_salon_customer')->row();
                                if(!empty($customer)){
                                    $pre_balance = $customer->rewards_balance;
                                    $rewards = $deduct_rewards;
                                    $new_balance = $pre_balance - $rewards;

                                    $reward_data = array(
                                        'customer_id'                   =>  $services_result->customer_name,
                                        'branch_id'                     =>  $services_result->branch_id,
                                        'salon_id'                      =>  $services_result->salon_id,
                                        'booking_id'                    =>  $services_result->booking_id,
                                        'rewards_for'                   =>  ($services_result->service_added_from == "1") ? '1' : '0',
                                        'for_service'                   =>  $services_result->service_id,
                                        'booking_service_details_id'    =>  $services_result->id,
                                        'transaction_type'              =>  '1',
                                        'remark'                        =>  'Reward points deducted because of service cancellation',
                                        'previous_reward_balance'       =>  $pre_balance,
                                        'reward_value'                  =>  $rewards,
                                        'new_reward_balance'            =>  $new_balance,
                                        'created_on'                    =>  date("Y-m-d H:i:s")
                                    );
                                    $this->db->insert('tbl_customer_rewards_history',$reward_data);

                                    $this->db->where('id',$customer->id);
                                    $this->db->update('tbl_salon_customer',array('rewards_balance'=>$new_balance));
                                }
                            }
                        }
                    }
                }
                $this->update_booking_service_end($single->id);

                $this->db->where('booking_id',$single->id);
                $this->db->where('is_deleted','0');
                $this->db->where('service_status','2');
                $cancelled_services = $this->db->get('tbl_booking_services_details')->result();
                if(count($services) == count($cancelled_services)){
                    $update_data = array(
                        'booking_status'    =>  '2',
                        'canceled_by'       =>  '0',
                        'cancel_remark'     =>  $remark,
                        'cancelled_on'      =>  date("Y-m-d H:i:s"),
                        'is_emergency_closure_cancellation'     =>  '0'
                    );
                    $this->db->where('id',$single->id);
                    $this->db->update('tbl_new_booking',$update_data);
                }                

                if(!empty($services_to_cancel) && $services_to_cancel != ""){
                    $this->db->where('id',$single->customer_name);
                    $this->db->where('branch_id',$this->session->userdata('branch_id'));
                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                    $this->db->where('is_deleted','0');
                    $customer_details = $this->db->get('tbl_salon_customer')->row();
                    if($customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
                        $services_text = '';
                        $this->db->where('id',$single->id);
                        $booking_details = $this->db->get('tbl_new_booking')->row();
                        if(!empty($booking_details)){
                            $services = $services_to_cancel;
                            if(count($services) > 0){
                                for($i=0;$i<count($services);$i++){
                                    $this->db->where('booking_id',$single->id);
                                    $this->db->where('id',$services[$i]);
                                    $this->db->where('is_deleted','0');
                                    $service_schedule_details = $this->db->get('tbl_booking_services_details')->row();
                                    if(!empty($service_schedule_details)){
                                        $this->db->where('id',$service_schedule_details->service_id);
                                        $this->db->where('branch_id',$this->session->userdata('branch_id'));
                                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                                        $this->db->where('is_deleted','0');
                                        $service_details = $this->db->get('tbl_salon_emp_service')->row();
                                        if (!empty($service_details)) {
                                            // $services_text .= $service_details->service_name . '|' . $service_details->service_name_marathi;
                                            $services_text .= $service_details->service_name;
                                            
                                            if ($i < count($services) - 1) {
                                                $services_text .= ', ';
                                            }
                                        }
                                    }
                                }
                                $services_text = trim($services_text,',');
                                $services_text = trim($services_text,' ');
                                $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                                $finalNumber = substr($cleanedNumber, -10);
                                $finalNumber = '91' . $finalNumber;

                                $this->db->where('is_deleted','0');
                                $this->db->where('id',$this->session->userdata('branch_id'));
                                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                                $branch = $this->db->get('tbl_branch')->row();
                                $visit_text = '';
                                if(!empty($branch)){
                                    if($branch->branch_name != ""){
                                        $visit_text .= $branch->branch_name;
                                    }
                                }

                                $type = '7';
                                $message = "Hello, " . $customer_details->full_name . "!%0aCancelled Appointment:%0a%0a\u{1F5D3}" . date('d M, Y',strtotime($booking_details->service_start_date)) . " for%0a\u{1F488}" . $services_text . "%0a%0aThank you!%0a" . $visit_text . "";
                                $app_message = "Hello, " . $customer_details->full_name . "!\nCancelled Appointment:\n\n📅 " . date('d M, Y', strtotime($booking_details->service_start_date)) . " for\n💇‍♀️ " . $services_text . "\n\nThank you!\n" . $visit_text . "";
                                $number = $finalNumber;
                                $customer = $customer_details->id;
                                $salon_id = $customer_details->salon_id;
                                $branch_id = $customer_details->branch_id;
                                $for_order_id = $booking_details->id;
                                $for_offer_id = '';
                                $for_query_id = '';
                                $consent_form_id = '';
                                $title = 'Appointment Cancelled';
                                $generated_from = '0';
                                $notification_data = [
                                    "landing_page"  => 'order_details',
                                    "redirect_id"   => (string)$for_order_id
                                ];
                    
                                $message_send_on = '';
                                $template_id = '';                                
                                $email_subject = '';
                                $email_html = '';
                                $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                                if(!empty($booking_rules)){
                                    if($booking_rules->booking_reminder_type == '1'){
                                        $message_send_on = '0'; //SMS
                                        $template_id = '';
                                    }elseif($booking_rules->booking_reminder_type == '2'){
                                        $message_send_on = '2'; //EMAIL
                                        $email_html = '';
                                    }elseif($booking_rules->booking_reminder_type == '3'){
                                        $message_send_on = '1'; //WP
                                    }
                                }
                                $membership_history_id = '';
                                $package_allocation_id = '';
                                $giftcard_purchase_id = '';
                                $trying_booking_id = '';
                                $wp_template_data = [];
                                $cron_id = '';

                                $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                            }
                        }
                    }
                }   

                $this->db->where('booking_id',$single->id);
                $this->db->where('is_deleted','0');
                $this->db->where('service_status','0');
                $new_services = $this->db->get('tbl_booking_services_details')->result();
                $array = array();
                if(!empty($new_services)){
                    foreach($new_services as $new_services_result){
                        $array[] = $new_services_result->service_id;
                    }
                }

                $update_data = array(
                    'services'    =>  implode(',',$array),
                );
                $this->db->where('id',$single->id);
                $this->db->update('tbl_new_booking',$update_data);

                $this->send_trying_for_booking_messages($single->id);
    
                echo '1';
            }else{
                echo '0';
            }    
        }else{
            echo '0';
        }
    }
    public function send_trying_for_booking_messages($booking_id){
        $count = 0;
        $this->db->where('id',$booking_id);
        $single = $this->db->get('tbl_new_booking')->row();
        if(!empty($single)){
            $this->db->where('id',$single->branch_id);
            $branch = $this->db->get('tbl_branch')->row();
            $feature_slugs = $this->Salon_model->get_subscription_slugs($branch->subscription_id);
            if(!empty(array_intersect(['trying-booking-message'], $feature_slugs))){ 
                $service_start_date = date('Y-m-d',strtotime($single->service_start_date)) ?? '';
                $service_start_time = date('H:i:s',strtotime($single->service_start_time)) ?? '';
                $service_end_time = date('H:i:s',strtotime($single->service_end_time)) ?? '';
                
                list($year, $month, $day) = explode('-', $service_start_date);
                list($hour, $minute, $second) = explode(':', $service_start_time);
                $timestamp = mktime($hour, $minute, $second, $month, $day, $year);
                $service_datetime = date('Y-m-d H:i:s', $timestamp);  

                $current_timestamp = time();
                if ($service_datetime > $current_timestamp) {
                    $this->db->select('tbl_trying_for_booking.*,tbl_salon_customer.customer_phone,tbl_salon_customer.full_name');
                    $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_trying_for_booking.customer_id');
                    $this->db->where('DATE(tbl_trying_for_booking.booking_date)', $service_start_date);
                    $this->db->where('tbl_trying_for_booking.branch_id', $single->branch_id);
                    $this->db->where('tbl_trying_for_booking.salon_id', $single->salon_id);
                    $this->db->where('tbl_trying_for_booking.is_deleted','0');
                    $this->db->group_by('tbl_trying_for_booking.customer_id');
                    $trying_bookings = $this->db->get('tbl_trying_for_booking')->result();
                    if(!empty($trying_bookings)){
                        foreach($trying_bookings as $trying_bookings_result){
                            $this->db->select('tbl_new_booking.*,tbl_salon_customer.customer_phone,tbl_salon_customer.full_name');
                            $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_new_booking.customer_name');
                            $this->db->where('DATE(tbl_new_booking.service_start_date)', $service_start_date);
                            $this->db->where('tbl_new_booking.branch_id', $trying_bookings_result->branch_id);
                            $this->db->where('tbl_new_booking.salon_id', $trying_bookings_result->salon_id);
                            $this->db->where('tbl_new_booking.customer_name', $trying_bookings_result->customer_id);
                            $this->db->where('tbl_new_booking.is_deleted','0');
                            $this->db->group_by('tbl_new_booking.customer_id');
                            $existing_booking = $this->db->get('tbl_new_booking')->num_rows();
                            if($existing_booking <= 0 && $trying_bookings_result->customer_phone != "" && $trying_bookings_result->customer_phone != null && $trying_bookings_result->customer_phone != '0000000000'){
                                $count = $count + 1;
                                $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                                $finalNumber = substr($cleanedNumber, -10);
                                $finalNumber = '91' . $finalNumber;
                                
                                $visit_text = '';
                                if(!empty($branch)){
                                    if($branch->branch_name != ""){
                                        // $visit_text .= $branch->branch_name;
                                        $visit_text .= $branch->salon_number;
                                    }
                                }

                                $type = '23';
                                $message = "Hello " . $trying_bookings_result->full_name . ",%0a%0aWe noticed you previously attempted to book an appointment, but your selected time wasn’t available.%0a%0aA recent cancellation has opened up the following slot:%0a📆 Date: " . date('d M, Y', strtotime($service_start_date)) . " ⏰ Time: " . date('h:i A', strtotime($service_start_time)) . "%0a%0aPlease reschedule your appointment from Napito App.%0a%0aFor any assistance please call on " . $visit_text . ".";
                                $app_message = "Hello " . $trying_bookings_result->full_name . ",\n\nWe noticed you previously attempted to book an appointment, but your selected time wasn’t available.\n\nA recent cancellation has opened up the following slot:\n📆 Date: " . date('d M, Y', strtotime($service_start_date)) . " ⏰ Time: " . date('h:i A', strtotime($service_start_time)) . "\n\nPlease reschedule your appointment from Napito App.\n\nFor any assistance please call on " . $visit_text . ".";

                                $number = $finalNumber;
                                $customer = $trying_bookings_result->customer_id;
                                $salon_id = $trying_bookings_result->salon_id;
                                $branch_id = $trying_bookings_result->branch_id;
                                $for_order_id = '';
                                $for_offer_id = '';
                                $for_query_id = '';
                                $consent_form_id = '';
                                $title = 'New Slot Available';
                                $generated_from = '0';
                                $notification_data = [
                                    "landing_page"  => 'book_appointment',
                                    "redirect_id"   => (string)$for_order_id
                                ];
                    
                                $message_send_on = '';
                                $template_id = '';                                
                                $email_subject = '';
                                $email_html = '';
                                $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                                if(!empty($booking_rules)){
                                    if($booking_rules->booking_reminder_type == '1'){
                                        $message_send_on = '0'; //SMS
                                        $template_id = '';
                                    }elseif($booking_rules->booking_reminder_type == '2'){
                                        $message_send_on = '2'; //EMAIL
                                        $email_html = '';
                                    }elseif($booking_rules->booking_reminder_type == '3'){
                                        $message_send_on = '1'; //WP
                                    }
                                }
                                $message_send_on = '1';
                                $membership_history_id = '';
                                $package_allocation_id = '';
                                $giftcard_purchase_id = '';
                                $trying_booking_id = $trying_bookings_result->id;
                                $wp_template_data = [
                                    'template_name' =>  Trying_Booking_Temp,
                                    'pay_load_components' => [
                                        [
                                            'type' => 'body',
                                            'parameters' => [
                                                [ 'type' => 'text', 'text' => $trying_bookings_result->full_name ],
                                                [ 'type' => 'text', 'text' => $service_start_date ],
                                                [ 'type' => 'text', 'text' => date('h:i A', strtotime($service_start_time)) . " - " . date('h:i A', strtotime($service_end_time)) ],
                                                [ 'type' => 'text', 'text' => $visit_text ]
                                            ]
                                        ]
                                    ]
                                ];
                                $cron_id = '';

                                $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                            }
                        }   
                    }
                }
            }
        } 
        if($count > 0){
            $this->Salon_model->send_cron_confirmation($wp_template_data);
        }
        return true;
    }
    function check_stylist_timeslot_availability($stylist,$slot_from,$slot_to){
        $this->db->where('is_deleted','0');
        $this->db->where('service_status','0');
        $this->db->where('stylist_id',$stylist);
        $result = $this->db->get('tbl_booking_services_details')->result();

        if(!empty($result)){
            foreach($result as $data){
                $service_from = date('Y-m-d H:i:s', strtotime($data->service_from));
                $service_to = date('Y-m-d H:i:s', strtotime($data->service_to));
                $slot_from = date('Y-m-d H:i:s', strtotime($slot_from));
                $slot_to = date('Y-m-d H:i:s', strtotime($slot_from));

                if(($service_from <= $slot_from && $service_to >= $slot_from) || ($service_from <= $slot_to && $service_to >= $slot_to)){
                    return false;
                }
            }
        }else{
            return true;
        }
        return true;
    }
    
    function check_stylist_timeslot_availability_reschedule($stylist,$slot_from,$slot_to,$booking_details_id){
        $this->db->where('is_deleted','0');
        $this->db->where('service_status','0');
        $this->db->where('stylist_id',$stylist);
        $result = $this->db->get('tbl_booking_services_details')->result();

        if(!empty($result)){
            foreach($result as $data){
                $service_from = date('Y-m-d H:i:s', strtotime($data->service_from));
                $service_to = date('Y-m-d H:i:s', strtotime($data->service_to));
                $slot_from = date('Y-m-d H:i:s', strtotime($slot_from));
                $slot_to = date('Y-m-d H:i:s', strtotime($slot_from));

                if(($service_from <= $slot_from && $service_to >= $slot_from) || ($service_from <= $slot_to && $service_to >= $slot_to)){
                    return $data;
                }
            }
        }else{
            return array();
        }
        return array();
    }
    function generateTimePairs($booking_date, $shift_from, $shift_to, $duration, $buffer, $minutes_early_booking, $break_from, $break_to) {
        $current_time = $shift_from;
        $time_pairs = array();

        while ($current_time < $shift_to) {
            $time_difference = 0;

            // Check if current time is within break period
            $current_hour = date('H', $current_time);
            $current_minute = date('i', $current_time);
            $break_from_hour = date('H', $break_from);
            $break_from_minute = date('i', $break_from);
            $break_to_hour = date('H', $break_to);
            $break_to_minute = date('i', $break_to);
    
            if (
                ($current_hour >= $break_from_hour && $current_hour <= $break_to_hour) &&
                ($current_minute >= $break_from_minute && $current_minute <= $break_to_minute)
            ) {
                // Skip generating time slot during break period
                $current_time = strtotime('+1 minute', $break_to);
                continue;
            }
    
            // Check if adding service duration exceeds shift end time
            $next_time = strtotime('+' . $duration . ' minutes', $current_time);
            
            if ($next_time > $shift_to) {
                // Adjust next time to not exceed shift end time
                $next_time = $shift_to;
            }
    
            // $time_pairs[] = array(
            //     'from' => date('H:i', $current_time),
            //     'to' => date('H:i', $next_time)
            // );

            $running_timestamp = time(); // Current timestamp
            $current_time_timestamp = strtotime($booking_date . ' ' . date('H:i', $current_time));

            $time_difference = $current_time_timestamp - $running_timestamp;

            $early_booking_seconds = $minutes_early_booking * 60;

            if ($time_difference >= $early_booking_seconds) {
                $time_pairs[] = array(
                    'from'  => date('H:i', $current_time),
                    'to'    => date('H:i', $next_time)
                );
            }
    
            // Move to the next pair
            $current_time = strtotime('+'.$buffer.' minute', $next_time);
        }
    
        return $time_pairs;
    }  
    public function check_giftcard_redemption_all($id,$customer,$giftcard_id,$branch_id,$salon_id){
        $this->db->where('type','3');
        $this->db->where('is_deleted','0');
        $this->db->where('gift_card_status','0');
        $this->db->where('id',$id);
        $this->db->where('customer_id',$customer);
        $this->db->where('giftcard_id',$giftcard_id);
        $this->db->where('branch_id', $branch_id);
        $this->db->where('salon_id', $salon_id);
        $result = $this->db->get('tbl_booking_payment_entry')->row();
        return $result;
    }
    public function check_giftcard_redemption($customer,$giftcard_id){
        $this->db->where('type','3');
        $this->db->where('is_deleted','0');
        $this->db->where('gift_card_status','0');
        $this->db->where('customer_id',$customer);
        $this->db->where('giftcard_id',$giftcard_id);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_booking_payment_entry')->row();
        return $result;
    }
    public function check_giftcard_ajx(){
        $code = $this->input->post('code');
        $customer = $this->input->post('customer');
        
        $is_valid = '0';
        $giftcard_id = '';            
        $is_new = '';
        $min_amount = '';
        $considered_amount = '';
        $giftcard_redemption_id = '';
        $giftcard_owner_id = ''; 

        $this->db->where('is_deleted','0');
        $this->db->where('id',$customer);
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $exist_customer = $this->db->get('tbl_salon_customer')->row();
        
        if(!empty($exist_customer)){
            $this->db->select('tbl_booking_payment_entry.*, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone, tbl_gift_card.gender, tbl_gift_card.gift_card_code, tbl_gift_card.gift_name, tbl_gift_card.discount, tbl_gift_card.discount_in, tbl_gift_card.regular_price, tbl_gift_card.gift_price, tbl_gift_card.bg_color_input, tbl_gift_card.bg_color, tbl_gift_card.text_color_input, tbl_gift_card.text_color, tbl_gift_card.min_booking_amt');
            $this->db->join('tbl_gift_card', 'tbl_gift_card.id = tbl_booking_payment_entry.giftcard_id');
            $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_payment_entry.customer_id');
            $this->db->where('tbl_booking_payment_entry.branch_id',$this->session->userdata('branch_id'));
            $this->db->where('tbl_booking_payment_entry.salon_id',$this->session->userdata('salon_id'));
            $this->db->where('tbl_gift_card.gender',$exist_customer->gender);
            $this->db->where('tbl_booking_payment_entry.giftcard_customer_uid',$code);
            $this->db->where('tbl_booking_payment_entry.is_deleted','0');
            $this->db->where('tbl_booking_payment_entry.gift_card_status','0');
            $this->db->where('tbl_booking_payment_entry.type','3');
            $result = $this->db->get('tbl_booking_payment_entry')->row();

            if(!empty($result)){
                $considered_amount = $result->gift_card_balance != "" ? $result->gift_card_balance : '0';
                $min_amount = $result->giftcard_min_amount != "" ? $result->giftcard_min_amount : '0';
                $is_new = '0';
                $giftcard_redemption_id = $result->id;
                $is_valid = '1';
                $giftcard_id = $result->giftcard_id;
                $giftcard_owner_id = $result->customer_id;
            }
        }

        echo json_encode(
            array(
                'is_customer_used'  =>  $is_new,
                'is_valid'          =>  $is_valid,
                'giftcard_id'       =>  $giftcard_id,
                'giftcard_min_amount'           =>  $min_amount,
                'giftcard_discount_amount'      =>  $considered_amount,
                'giftcard_redemption_id'        =>  $giftcard_redemption_id,
                'giftcard_owner_id'             =>  $giftcard_owner_id,
                // 'result'                        =>  $result
            ));
    }
    public function check_offer_ajx(){
        $offerID = $this->input->post('offerID');
        $customer = $this->input->post('customer');
        $booking_id = $this->input->post('booking_id');
        $booking_services = $this->input->post('services');
        $services = []; 
        if($booking_services != "" && is_array($booking_services) && !empty($booking_services)){
            for($i=0;$i<count($booking_services);$i++){
                if($booking_services[$i]['service_id'] != ""){
                    $services[] = $booking_services[$i]['service_id'];
                }
            }
        }
        echo 'hiii<pre>'; print_r($services); exit();
        $this->db->where('id',$customer);
        $this->db->where('is_deleted','0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $customer_details = $this->db->get('tbl_salon_customer')->row();

        $this->db->where('id',$offerID);
        $this->db->where('gender',$customer_details->gender);
        $this->db->where('is_deleted','0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_offers')->row();
        
        if(!empty($result)){
            $services = explode(',',$offers_list_result->service_name);
            $services_text = '';
            $services_array = [];
            if(count($services) > 0){
                for($i=0;$i<count($services);$i++){
                    $this->db->where('id',$services[$i]);
                    $this->db->where('branch_id',$this->session->userdata('branch_id'));
                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                    $this->db->where('is_deleted','0');
                    $service_details = $this->db->get('tbl_salon_emp_service')->row();
                    if (!empty($service_details)) {
                        $services_text .= $service_details->service_name;
                        
                        if ($i < count($services) - 1) {
                            $services_text .= ', ';
                        }
                    }
                }
            }
            $is_valid = '1';
            $giftcard_id = $result->id;
        }

        echo json_encode(
            array(
                'is_customer_used'  =>  $is_new,
                'is_valid'          =>  $is_valid,
                'giftcard_id'       =>  $giftcard_id,
                'giftcard_min_amount'           =>  $min_amount,
                'giftcard_discount_amount'      =>  $considered_amount,
                'giftcard_redemption_id'        =>  $giftcard_redemption_id
            ));
    }

    public function get_stylistwise_calender_data_old(){
        $stylist_id = $this->input->post('stylist_id');

        $this->db->where('id',$stylist_id);
        $this->db->where('is_deleted','0');
        $single = $this->db->get('tbl_salon_employee')->row();

        $this->db->select('tbl_booking_services_details.*,tbl_salon_employee.full_name as stylist_name, tbl_new_booking.payment_status as main_payment_status, tbl_salon_customer.id as customer_id, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id','left');
        $this->db->where('tbl_booking_services_details.stylist_id',$stylist_id);
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $bookings = $this->db->get('tbl_booking_services_details')->result();

        if(!empty($bookings)){
            foreach($bookings as &$bookings_result){
                $this->db->where('tbl_booking_services_details.booking_id',$bookings_result->booking_id);
                $this->db->where('tbl_booking_services_details.is_deleted','0');
                $this->db->where('tbl_booking_services_details.service_status','2');
                $cancelled = $this->db->get('tbl_booking_services_details')->num_rows();
                if($cancelled > 0){
                    $bookings_result->is_any_service_cancelled = '1';
                }else{
                    $bookings_result->is_any_service_cancelled = '0';
                }
                
                $this->db->where('tbl_booking_services_details.booking_id',$bookings_result->booking_id);
                $this->db->where('tbl_booking_services_details.is_deleted','0');
                $this->db->where('tbl_booking_services_details.service_status','1');
                $completed = $this->db->get('tbl_booking_services_details')->num_rows();
                if($completed > 0){
                    $bookings_result->is_any_service_completed = '1';
                }else{
                    $bookings_result->is_any_service_completed = '0';
                }
            }
        }

        echo json_encode(
            array(
                'single'      =>  $single,
                'bookings'    =>  $bookings,
            )
        );
    }
    public function get_stylistwise_calender_data($date = '',$stylist_id = ''){
        $custom_array = array();
        if($stylist_id == ""){
            $stylist_id = $this->input->post('stylist_id');
        }

        $this->db->where('id',$stylist_id);
        $this->db->where('is_deleted','0');
        $single = $this->db->get('tbl_salon_employee')->row();
        
        $this->db->select('tbl_booking_services_details.*, tbl_salon_employee.full_name as stylist_name, tbl_new_booking.payment_status as main_payment_status, tbl_salon_customer.id as customer_id, tbl_salon_customer.full_name as customer_name, tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name, tbl_salon_emp_service.service_name_marathi');
        $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->where('tbl_booking_services_details.stylist_id', $stylist_id);
        if($date != ""){
            $this->db->where('DATE(tbl_booking_services_details.service_date)', $date);
        }
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where_in('tbl_booking_services_details.service_status', ['0', '1']);
        $this->db->order_by('tbl_booking_services_details.service_from', 'asc');

        $appointments = $this->db->get('tbl_booking_services_details')->result();

        $grouped_appointments = array();

        if (!empty($appointments)) {
            $current_booking_id = null;
            $start_datetime = null;
            $end_datetime = null;
            $appointment_ids = array();

            foreach ($appointments as $appointment) {
                if ($appointment->booking_id != $current_booking_id) {
                    // New booking_id encountered, save previous group if exists
                    if ($current_booking_id !== null) {
                        $grouped_appointments[] = array(
                            'booking_id' => $current_booking_id,
                            'start_datetime' => $start_datetime,
                            'end_datetime' => $end_datetime,
                            'appointment_ids' => $appointment_ids,
                        );
                    }
                    // Reset for new group
                    $current_booking_id = $appointment->booking_id;
                    $start_datetime = $appointment->service_from; // Start time of the new group
                    $end_datetime = $appointment->service_to; // End time of the new group
                    $appointment_ids = array($appointment->id); // Initialize array with the current appointment id
                } else {
                    // Check if the current appointment starts immediately after the previous one ends
                    if ($appointment->service_from <= $end_datetime) {
                        // Extend the current group's end_datetime if there is an overlap or adjacency
                        if ($appointment->service_to > $end_datetime) {
                            $end_datetime = $appointment->service_to;
                        }
                        // Add the appointment id to the list
                        $appointment_ids[] = $appointment->id;
                    } else {
                        // Start a new group for a gap in appointments
                        $grouped_appointments[] = array(
                            'booking_id' => $current_booking_id,
                            'start_datetime' => $start_datetime,
                            'end_datetime' => $end_datetime,
                            'appointment_ids' => $appointment_ids,
                        );

                        // Reset for new group
                        $start_datetime = $appointment->service_from;
                        $end_datetime = $appointment->service_to;
                        $appointment_ids = array($appointment->id);
                    }
                }
            }

            // Add the last group after finishing the loop
            if ($current_booking_id !== null) {
                $grouped_appointments[] = array(
                    'booking_id' => $current_booking_id,
                    'start_datetime' => $start_datetime,
                    'end_datetime' => $end_datetime,
                    'appointment_ids' => $appointment_ids,
                );
            }
        }
        // echo '<pre>'; print_r($grouped_appointments); 
        if(!empty($grouped_appointments)){
            $booking_rules = $this->get_booking_rules();
            if(!empty($booking_rules)){
                // $booking_rescheduling = $booking_rules->booking_rescheduling;
                // $cancellation = $booking_rules->cancellation;

                $cancellation = 0;
                $booking_rescheduling = 0;
                for($i=0;$i<count($grouped_appointments);$i++){
                    $this->db->select('tbl_new_booking.*, tbl_salon_customer.id as customer_id, tbl_salon_customer.full_name as customer_full_name,tbl_salon_customer.customer_phone');
                    $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
                    $this->db->where('tbl_new_booking.id',$grouped_appointments[$i]['booking_id']);
                    $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
                    $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
                    if($date != ""){
                        $this->db->where('DATE(tbl_new_booking.service_start_date)', $date);
                    }
                    $this->db->where('tbl_new_booking.is_deleted','0');
                    $this->db->group_by('tbl_new_booking.id');
                    $single_booking = $this->db->get('tbl_new_booking')->row();
                    if(!empty($single_booking)){
                        $this->db->select('tbl_service_payment.*, tbl_salon_customer.id as customer_id, tbl_salon_customer.full_name as customer_full_name,tbl_salon_customer.customer_phone');
                        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_service_payment.customer_name');
                        $this->db->where('tbl_service_payment.booking_id',$single_booking->id);
                        $this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
                        $this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
                        $this->db->where('tbl_service_payment.is_deleted','0');
                        $booking_payment = $this->db->get('tbl_service_payment')->row();
    
                        $this->db->select('tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_sub_category.sub_category_marathi,tbl_booking_services_details.*,tbl_salon_employee.full_name as stylist_name, tbl_new_booking.payment_status as main_payment_status, tbl_salon_customer.id as customer_id, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
                        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
                        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
                        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
                        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
                        $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
                        $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
                        $this->db->where('tbl_booking_services_details.stylist_id',$stylist_id);
                        $this->db->where('tbl_booking_services_details.booking_id',$single_booking->id);
                        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
                        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
                        $this->db->where('tbl_booking_services_details.is_deleted','0');
                        if($date != ""){
                            $this->db->where('DATE(tbl_booking_services_details.service_date)', $date);
                        }
                        $this->db->where_in('tbl_booking_services_details.id',$grouped_appointments[$i]['appointment_ids']);
                        $this->db->where_in('tbl_booking_services_details.service_status',['0','1']);
                        $booking_services = $this->db->get('tbl_booking_services_details')->result();
                        
                        $this->db->select('tbl_store_reviews.*, tbl_salon_customer.id as customer_id, tbl_salon_customer.full_name as customer_full_name,tbl_salon_customer.customer_phone');
                        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_store_reviews.customer_id');
                        $this->db->where('tbl_store_reviews.booking_id',$single_booking->id);
                        $this->db->where('tbl_store_reviews.branch_id', $this->session->userdata('branch_id'));
                        $this->db->where('tbl_store_reviews.salon_id', $this->session->userdata('salon_id'));
                        $this->db->where('tbl_store_reviews.is_deleted','0');
                        $booking_review = $this->db->get('tbl_store_reviews')->row();
                        if(!empty($booking_review)){
                            $review_id = $booking_review->id;
                        }else{
                            $review_id = '';
                        }

                        $description = '';
                        if(!empty($booking_services)){
                            foreach($booking_services as $data){
                                // $description .= '<b>'.$data->service_name.'|'.$data->service_name_marathi.'</b> <small>['.$data->sub_category_name.'|'.$data->sub_category_marathi.']</small><br><br>';
                                $description .= $data->sub_category_name.'|'.$data->sub_category_marathi.' -> <b>'.$data->service_name.'|'.$data->service_name_marathi.'</b><br><br>';
                            }
                        }
    
                        if(!empty($booking_payment)){                        
                            $final_payable_price = $booking_payment->payble_price;
                            $final_discount_amount = $booking_payment->total_discount_amount;
                            $final_gst_amount = $booking_payment->gst_amount;
                            $final_final_price = $booking_payment->amount_to_paid;
                        }else{                        
                            $final_payable_price = $single_booking->payble_price;
                            $final_discount_amount = $single_booking->total_discount_amount;
                            $final_gst_amount = $single_booking->gst_amount;
                            $final_final_price = $single_booking->amount_to_paid;
                        }                        
    
                        $service_from = new DateTime(date('Y-m-d',strtotime($grouped_appointments[$i]['start_datetime'])).' '.date('H:i:s',strtotime($grouped_appointments[$i]['start_datetime'])));
                        $service_from->modify("-$booking_rescheduling minutes");
                        $allowed_rescheduling_time = $service_from->format('Y-m-d H:i:s');
                        
                        $service_from_cancel = new DateTime(date('Y-m-d',strtotime($grouped_appointments[$i]['start_datetime'])).' '.date('H:i:s',strtotime($grouped_appointments[$i]['start_datetime'])));
                        $service_from_cancel->modify("-$cancellation minutes");
                        $allowed_cancel_time = $service_from_cancel->format('Y-m-d H:i:s');

                        $custom_array[] = array(
                            'booking_no'                    =>  $single_booking->receipt_no,
                            'id'                            =>  $single_booking->id,
                            'customer_id'                   =>  $single_booking->customer_id,
                            'customer_full_name'            =>  $single_booking->customer_full_name,
                            'customer_phone'                =>  $single_booking->customer_phone,
                            'payment_status'                =>  $single_booking->payment_status,
                            'booking_status'                =>  $single_booking->booking_status,
                            'booking_payment_id'            =>  $single_booking->booking_payment_id,
            
                            // 'is_rescheduling_allowed'       =>  date('Y-m-d H:i:s') <= $allowed_rescheduling_time ? '1' : '0',
                            // 'is_cancel_allowed'             =>  date('Y-m-d H:i:s') <= $allowed_cancel_time ? '1' : '0',
                            
                            'is_rescheduling_allowed'       =>  '1',
                            'is_cancel_allowed'             =>  '1',
                                            
                            'final_payable_price'           =>  $final_payable_price,
                            'final_discount_amount'         =>  $final_discount_amount,
                            'final_gst_amount'              =>  $final_gst_amount,
                            'final_final_price'             =>  $final_final_price,
                            'review_id'                     =>  $review_id,
                            
                            'booking_description'           =>  $description,
                            'service_start_date'            =>  date('Y-m-d',strtotime($grouped_appointments[$i]['start_datetime'])),
                            'service_start_time'            =>  date('H:i:s',strtotime($grouped_appointments[$i]['start_datetime'])),
                            'service_end_date'              =>  date('Y-m-d',strtotime($grouped_appointments[$i]['end_datetime'])),
                            'service_end_time'              =>  date('H:i:s',strtotime($grouped_appointments[$i]['end_datetime'])),
                        );
                    }
                }
            }
        }

        return 
            array(
                'single'      =>  $single,
                'bookings'    =>  $custom_array,
            );
    }
    
    public function get_is_any_service_cancelled($id){
        $this->db->where('tbl_booking_services_details.booking_id',$id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where('tbl_booking_services_details.service_status','2');
        $cancelled = $this->db->get('tbl_booking_services_details')->num_rows();
        if($cancelled > 0){
            return '1';
        }else{
            return '0';
        }
    }
    public function get_is_any_service_completed($id){        
        $this->db->where('tbl_booking_services_details.booking_id',$id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where('tbl_booking_services_details.service_status','1');
        $completed = $this->db->get('tbl_booking_services_details')->num_rows();
        if($completed > 0){
            return '1';
        }else{
            return '0';
        }
    }
    
    public function get_all_stylists_data(){
        $this->db->select('id, full_name');
        $this->db->where('is_deleted', '0');
        $stylists = $this->db->get('tbl_salon_employee')->result();
    
        $this->db->select('tbl_booking_services_details.*, tbl_new_booking.payment_status as main_payment_status, tbl_salon_customer.full_name as customer_name, tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name');
        $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking', 'tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $bookings = $this->db->get('tbl_booking_services_details')->result();
    
        echo json_encode(array(
            'stylists' => $stylists,
            'bookings' => $bookings,
        ));
    }
    
    
    
    public function get_booking_service_details_ajx(){
        $booking_rules = $this->get_booking_rules();
        if(!empty($booking_rules)){
            // $booking_rescheduling = $booking_rules->booking_rescheduling;
            // $cancellation = $booking_rules->cancellation;

            $cancellation = 0;
            $booking_rescheduling = 0;

            $booking_service_details_id = $this->input->post('booking_service_details_id');

            $this->db->select('tbl_booking_services_details.*,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_sub_category.sub_category_marathi,tbl_new_booking.service_start_date as first_service_start_date,tbl_new_booking.service_start_time as first_service_start_time,tbl_new_booking.payment_status as final_payment_status, tbl_new_booking.amount_to_paid,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
            $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
            $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
            $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
            $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
            $this->db->where('tbl_booking_services_details.id',$booking_service_details_id);
            $this->db->where('tbl_booking_services_details.is_deleted','0');
            $bookings = $this->db->get('tbl_booking_services_details')->row();

            if(!empty($bookings)){
                $is_any_service_cancelled = $this->Salon_model->get_is_any_service_cancelled($bookings->booking_id);
                $is_any_service_completed = $this->Salon_model->get_is_any_service_completed($bookings->booking_id);

                $products = explode(',',$bookings->product_ids);
                $product_details_str = '';
                if (empty($products)) {
                    $product_details_str = '-';
                } else {
                    for ($k = 0; $k < count($products); $k++) {
                        $product_details = $this->get_product_details($products[$k]);
                        if (!empty($product_details)) {
                            $product_details_str .= $product_details->product_name;
                            if ($k < count($products) - 1) {
                                $product_details_str .= ', ';
                            }
                        }
                    }
                }
                $service_from = new DateTime($bookings->service_from);
                $service_from->modify("-$booking_rescheduling minutes");
                $allowed_rescheduling_time = $service_from->format('Y-m-d H:i:s');
                
                $service_from_cancel = new DateTime($bookings->service_from);
                $service_from_cancel->modify("-$cancellation minutes");
                $allowed_cancel_time = $service_from_cancel->format('Y-m-d H:i:s');
            ?>
                <div class="calender_booking_details">
                    <table style="width:100%;">
                        <thead>
                            <tr>
                                <th>Customer</th>
                                <td>
                                    <?=$bookings->customer_name;?>, <?=$bookings->customer_phone;?>
                                    <?php     
                                        if ($is_any_service_cancelled == '0' && $is_any_service_completed == '0') {
                                            if ($bookings->final_payment_status == '0') {
                                                $eventStartTime = new DateTime($bookings->first_service_start_date.' '.$bookings->first_service_start_time); // Corrected instantiation of DateTime
                                                $currentDateTime = new DateTime(); // Corrected instantiation of DateTime
                                                // if ($eventStartTime > $currentDateTime) {
                                                    echo '<button style="float:right;margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Edit Booking" id="edit_button' . $bookings->booking_id . '" onclick="showBookingEditPopup(' . $bookings->booking_id . ')" data-toggle="modal" data-target="#BookingEditModal" class="btn btn-primary event-action-button"><i class="fas fa-pencil"></i></button>';
                                                // }
                                            }
                                        }    

                                        if ($bookings->service_status === '0' || $bookings->service_status === '1') {
                                            if ($bookings->payment_status === '0') {
                                                // echo '<button style="float:right;margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Generate Bill" type="button" id="bill_generate_button_' . $bookings->id . '" onclick="showBillGenerationPopup(' . $bookings->booking_id . ')" data-toggle="modal" data-target="#BookingBillModal" class="btn btn-primary event-action-button"><i class="fas fa-file-invoice"></i></button>';
                                                echo '<a style="float:right;margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Generate Bill" type="button" id="bill_generate_button_' . $bookings->id . '" href="'.base_url().'bill-setup/' . base64_encode($bookings->id) . '" class="btn btn-primary event-action-button"><i class="fas fa-file-invoice"></i></a>';
                                            }
                                        }                                      
                                        if ($bookings->service_status === '0') {
                                            if ($bookings->payment_status === '0') {
                                                $eventStartTime = date('Y-m-d H:i:s',strtotime($bookings->service_from));
                                                $currentTime = date('Y-m-d H:i:s');
                                                // if ($eventStartTime > $currentTime) {
                                                    echo '<button style="float:right;margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Add New Service" id="addServiceButton_' . $bookings->id . '" onclick="showAddServicePopup(' . $bookings->id . ')" data-toggle="modal" data-target="#addServiceModal" class="btn btn-primary event-action-button"><i class="fa fa-plus"></i></button>';
                                                // }
                                            }
                                        }
                                    ?>
								    <?php if($bookings->service_status != "2" && $bookings->payment_status == "1"){ ?>	
                                        <a style="float:right;" class="btn btn-info" target="_blank" href="<?=base_url(); ?>booking-print/<?=base64_encode($bookings->booking_id);?>/<?=base64_encode($bookings->booking_payment_id);?>"><i class="fas fa-receipt"></i></a>
                                    <?php } ?>
                                </td>
                            </tr>
                            <!-- <tr>
                                <th>Booking Amount</th>
                                <td>Rs. <?=$bookings->amount_to_paid;?></td>
                            </tr> -->
                            <tr>
                                <th>Payment Status</th>
                                <td>
                                    <?php
                                        if($bookings->payment_status == '1'){
                                            echo '<label class="label label-success">Completed</label>';
                                            echo ' On: '.date('d-m-Y',strtotime($bookings->payment_date));
                                        }else{
                                            echo '<label class="label label-warning">Pending</label>';
                                        }
                                    ?>
                                </td>
                            </tr>
                            <tr>
                                <th>Service</th>
                                <td><?=$bookings->service_name;?> | <?=$bookings->service_name_marathi;?> <?php if($bookings->service_added_from == '1') { ?><small>(Package Service)</small><?php } ?></td>
                            </tr>
                            <?php if($product_details_str != ""){ ?>
                            <tr>
                                <th>Products</th>
                                <td><?=$product_details_str;?></td>
                            </tr>
                            <?php } ?>
                            <tr>
                                <th>Date</th>
                                <td><?=date('d-m-Y',strtotime($bookings->service_date));?></td>
                            </tr>
                            <tr>
                                <th>Duration</th>
                                <td><?=date('h:i A',strtotime($bookings->service_from));?> to <?=date('h:i A',strtotime($bookings->service_to));?></td>
                            </tr>
                            <tr>
                                <th>Stylist</th>
                                <td><?=$bookings->stylist_name;?></td>
                            </tr>
                            <tr>
                                <th>Service Status</th>
                                <td>
                                    <?php 
                                        if($bookings->service_status == '0'){
                                            echo '<label class="label label-warning">Pending</label>';
                                        }elseif($bookings->service_status == '1'){
                                            echo '<label class="label label-success">Completed</label>';
                                            echo ' On: '.date('d-m-Y',strtotime($bookings->completed_on));
                                        }elseif($bookings->service_status == '2'){
                                            echo '<label class="label label-danger">Cancelled</label>';
                                        }elseif($bookings->service_status == '3'){
                                            echo '<label class="label label-default">Lapsed</label>';
                                        }else{
                                            echo 'NA';
                                        }
                                    ?>
                                </td>
                            </tr>
                            <tr>
                                <th>Action</th>
                                <td>
                                    <?php 
                                        if($bookings->service_status == '0'){
                                            //if(date('Y-m-d H:i:s') <= $allowed_cancel_time){
                                                if($bookings->service_added_from != '1'){
                                                    echo '<button type="button" class="btn btn-danger" id="cancel_button" onclick="showCancelPopup('.$bookings->id.')" data-toggle="modal" data-target="#ServiceCancelModal">Cancel</button>';
                                                }
                                            //}
                                            //rohitre
											//if(date('Y-m-d H:i:s') <= $allowed_rescheduling_time){
                                                 echo '<button type="button" class="btn btn-default" id="reschedule_button" onclick="showReschedulePopup('.$bookings->id.')" data-toggle="modal" data-target="#ServiceRescheduleModal">Reschedule</button>';
                                            //}
                                            echo '<button type="button" class="btn btn-info" id="complete_button" onclick="showCompletePopup('.$bookings->id.')" data-toggle="modal" data-target="#ServiceCompleteModal">Complete</button>';
                                        }elseif($bookings->service_status == '1'){
                                            echo '-';
                                        }elseif($bookings->service_status == '2'){
                                            echo '-';
                                        }elseif($bookings->service_status == '3'){
                                            echo '-';
                                        }else{
                                            echo '-';
                                        }
                                    ?>
                                </td>
                            </tr>
                        </thead>
                    </table>
                </div>
            <?php 
            }else{ 
            ?>
                <div>
                    <label class="error">Booking details not found</label>
                </div>
            <?php 
            }
        }else{ 
        ?>
        <div>
            <label class="error">Booking rules not available</label>
        </div>
        <?php
        }
    }
    function hexToRgb($hex) {
        $hex = str_replace("#", "", $hex);
    
        if (strlen($hex) == 3) {
            $r = hexdec(substr($hex, 0, 1) . substr($hex, 0, 1));
            $g = hexdec(substr($hex, 1, 1) . substr($hex, 1, 1));
            $b = hexdec(substr($hex, 2, 1) . substr($hex, 2, 1));
        } else {
            $r = hexdec(substr($hex, 0, 2));
            $g = hexdec(substr($hex, 2, 2));
            $b = hexdec(substr($hex, 4, 2));
        }
        return array($r, $g, $b);
    }
    
    function rgbToHex($r, $g, $b) {
        $r = dechex($r);
        $g = dechex($g);
        $b = dechex($b);
    
        $r = strlen($r) == 1 ? '0'.$r : $r;
        $g = strlen($g) == 1 ? '0'.$g : $g;
        $b = strlen($b) == 1 ? '0'.$b : $b;
    
        return '#'.$r.$g.$b;
    }
    
    function lightenColor($hex, $percent) {
        list($r, $g, $b) = $this->hexToRgb($hex);
    
        $r = min(255, round($r + (255 - $r) * $percent / 100));
        $g = min(255, round($g + (255 - $g) * $percent / 100));
        $b = min(255, round($b + (255 - $b) * $percent / 100));
    
        return $this->rgbToHex($r, $g, $b);
    }
    public function get_booking_details_ajx(){
        $booking_rules = $this->get_booking_rules();
        if(!empty($booking_rules)){
            // $booking_rescheduling = $booking_rules->booking_rescheduling;
            // $cancellation = $booking_rules->cancellation;
            
            $cancellation = 0;
            $booking_rescheduling = 0;

            $booking_id = $this->input->post('booking_id');

            $this->db->select('tbl_new_booking.*,tbl_salon_customer.id as customer_name_id,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
            $this->db->where('tbl_new_booking.id',$booking_id);
            $this->db->where('tbl_new_booking.is_deleted','0');
            $bookings = $this->db->get('tbl_new_booking')->row();

            $this->db->select('tbl_booking_services_details.*,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_sub_category.sub_category_marathi,tbl_new_booking.service_start_date as first_service_start_date,tbl_new_booking.service_start_time as first_service_start_time,tbl_new_booking.payment_status as final_payment_status, tbl_new_booking.amount_to_paid,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
            $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
            $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
            $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
            $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
            $this->db->where('tbl_booking_services_details.booking_id',$booking_id);
            $this->db->where('tbl_booking_services_details.is_deleted','0');
            $booking_services = $this->db->get('tbl_booking_services_details')->result();

            if(!empty($bookings)){
                $booking_review = $this->Salon_model->get_booking_review($bookings->id,$bookings->customer_name_id);
                $service_from = new DateTime($bookings->service_start_date.' '.$bookings->service_start_time);
                $service_from->modify("-$booking_rescheduling minutes");
                $allowed_rescheduling_time = $service_from->format('Y-m-d H:i:s');
                
                $service_from_cancel = new DateTime($bookings->service_start_date.' '.$bookings->service_start_time);
                $service_from_cancel->modify("-$cancellation minutes");
                $allowed_cancel_time = $service_from_cancel->format('Y-m-d H:i:s');	
                
                $this->db->select('tbl_service_payment.*, tbl_salon_customer.id as customer_id, tbl_salon_customer.full_name as customer_full_name,tbl_salon_customer.customer_phone');
                $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_service_payment.customer_name');
                $this->db->where('tbl_service_payment.booking_id',$bookings->id);
                $this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
                $this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
                $this->db->where('tbl_service_payment.is_deleted','0');
                $booking_payment = $this->db->get('tbl_service_payment')->row();

                $package_background_color = '';
            ?>
                <div class="calender_booking_details">
                    <table style="width:100%;">
                        <thead>
                            <tr>
                                <th>Customer</th>
                                <th>Date</th>
                                <th>Package</th>
                                <!-- <th>Booking Amt</th> -->
                                <th>Bill Amt</th>
                                <th>Payment Status</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><?=$bookings->customer_name;?>, <?=$bookings->customer_phone;?></td>
                                <td><?= date('d M, Y',strtotime($bookings->service_start_date));?></td>
                                <td>
                                    <?php 
                                        $package_text = '';
                                        $package_title_name = '';
                                        if($bookings->is_package_included == '1'){
                                            $package_details = $this->get_package_details($bookings->pacakge_id);
                                            if(!empty($package_details)){
                                                $package_text = '<button class="btn btn-sm" style="float:left; background-color: '. $package_details->bg_color .'; color:' . $package_details->text_color . ';">' . $package_details->package_name . '</button>';
                                                $package_background_color = $this->lightenColor($package_details->bg_color, 60);        
                                                $package_title_name = 'Package: '.$package_details->package_name;                                        
                                            }
                                        }
                                        if($package_text != ""){
                                            echo $package_text;
                                        }else{
                                            echo '-';
                                        }
                                    ?>
                                </td>
                                <!-- <td>Rs. <?=$bookings->amount_to_paid;?></td> -->
                                <td><?=!empty($booking_payment) ? 'Rs. '.$booking_payment->amount_to_paid : '-';?></td>
                                <td>
                                    <?php
                                        if($bookings->payment_status == '1'){
                                            echo '<label class="label label-success">Completed</label>';
                                            echo '<br>On: '.date('d-m-Y',strtotime($bookings->payment_date));
                                        }else{
                                            echo '<label class="label label-warning">Pending</label>';
                                        }
                                    ?>
                                </td>
                                <td>
                                    <?php if(!empty($booking_review)){ ?>
                                        <a style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Customer Review" onclick="showBookingReviewDiv(<?=$booking_review->id;?>)" data-toggle="modal" data-target="#BookingReviewModal_<?=$booking_review->id;?>" class="btn btn-primary event-action-button"><i style="font-size: 15px;color: black;" class="fas fa-comment-dots"></i></a>
                                    <?php } ?>
                                    <?php 
                                        if ($bookings->payment_status == '0' && ($bookings->booking_status === '1' || $bookings->booking_status === '3' || $bookings->booking_status === '4')) {
                                            $eventStartTime = new DateTime($bookings->service_start_date.' '.$bookings->service_start_time); // Corrected instantiation of DateTime
                                            $currentDateTime = new DateTime(); // Corrected instantiation of DateTime
                                            // if ($eventStartTime > $currentDateTime) {
                                                echo '<button style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Edit Booking" id="edit_button' . $bookings->id . '" onclick="showBookingEditPopup(' . $bookings->id . ')" data-toggle="modal" data-target="#BookingEditModal" class="btn btn-primary event-action-button"><i style="color:black;font-size: 15px;" class="fas fa-pencil"></i></button>';
                                            // }
                                        } 
                                        if ($bookings->payment_status == '0' && ($bookings->booking_status === '1' || $bookings->booking_status === '3' || $bookings->booking_status === '4')) {                    
                                            echo '<button type="button" style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" class="btn btn-primary" id="complete_button" onclick="showCompletePopup('.$bookings->id.')" data-toggle="modal" data-target="#ServiceCompleteModal"><i style="color:green;font-size: 20px;" class="fas fa-check"></i></button>';
                                           // if(date('Y-m-d H:i:s') <= $allowed_cancel_time){
                                                echo '<button type="button" style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" class="btn btn-primary" id="cancel_button" onclick="showCancelPopup('.$bookings->id.')" data-toggle="modal" data-target="#ServiceCancelModal"><i style="color:red;font-size: 20px;" class="fas fa-times"></i></button>';
                                            //}
                                        }
                                    ?>
                                    <?php     
                                        if ($bookings->booking_status === '5') {
                                            if ($bookings->payment_status === '0') {
                                                // echo '<button style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Generate Bill" type="button" id="bill_generate_button_' . $bookings->id . '" onclick="showBillGenerationPopup(' . $bookings->id . ')" data-toggle="modal" data-target="#BookingBillModal" class="btn btn-primary event-action-button"><i style="color:black;font-size: 15px;" class="fas fa-file-invoice"></i></button>';
                                                echo '<a style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Generate Bill" type="button" id="bill_generate_button_' . $bookings->id . '" href="'.base_url().'bill-setup/' . base64_encode($bookings->id) . '" class="btn btn-primary event-action-button"><i style="color:black;font-size: 15px;" class="fas fa-file-invoice"></i></a>';
                                            }
                                        }                  
                                        if ($bookings->payment_status == '0' && ($bookings->booking_status === '1' || $bookings->booking_status === '3' || $bookings->booking_status === '4')) {                    
                                            $eventStartTime = date('Y-m-d H:i:s',strtotime($bookings->service_start_date.' '.$bookings->service_start_time));
                                            $currentTime = date('Y-m-d H:i:s');
                                            // if ($eventStartTime > $currentTime) {
                                                echo '<button style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Add New Service" id="addServiceButton_' . $bookings->id . '" onclick="showAddServicePopup(' . $bookings->id . ')" data-toggle="modal" data-target="#addServiceModal" class="btn btn-primary event-action-button"><i style="color:black;font-size: 17px;" class="fa fa-plus"></i></button>';
                                            // }
                                        }
                                    ?>
								    <?php if($bookings->booking_status == "5" && $bookings->payment_status == "1"){ ?>	
                                            <a style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" class="btn btn-primary" target="_blank" href="<?=base_url(); ?>booking-print/<?=base64_encode($bookings->id);?>/<?=base64_encode($bookings->booking_payment_id);?>?go=<?=base64_encode($this->input->post('redirect'));?>"><i style="color:black;font-size: 15px;" class="fas fa-receipt"></i></a>
                                    <?php 
                                            echo '<button style="margin-right:0px;background:transparent !important;outline:none; box-shadow:none;" title="Update Payment Details" id="updateBill_' . $bookings->id . '" onclick="showBillUpdatePopup(' . $bookings->id . ')" data-toggle="modal" data-target="#updateBillModal" class="btn btn-primary event-action-button"><i style="font-size: 17px;color: black;" class="fas fa-edit"></i></button>';
                                        }
                                    echo '<button type="button" style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" class="btn btn-primary" id="note_button" onclick="showBookingNotesDiv('.$bookings->id.')" data-toggle="modal" data-target="#bookingNoteModal"><i style="color:black;font-size: 20px;" class="fas fa-sticky-note"></i></button>'; 
                                    ?>
                                    <button style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" title="Call Customer" type="button" id="call_button_<?=$bookings->id;?>" class="btn btn-primary event-action-button" onclick="window.location.href='tel:<?= $bookings->customer_phone ?>'"><i style="color:red;font-size: 15px;margin-left: -5px;" class="fas fa-phone"></i></button>
                                </td>
                            </tr>
                        </thead>
                    </table>
                    <hr>
                    <table id="example" class="table  table-bordered dt-responsive nowrap example list_table"  style="width:100%">
						<thead>
							<tr>
								<th>Sr. No.</th>
								<th>Status</th>
								<th>Sub Category</th>
								<th>Service</th>
								<th>Duration</th>
								<th>Stylist</th>
								<th>Products</th>
								<th>Stylist<br><small>(After Bill)</small></th>
								<th>Products<br><small>(After Bill)</small></th>
							<tr>
						</thead>
						<tbody>
						<?php
							if(!empty($booking_services)){
								$z = 1;
								foreach($booking_services as $booking_services_result){
                                    $stylist_id_after_bill = $this->Salon_model->get_stylist_details($booking_services_result->stylist_id_after_bill);
									$products = explode(',',$booking_services_result->product_ids);
									$product_details_str = '';
									if (empty($products)) {
										$product_details_str = '-';
									} else {
										for ($k = 0; $k < count($products); $k++) {
											$product_details = $this->Salon_model->get_product_details($products[$k]);
											if (!empty($product_details)) {
												$product_details_str .= $product_details->product_name;
												if ($k < count($products) - 1) {
													$product_details_str .= ', ';
												}
											}
										}
									}	
									$after_bill_products = explode(',',$booking_services_result->product_ids_after_bill);
									$after_bill_product_details_str = '';
									if (empty($after_bill_products)) {
										$after_bill_product_details_str = '-';
									} else {
										for ($k = 0; $k < count($after_bill_products); $k++) {
											$product_details = $this->Salon_model->get_product_details($after_bill_products[$k]);
											if (!empty($product_details)) {
												$after_bill_product_details_str .= $product_details->product_name;
												if ($k < count($after_bill_products) - 1) {
													$after_bill_product_details_str .= ', ';
												}
											}
										}
									}

									$service_from = new DateTime($booking_services_result->service_from);
									$service_from->modify("-$booking_rescheduling minutes");
									$allowed_rescheduling_time = $service_from->format('Y-m-d H:i:s');
									
									$service_from_cancel = new DateTime($booking_services_result->service_from);
									$service_from_cancel->modify("-$cancellation minutes");
									$allowed_cancel_time = $service_from_cancel->format('Y-m-d H:i:s');		

                                    if($booking_services_result->service_added_from == '1'){
                                        $background_color = 'background-color:'.$package_background_color.';';
                                    }else{
                                        if($booking_services_result->is_extra_service == '1'){
                                            $background_color = 'background-color:#0000ff21;';
                                        }else{
                                            $background_color = '';
                                        }
                                    }
                                    if($booking_services_result->service_status == '2'){
                                        $background_color = 'background-color:#ffd8d8;';
                                    }
						?>
							<tr title="<?=$package_title_name;?>" style="<?=$background_color;?>">
								<td><?=$z++; ?></td>
								<td>
                                    <?php 
                                        if($booking_services_result->service_status == '0'){
                                            echo '<label class="label label-warning">Pending</label>';
                                        }elseif($booking_services_result->service_status == '1'){
                                            echo '<label class="label label-success">Completed</label>';
                                            echo '<br>On: '.date('d-m-Y',strtotime($booking_services_result->completed_on));
                                        }elseif($booking_services_result->service_status == '2'){
                                            echo '<label class="label label-danger">Cancelled</label>';
                                        }elseif($booking_services_result->service_status == '3'){
                                            echo '<label class="label label-default">Lapsed</label>';
                                        }else{
                                            echo 'NA';
                                        }
                                    ?>
                                </td>
								<td><?=$booking_services_result->sub_category_name;?><br><?=$booking_services_result->sub_category_marathi;?></td>
								<td><?=$booking_services_result->service_name;?><br><?=$booking_services_result->service_name_marathi;?></td>
								<td><?= date('h:i A',strtotime($booking_services_result->service_from)).' to '.date('h:i A',strtotime($booking_services_result->service_to));?></td>
								<td><?=$booking_services_result->stylist_name;?></td>
								<td><?=($product_details_str != "") ? $product_details_str : '-';?></td>
								<td><?=!empty($stylist_id_after_bill) ? $stylist_id_after_bill->full_name : '-';?></td>
								<td><?=($after_bill_product_details_str != "") ? $after_bill_product_details_str : '-';?></td>
							</tr>
							<?php 
								}} 
							?>
						</tbody>
					</table>
                </div>
                <script>
                    $('#order_details_dialog').css('margin-top','175px');
                </script>
            <?php 
            }else{ 
            ?>
                <div>
                    <label class="error">Booking details not found</label>
                </div>
            <?php 
            }
        }else{ 
        ?>
        <div>
            <label class="error">Booking rules not available</label>
        </div>
        <?php
        }
    }
    public function get_booking_note_ajx(){
        $booking_rules = $this->get_booking_rules();
        if(!empty($booking_rules)){
            $booking_id = $this->input->post('booking_id');

            $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
            $this->db->where('tbl_new_booking.id',$booking_id);
            $this->db->where('tbl_new_booking.is_deleted','0');
            $bookings = $this->db->get('tbl_new_booking')->row();
            if(!empty($bookings)){
            ?>
                <div class="calender_booking_details">
                    <p><?=$bookings->note != "" ? $bookings->note : 'Not Available'; ?></p>
                </div>
                <script>
                    $('#order_note_dialog').css('margin-top','175px');
                </script>
            <?php 
            }else{ 
            ?>
                <div>
                    <label class="error">Booking details not found</label>
                </div>
            <?php 
            }
        }else{ 
        ?>
        <div>
            <label class="error">Booking rules not available</label>
        </div>
        <?php
        }
    }
    public function get_customer_note_ajx(){
        $booking_id = $this->input->post('booking_id');
        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone,tbl_salon_customer.custom_note');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $bookings = $this->db->get('tbl_new_booking')->row();
        if(!empty($bookings)){
        ?>
            <div class="calender_booking_details">
                <p><?=$bookings->custom_note != "" ? $bookings->custom_note : 'Not Available'; ?></p>
            </div>
            <script>
                $('#order_note_dialog').css('margin-top','175px');
            </script>
        <?php 
        }else{ 
        ?>
            <div>
                <label class="error">Customer not found</label>
            </div>
        <?php 
        }
    }
    public function get_booking_review_ajx(){
        $booking_review_id = $this->input->post('booking_review_id');

        $this->db->select('tbl_store_reviews.*,tbl_salon_customer.customer_phone,tbl_salon_customer.full_name,tbl_salon_customer.profile_pic');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_store_reviews.customer_id');
        $this->db->where('tbl_store_reviews.is_deleted','0');
        $this->db->order_by('tbl_store_reviews.created_on','desc');
        $this->db->where('tbl_store_reviews.id', $booking_review_id);
        $this->db->where('tbl_store_reviews.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_store_reviews.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_store_reviews')->row();
        if(!empty($result)){
        ?>
           <?php 
                $totalStars = 5;
                $filledStars = $result->stars;
                $emptyStars = $totalStars - $filledStars;

                $first_done = '0';
                for ($j = 0; $j < $filledStars; $j++) {
                    if($j == 0){
                        echo '<i class="fa fa-star" style="margin-left: 0px;font-size: 15px;color: gold;"></i>';
                        $first_done = '1';
                    }else{
                        echo '<i class="fa fa-star" style="margin-left: 3px;font-size: 15px;color: gold;"></i>';
                    }
                }
            
                for ($j = 0; $j < $emptyStars; $j++) {
                    if($first_done == '0'){
                        if($j == 0){
                            echo '<i class="fa fa-star" style="margin-left: 0px;font-size: 15px;color: gold;"></i>';
                        }else{
                            echo '<i class="fa fa-star" style="margin-left: 3px;font-size: 15px;color: #cccc;"></i>';
                        }
                    }else{
                        echo '<i class="fa fa-star" style="margin-left: 3px;font-size: 15px;color: #cccc;"></i>';
                    }
                }
            ?>
            <?=$result->description != "" ? '<p>'.$result->description.'</p>' : ''; ?>
            <?=$result->created_on != "" ? date('d M, Y h:i A',strtotime($result->created_on)) : ''; ?>
        <?php 
        }else{ 
        ?>
            <div>
                <label class="error">Review not available</label>
            </div>
        <?php 
        }
    }
    
    public function get_single_booking_row($booking_id){
        $this->db->select('tbl_new_booking.*,tbl_salon_customer.current_pending_amount, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone,tbl_salon_customer.id as customer_id,tbl_salon_customer.gender as customer_gender,tbl_salon_customer.rewards_balance');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','0');
        $booking = $this->db->get('tbl_new_booking')->row();
        return $booking;
    }
    public function get_single_booking_details_result($booking_id){
        $this->db->select('tbl_booking_services_details.*,tbl_new_booking.amount_to_paid,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->where('tbl_booking_services_details.booking_id',$booking_id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $booking_services = $this->db->get('tbl_booking_services_details')->result();
        return $booking_services;
    }
    public function get_product_stock_items($id){
        $this->db->where('tbl_product_barcode.product_name',$id);
        $this->db->where('tbl_product_barcode.is_deleted','0');
        $this->db->where('tbl_product_barcode.product_status','0');
        // $this->db->where('DATE(tbl_product_barcode.exp_date) >',date('Y-m-d'));
        $product_barcodes = $this->db->get('tbl_product_barcode')->result();
        return $product_barcodes;
    }
    public function get_booking_bill_generation_details_ajx(){
        $booking_rules = $this->get_booking_rules();
		$coupon_list = $this->get_all_coupon_list();
        $all_stylist = $this->get_salon_all_stylists();
        if(!empty($booking_rules)){
            $booking_id = $this->input->post('booking_id');
            $this->db->select('tbl_new_booking.*,tbl_salon_customer.current_pending_amount, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone,tbl_salon_customer.id as customer_id,tbl_salon_customer.gender as customer_gender,tbl_salon_customer.rewards_balance');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
            $this->db->where('tbl_new_booking.id',$booking_id);
            $this->db->where('tbl_new_booking.is_deleted','0');
            $this->db->where('tbl_new_booking.booking_type','0');
            $booking = $this->db->get('tbl_new_booking')->row();

            $this->db->select('tbl_booking_services_details.*,tbl_new_booking.amount_to_paid,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
            $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
            $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
            $this->db->where('tbl_booking_services_details.booking_id',$booking_id);
            $this->db->where('tbl_booking_services_details.is_deleted','0');
            // $this->db->where('tbl_booking_services_details.service_status','0');
            $booking_services = $this->db->get('tbl_booking_services_details')->result();

                // echo '<pre>'; print_r($booking_services);exit;
            if(!empty($booking)){
                $package_details = $this->get_package_details($booking->pacakge_id);
                $giftcard_details = $this->get_giftcard_details($booking->applied_giftcard_id);
                $all_service_details_ids = array();
                $customer_membership = $this->get_customer_membership_details($booking->customer_id);

                $is_member = $customer_membership['is_member'];
                $membership_details = $customer_membership['membership'];
            ?>
                <div class="calender_booking_details" style="margin-top: -10px;">
                    <table style="width:100%;">
                        <thead>
                            <tr style="border-bottom: 0.5px solid #afafaf;">
                                <th>Customer</th>
                                <th>Booking Date</th>
                                <th>Booking Amt</th>
                                <th>Customer Pending Amount</th>
                                <th>Membership</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th>
                                    <?=$booking->customer_name;?>, <?=$booking->customer_phone;?>
                                </th>
                                <th><?=date('d M, Y',strtotime($booking->booking_date));?></th>
                                <th><?=($booking->amount_to_paid != "") ? 'Rs. '.$booking->amount_to_paid : 'Rs. 0.00';?></th>
                                <th><?=($booking->current_pending_amount != "" && $booking->current_pending_amount != null) ? 'Rs. '.$booking->current_pending_amount : 'Rs. 0.00';?></th>
                                <th>
                                    <?php 
                                        if($is_member == "1"){
                                            echo !empty($membership_details) ? '<br><a class="btn btn-sm" style="background-color:'.$membership_details->bg_color.'; color:'.$membership_details->text_color.'">'.$membership_details->membership_name.'</a>' : '-';
                                        }else{
                                            echo '<a class="btn" style="text-decoration:underline;" target="_blank" href="' . base_url() . 'bill-generation?customer=' . $booking->customer_id . '&bill_for=0" title="Assign Membership">Assign Membership</a>';
                                        }
                                    ?>
                                </th>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <form method="post" name="payment_form_<?=$booking->id;?>" id="payment_form_<?=$booking->id;?>" action="<?=base_url();?>generate-bill/<?=base64_encode($booking->id);?>">
                    <div class="row">
                        <div class="col-lg-8 col-md-6 col-sm-12  col-xs-12">
                            <div class="row">
                                <div class=col-lg-12 col-md-12 col-sm-12 col-xs-12>
                                    <div class="calender_booking_details service_details_div service_details_box" style="height: 150px; overflow-y: scroll; border: 0.5px solid #afafaf;border-radius: 10px;">
                                        <table style="width:100%;">
                                            <thead>
                                                <tr style="border-bottom: 0.5px solid #afafaf;">
                                                    <th>Sr.</th>
                                                    <th>Service</th>
                                                    <th>Products</th>
                                                    <th>Service Date</th>
                                                    <th>Amount</th>
                                                    <th>Stylist</th>
                                                    <th>Status</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <?php 
                                                $service_single_count = 1;
                                                    if(!empty($booking_services)){
                                                        foreach($booking_services as $booking_services_result){
                                                            // if($booking_services_result->payment_status != '1'){
                                                                if($booking_services_result->is_extra_service == '1'){
                                                                    $row_style = "background-color:#0000ff21;";
                                                                }else{
                                                                    $row_style = "";
                                                                }
                                                            // }else{
                                                            //     $row_style = "background-color:#8bc34a61;";
                                                            // }
                                                            $products = explode(',',$booking_services_result->product_ids);
                                                            $product_details_str = '';
                                                            if (empty($products)) {
                                                                $product_details_str = '-';
                                                            } else {
                                                                for ($k = 0; $k < count($products); $k++) {
                                                                    $product_details = $this->get_product_details($products[$k]);
                                                                    if (!empty($product_details)) {
                                                                        $product_details_str .= $product_details->product_name;
                                                                        if ($k < count($products) - 1) {
                                                                            $product_details_str .= ', ';
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            
                                                            if($booking_services_result->service_status != '2'){
                                                                if($booking_services_result->payment_status == '0'){
                                                                    $all_service_details_ids[] = $booking_services_result->id;
                                                                }
                                                            }

                                                            $this->db->select('tbl_booking_services_products_details.*,tbl_product.product_name, tbl_new_booking.amount_to_paid, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
                                                            $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_products_details.service_id');
                                                            $this->db->join('tbl_product','tbl_product.id = tbl_booking_services_products_details.product_id');
                                                            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_products_details.customer_name');
                                                            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_products_details.booking_id');
                                                            $this->db->where('tbl_booking_services_products_details.booking_service_details_id',$booking_services_result->id);
                                                            $this->db->where('tbl_booking_services_products_details.is_deleted','0');
                                                            $booking_products = $this->db->get('tbl_booking_services_products_details')->result();
                                                ?>
                                                <tr style="<?=$row_style;?>">                                                
                                                    <td style="text-align:center;">
                                                        <?=$service_single_count++;?>
                                                        <input <?php if($booking_services_result->service_status == '2'){ echo 'disabled'; }else{ if($booking_services_result->payment_status == '0'){ echo 'checked style="display:none; pointer-events: none;"'; }else{ echo 'disabled style="display:none;"'; }}?> type="checkbox" class="booking_services_<?=$booking->id;?>" name="service_checkbox_<?=$booking->id;?>[]" id="service_checkbox_<?=$booking_services_result->id;?>" value="<?=$booking_services_result->id;?>" onclick="setServicePrice(<?=$booking_services_result->id;?>,<?=$booking->id;?>)">
                                                    </td>                                                    
                                                    <td title="<?=$booking_services_result->service_name_marathi;?>">
                                                        <?=$booking_services_result->service_name;?>
                                                        <?php if($booking_services_result->service_added_from == '1'){ ?>
                                                            <?php if(!empty($package_details)){ ?>
                                                                <br><small>(Package: <?=$package_details->package_name; ?>)</small>
                                                            <?php }else{ ?>
                                                                <br><small>(Package Service)</small>
                                                            <?php } ?>
                                                        <?php if($booking->package_amount == '0' ||  $booking->package_amount == '' || $booking->package_amount == null || $booking->package_amount == '0.00'){ ?>
                                                            <small> (Active)</small>
                                                        <?php } ?>
                                                        <?php } ?>
                                                        <label class="error" style="display:none;font-size: 10px;" id="stock_selection_service_error_<?=$booking_services_result->id;?>_<?=$booking->id;?>">Please enter payment amount!</label>
                                                    </td>
                                                    <td>
                                                        <?php if($product_details_str != ""){ ?>
                                                            <a style="text-decoration:underline;" type="button" id="service_products_button_<?=$booking_services_result->id;?>" data-toggle="modal" data-target="#ServiceProductModal_<?=$booking_services_result->id;?>" onclick="showPopup('ServiceProductModal_<?=$booking_services_result->id;?>')">
                                                                <span id="selected_product_<?=$booking_services_result->id;?>">0</span>/<?=count($booking_products);?>
                                                            </a>
                                                            
                                                            <div class="modal fade" id="ServiceProductModal_<?=$booking_services_result->id;?>" tabindex="-1" aria-labelledby="ServiceProductLabel_<?=$booking_services_result->id;?>" aria-hidden="true" style="background-color: rgba(0, 0, 0, 0.62);z-index: 1030 !important;overflow:hidden !important;opacity:0 !important;">
                                                                <div class="modal-dialog">
                                                                    <div class="modal-content">
                                                                        <div class="modal-header">
                                                                            <h5 class="modal-title" id="ServiceProductLabel_<?=$booking_services_result->id;?>"><?php echo $booking_services_result->service_name; ?> Products</h5>
                                                                            <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" style="float:none !important; position:absolute;right:10px;top:10px;"  onclick="closePopup('ServiceProductModal_<?=$booking_services_result->id;?>')">
                                                                                <span aria-hidden="true">&times;</span>
                                                                            </button>
                                                                        </div>
                                                                        <div class="modal-body" id="booking_service_product_response_<?=$booking_services_result->id;?>">
                                                                            <div class="calender_booking_details product_details_div">
                                                                                <table style="width:100%; border: 0.5px solid #afafaf;border-radius: 10px;">
                                                                                    <thead>
                                                                                        <tr style="border-bottom: 0.5px solid #afafaf;">
                                                                                            <th>Select</th>
                                                                                            <th>Product</th>
                                                                                            <th>Select Product</th>
                                                                                            <th>Price<br><small>(In INR)</small></th>
                                                                                        </tr>
                                                                                    </thead>
                                                                                    <tbody>
                                                                                        <?php
                                                                                            if(!empty($booking_products)){
                                                                                                foreach($booking_products as $booking_products_result){
                                                                                                    $product_stock = $this->get_product_stock_items($booking_products_result->product_id);
                                                                                        ?>
                                                                                        <tr>
                                                                                            <!-- <td><input <?php if($booking_services_result->service_status == '2'){ echo 'disabled'; }else{ if($booking_services_result->payment_status == '0'){ echo 'checked style="pointer-events: none;"'; }else{ echo 'disabled'; }}?> type="checkbox" class="product_checkbox_<?=$booking_services_result->id;?>" name="service_products_checkbox_<?=$booking_services_result->id;?>[]" id="service_products_checkbox_<?=$booking_services_result->id;?>_<?=$booking_products_result->id;?>" value="<?=$booking_products_result->id;?>" onclick="setServiceProductPrice(<?=$booking_services_result->id;?>,<?=$booking_products_result->id;?>,<?=$booking->id;?>)"></td> -->
                                                                                            <td><input <?php if($booking_services_result->service_status == '2'){ echo 'disabled'; }else{ if($booking_services_result->payment_status == '0'){ echo ''; }else{ echo 'disabled'; }}?> type="checkbox" class="product_checkbox_<?=$booking_services_result->id;?>" name="service_products_checkbox_<?=$booking_services_result->id;?>[]" id="service_products_checkbox_<?=$booking_services_result->id;?>_<?=$booking_products_result->id;?>" value="<?=$booking_products_result->id;?>" onclick="setServiceProductPrice(<?=$booking_services_result->id;?>,<?=$booking_products_result->id;?>,<?=$booking->id;?>)"></td>
                                                                                            <td><?=$booking_products_result->product_name;?></td>
                                                                                            <td>   
                                                                                                <?php 
                                                                                                    if($booking_services_result->service_status == '2'){
                                                                                                        echo '-'; 
                                                                                                    }else{ 
                                                                                                        if($booking_services_result->payment_status == '0'){ 
                                                                                                ?>                                                                                             
                                                                                                <select data-product-details="<?=$booking_products_result->id;?>" data-service-details="<?=$booking_services_result->id;?>" class="form-control chosen-select all_selected_stocks_<?=$booking->id;?> single_booking_product_barcodes_<?=$booking_products_result->id;?>" id="used_product_barcodes_<?=$booking_services_result->id;?>_<?=$booking_products_result->id;?>"  name="used_product_barcodes_<?=$booking_services_result->id;?>_<?=$booking_products_result->id;?>">
                                                                                                    <?php if(!empty($product_stock)){ ?>
                                                                                                        <option value="">Select Used Product</option>
                                                                                                        <?php foreach($product_stock as $product_stock_result){ ?>
                                                                                                    <option value="<?=$product_stock_result->id;?>">
                                                                                                        <?=$product_stock_result->barcode_id; ?> <?php if($product_stock_result->exp_date != "" && $product_stock_result->exp_date != "1970-01-01" && $product_stock_result->exp_date != "0000-00-00"){ ?> - Exp. : <?=date('d-m-Y',strtotime($product_stock_result->exp_date)); ?> <?php } ?>
                                                                                                    </option>
                                                                                                    <?php }}else{ ?>
                                                                                                    <option value="">Stock not available</option>
                                                                                                    <?php } ?>
                                                                                                </select>
                                                                                                <?php }else{ echo '-'; }} ?>
                                                                                            </td>
                                                                                            <td><?=($booking_products_result->product_price != "") ? $booking_products_result->product_price : '0.00';?></td>
                                                                                        </tr>
                                                                                        <input type="hidden" name="single_service_product_id_<?=$booking_services_result->id;?>_<?=$booking_products_result->id;?>" id="single_service_product_id_<?=$booking_services_result->id;?>_<?=$booking_products_result->id;?>" value="<?=$booking_products_result->product_id;?>">
                                                                                        <input type="hidden" name="single_service_product_price_<?=$booking_services_result->id;?>_<?=$booking_products_result->id;?>" id="single_service_product_price_<?=$booking_services_result->id;?>_<?=$booking_products_result->id;?>" value="<?=($booking_products_result->product_price != "" && $booking_products_result->product_price != "" && $booking_products_result->product_price != "0" && $booking_products_result->product_price != "0.00") ? $booking_products_result->product_price : '0.00';?>">
                                                                                        <?php }} ?>
                                                                                    </tbody>
                                                                                </table>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>	
                                                        <?php }else{ ?>
                                                            -
                                                        <?php } ?>
                                                    </td>
                                                    <td><?=date('d M, y',strtotime($booking_services_result->service_date));?></td>
                                                    <td>
                                                        <div class="service_price_title"> 
                                                        <?php
                                                        if($booking_services_result->service_price != ""){
                                                            if($booking_services_result->service_price < $booking_services_result->original_service_price){
                                                                echo '<s>'.$booking_services_result->original_service_price.'</s> '.$booking_services_result->service_price.'';
                                                            }else{
                                                                echo $booking_services_result->service_price;
                                                            }
                                                        }else{
                                                            echo '0.00';
                                                        }
                                                        ?>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <select class="form-control chosen-select single_booking_stylists_<?=$booking->id;?>" id="new_stylist_<?=$booking_services_result->id;?>"  name="new_stylist_<?=$booking_services_result->id;?>">
                                                            <option value="">Select Stylist</option>
                                                            <?php if(!empty($all_stylist)){ foreach($all_stylist as $all_stylist_result){ ?>
                                                            <option value="<?=$all_stylist_result->id;?>" <?php if($all_stylist_result->id == $booking_services_result->stylist_id){ echo 'selected'; }?>>
                                                                <?=$all_stylist_result->full_name; ?>
                                                            </option>
                                                            <?php }} ?>
                                                        </select>
                                                    </td>
                                                    <td>
                                                        <?php 
                                                            if($booking_services_result->service_status == '0'){
                                                                echo '<label style="color:black;" class="label label-warning">Pending</label>';
                                                            }elseif($booking_services_result->service_status == '1'){
                                                                echo '<label style="color:black;" class="label label-success">Completed</label>';
                                                                echo '<br>On: '.date('d-m-Y',strtotime($booking_services_result->completed_on));
                                                            }elseif($booking_services_result->service_status == '2'){
                                                                echo '<label style="color:black;" class="label label-danger">Cancelled</label>';
                                                            }elseif($booking_services_result->service_status == '3'){
                                                                echo '<label style="color:black;" class="label label-default">Lapsed</label>';
                                                            }else{
                                                                echo 'NA';
                                                            }
                                                        ?>
                                                    </td>
                                                </tr>                                
                                                <input type="hidden" name="old_stylist_<?=$booking_services_result->id;?>" id="old_stylist_<?=$booking_services_result->id;?>" value="<?=$booking_services_result->stylist_id;?>">
                                                <input type="hidden" name="single_service_id_<?=$booking_services_result->id;?>" id="single_service_id_<?=$booking_services_result->id;?>" value="<?=$booking_services_result->service_id;?>">
                                                <input type="hidden" name="single_service_price_<?=$booking_services_result->id;?>" id="single_service_price_<?=$booking_services_result->id;?>" value="<?=($booking_services_result->service_price != "" && $booking_services_result->service_price != "" && $booking_services_result->service_price != "0" && $booking_services_result->service_price != "0.00") ? $booking_services_result->service_price : '0.00';?>">
                                                <?php }}else{ ?>
                                                <tr>
                                                    <td colspan="7">Services Not Available</td>
                                                </tr>
                                                <?php } ?>
                                            </tbody>
                                        </table>                                        
                                        <label for="service_checkbox_<?=$booking->id;?>[]" generated="true" class="error" style="display:none;">Please select at least one service!</label>
                                    </div>
                                </div>
                                <div class="col-lg-7">
                                    <div class="calender_booking_details service_details_box coupon_details_div" style="height: 95px;border: 0.5px solid #afafaf;border-radius: 10px;margin-top:10px;">
                                        <div class="calender_booking_details">
                                            <span><h6 style="margin-left: 6px;">Apply Coupon</h6></span>
                                            <hr style="margin: 0; border: none; border-top: 0.5px solid #afafaf;">
                                        </div>
                                        <table style="width:100%;">
                                            <thead>
                                                <?php 
                                                $total_coupons = 0;
                                                if(!empty($coupon_list)){ 
                                                    foreach($coupon_list as $coupon_list_result){ 
                                                        if(date('Y-m-d') <= date('Y-m-d',strtotime($coupon_list_result->coupan_expiry))){
                                                            $total_coupons++;
                                                ?>
                                                <tr>
                                                    <th>
                                                        <?=$coupon_list_result->coupon_name; ?>
                                                        <div id="coupon_details_div_<?=$booking->id;?>_<?=$coupon_list_result->id?>" style="position: relative;display:inline-block; width:auto;">
                                                            <div id="coupon_details_info"><i class="fas fa-info-circle" style="color:#0000ffb0;"></i>
                                                                <div class="coupon-tooltip">
                                                                    <div style="margin-top:1px;">
                                                                        <p>Minimum Amount: Rs. <?=$coupon_list_result->min_price;?></p>
                                                                        <p>Discount: Rs. <?=$coupon_list_result->coupon_offers;?></p>
                                                                        <p>Expiry: <?=($coupon_list_result->coupan_expiry != "" && $coupon_list_result->coupan_expiry != null && $coupon_list_result->coupan_expiry != '1970-01-01' && $coupon_list_result->coupan_expiry != "0000-00-00") ? date('d-m-Y',strtotime($coupon_list_result->coupan_expiry)) : 'NA';?></p>
                                                                    </div>    
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </th>
                                                    <th id="coupon_button_<?=$booking->id;?>_<?=$coupon_list_result->id?>" style="text-align: left;">
                                                        <!-- <button class="btn btn-success" type="button" style="font-size:10px; padding:8px 12px;" onclick="if(confirm('Are you sure you want to apply the coupon?')) applyCoupon(<?=$booking->id; ?>,<?= $coupon_list_result->id ?>,'new');">Apply</button> -->
                                                        <button class="btn btn-success" type="button" style="font-size:10px; padding:8px 12px;" onclick="applyCoupon(<?=$booking->id; ?>,<?= $coupon_list_result->id ?>,'new')">Apply</button>
                                                        <!-- <button class="btn btn-success" type="button" style="font-size:10px; padding:8px 12px;" onclick="openConfirmationDialog('Are you sure you want to apply the coupon?', function(confirmed) { if (confirmed) { applyCoupon(<?=$booking->id; ?>,<?= $coupon_list_result->id ?>,'new'); } })">Apply</button> -->
                                                        <label class="error" id="coupon_error_<?=$booking->id;?>_<?=$coupon_list_result->id?>"></label>
                                                    </th>
                                                </tr>
                                                <input type="hidden" id="coupon_expiry_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" name="coupon_expiry_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" value="<?=($coupon_list_result->coupan_expiry != "" && $coupon_list_result->coupan_expiry != null && $coupon_list_result->coupan_expiry != '1970-01-01' && $coupon_list_result->coupan_expiry != "0000-00-00") ? date('Y-m-d',strtotime($coupon_list_result->coupan_expiry)) : '';?>">
                                                <input type="hidden" id="coupon_name_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" name="coupon_name_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" value="<?=$coupon_list_result->coupon_name; ?>">
                                                <input type="hidden" id="coupon_min_price_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" name="coupon_min_price_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" value="<?=$coupon_list_result->min_price;?>">
                                                <input type="hidden" id="coupon_offers_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" name="coupon_offers_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" value="<?=$coupon_list_result->coupon_offers;?>">
                                                <input type="hidden" id="coupon_gender_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" name="coupon_gender_<?=$booking->id;?>_<?=$coupon_list_result->id;?>" value="<?=$coupon_list_result->gender;?>">
                                                <?php }}} ?>
                                                <?php if($total_coupons == 0){ ?>
                                                    <tr>
                                                        <th colspan=2 style="text-align:center;font-size:11px;" class="error">Coupons not available</th>
                                                    </tr>
                                                <?php } ?>
                                            </thead>
                                        </table>
                                    </div>
                                    <div class="calender_booking_details giftcard_details_div" style="border: 0.5px solid #afafaf;border-radius: 10px;margin-top:10px;">
                                        <table style="width:100%;">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        <input style="width: 100%;" type="text" name="giftcard_no_<?=$booking->id;?>" id="giftcard_no_<?=$booking->id;?>" value="<?php if($booking->is_giftcard_applied == '1' && !empty($giftcard_details)){ echo $giftcard_details->gift_name; } ?>" placeholder="Enter Giftcard No">
                                                        <br>
                                                        <label id="giftcard_error_<?=$booking->id;?>" class="error" style="display:none;"></label>
                                                        <label id="giftcard_success_<?=$booking->id;?>" class="" style="color:green;font-size:10px;display:none;"></label>
                                                    </th>
                                                    <th style="text-align: right;">
                                                        <!-- <button id="giftcard_button_<?=$booking->id;?>" class="btn btn-success" type="button" style="font-size:10px; padding:8px 12px;" onclick="if(confirm('Are you sure you want to apply the gift card?')) applyGiftCard(<?=$booking->id; ?>,'new');">Apply</button>
                                                        <button id="giftcard_remove_button_<?=$booking->id;?>" class="btn btn-warning" type="button" onclick="if(confirm('Are you sure you want to remove the gift card?')) removeGiftCard(<?=$booking->id; ?>);" style="display:none;font-size:10px; padding:8px 12px;">Remove</button> -->

                                                        <button id="giftcard_button_<?=$booking->id;?>" class="btn btn-success" type="button" style="font-size:10px; padding:8px 12px;" onclick="applyGiftCard(<?=$booking->id; ?>,'new')">Apply</button>
                                                        <!-- <button id="giftcard_button_<?=$booking->id;?>" class="btn btn-success" type="button" style="font-size:10px; padding:8px 12px;" onclick="openConfirmationDialog('Are you sure you want to apply the gift card?', function(confirmed) { if (confirmed) { applyGiftCard(<?=$booking->id; ?>,'new'); } })">Apply</button> -->
                                                        <!-- <button id="giftcard_remove_button_<?=$booking->id;?>" class="btn btn-warning" type="button" onclick="openConfirmationDialog('Are you sure you want to remove the gift card?', function(confirmed) { if (confirmed) { removeGiftCard(<?=$booking->id; ?>); } })" style="display:none;font-size:10px; padding:8px 12px;">Remove</button> -->
                                                        <button id="giftcard_remove_button_<?=$booking->id;?>" class="btn btn-warning" type="button" onclick="removeGiftCard(<?=$booking->id; ?>)" style="display:none;font-size:10px; padding:8px 12px;">Remove</button>
                                                    </th>
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                    <div class="calender_booking_details rewards_details_div" style="margin-top:10px;">
                                        <table style="width:100%;">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        <span id="customer_rewards_text_<?=$booking->id;?>">Rewards Balance: <?= $booking->rewards_balance?></span>
                                                        <div id="used_rewards_msg_<?=$booking->id;?>"></div>
                                                        <input type="hidden" name="customer_reward_available_<?=$booking->id;?>" id="customer_reward_available_<?=$booking->id;?>" value="<?=$booking->rewards_balance; ?>">
                                                        <input type="hidden" name="customer_gender_<?=$booking->id;?>" id="customer_gender_<?=$booking->id;?>" value="<?=$booking->customer_gender;?>">
                                                    </th>
                                                    <th style="text-align: right;">
                                                        <button id="rewards_button_<?=$booking->id;?>" class="btn btn-success" type="button" style="font-size:10px; padding:8px 12px;" onclick="applyRewards(<?=$booking->id;?>)">Apply</button>
                                                        <!-- <button id="rewards_remove_button_<?=$booking->id;?>" class="btn btn-warning" type="button" onclick="if(confirm('Are you sure you want to remove the reward points?')) removeRewards(<?=$booking->id;?>);" style="display:none;font-size:10px; padding:8px 12px;">Remove</button> -->
                                                        <button id="rewards_remove_button_<?=$booking->id;?>" class="btn btn-warning" type="button" onclick="openConfirmationDialog('re you sure you want to remove the reward points?', function(confirmed) { if (confirmed) { removeRewards(<?=$booking->id;?>); } })" style="display:none;font-size:10px; padding:8px 12px;">Remove</button>
                                                    </th>
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                                <div class="col-lg-5" style="margin-top: 40px;">
                                    <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                        <label>Send Appointments Details<b class="require">*</b></label>
                                        <select class="form-control form-select" name="send_appointment_details_<?=$booking->id;?>" id="send_appointment_details_<?=$booking->id;?>" onchange="toggleMessageType(<?=$booking->id;?>)">
                                            <option value="">Select Option</option>
                                            <option value="1" selected>Yes</option>
                                            <option value="2">No</option>
                                        </select>
                                        <label for="send_appointment_details_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                    </div>
                                    <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" id="message_type_div_<?=$booking->id;?>" style="display:none;">
                                        <label>Select Message Type<b class="require">*</b></label>
                                        <select class="form-control form-select" name="message_type_<?=$booking->id;?>" id="message_type_<?=$booking->id;?>">
                                            <!-- <option value="">Select Option</option>
                                            <option value="1" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '1'){ echo 'selected'; }?>>SMS</option>
                                            <option value="2" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '2'){ echo 'selected'; }?>>Email</option> -->
                                            <option value="3" <?php if(!empty($booking_rules) && $booking_rules->booking_reminder_type == '3'){ echo 'selected'; }?>>Whatsapp</option>
                                        </select>
                                        <label for="message_type_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input type="hidden" name="customer_id_<?=$booking->id;?>" id="customer_id_<?=$booking->id;?>" value="<?=$booking->customer_id;?>">
                        <input type="hidden" name="customer_pending_amount_<?=$booking->id;?>" id="customer_pending_amount_<?=$booking->id;?>" value="<?=($booking->current_pending_amount != "" && $booking->current_pending_amount != null) ? $booking->current_pending_amount : '0.00';?>">
                        
                        <input type="hidden" name="is_package_included_<?=$booking->id;?>" id="is_package_included_<?=$booking->id;?>" value="<?=$booking->is_package_included;?>">
                        <input type="hidden" name="used_package_type_<?=$booking->id;?>" id="used_package_type_<?=$booking->id;?>" value="<?=$booking->used_package_type;?>">
                        <input type="hidden" name="package_rewards_<?=$booking->id;?>" id="package_rewards_<?=$booking->id;?>" value="<?=$booking->package_rewards;?>">
                        <input type="hidden" name="package_allocation_id_<?=$booking->id;?>" id="package_allocation_id_<?=$booking->id;?>" value="<?=$booking->package_allocation_id;?>">
                        <input type="hidden" name="package_id_<?=$booking->id;?>" id="package_id_<?=$booking->id;?>" value="<?=$booking->pacakge_id;?>">
                        <input type="hidden" name="package_amount_<?=$booking->id;?>" id="package_amount_<?=$booking->id;?>" value="<?=$booking->package_amount;?>">

                        <input type="hidden" name="selected_coupon_id_<?=$booking->id;?>" id="selected_coupon_id_<?=$booking->id;?>" value="<?=($booking->selected_coupon_id != "" && $booking->selected_coupon_id != null && $booking->selected_coupon_id != "0") ? $booking->selected_coupon_id : '';?>">
                        
                        <input type="hidden" name="is_membership_payment_included_<?=$booking->id;?>" id="is_membership_payment_included_<?=$booking->id;?>" value="<?= $is_member == '1' && !empty($membership_details) && $membership_details->payment_status == '0' ? $booking->is_membership_payment_included : '0';?>">
                        <input type="hidden" name="membership_payment_amount_<?=$booking->id;?>" id="membership_payment_amount_<?=$booking->id;?>" value="<?= $booking->is_membership_booking == "1" && $booking->is_membership_payment_included == "1" && $is_member == "1" && !empty($membership_details) && $membership_details->payment_status == '0' ? $booking->membership_amount : '0.00';?>">
                        <input type="hidden" name="membership_payment_status_<?=$booking->id;?>" id="membership_payment_status_<?=$booking->id;?>" value="<?=$is_member == '1' && !empty($membership_details) ?  $membership_details->payment_status : '0';?>">
                        
                        <input type="hidden" name="is_membership_booking_<?=$booking->id;?>" id="is_membership_booking_<?=$booking->id;?>" value="<?=$is_member;?>">
                        <input type="hidden" name="membership_id_<?=$booking->id;?>" id="membership_id_<?=$booking->id;?>" value="<?=($is_member == '1' && !empty($membership_details)) ? $membership_details->membership_id : '';?>">
                        <input type="hidden" name="membership_history_id_<?=$booking->id;?>" id="membership_history_id_<?=$booking->id;?>" value="<?=($is_member == '1' && !empty($membership_details)) ? $membership_details->id : '';?>">
                        <input type="hidden" name="membership_discount_type_<?=$booking->id;?>" id="membership_discount_type_<?=$booking->id;?>" value="<?=($is_member == '1' && !empty($membership_details)) ? $membership_details->discount_in : '';?>">
                        <input type="hidden" name="m_service_discount_<?=$booking->id;?>" id="m_service_discount_<?=$booking->id;?>" value="<?=($is_member == '1' && !empty($membership_details)) ? $membership_details->service_discount : '0';?>">
                        <input type="hidden" name="m_product_discount_<?=$booking->id;?>" id="m_product_discount_<?=$booking->id;?>" value="<?=($is_member == '1' && !empty($membership_details)) ? $membership_details->product_discount : '0';?>">
                        <input type="hidden" name="is_giftcard_applied_<?=$booking->id;?>" id="is_giftcard_applied_<?=$booking->id;?>" value="">
                        <input type="hidden" name="applied_giftcard_id_<?=$booking->id;?>" id="applied_giftcard_id_<?=$booking->id;?>" value="">
                        
                        <input type="hidden" name="total_service_amount_<?=$booking->id;?>" id="total_service_amount_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="total_product_amount_<?=$booking->id;?>" id="total_product_amount_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="coupon_discount_amount_<?=$booking->id;?>" id="coupon_discount_amount_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="reward_discount_amount_<?=$booking->id;?>" id="reward_discount_amount_<?=$booking->id;?>" value="0.00">    
                        <input type="hidden" name="used_rewards_<?=$booking->id;?>" id="used_rewards_<?=$booking->id;?>" value="0">    
                        <input type="hidden" name="gift_discount_<?=$booking->id;?>" id="gift_discount_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="m_service_discount_amount_<?=$booking->id;?>" id="m_service_discount_amount_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="m_product_discount_amount_<?=$booking->id;?>" id="m_product_discount_amount_<?=$booking->id;?>" value="0.00">
                        
                        <input type="hidden" name="service_payable_hidden_<?=$booking->id;?>" id="service_payable_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="product_payable_hidden_<?=$booking->id;?>" id="product_payable_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="payable_hidden_<?=$booking->id;?>" id="payable_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="total_discount_hidden_<?=$booking->id;?>" id="total_discount_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="booking_amount_hidden_<?=$booking->id;?>" id="booking_amount_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="gst_amount_hidden_<?=$booking->id;?>" id="gst_amount_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="grand_total_hidden_<?=$booking->id;?>" id="grand_total_hidden_<?=$booking->id;?>" value="0.00">
                        <div class="col-lg-4">
                            <div class="calender_booking_details booking_pricing_div" style="border: 0.5px solid #afafaf;border-radius: 10px;">
                                <table style="width:100%;">
                                    <thead>
                                        <tr>
                                            <th>Service Price</th>
                                            <th id="total_service_amount_text_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <tr>
                                            <th>Products Price</th>
                                            <th id="total_product_amount_text_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <?php if($booking->pacakge_id != "" && $booking->package_amount != "" && $booking->package_amount != "0.00"){ ?>
                                        <tr>
                                            <th>Package Price <?php if(!empty($package_details)){ ?><small>(<?=$package_details->package_name;?>)</small><?php } ?></th>
                                            <th id="package_price_<?=$booking->id;?>"><?=$booking->package_amount;?></th>
                                        </tr>
                                        <?php } ?>
                                        <?php if($booking->is_membership_booking == "1" && $booking->is_membership_payment_included == "1" && $is_member == "1" && !empty($membership_details) && $membership_details->payment_status == '0'){ ?>
                                        <tr>
                                            <th>Membership Price <?php if(!empty($membership_details)){ ?><small>(<?=$membership_details->membership_name;?>)</small><?php } ?></th>
                                            <th id="membership_price_<?=$booking->id;?>"><?= number_format($booking->membership_amount, 2); ?></th>
                                        </tr>
                                        <?php } ?>
                                        <tr>
                                            <th>
                                                Discount                                        
                                                <div id="discount_details_div_<?=$booking->id;?>" style="position: relative;display:inline-block; width:auto;"></div>
                                            </th>
                                            <th id="discount_amount_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <tr style="border-top: 0.5px solid #afafaf;">
                                            <th>Total Amount</th>
                                            <th id="booking_amount_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <tr>
                                            <th>GST <small>(18%)</small></th>
                                            <th id="gst_amount_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <tr style="border-top: 0.5px solid #afafaf;">
                                            <th>Grand Total</th>
                                            <th id="grand_total_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <tr style="border-top: 0.5px solid #afafaf;">
                                            <th>Total Due<small><i title="Including Previous Due <?=($booking->current_pending_amount != "" && $booking->current_pending_amount != null) ? 'of Rs. '.$booking->current_pending_amount : '';?>" style="font-size: 12px;margin-top: 5px;margin-left: 5px;cursor:pointer;color:#0000ffb0;" class="fas fa-info-circle"></i></small></th>
                                            <th id="total_due_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                        </div>
                        <div class="col-lg-4 bill_generation_prices" style="margin-top:10px;">
                            <div class="row">
                                <div class="form-group col-md-6 col-xs-12">
                                    <label>Payment Amount<b class="require">*</b></label>
                                    <input type="number" class="form-control" name="paid_amount_<?=$booking->id;?>" id="paid_amount_<?=$booking->id;?>" placeholder="Enter Paid Amount" value="" onkeyup="calculatePendingAmount(<?=$booking->id;?>)">
                                    <label for="paid_amount_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                </div>
                                <div class="form-group col-md-6 col-xs-12">
                                    <label>Pending Amount<b class="require"></b></label>
                                    <input readonly type="number" class="form-control" name="pending_amount_<?=$booking->id;?>" id="pending_amount_<?=$booking->id;?>" placeholder="Enter Pending Amount" value="">
                                    <label for="pending_amount_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-6 col-xs-12">
                                    <label>Payment Mode<b class="require">*</b></label>
                                    <select class="form-control form-select" name="payment_mode_<?=$booking->id;?>" id="payment_mode_<?=$booking->id;?>">
                                        <option value="">Select Payment Mode</option>
                                        <option value="UPI">UPI</option>
                                        <option value="Cash">Cash</option>
                                        <option value="Cheque">Cheque</option>
                                        <option value="Card">Card</option>
                                        <option value="Online">Online</option>
                                    </select>
                                    <label for="payment_mode_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                </div>
                                <div class="form-group col-md-6 col-xs-12">
                                    <label>Payment Date<b class="require">*</b></label>
                                    <input readonly type="date" class="form-control" name="payment_date_<?=$booking->id;?>" id="payment_date_<?=$booking->id;?>" value="<?php echo date("Y-m-d"); ?>">
                                    <label for="payment_date_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                </div>
                                <label class="error" style="display:none;" id="stock_selection_error_<?=$booking->id;?>">Please enter payment amount!</label>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                    <button type="submit" class="btn btn-info" id="save_payment_btn_<?=$booking->id;?>" name="payment_btn_<?=$booking->id;?>" value="save">Save Bill</button>
                                    <button type="submit" class="btn btn-primary" id="payment_btn_<?=$booking->id;?>" name="payment_btn_<?=$booking->id;?>" value="generate">Generate Bill</button>
                                </div>
                            </div> 
                        </div>
                    </div> 
                </form>              
                <script>
                    $(document).ready(function () {                        
                        $(".chosen-select").chosen();
                        var selected_service_details = <?php echo json_encode($all_service_details_ids); ?>;
                        var bookingID = <?php echo $booking->id; ?>;
                        $('.loader_div').show();   
                        setTimeout(function() {
                            for(k=0;k<selected_service_details.length;k++){
                                setServicePrice(selected_service_details[k],bookingID);
                            }
                            $('.loader_div').hide(); 
                        }, 1500);

                        toggleMessageType(bookingID);

                        var selected_coupon_id = $('#selected_coupon_id_' + bookingID).val();
                        var is_giftcard_applied = $('#is_giftcard_applied_' + bookingID).val();
                        if(selected_coupon_id != "" && selected_coupon_id != '0'){
                            applyCoupon(bookingID,selected_coupon_id,'previous');
                        }else if(is_giftcard_applied == '1'){
                            applyGiftCard(bookingID,'previous');
                        }

                        $('#payment_form_<?=$booking->id;?>').validate({
                            ignore:[],
                            rules: {
                                'service_checkbox_<?=$booking->id;?>[]': {
                                    required: true,
                                },
                                'payment_date_<?=$booking->id;?>': {
                                    required: true,
                                },
                                'payment_mode_<?=$booking->id;?>': {
                                    required: true,
                                },
                                'paid_amount_<?=$booking->id;?>': {
                                    required: true,
                                    number: true,
                                    min: 0,
                                },
                                'send_appointment_details_<?=$booking->id;?>': {
                                    required: true,
                                },
                                'message_type_<?=$booking->id;?>': {
                                    required: function(element) {
                                        return $('#send_appointment_details_<?=$booking->id;?>').val() == '1';
                                    },
                                },
                                <?php if(!empty($booking_services)){
                                    foreach($booking_services as $booking_services_result){ ?>
                                        'new_stylist_<?=$booking_services_result->id;?>': {
                                            required: true,
                                        },
                                <?php }} ?>
                            },
                            messages: {
                                'service_checkbox_<?=$booking->id;?>[]': {
                                    required: "Please select at least one service!",
                                },
                                'payment_date_<?=$booking->id;?>': {
                                    required: "Please select payment date!",
                                },
                                'payment_mode_<?=$booking->id;?>': {
                                    required: "Please select payment mode!",
                                },
                                'paid_amount_<?=$booking->id;?>': {
                                    required: "Please enter payment amount!",
                                    number: "Please enter number only!",
                                    min: "Minimum amount 0 is allowed!",
                                },
                                'send_appointment_details_<?=$booking->id;?>': {
                                    required: "Please select option!",
                                },
                                'message_type_<?=$booking->id;?>': {
                                    required: "Please select option!",
                                },
                                <?php if(!empty($booking_services)){
                                    foreach($booking_services as $booking_services_result){ ?>
                                        'new_stylist_<?=$booking_services_result->id;?>': {
                                            required: "Please select stylist!",
                                        },
                                <?php }} ?>
                            },
                            submitHandler: function(form) {
                                var isValid = true;

                                $('.all_selected_stocks_<?=$booking->id;?>').each(function() {
                                    var selectedValue = $(this).val();
                                    var selectedService = $(this).attr('data-service-details');
                                    var selectedProduct = $(this).attr('data-product-details');
                                    
                                    var productCheckbox = $('#service_products_checkbox_' + selectedService + '_' + selectedProduct);
                                    if (productCheckbox.is(':checked')) {
                                        if (selectedValue === "") {
                                            $('#stock_selection_service_error_' + selectedService + '_<?=$booking->id;?>').html('Please select stock products for this service');
                                            $('#stock_selection_service_error_' + selectedService + '_<?=$booking->id;?>').show();
                                            
                                            $('#stock_selection_error_<?=$booking->id;?>').html('Please select stock product for all booking services');
                                            $('#stock_selection_error_<?=$booking->id;?>').show();
                                            // alert("Please select a value for all selected stocks.");
                                            isValid = false;
                                        }else{
                                            $('#stock_selection_service_error_' + selectedService + '_<?=$booking->id;?>').html('');
                                            $('#stock_selection_service_error_' + selectedService + '_<?=$booking->id;?>').hide();
                                        }
                                    }
                                });
                                // if (isValid && confirm("Are you sure to generate bill?")) {
                                if (isValid) {
                                    $('#stock_selection_error_<?=$booking->id;?>').html('');
                                    $('#stock_selection_error_<?=$booking->id;?>').hide();
                                    $('#stock_selection_service_error_' + selectedService + '_<?=$booking->id;?>').html('');
                                    $('#stock_selection_service_error_' + selectedService + '_<?=$booking->id;?>').hide();
                                    form.submit();
                                } else {
                                    return false;
                                }
                                // if(confirm("Are you sure to generate bill?")) {
                                // // openConfirmationDialog("Are you sure to generate bill?", function (confirmed) {
                                // // if (confirmed) {
                                //     form.submit();
                                // } else {
                                //     return false;
                                // }
                                // // });
                            }
                        });
                    });
                    var today = new Date();
                    var tenYearsAgo = new Date(today.getFullYear() - 10, today.getMonth(), today.getDate());

                    $('#payment_date_<?=$booking->id;?>').datepicker({
                        dateFormat: 'yy-mm-dd',
                        minDate: tenYearsAgo, // Allow dates from 10 years ago
                        maxDate: today,       // Disable future dates
                    });
                    function toggleMessageType(bookingID){
                        if($('#send_appointment_details_' + bookingID).val() == '1'){
                            $('#message_type_div_' + bookingID).show();
                        }else{
                            $('#message_type_div_' + bookingID).hide();
                        }
                    }
                </script>
            <?php 
            }else{ 
            ?>
                <div>
                    <label class="error">Booking details not found</label>
                </div>
            <?php 
            }
        }else{ 
        ?>
        <div>
            <label class="error">Booking rules not available</label>
        </div>
        <?php
        }
    }   
    
    public function get_product_booking_bill_generation_details_ajx(){
        $booking_rules = $this->get_booking_rules();
		$setup = $this->Master_model->get_backend_setups();	
		$store_profile = $this->Salon_model->get_all_salon_profile_single();	
		$product_categories = $this->Salon_model->get_salon_product_category();	
        $payment_modes = [];
        if (!empty($store_profile)) {
            $payment_modes = $store_profile->payment_options != "" ? explode(',',$store_profile->payment_options) : [];
        }
        if(!empty($booking_rules)){
            $booking_id = $this->input->post('booking_id');
            $this->db->select('tbl_new_booking.*,tbl_salon_customer.current_pending_amount, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone,tbl_salon_customer.id as customer_id,tbl_salon_customer.gender as customer_gender,tbl_salon_customer.rewards_balance');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
            $this->db->where('tbl_new_booking.id',$booking_id);
            $this->db->where('tbl_new_booking.is_deleted','0');
            $this->db->where('tbl_new_booking.booking_type','1');
            $booking = $this->db->get('tbl_new_booking')->row();

            $this->db->select('tbl_only_product_booking_details.*,tbl_new_booking.amount_to_paid, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_product.product_name,tbl_product_category.product_category,tbl_product_category.product_category_marathi,tbl_product.current_stock');
            $this->db->join('tbl_product','tbl_product.id = tbl_only_product_booking_details.product_id');
            $this->db->join('tbl_product_category','tbl_product_category.id = tbl_only_product_booking_details.category_id');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_only_product_booking_details.customer_name');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
            $this->db->where('tbl_only_product_booking_details.booking_id',$booking_id);
            $this->db->where('tbl_only_product_booking_details.is_deleted','0');
            $this->db->where('tbl_new_booking.booking_type','1');
            $booking_products = $this->db->get('tbl_only_product_booking_details')->result();

            if(!empty($booking)){
                $customer_membership = $this->get_customer_membership_details($booking->customer_id);
                $all_product_details_ids = array();
                $is_member = $customer_membership['is_member'];
                $membership_details = $customer_membership['membership'];
                $all_stylist = $this->get_all_salon_stylists();
            ?>
                <div class="calender_booking_details" style="margin-top: -10px;">
                    <table style="width:100%;">
                        <thead>
                            <tr style="border-bottom: 0.5px solid #afafaf;">
                                <th>Customer</th>
                                <th>Purchase Date</th>
                                <th>Purchase Amt</th>
                                <th>Customer Pending Amount</th>
                                <th>Membership</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <th>
                                    <?=$booking->customer_name;?>, <?=$booking->customer_phone;?>
                                </th>
                                <th><?=date('d M, Y',strtotime($booking->booking_date));?></th>
                                <th><?=($booking->amount_to_paid != "") ? 'Rs. '.$booking->amount_to_paid : 'Rs. 0.00';?></th>
                                <th><?=($booking->current_pending_amount != "" && $booking->current_pending_amount != null) ? 'Rs. '.$booking->current_pending_amount : 'Rs. 0.00';?></th>
                                <th>
                                    <?php 
                                        if($is_member == "1"){
                                            echo !empty($membership_details) ? '<br><a class="btn btn-sm" style="background-color:'.$membership_details->bg_color.'; color:'.$membership_details->text_color.'">'.$membership_details->membership_name.'</a>' : '-';
                                        }else{
                                            echo '<a class="btn" style="text-decoration:underline;" target="_blank" href="' . base_url() . 'bill-generation?customer=' . $booking->customer_id . '&bill_for=0" title="Assign Membership">Assign Membership</a>';
                                        }
                                    ?>
                                </th>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <form method="post" name="payment_form_<?=$booking->id;?>" id="payment_form_<?=$booking->id;?>" action="<?=base_url();?>product-generate-bill/<?=base64_encode($booking->id);?>">
                    <div class="row">
                        <div class="col-lg-8 col-md-12 col-sm-12  col-xs-12">
                            <div class="row">
                                <!-- <div class="col-lg-12">
                                    <div class="row" style="height: 75px;">
                                        <div class="form-group col-md-6 col-xs-12">
                                            <label>Select Category</label>
                                            <select class="form-control chosen-select" name="category_<?=$booking->id;?>" id="category_<?=$booking->id;?>" onchange="getProducts(<?=$booking->id;?>)">
                                                <option value="">Select Category</option>
                                                <?php
                                                    if(!empty($product_categories)){
                                                        foreach($product_categories as $product_categories_result){
                                                ?>
                                                <option value="<?=$product_categories_result->id;?>"><?=$product_categories_result->product_category;?></option>
                                                <?php
                                                        }
                                                    }
                                                ?>
                                            </select>
                                        </div>
                                        <div class="form-group col-md-6 col-xs-12">
                                            <label>Select Product</label>
                                            <select class="form-control chosen-select" name="select_product_<?=$booking->id;?>" id="select_product_<?=$booking->id;?>" onchange="appendProductDiv(<?=$booking->id;?>)">
                                                <option value="">Select Product</option>
                                            </select>
                                        </div>
                                    </div>
                                </div> -->
                                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                    <div class="calender_booking_details service_details_div service_details_box" style="height: 350px; overflow-y: scroll; border: 0.5px solid #afafaf;border-radius: 10px;">
                                        <table style="width:100%;">
                                            <thead>
                                                <tr style="border-bottom: 0.5px solid #afafaf;">
                                                    <th>Select</th>
                                                    <th>Product</th>
                                                    <th>Price <br><small>(Per Qty.)</small></th>
                                                    <th>Quantity</th>
                                                    <th>Amount</th>
                                                    <th>Select Product</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <?php 
                                                    if(!empty($booking_products)){
                                                        foreach($booking_products as $booking_products_result){                                                            
                                                            if($booking_products_result->payment_status == '0'){
                                                                $all_product_details_ids[] = $booking_products_result->id;
                                                            }
                                                            $product_stock = $this->get_product_stock_items($booking_products_result->product_id);
                                                ?>
                                                <tr id="product_row_<?=$booking->id;?>">
                                                    <td>
                                                    <!-- style="pointer-events: none;" -->
                                                        <input checked type="checkbox" class="booking_services_<?=$booking->id;?>" name="service_checkbox_<?=$booking->id;?>[]" id="service_checkbox_<?=$booking_products_result->id;?>" value="<?=$booking_products_result->id;?>" onclick="setSelectedProduct(<?=$booking_products_result->id;?>,<?=$booking->id;?>)">
                                                    </td>
                                                    <td><?=$booking_products_result->product_name;?></td>
                                                    <td><?=($booking_products_result->single_product_price != "") ? $booking_products_result->single_product_price : '-';?></td>                                                                                     
                                                    <td>
                                                        <div class="input-group plus_min" style="width: 10%;">
                                                            <span class="input-group-btn ">
                                                                <button style="background-color: #ff000029;border: none;margin-right: 2px !important;padding: 3px;margin: 0px;height: 30px;" type="button" class="btn btn-default btn-number" data-type="minus" onclick="decrementQuantity(<?=$booking_products_result->id;?>,<?=$booking->id;?>)" data-field="product_quantity_<?=$booking_products_result->id;?>">
                                                                    <span style="line-height:0px;color: red;" class="glyphicon glyphicon-minus"></span>
                                                                </button>
                                                            </span>
                                                            <input type="number" class="" style="width: 50px;padding: 3px;line-height: 4px;height: 35px;text-align: center;" min='1' max="<?=$booking_products_result->current_stock;?>" id="product_quantity_<?=$booking_products_result->id;?>" name="product_quantity_<?=$booking_products_result->id;?>" value="<?=$booking_products_result->quantity;?>">
                                                            <span class="input-group-btn">
                                                                <button style="background-color: #0080004a;border: none;margin-left: 2px !important; padding: 3px;margin: 0px;height: 30px;" type="button" class="btn btn-default btn-number" data-type="plus" onclick="incrementQuantity(<?=$booking_products_result->id;?>,<?=$booking->id;?>)" data-field="product_quantity_<?=$booking_products_result->id;?>">
                                                                    <span style="line-height:0px;color: green;" class="glyphicon glyphicon-plus"></span>
                                                                </button>
                                                            </span>
                                                        </div>
                                                    </td>
                                                    <td id="single_product_total_amount_<?=$booking_products_result->id;?>"><?=($booking_products_result->total_product_price != "") ? 'Rs. '.$booking_products_result->total_product_price : 'Rs. 0.00';?></td>                                                                                     
                                                    <td>
                                                        <div class="single_booking_product_barcodes_div_<?=$booking_products_result->id;?>">    
                                                            <select data-product-details="<?=$booking_products_result->id;?>" class="form-control chosen-select all_selected_stocks_<?=$booking->id;?> single_booking_product_barcodes_<?=$booking_products_result->id;?>" id="used_product_barcodes_<?=$booking_products_result->id;?>"  name="used_product_barcodes_<?=$booking_products_result->id;?>[]" multiple onchange="validateBarcodeSelection(<?=$booking_products_result->id;?>)">
                                                                <!-- <option value="">Select Used Product</option> -->
                                                                <?php if(!empty($product_stock)){ foreach($product_stock as $product_stock_result){ ?>
                                                                <option value="<?=$product_stock_result->id;?>">
                                                                    <?=$product_stock_result->barcode_id; ?>
                                                                    <!-- <?=$product_stock_result->barcode_id; ?> - Exp. : <?=date('d-m-Y',strtotime($product_stock_result->exp_date)); ?> -->
                                                                </option>
                                                                <?php }} ?>
                                                            </select>  
                                                            <?php if(empty($product_stock)){ ?>    
                                                            <label class="error" style="font-size: 10px;" id="stock_error_<?=$booking_products_result->id;?>_<?=$booking->id;?>">Stock not available</label>                                                  
                                                            <?php } ?>
                                                            <label class="error" style="display:none;font-size: 10px;" id="stock_selection_single_error_<?=$booking_products_result->id;?>_<?=$booking->id;?>">Please enter payment amount!</label>
                                                            <label class="error" style="font-size: 10px;" id="stock_error_<?=$booking_products_result->id;?>_<?=$booking->id;?>"></label>
                                                        </div>
                                                    </td>
                                                </tr>
                                                <input type="hidden" name="single_product_total_amount_hidden_<?=$booking_products_result->id;?>" id="single_product_total_amount_hidden_<?=$booking_products_result->id;?>" value="<?=($booking_products_result->total_product_price != "" && $booking_products_result->total_product_price != "" && $booking_products_result->total_product_price != "0" && $booking_products_result->total_product_price != "0.00") ? $booking_products_result->total_product_price : '0.00';?>">
                                                <input type="hidden" name="single_product_id_<?=$booking_products_result->id;?>" id="single_product_id_<?=$booking_products_result->id;?>" value="<?=$booking_products_result->product_id;?>">
                                                <input type="hidden" name="single_product_price_<?=$booking_products_result->id;?>" id="single_product_price_<?=$booking_products_result->id;?>" value="<?=($booking_products_result->single_product_price != "" && $booking_products_result->single_product_price != "" && $booking_products_result->single_product_price != "0" && $booking_products_result->single_product_price != "0.00") ? $booking_products_result->single_product_price : '0.00';?>">
                                                <input type="hidden" name="single_product_stock_<?=$booking_products_result->id;?>" id="single_product_stock_<?=$booking_products_result->id;?>" value="<?=$booking_products_result->current_stock;?>">
                                                <?php }}else{ ?>
                                                    
                                                <?php } ?>
                                            </tbody>
                                        </table>                                        
                                        <label for="service_checkbox_<?=$booking->id;?>[]" generated="true" class="error" style="display:none;">Please select at least one service!</label>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                    <label style="visibility:hidden;">Select Stylist<b class="require">*</b></label>  
                                    <div class="calender_booking_details rewards_details_div">
                                        <table style="width:100%;">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        <span id="customer_rewards_text_<?=$booking->id;?>">Rewards Balance: <?= $booking->rewards_balance != "" && (int)$booking->rewards_balance >= 0 ? (int)$booking->rewards_balance : 0; ?></span>
                                                        <div id="used_rewards_msg_<?=$booking->id;?>"></div>
                                                        <input type="hidden" name="customer_reward_available_<?=$booking->id;?>" id="customer_reward_available_<?=$booking->id;?>" value="<?=$booking->rewards_balance != "" && (int)$booking->rewards_balance >= 0 ? (int)$booking->rewards_balance : 0; ?>">
                                                        <input type="hidden" name="customer_gender_<?=$booking->id;?>" id="customer_gender_<?=$booking->id;?>" value="<?=$booking->customer_gender;?>">
                                                    </th>
                                                    <th style="text-align: right;">
                                                        <button id="rewards_button_<?=$booking->id;?>" class="btn btn-success" type="button" style="font-size:10px; padding:8px 12px;" onclick="applyRewards(<?=$booking->id;?>)">Apply</button>
                                                        <!-- <button id="rewards_remove_button_<?=$booking->id;?>" class="btn btn-warning" type="button" onclick="if(confirm('Are you sure you want to remove the reward points?')) removeRewards(<?=$booking->id;?>);" style="display:none;font-size:10px; padding:8px 12px;">Remove</button> -->
                                                        <button id="rewards_remove_button_<?=$booking->id;?>" class="btn btn-warning" type="button" onclick="openConfirmationDialog('re you sure you want to remove the reward points?', function(confirmed) { if (confirmed) { removeRewards(<?=$booking->id;?>); } })" style="display:none;font-size:10px; padding:8px 12px;">Remove</button>
                                                    </th>
                                                </tr>
                                            </thead>
                                        </table>
                                    </div>
                                </div>
                                <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                    <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                        <label style="visibility:hidden;">Select Stylist<b class="require">*</b></label>             
                                        <select class="form-control chosen-select" id="employee_<?=$booking->id;?>" name="employee_<?=$booking->id;?>">   
                                            <option value="">Select Stylist</option>
                                            <?php if(!empty($all_stylist)){ foreach($all_stylist as $employee_result){ ?>
                                                <option value="<?=$employee_result->id;?>" <?php if($booking->stylist_id == $employee_result->id){ echo 'selected'; } ?>><?=$employee_result->full_name;?></option>
                                            <?php }} ?>
                                        </select>
                                        <label for="employee_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <input type="hidden" name="old_stylist_id_<?=$booking->id;?>" id="old_stylist_id_<?=$booking->id;?>" value="<?=$booking->stylist_id;?>">
                        <input type="hidden" name="customer_id_<?=$booking->id;?>" id="customer_id_<?=$booking->id;?>" value="<?=$booking->customer_id;?>">
                        <input type="hidden" name="customer_pending_amount_<?=$booking->id;?>" id="customer_pending_amount_<?=$booking->id;?>" value="<?=($booking->current_pending_amount != "" && $booking->current_pending_amount != null) ? $booking->current_pending_amount : '0.00';?>">
                        <input type="hidden" name="is_membership_booking_<?=$booking->id;?>" id="is_membership_booking_<?=$booking->id;?>" value="<?=$is_member;?>">
                        <input type="hidden" name="membership_id_<?=$booking->id;?>" id="membership_id_<?=$booking->id;?>" value="<?=($is_member == '1' && !empty($membership_details)) ? $membership_details->membership_id : '';?>">
                        <input type="hidden" name="membership_discount_type_<?=$booking->id;?>" id="membership_discount_type_<?=$booking->id;?>" value="<?=($is_member == '1' && !empty($membership_details)) ? $membership_details->discount_in : '';?>">
                        <input type="hidden" name="m_product_discount_<?=$booking->id;?>" id="m_product_discount_<?=$booking->id;?>" value="<?=($is_member == '1' && !empty($membership_details)) ? $membership_details->product_discount : '0';?>">
                        
                        <input type="hidden" name="total_product_amount_<?=$booking->id;?>" id="total_product_amount_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="reward_discount_amount_<?=$booking->id;?>" id="reward_discount_amount_<?=$booking->id;?>" value="0.00">    
                        <input type="hidden" name="used_rewards_<?=$booking->id;?>" id="used_rewards_<?=$booking->id;?>" value="0">    
                        <input type="hidden" name="m_product_discount_amount_<?=$booking->id;?>" id="m_product_discount_amount_<?=$booking->id;?>" value="0.00">
                        
                        <input type="hidden" name="product_payable_hidden_<?=$booking->id;?>" id="product_payable_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="payable_hidden_<?=$booking->id;?>" id="payable_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="total_discount_hidden_<?=$booking->id;?>" id="total_discount_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="booking_amount_hidden_<?=$booking->id;?>" id="booking_amount_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="gst_amount_hidden_<?=$booking->id;?>" id="gst_amount_hidden_<?=$booking->id;?>" value="0.00">
                        <input type="hidden" name="grand_total_hidden_<?=$booking->id;?>" id="grand_total_hidden_<?=$booking->id;?>" value="0.00">
                        <div class="col-lg-4 col-md-12 col-sm-12">
                            <div class="calender_booking_details booking_pricing_div" style="border: 0.5px solid #afafaf;border-radius: 10px;">
                                <table style="width:100%;">
                                    <thead>
                                        <tr>
                                            <th>Products Price</th>
                                            <th id="total_product_amount_text_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <tr>
                                            <th>
                                                Discount                                        
                                                <div id="discount_details_div_<?=$booking->id;?>" style="position: relative;display:inline-block; width:auto;"></div>
                                            </th>
                                            <th id="discount_amount_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <tr style="border-top: 0.5px solid #afafaf;">
                                            <th>Total Amount</th>
                                            <th id="booking_amount_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <?php
                                            $is_gst_applicable = '0';
                                            $gst_no = '';
                                            $gst_rate = '0';
                                            if(!empty($store_profile)){
                                                if($store_profile->is_gst_applicable == '1'){
                                                    $gst_no = $store_profile->gst_no;
                                                    $is_gst_applicable = '1';
                                                    if(!empty($setup)){
                                                        $gst_rate = $setup->gst_rate;
                                                    }
                                                }
                                            }
                                        ?>
                                        <tr>
                                            <th>GST <small><?= $gst_rate != "" && $gst_rate != "0" ? '('.$gst_rate.'%)' : '';?></small></th>
                                            <th id="gst_amount_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <input type="hidden" name="is_gst_applicable_<?=$booking->id;?>" id="is_gst_applicable_<?=$booking->id;?>" value="<?=$is_gst_applicable;?>">
                                        <input type="hidden" name="salon_gst_no_<?=$booking->id;?>" id="salon_gst_no_<?=$booking->id;?>" value="<?=$gst_no;?>">
                                        <input type="hidden" name="salon_gst_rate_<?=$booking->id;?>" id="salon_gst_rate_<?=$booking->id;?>" value="<?=$gst_rate;?>">

                                        <tr style="border-top: 0.5px solid #afafaf;">
                                            <th>Total</th>
                                            <th id="grand_total_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                        <tr style="border-top: 0.5px solid #afafaf;">
                                            <th>Total Due<small><i title="Including Previous Due <?=($booking->current_pending_amount != "" && $booking->current_pending_amount != null) ? 'of Rs. '.$booking->current_pending_amount : '';?>" style="font-size: 12px;margin-top: 5px;margin-left: 5px;cursor:pointer;color:#0000ffb0;" class="fas fa-info-circle"></i></small></th>
                                            <th id="total_due_<?=$booking->id;?>">0.00</th>
                                        </tr>
                                    </thead>
                                </table>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 bill_generation_prices" style="margin-top:10px;">
                            <div class="row">
                                <div class="form-group col-md-6 col-xs-12">
                                    <label>Payment Amount<b class="require">*</b></label>
                                    <input type="number" class="form-control" name="paid_amount_<?=$booking->id;?>" id="paid_amount_<?=$booking->id;?>" placeholder="Enter Paid Amount" value="" onkeyup="calculatePendingAmount(<?=$booking->id;?>)">
                                    <label for="paid_amount_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                </div>
                                <div class="form-group col-md-6 col-xs-12">
                                    <label>Pending Amount<b class="require"></b></label>
                                    <input readonly type="number" class="form-control" name="pending_amount_<?=$booking->id;?>" id="pending_amount_<?=$booking->id;?>" placeholder="Enter Pending Amount" value="">
                                    <label for="pending_amount_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-6 col-xs-12">
                                    <label>Payment Mode<b class="require">*</b></label>
                                    <select class="form-control form-select" name="payment_mode_<?=$booking->id;?>" onchange="setTransactionID('<?=$booking->id;?>')" id="payment_mode_<?=$booking->id;?>">
                                        <option value="">Select Payment Mode</option>
                                        <!-- <option value="UPI">UPI</option>
                                        <option value="Cash">Cash</option>
                                        <option value="Cheque">Cheque</option>
                                        <option value="Card">Card</option>
                                        <option value="Online">Online</option> -->

                                        <?php if(!empty($payment_modes)){ for($i=0;$i<count($payment_modes); $i++){ ?>
                                            <option value="<?=$payment_modes[$i];?>"><?=$payment_modes[$i];?></option>
                                        <?php }}else{ ?>
                                            <option value="UPI">UPI</option>
                                            <option value="Cash">Cash</option>
                                            <!-- <option value="Cheque">Cheque</option> -->
                                            <option value="Card">Card</option>
                                            <option value="Online">Online</option>
                                        <?php } ?>
                                    </select>
                                    <label for="payment_mode_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                </div>
                                <div class="form-group col-md-6 col-xs-12">
                                    <label>Transaction ID</label>
                                    <input readonly type="text" placeholder="Enter Transaction ID" class="form-control" name="transaction_id_<?=$booking->id;?>" id="transaction_id_<?=$booking->id;?>" value="">
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                    <label>Payment Date<b class="require">*</b></label>
                                    <input readonly type="date" class="form-control" name="payment_date_<?=$booking->id;?>" id="payment_date_<?=$booking->id;?>" value="<?php echo date("Y-m-d"); ?>">
                                    <label for="payment_date_<?=$booking->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                                </div>
                                <label class="error" style="display:none;" id="stock_selection_error_<?=$booking->id;?>">Please enter payment amount!</label>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12  text-right">
                                    <button type="submit" class="btn btn-primary" id="payment_btn_<?=$booking->id;?>" name="payment_btn_<?=$booking->id;?>" value="payment_btn_<?=$booking->id;?>">Generate Bill</button>
                                </div>
                            </div> 
                        </div>
                    </div> 
                </form>              
                <script>
                    var user_selected_products = [];
                    function setTransactionID(id){
                        payment_mode = $('#payment_mode_' + id).val();
                        if(payment_mode == 'Cash'){
                            $('#transaction_id_' + id).attr('readonly', true);
                        }else{
                            $('#transaction_id_' + id).attr('readonly', false);
                        }
                    }
                    function getProducts(id){
                        $.ajax({
                            type: "POST",
                            url: "<?= base_url(); ?>salon/Ajax_controller/get_category_products_ajx",
                            data: { 'category_id': $('#category_' + id).val(), 'booking_id': id, 'user_selected_products': user_selected_products },
                            success: function(data) {  
                                var opts = $.parseJSON(data);
                                $("#select_product_" + id).empty();
                                $('#select_product_' + id).append('<option value="">Select Product</option>');
                                var opts = $.parseJSON(data);
                                $.each(opts, function(i, d) {
                                    $('#select_product_' + id).append('<option value="' + d.id + '">' + d.product_name + '</option>');
                                });
                                $('#select_product_' + id).trigger('chosen:updated');
                            },
                        });
                    }
                    $(document).ready(function () {                        
                        $(".chosen-select").chosen();
                        var selected_product_details = <?php echo json_encode($all_product_details_ids); ?>;
                        var bookingID = <?php echo $booking->id; ?>;
                        $('.loader_div').show();   
                        setTimeout(function() {
                            for(k=0;k<selected_product_details.length;k++){
                                setSelectedProduct(selected_product_details[k],bookingID);
                            }
                            $('.loader_div').hide(); 
                        }, 1500);

                        toggleMessageType(bookingID);

                        $('#payment_form_<?=$booking->id;?>').validate({
                            ignore:[],
                            rules: {
                                'service_checkbox_<?=$booking->id;?>[]': {
                                    required: true,
                                },
                                'employee_<?=$booking->id;?>': {
                                    required: true,
                                },
                                'payment_date_<?=$booking->id;?>': {
                                    required: true,
                                },
                                'payment_mode_<?=$booking->id;?>': {
                                    required: true,
                                },
                                'paid_amount_<?=$booking->id;?>': {
                                    required: true,
                                    number: true,
                                    min: 0,
                                },
                                'send_appointment_details_<?=$booking->id;?>': {
                                    required: true,
                                },
                                'message_type_<?=$booking->id;?>': {
                                    required: function(element) {
                                        return $('#send_appointment_details_<?=$booking->id;?>').val() == '1';
                                    },
                                },
                                <?php if(!empty($booking_services)){
                                    foreach($booking_services as $booking_services_result){ ?>
                                        'new_stylist_<?=$booking_services_result->id;?>': {
                                            required: true,
                                        },
                                <?php }} ?>
                            },
                            messages: {
                                'service_checkbox_<?=$booking->id;?>[]': {
                                    required: "Please select at least one product!",
                                },
                                'payment_date_<?=$booking->id;?>': {
                                    required: "Please select payment date!",
                                },
                                'employee_<?=$booking->id;?>': {
                                    required: "Please select employee!",
                                },
                                'payment_mode_<?=$booking->id;?>': {
                                    required: "Please select payment mode!",
                                },
                                'paid_amount_<?=$booking->id;?>': {
                                    required: "Please enter payment amount!",
                                    number: "Please enter number only!",
                                    min: "Minimum amount 0 is allowed!",
                                },
                                'send_appointment_details_<?=$booking->id;?>': {
                                    required: "Please select option!",
                                },
                                'message_type_<?=$booking->id;?>': {
                                    required: "Please select option!",
                                },
                                <?php if(!empty($booking_services)){
                                    foreach($booking_services as $booking_services_result){ ?>
                                        'new_stylist_<?=$booking_services_result->id;?>': {
                                            required: "Please select stylist!",
                                        },
                                <?php }} ?>
                            },
                            submitHandler: function(form) {
                                var isValid = true;
                                $('.all_selected_stocks_<?=$booking->id;?>').each(function() {
                                    var selectedValue = $(this).val();
                                    var selectedProduct = $(this).attr('data-product-details');
                                    var selectedProductQuantity = $('#product_quantity_' + selectedProduct).val();
                                    
                                    if ($('#service_checkbox_' + selectedProduct).is(':checked')) {
                                        if (!selectedValue || selectedValue.length === 0 ||  selectedValue == "" || selectedValue === null) {
                                            $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').html('Please select stock products');
                                            $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').show();
                                            isValid = false;
                                        } else {
                                            if(selectedValue.length == selectedProductQuantity){
                                                $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').html('');
                                                $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').hide();
                                            }else{
                                                $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').html('Please select stock products for entered quantity');
                                                $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').show();
                                                isValid = false;
                                            }
                                        }
                                    } else {
                                        $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').html('');
                                        $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').hide();
                                    }
                                });

                                if (isValid && confirm("Are you sure to generate bill?")) {
                                    $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').html('');
                                    $('#stock_selection_single_error_' + selectedProduct + '_<?=$booking->id;?>').hide();
                                    form.submit();
                                } else {
                                    return false;
                                }
                                // if(confirm("Are you sure to generate bill?")) {
                                // // openConfirmationDialog("Are you sure to generate bill?", function (confirmed) {
                                // // if (confirmed) {
                                //     form.submit();
                                // } else {
                                //     return false;
                                // }
                                // // });
                            }
                        });
                    });
                    var today = new Date();
                    var tenYearsAgo = new Date(today.getFullYear() - 10, today.getMonth(), today.getDate());

                    $('#payment_date_<?=$booking->id;?>').datepicker({
                        dateFormat: 'yy-mm-dd',
                        minDate: tenYearsAgo, // Allow dates from 10 years ago
                        maxDate: today,       // Disable future dates
                    });
                    function toggleMessageType(bookingID){
                        if($('#send_appointment_details_' + bookingID).val() == '1'){
                            $('#message_type_div_' + bookingID).show();
                        }else{
                            $('#message_type_div_' + bookingID).hide();
                        }
                    }
                </script>
            <?php 
            }else{ 
            ?>
                <div>
                    <label class="error">Booking details not found</label>
                </div>
            <?php 
            }
        }else{ 
        ?>
        <div>
            <label class="error">Booking rules not available</label>
        </div>
        <?php
        }
    }   
    public function get_category_products_ajx(){
        $category_id = $this->input->post('category_id');
        $booking_id = $this->input->post('booking_id');
        $user_selected_products = $this->input->post('user_selected_products');
        $booking_products_array = [];
        for($i=0;$i<count($user_selected_products);$i++){
            $this->db->select('tbl_only_product_booking_details.*,tbl_new_booking.amount_to_paid, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_product.product_name,tbl_product_category.product_category,tbl_product_category.product_category_marathi,tbl_product.current_stock');
            $this->db->join('tbl_product','tbl_product.id = tbl_only_product_booking_details.product_id');
            $this->db->join('tbl_product_category','tbl_product_category.id = tbl_only_product_booking_details.category_id');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_only_product_booking_details.customer_name');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
            $this->db->where('tbl_only_product_booking_details.booking_id',$booking_id);
            $this->db->where('tbl_only_product_booking_details.id',$user_selected_products[$i]);
            $this->db->where('tbl_only_product_booking_details.is_deleted','0');
            $booking_products = $this->db->get('tbl_only_product_booking_details')->row();
            if(!empty($booking_products)){
                $booking_products_array[] = $booking_products->product_id;
            }
        }

        if(!empty($booking_products_array)){
            $this->db->where_not_in('id', $booking_products_array);
        }
        $this->db->where('product_category', $category_id);
        $this->db->where('is_deleted', '0');
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product')->result();
        echo json_encode($result);
    }
    
    public function get_product_details_row_ajx(){
        $category_id = $this->input->post('category_id');
        $booking_id = $this->input->post('booking_id');
        $product = $this->input->post('product');

        $this->db->where('id', $product);
        $this->db->where('is_deleted', '0');
        $result = $this->db->get('tbl_product')->row();
        if(!empty($result)){
        ?>
            
        <?php
        }
    }
    public function get_booking_package_services($booking,$customer,$package){
        $this->db->where('item_type','0');
        $this->db->where('is_deleted','0');
        $this->db->where('added_in_booking_id',$booking);
        $this->db->where('pacakge_id',$package);
        $this->db->where('customer_name',$customer);
        $result = $this->db->get('tbl_booking_package_detail_status')->result();
        $custom = array();
        $all_services = array();
        if(!empty($result)){
            foreach($result as $data){
                $custom[] = array(
                    'allocation_id'         =>  $data->allocation_id,
                    'allocation_details_id' =>  $data->id,
                    'service_id'            =>  $data->item_id,
                );
                $all_services[] = $data->item_id;
            }
        }
        return array(
            'all_services_ids'          =>  $all_services,
            'all_services_details'      =>  $custom
        );
    } 
    public function get_booking_edit_details_ajx(){
		$setup = $this->Master_model->get_backend_setups();
		$store_profile = $this->Salon_model->get_all_salon_profile_single();		
        $booking_rules = $this->get_booking_rules();
		$stylists = $this->Salon_model->get_salon_all_stylists();
        if(!empty($booking_rules)){
            $days_early_booking = $booking_rules->max_booking_range_day;
            if($days_early_booking != ""){
                $max_date = date('d-m-Y', strtotime('+'.$days_early_booking.' day'));
            }else{
                $max_date = date('d-m-Y', strtotime('+0 day'));
            }
        }else{
            $max_date = date('d-m-Y', strtotime('+0 day'));
        }
        $today = date('d-m-Y');

        $booking_id = $this->input->post('booking_id');

        $this->db->select('tbl_new_booking.*,tbl_salon_customer.gender as customer_gender, tbl_salon_customer.membership_pkey,tbl_salon_customer.id as customer_id,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','0');
        $bookings = $this->db->get('tbl_new_booking')->row();
        
        $this->db->select('tbl_booking_services_details.*,tbl_admin_sub_category.sub_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_service_category.sup_category, tbl_admin_service_category.sup_category_marathi,tbl_package.package_name, tbl_salon_customer.membership_pkey,tbl_salon_customer.id as customer_id, tbl_new_booking.amount_to_paid,tbl_new_booking.payment_status,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.m_service_discount,tbl_new_booking.m_product_discount,tbl_new_booking.payment_date,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_salon_emp_service.service_duration,tbl_salon_emp_service.reward_point,tbl_salon_emp_service.product as all_service_prducts');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->join('tbl_package','tbl_package.id = tbl_booking_services_details.package_id','left');
        $this->db->join('tbl_admin_sub_category', 'tbl_salon_emp_service.sub_category = tbl_admin_sub_category.id');
        $this->db->join('tbl_admin_service_category', 'tbl_salon_emp_service.category = tbl_admin_service_category.id');
        $this->db->where('tbl_booking_services_details.booking_id',$booking_id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where('tbl_booking_services_details.service_status','0');
        $this->db->order_by('tbl_booking_services_details.service_from','asc');
        $booking_services = $this->db->get('tbl_booking_services_details')->result();
        
        $this->db->select('tbl_booking_services_details.*,tbl_package.package_name, tbl_salon_customer.membership_pkey,tbl_salon_customer.id as customer_id, tbl_new_booking.amount_to_paid,tbl_new_booking.payment_status,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.m_service_discount,tbl_new_booking.m_product_discount,tbl_new_booking.payment_date,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_salon_emp_service.service_duration,tbl_salon_emp_service.reward_point,tbl_salon_emp_service.product as all_service_prducts');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->join('tbl_package','tbl_package.id = tbl_booking_services_details.package_id','left');
        $this->db->where('tbl_booking_services_details.booking_id',$booking_id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where('tbl_booking_services_details.service_status','0');
        $this->db->order_by('tbl_booking_services_details.service_from','asc');
        $this->db->limit(1);
        $first_booking_services = $this->db->get('tbl_booking_services_details')->row();

        if(!empty($bookings)){
            $products = $this->Salon_model->get_all_active_product_new($bookings->customer_id);
            $category = $this->get_all_sup_category_gender($bookings->customer_gender);
            $is_member = '0';
            $membership_id = '';
            $membership_discount_type = '';
            $membership_service_discount = '0.00';
            $membership_product_discount = '0.00';
            $membership_button = '';

            $membership_details = $this->get_membership_details($bookings->membership_pkey,$bookings->customer_id);
            $package_details = $this->get_package_details($bookings->pacakge_id);
            if(!empty($membership_details)){
                $is_member = '1';
                $membership_id = $membership_details->membership_id;
                $membership_discount_type = $membership_details->discount_in;
                $membership_service_discount = $membership_details->service_discount;
                $membership_product_discount = $membership_details->product_discount;
                $membership_text_color = $membership_details->text_color;
                $membership_bg_color = $membership_details->bg_color;
                $membership_name = $membership_details->membership_name;
                $membership_button = '<a class="btn btn-sm" style="margin-top: -5px;float:right; background-color:'.$membership_bg_color.'; color:'.$membership_text_color.'">'.$membership_name.'</a>';
            }    
        ?>
            <h5 style="margin-bottom: 0px;margin-left: 10px;margin-top:0px;"><b style="font-weight: 600;">Customer: <?=$bookings->customer_name.' ['.$bookings->customer_phone.']';?></b><?=$membership_button; ?></h5>
            <hr>
            <form style="margin-top:-10px;" method="post" name="payment_form_<?=$bookings->id;?>" id="payment_form_<?=$bookings->id;?>" action="<?=base_url();?>update_service/<?=base64_encode($bookings->id);?>">
                <input type="hidden" name="employee_selection_rule_<?=$bookings->id;?>" id="employee_selection_rule_<?=$bookings->id;?>" value="<?php if(!empty($booking_rules)){ echo $booking_rules->employee_selection; } ?>">     
                <div id="selected_service_details_<?=$bookings->id;?>"></div>
                <div class="row">                   
                    <?php 
                    if(!empty($booking_rules)){ 
                        if($booking_rules->employee_selection == '2'){ 
                    ?>
                    <div class="form-group custom_label col-md-2 col-xs-12">
                        <label>Stylist<b class="require">*</b></label>
                        <select class="form-control chosen-select" id="employee_<?=$bookings->id;?>" name="employee_<?=$bookings->id;?>" onchange="fetchTimeSlots(<?=$bookings->id;?>)">   
                            <!-- <option value="">Select Stylist</option> -->
                            <?php if(!empty($stylists)){ foreach($stylists as $employee_result){ ?>
                                <option value="<?=$employee_result->id;?>" <?php if($bookings->stylist_id == $employee_result->id){ echo 'selected'; }?> data-img-src="<?=base_url();?>admin_assets/images/employee_profile/<?=$employee_result->profile_photo;?>"><?=$employee_result->full_name;?></option>
                            <?php }} ?>
                        </select>
                        <label for="employee_<?=$bookings->id;?>" style="display:none;" generated="true" class="error">Please select stylist!</label> 
                    </div>
                    <?php }} ?>
                    <div class="form-group custom_label  <?php if(!empty($booking_rules) && $booking_rules->employee_selection == "2"){ echo 'col-md-1'; }else{ echo 'col-md-2'; } ?> col-xs-12">
                        <label>Service Date<b class="require">*</b></label>
                        <input readonly type="text" class="form-control" name="booking_date_<?=$bookings->id;?>" id="booking_date_<?=$bookings->id;?>" placeholder="Select Booking Date" onchange="fetchTimeSlots(<?=$bookings->id;?>)" value="<?=date('d-m-Y',strtotime($bookings->service_start_date));?>">
                    </div>
                    <div class="form-group custom_label  <?php if(!empty($booking_rules) && $booking_rules->employee_selection == "2"){ echo 'col-md-1'; }else{ echo 'col-md-2'; } ?> col-xs-12">
                        <label>Service Start<b class="require">*</b></label>
                        <input readonly type="text" class="form-control" name="booking_start_<?=$bookings->id;?>" id="booking_start_<?=$bookings->id;?>" placeholder="Start From Time Slot" value="<?=date('H:i:s',strtotime($bookings->service_start_time));?>">
                    </div> 
                    <div class="form-group custom_label col-md-3 col-xs-12">
                        <label>Category<b class="require">*</b></label>
                        <select id="category_<?=$bookings->id;?>" name="category_<?=$bookings->id;?>" class="form-control">
                            <option value="">Select Category</option>
                            <?php
                                if(!empty($category)){
                                    foreach($category as $category_result){
                                        if($category_result->gender == '0'){
                                            $gender = ' - [Male]';
                                        }else if($category_result->gender == '1'){
                                            $gender = ' - [Female]';
                                        }else{
                                            $gender = '';
                                        }
                            ?>
                            <option value="<?=$category_result->id; ?>"><?=$category_result->sup_category; ?>|<?=$category_result->sup_category_marathi; ?> <?=$gender; ?></option>
                            <?php }} ?>
                        </select>
                        <label for="category_<?=$bookings->id;?>" generated="true" class="error" style="display:none;width:100%;text-align:left;">Please select category!</label>
                    </div>
                    <div class="form-group custom_label col-md-2 col-xs-12">
                        <label>Sub Category</label>
                        <select id="sub_category_<?=$bookings->id;?>" name="sub_category_<?=$bookings->id;?>" class="form-control">
                            <option value="">Select Sub Category</option>
                        </select>
                        <label for="sub_category_<?=$bookings->id;?>" generated="true" class="error" style="display:none;width:100%;text-align:left;">Please select sub category!</label>
                    </div>
                    <div class="form-group custom_label col-md-3 col-xs-12">
                        <label>Service<b class="require">*</b></label>
                        <select id="service_<?=$bookings->id;?>" name="service_<?=$bookings->id;?>" class="form-control">
                            <option value="">Select Service</option>
                        </select>
                        <label for="selected_add_service_<?=$bookings->id;?>" generated="true" class="error" style="display:none;width:100%;text-align:left;">Please select service!</label>
                        <div id="old_service_details_<?=$bookings->id;?>"></div>
                    </div> 
                </div>
                <div class="row">
                    <div class="col-lg-8 col-md-6 col-sm-12  col-xs-12">
                        <input type="hidden" name="customer_gender_<?=$bookings->id;?>" id="customer_gender_<?=$bookings->id;?>" value="<?=$bookings->customer_gender;?>">
                        <input type="hidden" name="previous_start_<?=$bookings->id;?>" id="previous_start_<?=$bookings->id;?>" value="">
                        <input type="hidden" name="previous_stylist_<?=$bookings->id;?>" id="previous_stylist_<?=$bookings->id;?>" value="<?php if(!empty($first_booking_services)){ echo $first_booking_services->stylist_id; } ?>">
                        <input type="hidden" name="slot_start_time_<?=$bookings->id;?>" id="slot_start_time_<?=$bookings->id;?>" value="<?=date('H:i:s',strtotime($bookings->service_start_time));?>">
                        
                        <div class="timeslot_box">
                            <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" id="booking_timeslots_<?=$bookings->id;?>">

                            </div>  
                            <div id="booking_timeslots_loader_<?=$bookings->id;?>" style="display:none;">
                                <div class="timeslot-loader"></div>
                            </div>  
                        </div>  
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" id="selected_services_empty_<?=$bookings->id;?>">
                            <div class="row single_added_extra_service_details">
                                <div class="col-md-12 col-sm-12 col-xs-12 selected-servicesbox" style="height:60px; padding-top: 9px; padding-left:0px;">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="text-align:center;">
                                        <label class="noserviceavl" style="margin-top: 10px;background-color:transparent !important; font-size: 11px !important;color: #4c4c4c !important;">Service not selected</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group p_L_0 col-md-12 col-xs-12" id="selected_services_<?=$bookings->id;?>" style="display:none;"></div>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-12 col-xs-12 extra_service_price_table">
                        <table style="width:100%;" class="">
                            <thead>
                                <tr style="background-color: white;">
                                    <th>Service Price</th>
                                    <th id="total_add_service_price_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;">
                                    <th>Products Price</th>
                                    <th id="total_add_service_product_price_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;">
                                    <th>Package Price<small id="add_service_package_name_<?=$bookings->id;?>"></small></th>
                                    <th id="total_add_service_package_price_text_<?=$bookings->id;?>"><?=($bookings->pacakge_id != "" && $bookings->pacakge_id != null && $bookings->package_amount != "" && $bookings->package_amount != null) ? $bookings->package_amount : '0.00';?></th>
                                </tr>
                                <tr style="background-color: white;border-top: 1px solid #ccc;">
                                    <th>
                                        Discount
                                        <div id="add_service_discount_details_div_<?=$bookings->id;?>" style="position: relative;display:inline-block; width:auto;"></div>
                                    </th>
                                    <th id="add_service_total_discount_amount_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;border-top: 0.5px solid #afafaf;">
                                    <th>Payable Amount</th>
                                    <th id="add_service_final_payable_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;">
                                    <?php
                                        $is_gst_applicable = '0';
                                        $gst_no = '';
                                        $gst_rate = '0';
                                        if(!empty($store_profile)){
                                            if($store_profile->is_gst_applicable == '1'){
                                                $gst_no = $store_profile->gst_no;
                                                $is_gst_applicable = '1';
                                                if(!empty($setup)){
                                                    $gst_rate = $setup->gst_rate;
                                                }
                                            }
                                        }
                                    ?>
                                    <input type="hidden" name="is_gst_applicable_<?=$bookings->id;?>" id="is_gst_applicable_<?=$bookings->id;?>" value="<?=$is_gst_applicable;?>">
                                    <input type="hidden" name="salon_gst_no_<?=$bookings->id;?>" id="salon_gst_no_<?=$bookings->id;?>" value="<?=$gst_no;?>">
                                    <input type="hidden" name="salon_gst_rate_<?=$bookings->id;?>" id="salon_gst_rate_<?=$bookings->id;?>" value="<?=$gst_rate;?>">
                                    
                                    <th>GST Amount <small><?= $gst_rate != "" && $gst_rate != "0" ? '('.$gst_rate.'%)' : '';?></small></th>
                                    <th id="add_service_final_gst_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="border-top: 0.5px solid #afafaf;">
                                    <th>Total Amount</th>
                                    <th id="add_service_final_total_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                            </thead>
                        </table>
                        <input type="hidden" name="add_service_is_membership_<?=$bookings->id;?>" id="add_service_is_membership_<?=$bookings->id;?>" value="<?=$is_member;?>">
                        <input type="hidden" name="add_service_membership_id_<?=$bookings->id;?>" id="add_service_membership_id_<?=$bookings->id;?>" value="<?=$membership_id;?>">
                        <input type="hidden" name="add_service_membership_discount_type_<?=$bookings->id;?>" id="add_service_membership_discount_type_<?=$bookings->id;?>" value="<?=$membership_discount_type;?>">
                        <input type="hidden" name="add_service_membership_service_discount_<?=$bookings->id;?>" id="add_service_membership_service_discount_<?=$bookings->id;?>" value="<?=$membership_service_discount;?>">
                        <input type="hidden" name="add_service_membership_product_discount_<?=$bookings->id;?>" id="add_service_membership_product_discount_<?=$bookings->id;?>" value="<?=$membership_product_discount;?>">
                        
                        <input type="hidden" name="add_service_membership_service_discount_amount_<?=$bookings->id;?>" id="add_service_membership_service_discount_amount_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_membership_product_discount_amount_<?=$bookings->id;?>" id="add_service_membership_product_discount_amount_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_total_discount_amount_<?=$bookings->id;?>" id="add_service_total_discount_amount_<?=$bookings->id;?>" value="">

                        <input type="hidden" name="total_add_service_price_<?=$bookings->id;?>" id="total_add_service_price_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_payable_hidden_<?=$bookings->id;?>" id="add_service_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_product_payable_hidden_<?=$bookings->id;?>" id="add_service_product_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        
                        <input type="hidden" name="is_package_applicable_<?=$bookings->id;?>" id="is_package_applicable_<?=$bookings->id;?>" value="<?= $bookings->is_package_included; ?>">
                        <input type="hidden" name="package_allocation_id_<?=$bookings->id;?>" id="package_allocation_id_<?=$bookings->id;?>" value="<?= ($bookings->package_allocation_id == '' || $bookings->package_allocation_id == null) ? '0' : $bookings->package_allocation_id; ?>">
                        <input type="hidden" name="add_service_selected_package_id_<?=$bookings->id;?>" id="add_service_selected_package_id_<?=$bookings->id;?>" value="<?= $bookings->pacakge_id; ?>">
                        <input type="hidden" name="included_package_type_<?=$bookings->id;?>" id="included_package_type_<?=$bookings->id;?>" value="<?= $bookings->used_package_type; ?>">
                        <input type="hidden" name="booking_add_service_package_price_<?=$bookings->id;?>" id="booking_add_service_package_price_<?=$bookings->id;?>" value="<?php if($bookings->pacakge_id != "" && $bookings->pacakge_id != null && $bookings->package_amount != "" && $bookings->package_amount != null){ echo $bookings->package_amount; } ?>">  
                        <input type="hidden" name="total_add_service_package_price_<?=$bookings->id;?>" id="total_add_service_package_price_<?=$bookings->id;?>" value="<?php if($bookings->pacakge_id != "" && $bookings->pacakge_id != null && $bookings->package_amount != "" && $bookings->package_amount != null){ echo $bookings->package_amount; } ?>">  
                        <input type="hidden" name="add_service_package_name_hidden_<?=$bookings->id;?>" id="add_service_package_name_hidden_<?=$bookings->id;?>" value="<?php if($bookings->pacakge_id != "" && $bookings->pacakge_id != null && $bookings->package_amount != "" && $bookings->package_amount != null && !empty($package_details)){ echo $package_details->package_name; } ?>">  
                        
                        <input type="hidden" name="total_add_service_product_price_<?=$bookings->id;?>" id="total_add_service_product_price_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_final_payable_hidden_<?=$bookings->id;?>" id="add_service_final_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_final_gst_hidden_<?=$bookings->id;?>" id="add_service_final_gst_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_final_total_hidden_<?=$bookings->id;?>" id="add_service_final_total_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="selected_add_service_<?=$bookings->id;?>" id="selected_add_service_<?=$bookings->id;?>" value="">
                        <input type="hidden" name="selected_sub_category_<?=$bookings->id;?>" id="selected_sub_category_<?=$bookings->id;?>" value="">

                        <label class="error" id="stylist_timeslot_error_<?=$bookings->id;?>" style="display:none;margin-top:5px;"></label>
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" style="margin-top: 10px;margin-left: -10px;">
                            <button type="submit" class="btn btn-primary" id="payment_btn" value="payment_btn">Submit</button>
                        </div>
                    </div>
                </div>
            </form>
            <script>
                var user_services_selected = [];
                var user_selected_add_service = [];
                var user_selected_add_service_product = [];
                var user_selected_timeslots_add_service = [];
                var user_selected_stylist_timeslots_add_service = [];

                var selected_slot_start = '<?php echo  ($bookings->service_start_date != "") ? date('Y-m-d H:i:s',strtotime($bookings->service_start_date. ' ' . $bookings->service_start_time)) : ''; ?>';
                var selected_slot_start_date = '<?php echo ($bookings->service_start_date != "") ? date('d-m-Y', strtotime($bookings->service_start_date)) : ''; ?>';
                var selected_slot_start_time = '<?php echo  ($bookings->service_start_time != "") ? date('H:i:s',strtotime($bookings->service_start_time)) : ''; ?>';

                if(selected_slot_start_date != ""){
                    var parts = selected_slot_start_date.split('-');
                    var day = parts[0].trim();
                    if (day.length === 1) {
                        day = '0' + day; 
                    }
                    var selected_formattedDate = day + '-' + parts[1].trim() + '-' + parts[2].trim();
                } else {
                    var selected_formattedDate = '';
                }
                
                $(document).ready(function () {  
                    if(selected_slot_start_date != "" && selected_slot_start_time != ""){
                        var all_products = <?= json_encode($products); ?>;
                        $('#booking_date_<?=$bookings->id;?>').val(selected_slot_start_date);  

                        var selectedServices = <?php echo json_encode($booking_services); ?>;

                        var booking_details_id = '<?php echo $bookings->id; ?>';
                        for(var k=0;k<selectedServices.length;k++){
                            if (selectedServices[k].service_added_from == '1') {
                                var value_text_selected = selectedServices[k].service_id + '_' +
                                                selectedServices[k].service_added_from + '_' + 
                                                selectedServices[k].is_service_offer_applied + '_' + 
                                                (selectedServices[k].package_allocation_id == null || selectedServices[k].package_allocation_id === '' ? '0' : selectedServices[k].package_allocation_id);
                            }else{
                                var value_text_selected = selectedServices[k].service_id + '_' +
                                                selectedServices[k].service_added_from + '_' + 
                                                selectedServices[k].is_service_offer_applied + '_' + 
                                                '0';
                            }

                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_price_' + booking_details_id + '_' + value_text_selected + '" id="service_price_' + booking_details_id + '_' + value_text_selected + '" value="' + (selectedServices[k].service_price != null && selectedServices[k].service_price != "" ? parseFloat(selectedServices[k].service_price).toFixed(2) : '0.00') + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_original_price_' + booking_details_id + '_' + value_text_selected + '" id="service_original_price_' + booking_details_id + '_' + value_text_selected + '" value="' + (selectedServices[k].original_service_price != null && selectedServices[k].original_service_price != "" ? parseFloat(selectedServices[k].original_service_price).toFixed(2) : '0.00') + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_marathi_name_' + booking_details_id + '_' + value_text_selected + '" id="service_marathi_name_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_name_marathi + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_name_' + booking_details_id + '_' + value_text_selected + '" id="service_name_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_name + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_sub_cat_marathi_name_' + booking_details_id + '_' + value_text_selected + '" id="service_sub_cat_marathi_name_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].sub_category_marathi + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_sub_cat_name_' + booking_details_id + '_' + value_text_selected + '" id="service_sub_cat_name_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].sub_category_name + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_duration_' + booking_details_id + '_' + value_text_selected + '" id="service_duration_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_duration + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_rewards_' + booking_details_id + '_' + value_text_selected + '" id="service_rewards_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].reward_point + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_products_' + booking_details_id + '_' + value_text_selected + '" id="service_products_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].all_service_prducts + '">');
                            
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="is_offer_applied_' + booking_details_id + '_' + value_text_selected + '" id="is_offer_applied_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].is_service_offer_applied + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="applied_offer_id_' + booking_details_id + '_' + value_text_selected + '" id="applied_offer_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].applied_offer_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_' + booking_details_id + '_' + value_text_selected + '" id="service_offer_discount_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_offer_discount + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_type_' + booking_details_id + '_' + value_text_selected + '" id="service_offer_discount_type_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_offer_discount_type + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_amount_' + booking_details_id + '_' + value_text_selected + '" id="service_offer_discount_amount_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_offer_discount_amount + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="prev_stylist_' + booking_details_id + '_' + value_text_selected + '" id="prev_stylist_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].stylist_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_added_from_' + booking_details_id + '_' + value_text_selected + '" id="service_added_from_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_added_from + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_booking_details_id_' + booking_details_id + '_' + value_text_selected + '" id="service_booking_details_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].id + '">');
      
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_id_' + booking_details_id + '_' + value_text_selected + '" id="service_package_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].package_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_allocation_id_' + booking_details_id + '_' + value_text_selected + '" id="service_package_allocation_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].package_allocation_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_allocation_details_id_' + booking_details_id + '_' + value_text_selected + '" id="service_package_allocation_details_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].package_allocation_status_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_name_' + booking_details_id + '_' + value_text_selected + '" id="service_package_name_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].package_name + '">');

                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_in_' + booking_details_id + '_' + value_text_selected + '" id="service_discount_in_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].discount_in + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_type_' + booking_details_id + '_' + value_text_selected + '" id="service_discount_type_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].discount_type + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_value_' + booking_details_id + '_' + value_text_selected + '" id="service_discount_value_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].discount_value + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_slab_min_' + booking_details_id + '_' + value_text_selected + '" id="service_discount_slab_min_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].discount_slab_min + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_slab_max_' + booking_details_id + '_' + value_text_selected + '" id="service_discount_slab_max_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].discount_slab_max + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_slab_increment_' + booking_details_id + '_' + value_text_selected + '" id="service_slab_increment_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].slab_increment + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_applied_flexible_slab_' + booking_details_id + '_' + value_text_selected + '" id="service_applied_flexible_slab_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].applied_flexible_slab + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_received_discount_' + booking_details_id + '_' + value_text_selected + '" id="service_received_discount_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].received_discount + '">');

                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="is_service_discount_applied_' + booking_details_id + '_' + value_text_selected + '" id="is_service_discount_applied_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].is_service_discount_applied + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_marketing_discount_type_' + booking_details_id + '_' + value_text_selected + '" id="service_marketing_discount_type_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_marketing_discount_type + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_customer_criteria_' + booking_details_id + '_' + value_text_selected + '" id="service_discount_customer_criteria_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_discount_customer_criteria + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_row_id_' + booking_details_id + '_' + value_text_selected + '" id="service_discount_row_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_discount_row_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_discount_slab_min_' + booking_details_id + '_' + value_text_selected + '" id="rewards_discount_slab_min_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].rewards_discount_slab_min + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_discount_slab_max_' + booking_details_id + '_' + value_text_selected + '" id="rewards_discount_slab_max_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].rewards_discount_slab_max + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_slab_increment_' + booking_details_id + '_' + value_text_selected + '" id="rewards_slab_increment_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].rewards_slab_increment + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_applied_flexible_slab_' + booking_details_id + '_' + value_text_selected + '" id="rewards_applied_flexible_slab_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].rewards_applied_flexible_slab + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_received_discount_' + booking_details_id + '_' + value_text_selected + '" id="rewards_received_discount_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].rewards_received_discount + '">');

                            var service_duration = selectedServices[k].service_duration;
                            var service_name = selectedServices[k].service_name;
                            var service_marathi_name = selectedServices[k].service_name_marathi;
                            var service_sub_cat_name = selectedServices[k].sub_category_name;
                            var service_sub_cat_marathi_name = selectedServices[k].sub_category_marathi;
                            var service_rewards = selectedServices[k].reward_point;
                            var final_price = selectedServices[k].service_price != "" && selectedServices[k].service_price != null ? selectedServices[k].service_price : '0';
                            var service_original_price = selectedServices[k].original_service_price;
                            var service_products = selectedServices[k].all_service_prducts;
                            var service_id = selectedServices[k].service_id;
                            var service_added_from = selectedServices[k].service_added_from;
                            
                            createServiceDiv(value_text_selected,'<?=$bookings->id;?>',service_added_from,service_id,all_products,'pre_selected_service',service_duration,service_name,service_marathi_name,service_rewards,final_price,service_original_price,service_products,service_sub_cat_marathi_name,service_sub_cat_name);
                        }
                        
                        var timeParts = selected_slot_start_time.split(":");
                        var hours = parseInt(timeParts[0], 10);
                        var minutes = parseInt(timeParts[1], 10);
                        
                        var ampm = hours >= 12 ? 'PM' : 'AM';
                        hours = hours % 12;
                        hours = hours ? hours : 12;
                        
                        minutes = minutes < 10 ? '0' + minutes : minutes;
                        
                        selectedValue = hours + ':' + minutes + ' ' + ampm;

                        setBookingStartEdit(selectedValue,<?=$bookings->id;?>);
                    }
                    $("#booking_date_<?=$bookings->id;?>").datepicker({
                        dateFormat: 'dd-mm-yy',
                        maxDate: '<?php echo $max_date; ?>',
                        minDate: '<?php echo $today; ?>',
                    });  
                    var today_date = '<?php echo  ($today != "") ? date('d-m-Y',strtotime($today)) : ''; ?>';

                    $("#category_<?=$bookings->id;?>").chosen(); 
                    $("#sub_category_<?=$bookings->id;?>").chosen(); 
                    $("#employee_<?=$bookings->id;?>").chosen(); 
                    $("#service_<?=$bookings->id;?>").chosen(); 

                    $('#payment_form_<?=$bookings->id;?>').validate({
                        ignore:[],
                        rules: {
                            // 'category_<?=$bookings->id;?>': {
                            //     required: true,
                            // },
                            'selected_add_service_<?=$bookings->id;?>': {
                                required: true,
                            },
                        },
                        messages: {
                            // 'category_<?=$bookings->id;?>': {
                            //     required: "Please select category!",
                            // },
                            'selected_add_service_<?=$bookings->id;?>': {
                                required: "Please select atleast one service!",
                            },
                        },
                        submitHandler: function(form) {
                            var validation_flag = 1;
                            $(".service_executive_<?=$bookings->id;?>").each(function () {
                                if ($(this).val() == "") {
                                    validation_flag = 0;
                                    return false;
                                }
                            });
                            if (validation_flag == 1) {
                                if (confirm("Are you sure you want to edit booking?")) {
                                // openConfirmationDialog("Are you sure you want to add service?", function (confirmed) {
                                // if (confirmed) {
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").hide('');
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").html('');

                                    form.submit();
                                } else {
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").hide('');
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").html('');
                                    return false;
                                }
                                // });
                            } else {
                                $("#stylist_timeslot_error_<?=$bookings->id;?>").show('');
                                $("#stylist_timeslot_error_<?=$bookings->id;?>").html('Please select stylists for the selected service'); 
                            }
                        }
                    });

                    $('#category_<?=$bookings->id;?>').change(function() {
                        $('.loader_div').show();   
                        // setTimeout(function() {
                            var booking_details_id = '<?= $bookings->id; ?>';
                            var booking_customer_id = '<?= $bookings->customer_name; ?>';
                            var category = $('#category_' + booking_details_id).val();
                            var sub_category = $('#sub_category_' + booking_details_id).val();
                            if (category !== "" && typeof category !== "undefined") {
                                $.ajax({
                                    type: "POST",
                                    url: "<?= base_url(); ?>salon/Ajax_controller/get_category_sub_categories",
                                    data: { 'category': category, 'customer_id': booking_customer_id },
                                    success: function(data) {                                        
                                        $("#sub_category_"+booking_details_id).empty();
                                        $("#sub_category_"+booking_details_id).append('<option value="">Select Sub Category</option>');
                                        var opts = $.parseJSON(data);
                                        $.each(opts, function(i, d) {
                                            if(d.gender == '0'){
                                                var gender = ' - [Male]';
                                            }else if(d.gender == '1'){
                                                var gender = ' - [Female]';
                                            }else{
                                                var gender = '';
                                            }
                                            if(d.id == $('#selected_sub_category_'+booking_details_id).val()){
                                                $("#sub_category_"+booking_details_id).append('<option selected value="' + d.id + '">' + d.sub_category + '|' + d.sub_category_marathi + '' + gender + '</option>');
                                            }else{
                                                $("#sub_category_"+booking_details_id).append('<option value="' + d.id + '">' + d.sub_category + '|' + d.sub_category_marathi + '' + gender + '</option>');
                                            }
                                        });
                                        $("#sub_category_"+booking_details_id).trigger('chosen:updated');
                                        $("#sub_category_"+booking_details_id).chosen();
                                    }
                                });

                                $.ajax({
                                    type: "POST",
                                    url: "<?= base_url(); ?>salon/Ajax_controller/get_booking_category_services",
                                    data: { 'sub_category': sub_category, 'category': category, 'booking_details_id': booking_details_id, 'booking_customer_id': booking_customer_id },
                                    success: function(data) {
                                        $('.loader_div').hide(); 
						
                                        $("#service_"+booking_details_id).empty();
                                        $("#service_"+booking_details_id).append('<option value="">Select Service</option>');
                                        var stylists = $.parseJSON(data);
                                        if (stylists.length > 0) {
                                            var opts = $.parseJSON(data);

                                            $.each(opts, function(i, d) {
                                                if (d.service_added_from == '1') {
                                                    var value_text = d.id + '_' +
                                                                    d.service_added_from + '_' + 
                                                                    d.is_offer_applied + '_' + 
                                                                    (d.package_allocation_id == null || d.package_allocation_id === '' ? '0' : d.package_allocation_id);
                                                } else {
                                                    var value_text = d.id + '_' +
                                                                    d.service_added_from + '_' + 
                                                                    d.is_offer_applied + '_' + 
                                                                    '0';
                                                }
												//rohit
                                                if(d.is_package_service == '1'){
                                                    $("#service_" + booking_details_id).append('<option value="' + value_text + '">'+ d.service_name + '|' + d.service_name_marathi + ' - ' + d.package_name + ' [' + d.sub_category + '] Package Service</option>');
                                                }else{
                                                    $("#service_" + booking_details_id).append('<option value="' + value_text + '">'+ d.service_name + '|' + d.service_name_marathi + ' [' + d.sub_category + '] </option>');
                                                }

                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_price_' + booking_details_id + '_' + value_text + '" id="service_price_' + booking_details_id + '_' + value_text + '" value="' + (d.service_price != null && d.service_price != "" ? parseFloat(d.service_price).toFixed(2) : '0.00') + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_original_price_' + booking_details_id + '_' + value_text + '" id="service_original_price_' + booking_details_id + '_' + value_text + '" value="' + (d.service_original_price != null && d.service_original_price != "" ? parseFloat(d.service_original_price).toFixed(2) : '0.00') + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_marathi_name_' + booking_details_id + '_' + value_text + '" id="service_marathi_name_' + booking_details_id + '_' + value_text + '" value="' + d.service_name_marathi + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_name_' + booking_details_id + '_' + value_text + '" id="service_name_' + booking_details_id + '_' + value_text + '" value="' + d.service_name + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_sub_cat_marathi_name_' + booking_details_id + '_' + value_text + '" id="service_sub_cat_marathi_name_' + booking_details_id + '_' + value_text + '" value="' + d.sub_category_marathi + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_sub_cat_name_' + booking_details_id + '_' + value_text + '" id="service_sub_cat_name_' + booking_details_id + '_' + value_text + '" value="' + d.sub_category + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_duration_' + booking_details_id + '_' + value_text + '" id="service_duration_' + booking_details_id + '_' + value_text + '" value="' + d.service_duration + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_rewards_' + booking_details_id + '_' + value_text + '" id="service_rewards_' + booking_details_id + '_' + value_text + '" value="' + d.reward_point + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_products_' + booking_details_id + '_' + value_text + '" id="service_products_' + booking_details_id + '_' + value_text + '" value="' + d.product + '">');
                                                
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="prev_stylist_' + booking_details_id + '_' + value_text + '" id="prev_stylist_' + booking_details_id + '_' + value_text + '" value="">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="is_offer_applied_' + booking_details_id + '_' + value_text + '" id="is_offer_applied_' + booking_details_id + '_' + value_text + '" value="' + d.is_offer_applied + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="applied_offer_id_' + booking_details_id + '_' + value_text + '" id="applied_offer_id_' + booking_details_id + '_' + value_text + '" value="' + d.applied_offer_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_' + booking_details_id + '_' + value_text + '" id="service_offer_discount_' + booking_details_id + '_' + value_text + '" value="' + d.service_offer_discount + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_type_' + booking_details_id + '_' + value_text + '" id="service_offer_discount_type_' + booking_details_id + '_' + value_text + '" value="' + d.service_offer_discount_type + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_amount_' + booking_details_id + '_' + value_text + '" id="service_offer_discount_amount_' + booking_details_id + '_' + value_text + '" value="' + d.service_offer_discount_amount + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_added_from_' + booking_details_id + '_' + value_text + '" id="service_added_from_' + booking_details_id + '_' + value_text + '" value="' + d.service_added_from + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_booking_details_id_' + booking_details_id + '_' + value_text + '" id="service_booking_details_id_' + booking_details_id + '_' + value_text + '" value="">');
                                                
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_id_' + booking_details_id + '_' + value_text + '" id="service_package_id_' + booking_details_id + '_' + value_text + '" value="' + d.package_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_allocation_id_' + booking_details_id + '_' + value_text + '" id="service_package_allocation_id_' + booking_details_id + '_' + value_text + '" value="' + d.package_allocation_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_allocation_details_id_' + booking_details_id + '_' + value_text + '" id="service_package_allocation_details_id_' + booking_details_id + '_' + value_text + '" value="' + d.package_allocation_details_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_name_' + booking_details_id + '_' + value_text + '" id="service_package_name_' + booking_details_id + '_' + value_text + '" value="' + d.package_name + '">');
                                            
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_in_' + booking_details_id + '_' + value_text + '" id="service_discount_in_' + booking_details_id + '_' + value_text + '" value="' + d.discount_in + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_type_' + booking_details_id + '_' + value_text + '" id="service_discount_type_' + booking_details_id + '_' + value_text + '" value="' + d.discount_type + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_value_' + booking_details_id + '_' + value_text + '" id="service_discount_value_' + booking_details_id + '_' + value_text + '" value="' + d.discount_value + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_slab_min_' + booking_details_id + '_' + value_text + '" id="service_discount_slab_min_' + booking_details_id + '_' + value_text + '" value="' + d.discount_slab_min + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_slab_max_' + booking_details_id + '_' + value_text + '" id="service_discount_slab_max_' + booking_details_id + '_' + value_text + '" value="' + d.discount_slab_max + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_slab_increment_' + booking_details_id + '_' + value_text + '" id="service_slab_increment_' + booking_details_id + '_' + value_text + '" value="' + d.slab_increment + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_applied_flexible_slab_' + booking_details_id + '_' + value_text + '" id="service_applied_flexible_slab_' + booking_details_id + '_' + value_text + '" value="' + d.applied_flexible_slab + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_received_discount_' + booking_details_id + '_' + value_text + '" id="service_received_discount_' + booking_details_id + '_' + value_text + '" value="' + d.received_discount + '">');

                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="is_service_discount_applied_' + booking_details_id + '_' + value_text + '" id="is_service_discount_applied_' + booking_details_id + '_' + value_text + '" value="' + d.is_service_discount_applied + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_marketing_discount_type_' + booking_details_id + '_' + value_text + '" id="service_marketing_discount_type_' + booking_details_id + '_' + value_text + '" value="' + d.service_marketing_discount_type + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_customer_criteria_' + booking_details_id + '_' + value_text + '" id="service_discount_customer_criteria_' + booking_details_id + '_' + value_text + '" value="' + d.service_discount_customer_criteria + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_discount_row_id_' + booking_details_id + '_' + value_text + '" id="service_discount_row_id_' + booking_details_id + '_' + value_text + '" value="' + d.service_discount_row_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_discount_slab_min_' + booking_details_id + '_' + value_text + '" id="rewards_discount_slab_min_' + booking_details_id + '_' + value_text + '" value="' + d.rewards_discount_slab_min + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_discount_slab_max_' + booking_details_id + '_' + value_text + '" id="rewards_discount_slab_max_' + booking_details_id + '_' + value_text + '" value="' + d.rewards_discount_slab_max + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_slab_increment_' + booking_details_id + '_' + value_text + '" id="rewards_slab_increment_' + booking_details_id + '_' + value_text + '" value="' + d.rewards_slab_increment + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_applied_flexible_slab_' + booking_details_id + '_' + value_text + '" id="rewards_applied_flexible_slab_' + booking_details_id + '_' + value_text + '" value="' + d.rewards_applied_flexible_slab + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="rewards_received_discount_' + booking_details_id + '_' + value_text + '" id="rewards_received_discount_' + booking_details_id + '_' + value_text + '" value="' + d.rewards_received_discount + '">');
                                            });
                                        }
                                        $("#service_"+booking_details_id).trigger('chosen:updated');
                                        $("#service_"+booking_details_id).chosen();
                                    }
                                });
                            }
                        // }, 1500);
                    });

                    $('#sub_category_<?=$bookings->id;?>').change(function() {
                        $('#selected_sub_category_<?=$bookings->id;?>').val($(this).val());
                        $('#category_<?=$bookings->id;?>').trigger('change');
                    });

                    $('#service_<?=$bookings->id;?>').change(function() {
                        var booking_details_id = <?= $bookings->id; ?>;
                        var all_products = <?= json_encode($products); ?>;
                        var selected_from = 'extra_service_add';
                        var category = $('#category_' + booking_details_id).val();
                        var serviceValue = $('#service_' + booking_details_id).val();
                        var parts = serviceValue.split('_');

                        var serviceID = parts[0];
                        var service_added_from = parts[1];
                        var is_offer_applied = parts[2];
                        
                        $("#stylist_timeslot_error_" + booking_details_id).hide('');
                        $("#stylist_timeslot_error_" + booking_details_id).html('');
                        
                        if(!user_selected_add_service.includes(serviceID)){   
                            // $('#booking_timeslots_' + booking_details_id).hide();                
                            var booking_date = $('#booking_date_' + booking_details_id).val();
                            var booking_start = $('#booking_start_' + booking_details_id).val();
                            if (booking_date !== "" && booking_start !== "") {
                                var service_duration = $('#service_duration_' + booking_details_id + '_' + serviceValue).val();
                                var service_name = $('#service_name_' + booking_details_id + '_' + serviceValue).val();
                                var service_marathi_name = $('#service_marathi_name_' + booking_details_id + '_' + serviceValue).val();
                                var service_sub_cat_name = $('#service_sub_cat_name_' + booking_details_id + '_' + serviceValue).val();
                                var service_sub_cat_marathi_name = $('#service_sub_cat_marathi_name_' + booking_details_id + '_' + serviceValue).val();
                                var service_rewards = $('#service_rewards_' + booking_details_id + '_' + serviceValue).val();
                                var final_price = $('#service_price_' + booking_details_id + '_' + serviceValue).val();
                                var service_original_price = $('#service_original_price_' + booking_details_id + '_' + serviceValue).val();
                                var service_products = $('#service_products_' + booking_details_id + '_' + serviceValue).val();
                                var service_added_from = $('#service_added_from_' + booking_details_id + '_' + serviceValue).val();
                                createServiceDiv(serviceValue,booking_details_id,service_added_from,serviceID,all_products,selected_from,service_duration,service_name,service_marathi_name,service_rewards,final_price,service_original_price,service_products,service_sub_cat_marathi_name,service_sub_cat_name);
                            }else{
                                // alert('Please select booking date and timeslot first');
                                openDialog('Please select booking date and timeslot first'); 
                                $('#service_' + booking_details_id).val('');
                            }
                        }else{
                            $('.loader_div').hide(); 
                            // alert('Service already selected');
                            openDialog('Service already selected'); 
                        }                        
                        $('#service_' + booking_details_id).val('');
                        $('#service_' + booking_details_id).trigger("chosen:updated");
                    });
                });

                function createServiceDiv(serviceValue,booking_details_id,service_added_from,serviceID,all_products,selected_from,service_duration,service_name,service_marathi_name,service_rewards,final_price,service_original_price,service_products,service_sub_cat_marathi_name,service_sub_cat_name){
                    if (!user_selected_add_service.some(entry => entry.split('_')[0] === serviceID)) {
                        // $('.loader_div').show();   
                        // setTimeout(function() {
                            var productsArray = [];
                            productsArray = service_products.split(',');
                            if(parseFloat(final_price) < parseFloat(service_original_price)){
                                price = '<s>'+parseFloat(service_original_price).toFixed(2)+'</s> '+parseFloat(final_price).toFixed(2)+'';
                            }else{
                                price = final_price;
                            }

                            var tomorrow = new Date();
                            tomorrow.setDate(tomorrow.getDate() + 1);

                            var tomorrowFormatted = tomorrow.toISOString().split('T')[0];
                            var total_count = 0;
                            var z = 0;
                            var product_count = 0;

                            if(service_added_from == '1'){
                                var details_div_color = '#c0e1ff';
                            }else{
                                var details_div_color = '';
                            }
                            service_details = 
                                '<style>#service_stylist_id_' + booking_details_id + '_' + serviceID + '_chosen{ pointer-events: none !important; background-color: #e9ecef; color: #6c757d; }</style>' +
                                '<div class="row single_added_extra_service_details" id="selected_service_booking_details_'+ booking_details_id +'_'+ serviceID +'">'+
                                    '<input type="hidden" id="service_added_from_'+ booking_details_id +'_'+ serviceID +'" value="'+ selected_from +'">'+
                                    '<div class="col-md-12 col-sm-12 col-xs-12 selected-servicesbox" style="background-color:'+details_div_color+'; height: auto; padding-top: 9px; padding-left:0px;">'+
                                        '<div class="col-lg-8 col-md-12 col-sm-12 col-xs-12">'+
                                            '<span class="left-span" style="font-size: 13px !important;">'+ service_sub_cat_name +'|'+service_sub_cat_marathi_name+' -> <b>'+ service_name +'|'+service_marathi_name+'</b> <span style="margin-left:15px;">'+ price +'</span></span>'+
                                            '<div class="span-row">'+
                                                '<span class="bottom-span">'+ service_duration +' Mins</span>'+
                                                '<input type="hidden" id="service_reward_points_'+ booking_details_id +'_'+ serviceID +'" name="service_reward_points_'+ booking_details_id +'_'+ serviceID +'" value="">'+
                                                '<span class="bottom-span" id="service_stylist_timeslot_'+ booking_details_id +'_'+ serviceID +'"></span>'+
                                                '<div class="col-lg-6" id="service_executive_div_'+ booking_details_id +'_' + serviceID + '" style="display:none;">'+
                                                    '<select class="form-control service_executive_'+ booking_details_id +'" name="service_stylist_id_'+ booking_details_id +'_' + serviceID + '" id="service_stylist_id_'+ booking_details_id +'_' + serviceID + '"></select>'+
                                                '</div>'+
                                                '<input type="hidden" class="service_stylist_timeslot_validation_'+ booking_details_id +'" id="service_stylist_timeslot_hidden_'+ booking_details_id +'_'+ serviceID +'" name="service_stylist_timeslot_hidden_'+ booking_details_id +'_'+ serviceID +'" value="">'+
                                            '</div>'+
                                        '</div>'+
                                        '<div class="col-lg-4 col-md-12 col-sm-12 col-xs-12">'+
                                            '<button style="display: block;position: static; margin-top:5px;" type="button" id="product_for_service_button_'+ booking_details_id +'_' + serviceID + '" class="btn  modalbtn" onclick="showPopup(\'ServiceProductModal_'+ booking_details_id +'_' + serviceID + '\')" data-toggle="modal" data-target="#ServiceProductModal_'+ booking_details_id +'_' + serviceID + '"><span id="selected_service_product_'+ booking_details_id +'_' + serviceID + '">0</span>/<span id="total_service_product_'+ booking_details_id +'_' + serviceID + '">0</span></button>'+
                                            '<div class="modal fade" style="background-color: #00000080; overflow-x:visible !important; overflow-y:visible !important;" id="ServiceProductModal_'+ booking_details_id +'_'+ serviceID +'" tabindex="-1" role="dialog" aria-labelledby="ServiceProductModalLabel_'+ booking_details_id +'_'+ serviceID +'" aria-hidden="true">'+
                                                '<div class="modal-dialog" role="document" style="width:500px;">'+
                                                    '<div class="modal-content">'+
                                                        '<div class="modal-header">'+
                                                            '<h5 class="modal-title" id="ServiceProductModalLabel_'+ booking_details_id +'_'+ serviceID +'">'+ service_name +' Service Products</h5>'+
                                                            '<button type="button" class="close" data-dismiss="modal" aria-label="Close" style="float:none !important; position:absolute;right:10px;top:10px;"  onclick="closePopup(\'ServiceProductModal_'+ booking_details_id +'_'+ serviceID + '\')">'+
                                                                '<span aria-hidden="true">&times;</span>'+
                                                            '</button>'+
                                                        '</div>'+
                                                        '<div class="modal-body extra_service_products">'+
                                                            '<table style="width:100%;">'+
                                                                '<thead>'+
                                                                    '<tr>'+
                                                                        '<th>Select</th>'+
                                                                        '<th>Product</th>'+
                                                                        '<th>Price</th>'+
                                                                    '</tr>'+
                                                                '</thead>'+
                                                                '<tbody>';
                                            all_products.forEach(function(product) {
                                                if (productsArray.includes(product.id)) {
                                                    product_count++;
                                                    if(service_added_from == '1'){
                                                        var product_price = '0.00';
                                                        var product_price_text = '<div class="service_price_title" ><b>Rs. 0.00</b></div>';
                                                    }else{
                                                        if(product.original_product_price != product.service_product_price_consider){
                                                            var product_price_text = '<div class="service_price_title"  title="Offer Price"><b>Rs. <s>' + product.original_product_price + '</s> ' + product.service_product_price_consider + '</b></div>';
                                                        }else{
                                                            var product_price_text = '<div class="service_price_title" ><b>Rs. ' + product.original_product_price + '</b></div>';
                                                        }
                                                        var product_price = product.service_product_price_consider;
                                                    }                                                                                               
                                                service_details += '<input type="hidden" name="product_discount_in_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_in_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_in + '">' + 
                                                                    '<input type="hidden" name="product_discount_type_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_type_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_type + '">' + 
                                                                    '<input type="hidden" name="product_discount_value_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_value_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_amount_value + '">' + 
                                                                    '<input type="hidden" name="is_product_discount_applied_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="is_product_discount_applied_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.is_product_discount_applied + '">' + 
                                                                    '<input type="hidden" name="product_discount_row_id_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_row_id_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_row_id + '">' + 
                                                                    '<input type="hidden" name="product_discount_slab_min_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_slab_min_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_min_slab + '">' + 
                                                                    '<input type="hidden" name="product_discount_slab_max_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_slab_max_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_max_slab + '">' + 
                                                                    '<input type="hidden" name="product_slab_increment_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_slab_increment_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_slab_increment + '">' + 
                                                                    '<input type="hidden" name="product_applied_flexible_slab_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_applied_flexible_slab_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_slab_consider + '">' + 
                                                                    '<input type="hidden" name="product_received_discount_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_received_discount_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_amount + '">' + 
                                                                    '<input type="hidden" name="product_original_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_original_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.original_product_price + '">';

                                                service_details += '<tr>' +
                                                                        '<td><input type="checkbox" class="product-checkbox add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'" name="add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'[]" id="add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'_' + product.id + '" value="' + product.id + '" onclick="setAddServiceProductPrice('+ booking_details_id +',' + serviceID + ',' + product.id + ')"></td>' +
                                                                        '<td>' + product.product_name + '' + product.product_discount_text + '</td>' +
                                                                        '<td>' + product_price_text + '</td>' +
                                                                    '</tr>' +
                                                                    '<input type="hidden" id="service_product_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" name="service_product_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="'+ product_price +'">';
                                                }
                                            });
                                            if(product_count == 0){
                                                service_details += '<tr>' +
                                                                        '<td colspan="3" style="text-align:center;">Products not available</td>' +
                                                                    '</tr>';
                                            }
                                            service_details += '</tbody>'+
                                                            '</table>'+
                                                        '</div>'+
                                                    '</div>'+
                                                '</div>'+
                                            '</div>';
                                            // if(service_added_from == '0'){
                                                service_details += '<button class="ser_model_X" style="display: block;position: absolute;background: white;border: none;outline: none;box-shadow: none;padding: 0px;margin: 0px;right: 0px;top: 0px; margin-top:2px;" type="button" id="remove_add_service_button_'+ booking_details_id +'_' + serviceID + '" class="btn" onclick="removeAddService(' + booking_details_id + ',' + serviceID + ',\'' + serviceValue + '\')"><span style="color: red;font-size: 15px;padding: 2px 6px;border-radius: 100%;"><i class="fa fa-times"></i></span></button>';
                                            // }
                                        service_details += '</div>'+
                                    '</div>'+   
                                '</div>';
                            $('#selected_services_empty_'+booking_details_id).hide();
                            $('#selected_services_' + booking_details_id).append(service_details);
                            $('#selected_services_' + booking_details_id).show();
                            $('#total_service_product_' + booking_details_id + '_' + serviceID).text(product_count);

                            // $('.loader_div').hide();   
                            setAddServicePrice(serviceValue,booking_details_id,serviceID,service_duration,service_rewards,final_price);
                        // }, 1500);
                    }else{
                        openDialog('Service already selected'); 
                    }
                }
                function formatTime(time) {
                    var hours = time.getHours();
                    var minutes = time.getMinutes();
                    var ampm = hours >= 12 ? 'PM' : 'AM';
                    hours = hours % 12;
                    hours = hours ? hours : 12; // the hour '0' should be '12'
                    minutes = minutes < 10 ? '0' + minutes : minutes;

                    return hours + ':' + minutes + ' ' + ampm;
                }
                function formatToOnlyDate(date) {
                    var monthNames = [
                        "Jan", "Feb", "Mar",
                        "Apr", "May", "Jun", "Jul",
                        "Aug", "Sep", "Oct",
                        "Nov", "Dec"
                    ];

                    var day = date.getDate();
                    var monthIndex = date.getMonth();
                    var year = date.getFullYear();

                    return day + ' ' + monthNames[monthIndex] + ' ' + year;
                }
                function formatToOnlyDate_PHPFormat(date) {
                    var year = date.getFullYear();
                    var month = ('0' + (date.getMonth() + 1)).slice(-2); // Adding leading zero if necessary
                    var day = ('0' + date.getDate()).slice(-2); // Adding leading zero if necessary
                    return year + '-' + month + '-' + day;
                }                
                function convertTo24HourFormat(time) {
                    var hours = parseInt(time.split(':')[0]);
                    var minutes = parseInt(time.split(':')[1].split(' ')[0]);
                    var ampm = time.split(' ')[1];

                    if (ampm === 'PM' && hours < 12) {
                        hours += 12;
                    }
                    if (ampm === 'AM' && hours === 12) {
                        hours = 0;
                    }

                    var formattedTime = ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2) + ':00';
                    return formattedTime;
                }
                function fetchTimeSlots(booking_details_id){
                    var booking_date = $('#booking_date_'+booking_details_id).val();
                    var booking_start = $('#booking_start_'+booking_details_id).val();
                    var slot_start_time = $('#slot_start_time_'+booking_details_id).val();
                    var employee = $('#employee_'+booking_details_id).val();
                    var employee_selection_rule = $('#employee_selection_rule_'+booking_details_id).val();
                    if(booking_date != ""){
                        $('#booking_timeslots_'+booking_details_id).html('');
                        $('#booking_timeslots_loader_'+booking_details_id).show();
                        $('.loader_div').show();   
                        $.ajax({
                            type: "POST",
                            url: "<?=base_url();?>salon/Ajax_controller/get_day_timeslots_edit_service_ajx",
                            data:{
                                'source':'vendor_panel',
                                'booking_id':booking_details_id,
                                'booking_date':booking_date,
                                'selected_slot_start_time':slot_start_time,
                                'booking_start':booking_start,
                                'employee':employee,
                                'employee_selection_rule':employee_selection_rule,
                                'user_selected_service': user_selected_add_service
                            },
                            success: function(data){
                                $('.loader_div').hide();   
                                $('#booking_timeslots_'+booking_details_id).show();
                                $('#booking_timeslots_'+booking_details_id).html(data);

                                if($('#booking_start_'+booking_details_id).val() != ""){
                                    setServiceTimeSlots(booking_details_id);
                                } else {                        
                                    $('#booking_timeslots_loader_'+booking_details_id).hide();
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                console.log(textStatus, errorThrown);
                            }
                        }); 
                    }
                }                
                
                function selectTimeslotRadioEdit(timeslot,original_timeslot,booking_details_id){
                    $('#booking_start_time_slot_'+booking_details_id+'_' + original_timeslot).prop('checked', true);
                    setBookingStartEdit(timeslot,booking_details_id);
                }

                function setBookingStartEdit(value,booking_details_id) {
                    if(value == ""){
                        var selectedValue = $('input[name="booking_start_time_slot_'+booking_details_id+'"]:checked').val();
                    }else{
                        var selectedValue = value;
                    }
                    if (selectedValue != "") {
                        // $('#booking_timeslots').hide();
                        $('#booking_start_'+booking_details_id).val(selectedValue);
                        $('.loader_div').show();
                        fetchTimeSlots(booking_details_id);
                        $('.loader_div').hide();
                    }
                }
                
                function setServiceTimeSlots(booking_details_id){
                    for(var i=0;i<user_selected_add_service.length;i++){
                        var singleService = user_selected_add_service[i];     
                        var singleServiceID = singleService.split('_')[0];   
                        var service_duration = $('#service_duration_' + booking_details_id + '_' + singleService).val();
                        var service_rewards = $('#service_rewards_' + booking_details_id + '_' + singleService).val();

                        var booking_date = $('#booking_date_'+booking_details_id).val();
                        var previous_start = $('#previous_start_'+booking_details_id).val();

                        if(booking_date != "" && $('#booking_start_'+booking_details_id).val() != ""){
                            if(i == 0){
                                var booking_start = $('#booking_start_'+booking_details_id).val();
                            }else{
                                var booking_start = previous_start;
                            }
                            
                            var dateParts = booking_date.split("-");
                            var day = parseInt(dateParts[0], 10);
                            var month = parseInt(dateParts[1], 10);
                            var year = parseInt(dateParts[2], 10);

                            var timeParts = booking_start.split(":");
                            var hours = parseInt(timeParts[0], 10);
                            var minutes = parseInt(timeParts[1], 10);

                            if (booking_start.includes("PM") && hours !== 12) {
                                hours += 12;
                            } else if (booking_start.includes("AM") && hours === 12) {
                                hours = 0;
                            }
                            
                            selected_slot_start = new Date(year, month - 1, day, hours, minutes, 0);
                            var selected_slot_end = new Date(selected_slot_start.getTime() + (service_duration * 60000));

                            var formatted_slot_start_time = formatTime(selected_slot_start);
                            var formatted_slot_end_time = formatTime(selected_slot_end);

                            var formatted_slot_start_time_24hr = convertTo24HourFormat(formatted_slot_start_time);
                            var formatted_slot_end_time_24hr = convertTo24HourFormat(formatted_slot_end_time);
                            var formatted_booking_date_PHP = formatToOnlyDate_PHPFormat(selected_slot_start);
                            var timeslot_string = formatted_booking_date_PHP + ' ' + formatted_slot_start_time_24hr + '@@@' + formatted_booking_date_PHP + ' ' + formatted_slot_end_time_24hr;
                        
                            $('#service_reward_points_' + booking_details_id + '_' + singleServiceID).val(service_rewards);
                            $('#service_stylist_timeslot_hidden_' + booking_details_id + '_' + singleServiceID).val(timeslot_string);
                            $('#service_stylist_timeslot_' + booking_details_id + '_' + singleServiceID).text(formatted_slot_start_time + ' to ' + formatted_slot_end_time);
                                        
                            getTimeStylist(booking_details_id,booking_date,selected_slot_start,selected_slot_end,singleServiceID,service_duration);

                            $('#previous_start_'+booking_details_id).val(formatted_slot_end_time_24hr);
                        }
                    }  
                }
                
                function formatDate(date) {
                    var year = date.getFullYear();
                    var month = ('0' + (date.getMonth() + 1)).slice(-2);
                    var day = ('0' + date.getDate()).slice(-2);
                    var hours = ('0' + date.getHours()).slice(-2);
                    var minutes = ('0' + date.getMinutes()).slice(-2);
                    var seconds = ('0' + date.getSeconds()).slice(-2);

                    return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
                }    
                function getTimeStylist(booking_details_id,booking_date,selected_slot_start,selected_slot_end,singleService,service_duration){
                    var formatted_start = formatDate(selected_slot_start);
                    var formatted_end = formatDate(selected_slot_end);

                    if (formatted_start !== "" && typeof formatted_start !== "undefined" && formatted_end !== "" && typeof formatted_end !== "undefined") {
                        selectedTimeSlot = formatted_start + '@@@' + formatted_end;
                        $('#service_executive_div_' + booking_details_id + '_' + singleService).hide();
                        $('#service_stylist_id_' + booking_details_id + '_' + singleService).html("");
                        var previous_stylist = $('#previous_stylist_' + booking_details_id).val();
                        var selected_employee = $('#employee_'+booking_details_id).val();
                        var employee_selection_rule = $('#employee_selection_rule_'+booking_details_id).val();
                        $('.loader_div').show();   
                        $.ajax({
                            type: "POST",
                            url: "<?= base_url(); ?>salon/Ajax_controller/get_available_stylists_edit_servicewise_ajx",
                            data: { 'service':singleService,'selectedTimeSlot': selectedTimeSlot,'booking_details_id': booking_details_id, 'selected_employee': selected_employee, 'employee_selection_rule': employee_selection_rule, 'previous_stylist': previous_stylist },
                            success: function(data) {
                                $('.loader_div').hide();   
                                $('#service_stylist_id_' + booking_details_id + '_' + singleService).chosen();
                                $('#service_stylist_id_' + booking_details_id + '_' + singleService).val('');
                                $('#booking_timeslots_loader_' + booking_details_id).hide();

                                var prev_selected_stylist = $('#prev_stylist_' + booking_details_id + '_' + singleService).val();
                                
                                var stylists = $.parseJSON(data);
                                if(stylists.length > 0){
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService).empty();
                                    // $('#service_stylist_id_' + booking_details_id + '_' + singleService).append('<option value="">Select Executive</option>');
                                    var opts = $.parseJSON(data);
                                    var count = 1;
                                    $.each(opts, function(i, d) {
                                        store_flag = d.store_flag;
                                        short_break_flag = d.short_break_flag;
                                        is_service_available = d.is_service_available;
                                        is_shift_available = d.is_shift_available;
                                        is_booking_present = d.is_booking_present;
                                        is_on_break = d.is_on_break;
                                        is_on_leave_flag = d.is_on_leave_flag;
                                        is_emergency_flag = d.is_emergency_flag;                                        
                            
                                        shift_id = d.shift_id;
                                        shift_type = d.shift_type;

                                        var emp_unique_id = d.stylist_details.id + '@@@' + shift_id + '@@@' + shift_type;
                                        
                                        if(is_service_available == '1'){
                                            if(store_flag == '1'){
                                                if(is_emergency_flag == '0'){
                                                    if(is_on_leave_flag == '0'){
                                                        if(is_shift_available == '1'){
                                                            if(is_booking_present == '0'){
                                                                if(is_on_break == '0'){
                                                                    if(short_break_flag == '1'){
                                                                        var message = '';
                                                                        var disabled = '';
                                                                        var is_Allowed = 1;
                                                                    }else{
                                                                        var message = '- Stylist On Short Break';
                                                                        var disabled = 'disabled';
                                                                        var is_Allowed = 0;
                                                                    }
                                                                }else{
                                                                    var message = '- Stylist On Break';
                                                                    var disabled = 'disabled';
                                                                    var is_Allowed = 0;
                                                                }
                                                            }else{
                                                                var message = '- Slot Already Booked';
                                                                var disabled = 'disabled';
                                                                var is_Allowed = 0;
                                                            }
                                                        }else{
                                                            var message = '- Shift Not Available';
                                                            var disabled = 'disabled';
                                                            var is_Allowed = 0;
                                                        }
                                                    }else{
                                                        var message = '- On Leave';
                                                        var disabled = 'disabled';
                                                        var is_Allowed = 0;
                                                    }
                                                }else{
                                                    var message = '- Store Emergency Closed';
                                                    var disabled = 'disabled';
                                                    var is_Allowed = 0;
                                                }
                                            }else{
                                                var message = '- Exceed Salon Times';
                                                var disabled = 'disabled';
                                                var is_Allowed = 0;
                                            }

                                            var selected = '';
                                            if(prev_selected_stylist == d.stylist_details.id){
                                                selected = 'selected';
                                                $('#previous_stylist_' + booking_details_id).val(d.stylist_details.id);
                                            }else{
                                                if(d.to_be_selected == '1'){
                                                    selected = 'selected';
                                                    $('#previous_stylist_' + booking_details_id).val(d.stylist_details.id);
                                                }
                                            }

                                            // $('#service_stylist_id_' + booking_details_id + '_' + singleService).append('<option ' + disabled + ' ' + selected + ' value="' + d.stylist_details.id + '">' + d.stylist_details.full_name + ' ' + message + '</option>');
                                            $('#service_stylist_id_' + booking_details_id + '_' + singleService).append('<option ' + disabled + ' ' + selected + ' value="' + emp_unique_id + '">' + d.stylist_details.full_name + ' ' + message + '</option>');
                                        }else{
                                            var disabled = 'disabled';
                                            var message = '- Stylist Not Available';
                                        }
                                    });
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService).trigger('chosen:updated');
                                    $('#service_executive_div_' + booking_details_id + '_' + singleService).show();
                                }else{
                                    if (!user_services_selected.includes(singleService)) {
                                        user_services_selected.push(singleService);
                                        $('#service_stylist_id_' + booking_details_id + '_' + singleService+"_chosen").hide();
                                        $('#service_stylist_id_' + booking_details_id + '_' + singleService).hide();
                                        $('#service_executive_div_' + booking_details_id + '_' + singleService).append('<label style="font-size:10px;" class="error">Please, first set Stylist designation employees.</label>');
                                        $('#service_executive_div_' + booking_details_id + '_' + singleService).show();
                                    }
                                }
                            },
                        });
                    }
                }
                function removeAddService(booking_details_id,serviceID,serviceValue){
                    if(confirm('Are you sure you want to remove service?')){ 
                    // openConfirmationDialog("Are you sure you want to remove service?", function (confirmed) {
                    // if (confirmed) {
                        // $('.loader_div').show();   
                        // setTimeout(function() {
                            var current_total_service = parseFloat($("#total_add_service_price_" + booking_details_id).val());                      
                            var selected_product = parseInt($('#selected_service_product_' + booking_details_id + '_'+serviceID).text());
                            var service_price = $('#service_price_' + booking_details_id + '_' + serviceValue).val();

                            var index = user_selected_add_service.findIndex(function(id) {
                                return id === serviceValue.toString();
                            });

                            if (index !== -1) {
                                user_selected_add_service.splice(index, 1);
                                var updatedValue = user_selected_add_service.join(',');
                                $("#selected_add_service_" + booking_details_id).val(updatedValue);
                            }

                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).attr('disabled', true);

                            current_total_service = current_total_service - service_price;

                            $('#executive_for_service_button_'+booking_details_id+'_'+serviceID).text('Select Stylist'); 
                                
                            if(user_selected_add_service.length == 0){
                                $('#selected_services_empty_'+booking_details_id).show();
                                $('#selected_services_'+booking_details_id).hide();
                            }

                            var tempArray = [];
                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).each(function() {
                                if ($(this).prop('checked')) {
                                    $(this).prop('checked', false); 
                                    tempArray.push($(this).val());
                                }
                            });

                            for (var i = 0; i < tempArray.length; i++) {
                                setAddServiceProductPrice(booking_details_id,serviceID,tempArray[i]);
                            }

                            calculateTotalAddServiceDuration(booking_details_id,serviceID);
                
                            fetchTimeSlots(booking_details_id);

                            $('#total_add_service_price_' + booking_details_id).val(parseFloat(current_total_service).toFixed(2));
                            $('#total_add_service_price_text_' + booking_details_id).text(parseFloat(current_total_service).toFixed(2));

                            setPayableAddServiceAmount(booking_details_id,serviceID);

                            $("#selected_service_booking_details_"+booking_details_id+"_"+serviceID).remove();
                            
                            $('#booking_timeslots_loader_'+booking_details_id).hide();

                        //     $('.loader_div').hide();   
                        // }, 3000);
                    }
                    // });
                }
                function setAddServicePrice(serviceValue,booking_details_id,serviceID,service_duration,service_rewards,service_price){ 
                    var current_total = parseFloat($("#total_add_service_price_" + booking_details_id).val());
                    if (!user_selected_add_service.some(entry => entry.split('_')[0] === serviceID)) {
                        var booking_date = $('#booking_date_' + booking_details_id).val();
                        var booking_start = $('#booking_start_' + booking_details_id).val();

                        if (booking_date !== "" && booking_start !== "") {
                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).attr('disabled', false);

                            current_total = current_total + parseFloat(service_price);

                            user_selected_add_service.push(serviceValue);

                            var currentValue = $("#selected_add_service_" + booking_details_id).val(); 
                            if (currentValue === '') {
                                $("#selected_add_service_" + booking_details_id).val(serviceValue); 
                            } else {
                                $("#selected_add_service_" + booking_details_id).val(currentValue + ',' + serviceValue);
                            }

                            var tempArray = [];

                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).each(function() {
                                $(this).prop('checked', true); 
                                tempArray.push($(this).val());
                            });

                            for (var i = 0; i < tempArray.length; i++) {
                                setAddServiceProductPrice(booking_details_id,serviceID,tempArray[i]);
                            }
                        }else{
                            // alert('Please select booking date and timeslot first');
                            openDialog('Please select booking date and timeslot first'); 
                            $('#service_' + booking_details_id).val('');
                        }
                    }else{
                        // alert('Service already selected');
                        openDialog('Service already selected'); 
                    }
                    
                    calculateTotalAddServiceDuration(booking_details_id,serviceID);
                    fetchTimeSlots(booking_details_id);

                    $('#total_add_service_price_' + booking_details_id).val(parseFloat(current_total).toFixed(2));
                    $('#total_add_service_price_text_' + booking_details_id).text(parseFloat(current_total).toFixed(2));

                    setPayableAddServiceAmount(booking_details_id,serviceID);
                }

                function setAddServiceProductPrice(booking_details_id,serviceID,productID){
                    var product_price = parseFloat($('#service_product_price_' + booking_details_id + '_'+serviceID+'_'+productID).val());
                    var current_total_product = parseFloat($('#total_add_service_product_price_' + booking_details_id).val());
                    var selected_product = parseInt($('#selected_service_product_' + booking_details_id + '_'+serviceID).text());
                    if (isNaN(product_price) || typeof product_price === 'undefined') {
                        product_price = 0;
                    }
                    if (isNaN(selected_product) || typeof selected_product === 'undefined') {
                        selected_product = 0;
                    }

                    if ($('#add_service_product_checkbox_' + booking_details_id + '_'+serviceID+'_'+productID).is(':checked')) {      
                        current_total_product = current_total_product + product_price;
                        selected_product = selected_product + 1;

                        user_selected_add_service_product.push(productID);
                    } else {
                        addServiceRemoveValue(user_selected_add_service_product, productID);

                        current_total_product = current_total_product - product_price;
                        selected_product = selected_product - 1;
                    }

                    $('#total_add_service_product_price_' + booking_details_id).val(parseFloat(current_total_product).toFixed(2));
                    $('#total_add_service_product_price_text_' + booking_details_id).text(parseFloat(current_total_product).toFixed(2));
                    $('#selected_service_product_' + booking_details_id + '_'+serviceID).text(parseInt(selected_product));
                    
                    setPayableAddServiceProductAmount(booking_details_id,serviceID);
                }
                function addServiceRemoveValue(arr, value) {
                    var index = arr.indexOf(value);
                    if (index !== -1) {
                        arr.splice(index, 1);
                    }
                    return arr;
                }
                
                function setPayableAddServiceProductAmount(booking_details_id,serviceID){
                    total_product_amount = parseFloat($('#total_add_service_product_price_' + booking_details_id).val());

                    member_product_discount = $('#add_service_membership_product_discount_' + booking_details_id).val();
                    membership_discount_type = $('#add_service_membership_discount_type_' + booking_details_id).val();

                    if (typeof member_product_discount === 'undefined' || member_product_discount === '') {
                        member_product_discount = 0;
                    }else{
                        member_product_discount = parseFloat(member_product_discount);
                    }
                    
                    if(membership_discount_type == '0'){
                        discount = (total_product_amount * member_product_discount)/100;
                    }else if(membership_discount_type == '1'){
                        discount = member_product_discount;
                    }else{
                        discount = 0;
                    }        

                    if(total_product_amount == 0){
                        discount = 0;
                    }

                    $('#add_service_membership_product_discount_amount_' + booking_details_id).val(parseFloat(discount).toFixed(2));

                    payable = total_product_amount - discount;
                    
                    $('#add_service_product_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));
                    $('#add_service_product_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));

                    setPayableAddServiceAmount(booking_details_id,serviceID);
                }
                
                function setPayableAddServiceAmount(booking_details_id,serviceID){
                    total_service_amount = parseFloat($('#total_add_service_price_' + booking_details_id).val());   
                    
                    member_service_discount = $('#add_service_membership_service_discount_' + booking_details_id).val();
                    membership_discount_type = $('#add_service_membership_discount_type_' + booking_details_id).val();

                    if (typeof member_service_discount === 'undefined' || member_service_discount === '') {
                        member_service_discount = 0;
                    }else{
                        member_service_discount = parseFloat(member_service_discount);
                    }
                    
                    if(membership_discount_type == '0'){
                        discount = (total_service_amount * member_service_discount)/100;
                    }else if(membership_discount_type == '1'){
                        discount = member_service_discount;
                    }else{
                        discount = 0;
                    }        

                    if(total_service_amount == 0){
                        discount = 0;
                    }

                    $('#add_service_membership_service_discount_amount_' + booking_details_id).val(parseFloat(discount).toFixed(2));

                    payable = total_service_amount - discount;

                    $('#add_service_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));    
                    $('#add_service_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));    

                    setAddServicePayableAmount(booking_details_id,serviceID);
                } 
                function setPackagePrice(booking_details_id){ 
                    // alert($('#total_add_service_package_price_' + booking_details_id).val());                      
                    var package_allocation_id = $('#package_allocation_id_' + booking_details_id).val();
                    if (user_selected_add_service.some(entry => entry.split('_')[1] === '1')) {
                        if (user_selected_add_service.some(entry => entry.split('_')[3] === package_allocation_id)) {
                            var package_amt = parseFloat($('#booking_add_service_package_price_' + booking_details_id).val());
                            var package_name= ' (' + $('#add_service_package_name_hidden_' + booking_details_id).val() + ')';
                            var is_package_applicable = '1';
                        }else{
                            var package_amt = '0.00';
                            var package_name = '';
                            var is_package_applicable = '0';
                        }
                    }else{
                        var package_amt = '0.00';
                        var package_name = '';
                        var is_package_applicable = '0';
                    }
                    $('#is_package_applicable_' + booking_details_id).val(is_package_applicable);
                    $('#total_add_service_package_price_' + booking_details_id).val(parseFloat(package_amt).toFixed(2));
                    $('#total_add_service_package_price_text_' + booking_details_id).text(parseFloat(package_amt).toFixed(2));
                    $('#add_service_package_name_' + booking_details_id).text(package_name);
                }
                function setAddServicePayableAmount(booking_details_id,serviceID){
                    calculateAddServiceTotalDiscount(booking_details_id,serviceID);
                    
                    setPackagePrice(booking_details_id);

                    service_payable = parseFloat($('#add_service_payable_hidden_' + booking_details_id).val());
                    product_payable = parseFloat($('#add_service_product_payable_hidden_' + booking_details_id).val());
                    package_payable = parseFloat($('#total_add_service_package_price_' + booking_details_id).val());

                    payable = service_payable + product_payable + package_payable;

                    $('#add_service_final_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));
                    $('#add_service_final_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));

                    calculateGSTAmount(booking_details_id);
                }

                function calculateGSTAmount(booking_details_id){
                    rate = parseFloat($('#salon_gst_rate_' + booking_details_id).val());
                    booking_amount = parseFloat($('#add_service_final_payable_hidden_' + booking_details_id).val());

                    gst_amount = (rate  * booking_amount) / 100;

                    $('#add_service_final_gst_hidden_' + booking_details_id).val(parseFloat(gst_amount).toFixed(2));
                    $('#add_service_final_gst_text_' + booking_details_id).text(parseFloat(gst_amount).toFixed(2));

                    setGrandTotal(booking_details_id);
                }
                function setGrandTotal(booking_details_id){
                    booking_amount = parseFloat($('#add_service_final_payable_hidden_' + booking_details_id).val());
                    gst_amount = parseFloat($('#add_service_final_gst_hidden_' + booking_details_id).val());
                    
                    total = booking_amount + gst_amount;

                    $('#add_service_final_total_hidden_' + booking_details_id).val(parseFloat(total).toFixed(2));
                    $('#add_service_final_total_text_' + booking_details_id).text(parseFloat(total).toFixed(2));
                }
                function calculateAddServiceTotalDiscount(booking_details_id,serviceID){
                    $('#add_service_discount_details_div_' + booking_details_id).html('');
                    var membership_service_discount_amount = parseFloat($('#add_service_membership_service_discount_amount_' + booking_details_id).val());
                    var membership_product_discount_amount = parseFloat($('#add_service_membership_product_discount_amount_' + booking_details_id).val());

                    total_discount = membership_service_discount_amount + membership_product_discount_amount;
                    $('#add_service_total_discount_amount_text_' + booking_details_id).text(parseFloat(total_discount).toFixed(2));
                    $('#add_service_total_discount_amount_' + booking_details_id).val(parseFloat(total_discount).toFixed(2));

                    var discount_details = '<div id="extra_service_discount_details_info"><i class="fas fa-info-circle" style="color:#0000ffb0;"></i>';
                    discount_details += '<div class="extra-service-discount-tooltip">';
                    if (membership_service_discount_amount > 0) {
                        discount_details += '<p>Membership Service Discount <span class="amount" style="float: right;">' + membership_service_discount_amount.toFixed(2) + '</span></p>';
                    }
                    if (membership_product_discount_amount > 0) {
                        discount_details += '<p>Membership Product Discount <span class="amount" style="float: right;">' + membership_product_discount_amount.toFixed(2) + '</span></p>';
                    }
                    discount_details += '<div style="border-top:1px solid #ccc;margin-top:1px;"><p>Total Discount <span class="amount" style="float: right;">' + total_discount.toFixed(2) + '</span></p></div>';
                    discount_details += '</div></div>';
                    if(total_discount > 0){
                        $('#add_service_discount_details_div_' + booking_details_id).html(discount_details);
                    }
                } 

                function calculateTotalAddServiceDuration(booking_details_id,serviceID){
                    total_duration = 0;

                    for(var i=0;i<user_selected_add_service.length;i++){
                        duration = $('#service_duration_' + booking_details_id + '_' + serviceID).val();
                        total_duration = total_duration + parseFloat(duration);
                    }

                    $('#upper_duration').text(parseInt(total_duration) + ' Mins');
                }
            </script>
        <?php 
        }else{ 
        ?>
            <div>
                <label class="error">Booking details not found</label>
            </div>
        <?php 
        }
    }   
    
    public function get_product_booking_edit_details_ajx(){
        $booking_rules = $this->get_booking_rules();
        if(!empty($booking_rules)){
            $days_early_booking = $booking_rules->max_booking_range_day;
            if($days_early_booking != ""){
                $max_date = date('d-m-Y', strtotime('+'.$days_early_booking.' day'));
            }else{
                $max_date = date('d-m-Y', strtotime('+0 day'));
            }
        }else{
            $max_date = date('d-m-Y', strtotime('+0 day'));
        }
        $today = date('d-m-Y');

		$category = $this->get_salon_product_category();

        $booking_id = $this->input->post('booking_id');

        $this->db->select('tbl_new_booking.*,tbl_salon_customer.membership_pkey,tbl_salon_customer.id as customer_id,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','1');
        $bookings = $this->db->get('tbl_new_booking')->row();
        
        $this->db->select('tbl_only_product_booking_details.*,tbl_product.product_name, tbl_salon_customer.membership_pkey,tbl_salon_customer.id as customer_id, tbl_new_booking.amount_to_paid,tbl_new_booking.payment_status,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.m_service_discount,tbl_new_booking.m_product_discount,tbl_new_booking.payment_date, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_product','tbl_product.id = tbl_only_product_booking_details.product_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_only_product_booking_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
        $this->db->where('tbl_only_product_booking_details.booking_id',$booking_id);
        $this->db->where('tbl_only_product_booking_details.is_deleted','0');
        $booking_products = $this->db->get('tbl_only_product_booking_details')->result();

        if(!empty($bookings)){
            $is_member = '0';
            $membership_id = '';
            $membership_discount_type = '';
            $membership_service_discount = '0.00';
            $membership_product_discount = '0.00';
            $membership_button = '';

            $membership_details = $this->get_membership_details($bookings->membership_pkey,$bookings->customer_id);
            $package_details = $this->get_package_details($bookings->pacakge_id);
            if(!empty($membership_details)){
                $is_member = '1';
                $membership_id = $membership_details->membership_id;
                $membership_discount_type = $membership_details->discount_in;
                $membership_service_discount = $membership_details->service_discount;
                $membership_product_discount = $membership_details->product_discount;
                $membership_text_color = $membership_details->text_color;
                $membership_bg_color = $membership_details->bg_color;
                $membership_name = $membership_details->membership_name;
                $membership_button = '<a class="btn btn-sm" style="margin-top: -8px;float:right; background-color:'.$membership_bg_color.'; color:'.$membership_text_color.'">'.$membership_name.'</a>';
            }    
        ?>
            <h5 style="margin-bottom: -10px;margin-left: 10px;margin-top:-5px;"><b style="font-weight: 600;">Customer: <?=$bookings->customer_name.' ['.$bookings->customer_phone.']';?></b><?=$membership_button; ?></h5>
            <hr>
            <form style="margin-top:-10px;" method="post" name="payment_form_<?=$bookings->id;?>" id="payment_form_<?=$bookings->id;?>" action="<?=base_url();?>update_service/<?=base64_encode($bookings->id);?>">
            <div id="selected_service_details_<?=$bookings->id;?>"></div>
            <div class="row">
                    <div class="form-group custom_label col-md-3 col-xs-12">
                        <label>Category<b class="require">*</b></label>
                        <select id="category_<?=$bookings->id;?>" name="category_<?=$bookings->id;?>" class="form-control">
                            <option value="">Select Category</option>
                            <?php
                                if(!empty($category)){
                                    foreach($category as $category_result){
                            ?>
                            <option value="<?=$category_result->id; ?>"><?=$category_result->product_category; ?>|<?=$category_result->product_category_marathi; ?></option>
                            <?php }} ?>
                        </select>
                        <label for="category_<?=$bookings->id;?>" generated="true" class="error" style="display:none;width:100%;text-align:left;">Please select category!</label>
                    </div>
                    <div class="form-group custom_label col-md-3 col-xs-12">
                        <label>Product<b class="require">*</b></label>
                        <select id="service_<?=$bookings->id;?>" name="service_<?=$bookings->id;?>" class="form-control">
                            <option value="">Select Product</option>
                        </select>
                        <label for="selected_add_service_<?=$bookings->id;?>" generated="true" class="error" style="display:none;width:100%;text-align:left;">Please select service!</label>
                        <div id="old_service_details_<?=$bookings->id;?>"></div>
                    </div>
                    <div class="form-group custom_label col-md-3 col-xs-12">
                        <label>Booking Date<b class="require">*</b></label>
                        <input readonly type="text" class="form-control" name="booking_date_<?=$bookings->id;?>" id="booking_date_<?=$bookings->id;?>" placeholder="Select Booking Date" onchange="fetchTimeSlots(<?=$bookings->id;?>)" value="<?=date('d-m-Y',strtotime($bookings->service_start_date));?>">
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" id="selected_services_empty_<?=$bookings->id;?>">
                            <div class="row single_added_extra_service_details">
                                <div class="col-md-12 col-sm-12 col-xs-12 selected-servicesbox" style="height:60px; padding-top: 9px; padding-left:0px;">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="text-align:center;">
                                        <label class="noserviceavl" style="margin-top: 10px;background-color:transparent !important; font-size: 11px !important;color: #4c4c4c !important;">Service not selected</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" id="selected_services_<?=$bookings->id;?>" style="display:none;"></div>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-12 col-xs-12 extra_service_price_table">
                        <table style="width:100%;" class="">
                            <thead>
                                <tr style="background-color: white;">
                                    <th>Products Price</th>
                                    <th id="total_add_service_product_price_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;border-top: 1px solid #ccc;">
                                    <th>
                                        Discount
                                        <div id="add_service_discount_details_div_<?=$bookings->id;?>" style="position: relative;display:inline-block; width:auto;"></div>
                                    </th>
                                    <th id="add_service_total_discount_amount_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;border-top: 0.5px solid #afafaf;">
                                    <th>Payable Amount</th>
                                    <th id="add_service_final_payable_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;">
                                    <th>GST Amount <small>(18%)</small></th>
                                    <th id="add_service_final_gst_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="border-top: 0.5px solid #afafaf;">
                                    <th>Total Amount</th>
                                    <th id="add_service_final_total_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                            </thead>
                        </table>
                        <input type="hidden" name="add_service_is_membership_<?=$bookings->id;?>" id="add_service_is_membership_<?=$bookings->id;?>" value="<?=$is_member;?>">
                        <input type="hidden" name="add_service_membership_id_<?=$bookings->id;?>" id="add_service_membership_id_<?=$bookings->id;?>" value="<?=$membership_id;?>">
                        <input type="hidden" name="add_service_membership_discount_type_<?=$bookings->id;?>" id="add_service_membership_discount_type_<?=$bookings->id;?>" value="<?=$membership_discount_type;?>">
                        <input type="hidden" name="add_service_membership_service_discount_<?=$bookings->id;?>" id="add_service_membership_service_discount_<?=$bookings->id;?>" value="<?=$membership_service_discount;?>">
                        <input type="hidden" name="add_service_membership_product_discount_<?=$bookings->id;?>" id="add_service_membership_product_discount_<?=$bookings->id;?>" value="<?=$membership_product_discount;?>">
                        
                        <input type="hidden" name="add_service_membership_service_discount_amount_<?=$bookings->id;?>" id="add_service_membership_service_discount_amount_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_membership_product_discount_amount_<?=$bookings->id;?>" id="add_service_membership_product_discount_amount_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_total_discount_amount_<?=$bookings->id;?>" id="add_service_total_discount_amount_<?=$bookings->id;?>" value="">

                        <input type="hidden" name="total_add_service_price_<?=$bookings->id;?>" id="total_add_service_price_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_payable_hidden_<?=$bookings->id;?>" id="add_service_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_product_payable_hidden_<?=$bookings->id;?>" id="add_service_product_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        
                        <input type="hidden" name="total_add_service_product_price_<?=$bookings->id;?>" id="total_add_service_product_price_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_final_payable_hidden_<?=$bookings->id;?>" id="add_service_final_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_final_gst_hidden_<?=$bookings->id;?>" id="add_service_final_gst_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_final_total_hidden_<?=$bookings->id;?>" id="add_service_final_total_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="selected_add_service_<?=$bookings->id;?>" id="selected_add_service_<?=$bookings->id;?>" value="">
                        
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" style="margin-top: 10px;margin-left: -10px;">
                            <button type="submit" class="btn btn-primary" id="payment_btn" value="payment_btn">Submit</button>
                        </div>
                    </div>
                </div>
            </form>
            <script>
                var user_selected_product = [];
                
                $(document).ready(function () {  
                    if(selected_slot_start_date != "" && selected_slot_start_time != ""){
                        var all_products = <?= json_encode($products); ?>;
                        $('#booking_date_<?=$bookings->id;?>').val(selected_slot_start_date);  

                        var selectedServices = <?php echo json_encode($booking_services); ?>;

                        var booking_details_id = '<?php echo $bookings->id; ?>';
                        for(var k=0;k<selectedServices.length;k++){
                            if (selectedServices[k].service_added_from == '1') {
                                var value_text_selected = selectedServices[k].service_id + '_' +
                                                selectedServices[k].service_added_from + '_' + 
                                                selectedServices[k].is_service_offer_applied + '_' + 
                                                (selectedServices[k].package_allocation_id == null || selectedServices[k].package_allocation_id === '' ? '0' : selectedServices[k].package_allocation_id);
                            }else{
                                var value_text_selected = selectedServices[k].service_id + '_' +
                                                selectedServices[k].service_added_from + '_' + 
                                                selectedServices[k].is_service_offer_applied + '_' + 
                                                '0';
                            }

                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_price_' + booking_details_id + '_' + value_text_selected + '" id="service_price_' + booking_details_id + '_' + value_text_selected + '" value="' + (selectedServices[k].service_price != null && selectedServices[k].service_price != "" ? parseFloat(selectedServices[k].service_price).toFixed(2) : '0.00') + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_original_price_' + booking_details_id + '_' + value_text_selected + '" id="service_original_price_' + booking_details_id + '_' + value_text_selected + '" value="' + (selectedServices[k].original_service_price != null && selectedServices[k].original_service_price != "" ? parseFloat(selectedServices[k].original_service_price).toFixed(2) : '0.00') + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_marathi_name_' + booking_details_id + '_' + value_text_selected + '" id="service_marathi_name_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_name_marathi + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_name_' + booking_details_id + '_' + value_text_selected + '" id="service_name_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_name + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_duration_' + booking_details_id + '_' + value_text_selected + '" id="service_duration_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_duration + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_rewards_' + booking_details_id + '_' + value_text_selected + '" id="service_rewards_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].reward_point + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_products_' + booking_details_id + '_' + value_text_selected + '" id="service_products_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].all_service_prducts + '">');
                            
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="is_offer_applied_' + booking_details_id + '_' + value_text_selected + '" id="is_offer_applied_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].is_service_offer_applied + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="applied_offer_id_' + booking_details_id + '_' + value_text_selected + '" id="applied_offer_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].applied_offer_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_' + booking_details_id + '_' + value_text_selected + '" id="service_offer_discount_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_offer_discount + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_type_' + booking_details_id + '_' + value_text_selected + '" id="service_offer_discount_type_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_offer_discount_type + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_amount_' + booking_details_id + '_' + value_text_selected + '" id="service_offer_discount_amount_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_offer_discount_amount + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="prev_stylist_' + booking_details_id + '_' + value_text_selected + '" id="prev_stylist_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].stylist_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_added_from_' + booking_details_id + '_' + value_text_selected + '" id="service_added_from_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].service_added_from + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_booking_details_id_' + booking_details_id + '_' + value_text_selected + '" id="service_booking_details_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].id + '">');
      
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_id_' + booking_details_id + '_' + value_text_selected + '" id="service_package_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].package_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_allocation_id_' + booking_details_id + '_' + value_text_selected + '" id="service_package_allocation_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].package_allocation_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_allocation_details_id_' + booking_details_id + '_' + value_text_selected + '" id="service_package_allocation_details_id_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].package_allocation_status_id + '">');
                            $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_name_' + booking_details_id + '_' + value_text_selected + '" id="service_package_name_' + booking_details_id + '_' + value_text_selected + '" value="' + selectedServices[k].package_name + '">');

                            var service_duration = selectedServices[k].service_duration;
                            var service_name = selectedServices[k].service_name;
                            var service_marathi_name = selectedServices[k].service_name_marathi;
                            var service_rewards = selectedServices[k].reward_point;
                            var final_price = selectedServices[k].service_price != "" && selectedServices[k].service_price != null ? selectedServices[k].service_price : '0';
                            var service_original_price = selectedServices[k].original_service_price;
                            var service_products = selectedServices[k].all_service_prducts;
                            var service_id = selectedServices[k].service_id;
                            var service_added_from = selectedServices[k].service_added_from;
                            
                            createServiceDiv(value_text_selected,'<?=$bookings->id;?>',service_added_from,service_id,all_products,'pre_selected_service',service_duration,service_name,service_marathi_name,service_rewards,final_price,service_original_price,service_products);
                        }
                        
                        var timeParts = selected_slot_start_time.split(":");
                        var hours = parseInt(timeParts[0], 10);
                        var minutes = parseInt(timeParts[1], 10);
                        
                        var ampm = hours >= 12 ? 'PM' : 'AM';
                        hours = hours % 12;
                        hours = hours ? hours : 12;
                        
                        minutes = minutes < 10 ? '0' + minutes : minutes;
                        
                        selectedValue = hours + ':' + minutes + ' ' + ampm;

                        setBookingStartEdit(selectedValue,<?=$bookings->id;?>);
                    }
                    $("#booking_date_<?=$bookings->id;?>").datepicker({
                        dateFormat: 'dd-mm-yy',
                        maxDate: '<?php echo $max_date; ?>',
                        minDate: '<?php echo $today; ?>',
                    });  
                    var today_date = '<?php echo  ($today != "") ? date('d-m-Y',strtotime($today)) : ''; ?>';

                    $("#category_<?=$bookings->id;?>").chosen(); 
                    $("#service_<?=$bookings->id;?>").chosen(); 

                    $('#payment_form_<?=$bookings->id;?>').validate({
                        ignore:[],
                        rules: {
                            // 'category_<?=$bookings->id;?>': {
                            //     required: true,
                            // },
                            'selected_add_service_<?=$bookings->id;?>': {
                                required: true,
                            },
                        },
                        messages: {
                            // 'category_<?=$bookings->id;?>': {
                            //     required: "Please select category!",
                            // },
                            'selected_add_service_<?=$bookings->id;?>': {
                                required: "Please select service!",
                            },
                        },
                        submitHandler: function(form) {
                            var validation_flag = 1;
                            $(".service_executive_<?=$bookings->id;?>").each(function () {
                                if ($(this).val() == "") {
                                    validation_flag = 0;
                                    return false;
                                }
                            });
                            if (validation_flag == 1) {
                                if (confirm("Are you sure you want to add service?")) {
                                // openConfirmationDialog("Are you sure you want to add service?", function (confirmed) {
                                // if (confirmed) {
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").hide('');
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").html('');

                                    form.submit();
                                } else {
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").hide('');
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").html('');
                                    return false;
                                }
                                // });
                            } else {
                                $("#stylist_timeslot_error_<?=$bookings->id;?>").show('');
                                $("#stylist_timeslot_error_<?=$bookings->id;?>").html('Please select stylists for the selected service'); 
                            }
                        }
                    });

                    $('#category_<?=$bookings->id;?>').change(function() {
                        $('.loader_div').show();   
                        // setTimeout(function() {
                            var booking_details_id = '<?= $bookings->id; ?>';
                            var booking_customer_id = '<?= $bookings->customer_name; ?>';
                            var category = $('#category_' + booking_details_id).val();
                            if (category !== "" && typeof category !== "undefined") {
                                $.ajax({
                                    type: "POST",
                                    url: "<?= base_url(); ?>salon/Ajax_controller/get_booking_category_services",
                                    data: { 'category': category, 'booking_details_id': booking_details_id, 'booking_customer_id': booking_customer_id },
                                    success: function(data) {
                                        $('.loader_div').hide(); 

                                        $("#service_"+booking_details_id).empty();
                                        $("#service_"+booking_details_id).append('<option value="">Select Service</option>');
                                        var stylists = $.parseJSON(data);
                                        if (stylists.length > 0) {
                                            var opts = $.parseJSON(data);

                                            $.each(opts, function(i, d) {
                                                if (d.service_added_from == '1') {
                                                    var value_text = d.id + '_' +
                                                                    d.service_added_from + '_' + 
                                                                    d.is_offer_applied + '_' + 
                                                                    (d.package_allocation_id == null || d.package_allocation_id === '' ? '0' : d.package_allocation_id);
                                                } else {
                                                    var value_text = d.id + '_' +
                                                                    d.service_added_from + '_' + 
                                                                    d.is_offer_applied + '_' + 
                                                                    '0';
                                                }

                                                if(d.is_package_service == '1'){
                                                    $("#service_" + booking_details_id).append('<option value="' + value_text + '">' + d.service_name + '|' + d.service_name_marathi + ' - ' + d.package_name + ' Package Service</option>');
                                                }else{
                                                    $("#service_" + booking_details_id).append('<option value="' + value_text + '">' + d.service_name + '|' + d.service_name_marathi + '</option>');
                                                }

                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_price_' + booking_details_id + '_' + value_text + '" id="service_price_' + booking_details_id + '_' + value_text + '" value="' + (d.service_price != null && d.service_price != "" ? parseFloat(d.service_price).toFixed(2) : '0.00') + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_original_price_' + booking_details_id + '_' + value_text + '" id="service_original_price_' + booking_details_id + '_' + value_text + '" value="' + (d.service_original_price != null && d.service_original_price != "" ? parseFloat(d.service_original_price).toFixed(2) : '0.00') + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_marathi_name_' + booking_details_id + '_' + value_text + '" id="service_marathi_name_' + booking_details_id + '_' + value_text + '" value="' + d.service_name_marathi + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_name_' + booking_details_id + '_' + value_text + '" id="service_name_' + booking_details_id + '_' + value_text + '" value="' + d.service_name + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_duration_' + booking_details_id + '_' + value_text + '" id="service_duration_' + booking_details_id + '_' + value_text + '" value="' + d.service_duration + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_rewards_' + booking_details_id + '_' + value_text + '" id="service_rewards_' + booking_details_id + '_' + value_text + '" value="' + d.reward_point + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_products_' + booking_details_id + '_' + value_text + '" id="service_products_' + booking_details_id + '_' + value_text + '" value="' + d.product + '">');
                                                
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="prev_stylist_' + booking_details_id + '_' + value_text + '" id="prev_stylist_' + booking_details_id + '_' + value_text + '" value="">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="is_offer_applied_' + booking_details_id + '_' + value_text + '" id="is_offer_applied_' + booking_details_id + '_' + value_text + '" value="' + d.is_offer_applied + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="applied_offer_id_' + booking_details_id + '_' + value_text + '" id="applied_offer_id_' + booking_details_id + '_' + value_text + '" value="' + d.applied_offer_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_' + booking_details_id + '_' + value_text + '" id="service_offer_discount_' + booking_details_id + '_' + value_text + '" value="' + d.service_offer_discount + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_type_' + booking_details_id + '_' + value_text + '" id="service_offer_discount_type_' + booking_details_id + '_' + value_text + '" value="' + d.service_offer_discount_type + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_amount_' + booking_details_id + '_' + value_text + '" id="service_offer_discount_amount_' + booking_details_id + '_' + value_text + '" value="' + d.service_offer_discount_amount + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_added_from_' + booking_details_id + '_' + value_text + '" id="service_added_from_' + booking_details_id + '_' + value_text + '" value="' + d.service_added_from + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_booking_details_id_' + booking_details_id + '_' + value_text + '" id="service_booking_details_id_' + booking_details_id + '_' + value_text + '" value="">');
                                                
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_id_' + booking_details_id + '_' + value_text + '" id="service_package_id_' + booking_details_id + '_' + value_text + '" value="' + d.package_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_allocation_id_' + booking_details_id + '_' + value_text + '" id="service_package_allocation_id_' + booking_details_id + '_' + value_text + '" value="' + d.package_allocation_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_allocation_details_id_' + booking_details_id + '_' + value_text + '" id="service_package_allocation_details_id_' + booking_details_id + '_' + value_text + '" value="' + d.package_allocation_details_id + '">');
                                                $("#selected_service_details_" + booking_details_id).append('<input type="hidden" name="service_package_name_' + booking_details_id + '_' + value_text + '" id="service_package_name_' + booking_details_id + '_' + value_text + '" value="' + d.package_name + '">');
                                            });
                                        }
                                        $("#service_"+booking_details_id).trigger('chosen:updated');
                                        $("#service_"+booking_details_id).chosen();
                                    }
                                });
                            }
                        // }, 1500);
                    });

                    $('#service_<?=$bookings->id;?>').change(function() {
                        var booking_details_id = <?= $bookings->id; ?>;
                        var all_products = <?= json_encode($products); ?>;
                        var selected_from = 'extra_service_add';
                        var category = $('#category_' + booking_details_id).val();
                        var serviceValue = $('#service_' + booking_details_id).val();
                        var serviceID = serviceValue[0];
                        var service_added_from = serviceValue[1];
                        var is_offer_applied = serviceValue[2];
                        
                        $("#stylist_timeslot_error_" + booking_details_id).hide('');
                        $("#stylist_timeslot_error_" + booking_details_id).html('');

                        if(!user_selected_add_service.includes(serviceID)){   
                            // $('#booking_timeslots_' + booking_details_id).hide();                
                            var booking_date = $('#booking_date_' + booking_details_id).val();
                            var booking_start = $('#booking_start_' + booking_details_id).val();
                            if (booking_date !== "" && booking_start !== "") {
                                var service_duration = $('#service_duration_' + booking_details_id + '_' + serviceValue).val();
                                var service_name = $('#service_name_' + booking_details_id + '_' + serviceValue).val();
                                var service_marathi_name = $('#service_marathi_name_' + booking_details_id + '_' + serviceValue).val();
                                var service_rewards = $('#service_rewards_' + booking_details_id + '_' + serviceValue).val();
                                var final_price = $('#service_price_' + booking_details_id + '_' + serviceValue).val();
                                var service_original_price = $('#service_original_price_' + booking_details_id + '_' + serviceValue).val();
                                var service_products = $('#service_products_' + booking_details_id + '_' + serviceValue).val();
                                var service_added_from = $('#service_added_from_' + booking_details_id + '_' + serviceValue).val();
                                  
                                createServiceDiv(serviceValue,booking_details_id,service_added_from,serviceID,all_products,selected_from,service_duration,service_name,service_marathi_name,service_rewards,final_price,service_original_price,service_products);
                            }else{
                                // alert('Please select booking date and timeslot first');
                                openDialog('Please select booking date and timeslot first'); 
                                $('#service_' + booking_details_id).val('');
                            }
                        }else{
                            $('.loader_div').hide(); 
                            // alert('Service already selected');
                            openDialog('Service already selected'); 
                        }                        
                        $('#service_' + booking_details_id).val('');
                        $('#service_' + booking_details_id).trigger("chosen:updated");
                    });
                });

                function createServiceDiv(serviceValue,booking_details_id,service_added_from,serviceID,all_products,selected_from,service_duration,service_name,service_marathi_name,service_rewards,final_price,service_original_price,service_products){
                    if (!user_selected_add_service.some(entry => entry.split('_')[0] === serviceID)) {
                        // $('.loader_div').show();   
                        // setTimeout(function() {
                            var productsArray = [];
                            productsArray = service_products.split(',');
                            if(parseFloat(final_price) < parseFloat(service_original_price)){
                                price = '<s>'+parseFloat(service_original_price).toFixed(2)+'</s> '+parseFloat(final_price).toFixed(2)+'';
                            }else{
                                price = final_price;
                            }

                            var tomorrow = new Date();
                            tomorrow.setDate(tomorrow.getDate() + 1);

                            var tomorrowFormatted = tomorrow.toISOString().split('T')[0];
                            var total_count = 0;
                            var z = 0;
                            var product_count = 0;

                            if(service_added_from == '1'){
                                var details_div_color = '#c0e1ff';
                            }else{
                                var details_div_color = '';
                            }
                            service_details = 
                                '<div class="row single_added_extra_service_details" id="selected_service_booking_details_'+ booking_details_id +'_'+ serviceID +'">'+
                                    '<input type="hidden" id="service_added_from_'+ booking_details_id +'_'+ serviceID +'" value="'+ selected_from +'">'+
                                    '<div class="col-md-12 col-sm-12 col-xs-12 selected-servicesbox" style="background-color:'+details_div_color+'; height: auto; padding-top: 9px; padding-left:0px;">'+
                                        '<div class="col-lg-8 col-md-12 col-sm-12 col-xs-12">'+
                                            '<span class="left-span" style="font-size: 13px !important;">'+ service_name +'|'+service_marathi_name+' <span style="margin-left:15px;">'+ price +'</span></span>'+
                                            '<div class="span-row">'+
                                                '<span class="bottom-span">'+ service_duration +' Mins</span>'+
                                                '<input type="hidden" id="service_reward_points_'+ booking_details_id +'_'+ serviceID +'" name="service_reward_points_'+ booking_details_id +'_'+ serviceID +'" value="">'+
                                                '<span class="bottom-span" id="service_stylist_timeslot_'+ booking_details_id +'_'+ serviceID +'"></span>'+
                                                '<div class="col-lg-6" id="service_executive_div_'+ booking_details_id +'_' + serviceID + '" style="display:none;">'+
                                                    '<select class="form-control service_executive_'+ booking_details_id +'" name="service_stylist_id_'+ booking_details_id +'_' + serviceID + '" id="service_stylist_id_'+ booking_details_id +'_' + serviceID + '"></select>'+
                                                '</div>'+
                                                '<input type="hidden" class="service_stylist_timeslot_validation_'+ booking_details_id +'" id="service_stylist_timeslot_hidden_'+ booking_details_id +'_'+ serviceID +'" name="service_stylist_timeslot_hidden_'+ booking_details_id +'_'+ serviceID +'" value="">'+
                                            '</div>'+
                                        '</div>'+
                                        '<div class="col-lg-4 col-md-12 col-sm-12 col-xs-12" >'+
                                            '<button style="display: block;position: static; margin-top:5px;" type="button" id="product_for_service_button_'+ booking_details_id +'_' + serviceID + '" class="btn  modalbtn" onclick="showPopup(\'ServiceProductModal_'+ booking_details_id +'_' + serviceID + '\')" data-toggle="modal" data-target="#ServiceProductModal_'+ booking_details_id +'_' + serviceID + '"><span id="selected_service_product_'+ booking_details_id +'_' + serviceID + '">0</span>/<span id="total_service_product_'+ booking_details_id +'_' + serviceID + '">0</span></button>'+
                                            '<div class="modal fade" style="background-color: #00000080; overflow-x:visible !important; overflow-y:visible !important;" id="ServiceProductModal_'+ booking_details_id +'_'+ serviceID +'" tabindex="-1" role="dialog" aria-labelledby="ServiceProductModalLabel_'+ booking_details_id +'_'+ serviceID +'" aria-hidden="true">'+
                                                '<div class="modal-dialog" role="document" style="width:500px;">'+
                                                    '<div class="modal-content">'+
                                                        '<div class="modal-header">'+
                                                            '<h5 class="modal-title" id="ServiceProductModalLabel_'+ booking_details_id +'_'+ serviceID +'">'+ service_name +' Service Products</h5>'+
                                                            '<button type="button" class="close" data-dismiss="modal" aria-label="Close" style="float:none !important; position:absolute;right:10px;top:10px;"  onclick="closePopup(\'ServiceProductModal_'+ booking_details_id +'_'+ serviceID + '\')">'+
                                                                '<span aria-hidden="true">&times;</span>'+
                                                            '</button>'+
                                                        '</div>'+
                                                        '<div class="modal-body extra_service_products">'+
                                                            '<table style="width:100%;">'+
                                                                '<thead>'+
                                                                    '<tr>'+
                                                                        '<th>Select</th>'+
                                                                        '<th>Product</th>'+
                                                                        '<th>Price</th>'+
                                                                    '</tr>'+
                                                                '</thead>'+
                                                                '<tbody>';
                                            all_products.forEach(function(product) {
                                                if (productsArray.includes(product.id)) {
                                                    product_count++;
                                                    if(service_added_from == '1'){
                                                        var product_price = '0.00';
                                                    }else{
                                                        var product_price = product.selling_price;
                                                    }
                                                service_details += '<tr>' +
                                                                        '<td><input type="checkbox" class="product-checkbox add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'" name="add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'[]" id="add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'_' + product.id + '" value="' + product.id + '" onclick="setAddServiceProductPrice('+ booking_details_id +',' + serviceID + ',' + product.id + ')"></td>' +
                                                                        '<td>' + product.product_name + '</td>' +
                                                                        '<td>' + product_price + '</td>' +
                                                                    '</tr>' +
                                                                    '<input type="hidden" id="service_product_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" name="service_product_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="'+ product_price +'">';
                                                }
                                            });
                                            if(product_count == 0){
                                                service_details += '<tr>' +
                                                                        '<td colspan="3" style="text-align:center;">Products not available</td>' +
                                                                    '</tr>';
                                            }
                                            service_details += '</tbody>'+
                                                            '</table>'+
                                                        '</div>'+
                                                    '</div>'+
                                                '</div>'+
                                            '</div>';
                                            // if(service_added_from == '0'){
                                                service_details += '<button class="ser_model_X" style="display: block;position: absolute;background: white;border: none;outline: none;box-shadow: none;padding: 0px;margin: 0px;right: 0px;top: 0px; margin-top:2px;" type="button" id="remove_add_service_button_'+ booking_details_id +'_' + serviceID + '" class="btn" onclick="removeAddService(' + booking_details_id + ',' + serviceID + ',\'' + serviceValue + '\')"><span style="color: red;font-size: 15px;padding: 2px 6px;border-radius: 100%;"><i class="fa fa-times"></i></span></button>';
                                            // }
                                        service_details += '</div>'+
                                    '</div>'+   
                                '</div>';
                            $('#selected_services_empty_'+booking_details_id).hide();
                            $('#selected_services_' + booking_details_id).append(service_details);
                            $('#selected_services_' + booking_details_id).show();
                            $('#total_service_product_' + booking_details_id + '_' + serviceID).text(product_count);

                            // $('.loader_div').hide();   
                            setAddServicePrice(serviceValue,booking_details_id,serviceID,service_duration,service_rewards,final_price);
                        // }, 1500);
                    }else{
                        openDialog('Service already selected'); 
                    }
                }
                function formatTime(time) {
                    var hours = time.getHours();
                    var minutes = time.getMinutes();
                    var ampm = hours >= 12 ? 'PM' : 'AM';
                    hours = hours % 12;
                    hours = hours ? hours : 12; // the hour '0' should be '12'
                    minutes = minutes < 10 ? '0' + minutes : minutes;

                    return hours + ':' + minutes + ' ' + ampm;
                }
                function formatToOnlyDate(date) {
                    var monthNames = [
                        "Jan", "Feb", "Mar",
                        "Apr", "May", "Jun", "Jul",
                        "Aug", "Sep", "Oct",
                        "Nov", "Dec"
                    ];

                    var day = date.getDate();
                    var monthIndex = date.getMonth();
                    var year = date.getFullYear();

                    return day + ' ' + monthNames[monthIndex] + ' ' + year;
                }
                function formatToOnlyDate_PHPFormat(date) {
                    var year = date.getFullYear();
                    var month = ('0' + (date.getMonth() + 1)).slice(-2); // Adding leading zero if necessary
                    var day = ('0' + date.getDate()).slice(-2); // Adding leading zero if necessary
                    return year + '-' + month + '-' + day;
                }                
                function convertTo24HourFormat(time) {
                    var hours = parseInt(time.split(':')[0]);
                    var minutes = parseInt(time.split(':')[1].split(' ')[0]);
                    var ampm = time.split(' ')[1];

                    if (ampm === 'PM' && hours < 12) {
                        hours += 12;
                    }
                    if (ampm === 'AM' && hours === 12) {
                        hours = 0;
                    }

                    var formattedTime = ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2) + ':00';
                    return formattedTime;
                }
                function fetchTimeSlots(booking_details_id){
                    var booking_date = $('#booking_date_'+booking_details_id).val();
                    var booking_start = $('#booking_start_'+booking_details_id).val();
                    var slot_start_time = $('#slot_start_time_'+booking_details_id).val();
                    if(booking_date != ""){
                        $('#booking_timeslots_'+booking_details_id).html('');
                        $('.loader_div').show();   
                        $.ajax({
                            type: "POST",
                            url: "<?=base_url();?>salon/Ajax_controller/get_day_timeslots_edit_service_ajx",
                            data:{
                                'source':'vendor_panel',
                                'booking_id':booking_details_id,
                                'booking_date':booking_date,
                                'selected_slot_start_time':slot_start_time,
                                'booking_start':booking_start,
                                'user_selected_service': user_selected_add_service
                            },
                            success: function(data){
                                $('.loader_div').hide();   
                                $('#booking_timeslots_'+booking_details_id).show();
                                $('#booking_timeslots_'+booking_details_id).html(data);

                                if($('#booking_start_'+booking_details_id).val() != ""){
                                    setServiceTimeSlots(booking_details_id);
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                console.log(textStatus, errorThrown);
                            }
                        }); 
                    }
                }                
                function setBookingStartEdit(value,booking_details_id) {
                    if(value == ""){
                        var selectedValue = $('input[name="booking_start_time_slot_'+booking_details_id+'"]:checked').val();
                    }else{
                        var selectedValue = value;
                    }
                    if (selectedValue != "") {
                        // $('#booking_timeslots').hide();
                        $('#booking_start_'+booking_details_id).val(selectedValue);
                        $('.loader_div').show();
                        fetchTimeSlots(booking_details_id);
                        $('.loader_div').hide();
                    }
                }
                
                function setServiceTimeSlots(booking_details_id){
                    for(var i=0;i<user_selected_add_service.length;i++){
                        var singleService = user_selected_add_service[i];     
                        var singleServiceID = singleService.split('_')[0];   
                        var service_duration = $('#service_duration_' + booking_details_id + '_' + singleService).val();
                        var service_rewards = $('#service_rewards_' + booking_details_id + '_' + singleService).val();

                        var booking_date = $('#booking_date_'+booking_details_id).val();
                        var previous_start = $('#previous_start_'+booking_details_id).val();

                        if(booking_date != "" && $('#booking_start_'+booking_details_id).val() != ""){
                            if(i == 0){
                                var booking_start = $('#booking_start_'+booking_details_id).val();
                            }else{
                                var booking_start = previous_start;
                            }
                            
                            var dateParts = booking_date.split("-");
                            var day = parseInt(dateParts[0], 10);
                            var month = parseInt(dateParts[1], 10);
                            var year = parseInt(dateParts[2], 10);

                            var timeParts = booking_start.split(":");
                            var hours = parseInt(timeParts[0], 10);
                            var minutes = parseInt(timeParts[1], 10);

                            if (booking_start.includes("PM") && hours !== 12) {
                                hours += 12;
                            } else if (booking_start.includes("AM") && hours === 12) {
                                hours = 0;
                            }
                            
                            selected_slot_start = new Date(year, month - 1, day, hours, minutes, 0);
                            var selected_slot_end = new Date(selected_slot_start.getTime() + (service_duration * 60000));

                            var formatted_slot_start_time = formatTime(selected_slot_start);
                            var formatted_slot_end_time = formatTime(selected_slot_end);

                            var formatted_slot_start_time_24hr = convertTo24HourFormat(formatted_slot_start_time);
                            var formatted_slot_end_time_24hr = convertTo24HourFormat(formatted_slot_end_time);
                            var formatted_booking_date_PHP = formatToOnlyDate_PHPFormat(selected_slot_start);
                            var timeslot_string = formatted_booking_date_PHP + ' ' + formatted_slot_start_time_24hr + '@@@' + formatted_booking_date_PHP + ' ' + formatted_slot_end_time_24hr;
                        
                            $('#service_reward_points_' + booking_details_id + '_' + singleServiceID).val(service_rewards);
                            $('#service_stylist_timeslot_hidden_' + booking_details_id + '_' + singleServiceID).val(timeslot_string);
                            $('#service_stylist_timeslot_' + booking_details_id + '_' + singleServiceID).text(formatted_slot_start_time + ' to ' + formatted_slot_end_time);
                                        
                            getTimeStylist(booking_details_id,booking_date,selected_slot_start,selected_slot_end,singleServiceID,service_duration);

                            $('#previous_start_'+booking_details_id).val(formatted_slot_end_time_24hr);
                        }
                    }  
                }
                
                function formatDate(date) {
                    var year = date.getFullYear();
                    var month = ('0' + (date.getMonth() + 1)).slice(-2);
                    var day = ('0' + date.getDate()).slice(-2);
                    var hours = ('0' + date.getHours()).slice(-2);
                    var minutes = ('0' + date.getMinutes()).slice(-2);
                    var seconds = ('0' + date.getSeconds()).slice(-2);

                    return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
                }    
                function getTimeStylist(booking_details_id,booking_date,selected_slot_start,selected_slot_end,singleService,service_duration){
                    var formatted_start = formatDate(selected_slot_start);
                    var formatted_end = formatDate(selected_slot_end);

                    if (formatted_start !== "" && typeof formatted_start !== "undefined" && formatted_end !== "" && typeof formatted_end !== "undefined") {
                        selectedTimeSlot = formatted_start + '@@@' + formatted_end;
                        $('#service_executive_div_' + booking_details_id + '_' + singleService).hide();
                        $('#service_stylist_id_' + booking_details_id + '_' + singleService).html("");
                        $('.loader_div').show();   
                        $.ajax({
                            type: "POST",
                            url: "<?= base_url(); ?>salon/Ajax_controller/get_available_stylists_edit_servicewise_ajx",
                            data: { 'service':singleService,'selectedTimeSlot': selectedTimeSlot,'booking_details_id': booking_details_id },
                            success: function(data) {
                                $('.loader_div').hide();   
                                $('#service_stylist_id_' + booking_details_id + '_' + singleService).chosen();
                                $('#service_stylist_id_' + booking_details_id + '_' + singleService).val('');

                                var prev_stylist = $('#prev_stylist_' + booking_details_id + '_' + singleService).val();
                                
                                var stylists = $.parseJSON(data);
                                if(stylists.length > 0){
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService).empty();
                                    // $('#service_stylist_id_' + booking_details_id + '_' + singleService).append('<option value="">Select Executive</option>');
                                    var opts = $.parseJSON(data);
                                    var count = 1;
                                    $.each(opts, function(i, d) {
                                        store_flag = d.store_flag;
                                        short_break_flag = d.short_break_flag;
                                        is_service_available = d.is_service_available;
                                        is_shift_available = d.is_shift_available;
                                        is_booking_present = d.is_booking_present;
                                        is_on_break = d.is_on_break;
                                        is_on_leave_flag = d.is_on_leave_flag;
                                        is_emergency_flag = d.is_emergency_flag;
                                        
                                        if(is_service_available == '1'){
                                            if(store_flag == '1'){
                                                if(is_emergency_flag == '0'){
                                                    if(is_on_leave_flag == '0'){
                                                        if(is_shift_available == '1'){
                                                            if(is_booking_present == '0'){
                                                                if(is_on_break == '0'){
                                                                    if(short_break_flag == '1'){
                                                                        var message = '';
                                                                        var disabled = '';
                                                                        var is_Allowed = 1;
                                                                        if(count == 1){
                                                                            var selected = 'selected';
                                                                        }
                                                                    }else{
                                                                        var message = '- Stylist On Short Break';
                                                                        var disabled = 'disabled';
                                                                        var is_Allowed = 0;
                                                                    }
                                                                }else{
                                                                    var message = '- Stylist On Break';
                                                                    var disabled = 'disabled';
                                                                    var is_Allowed = 0;
                                                                }
                                                            }else{
                                                                var message = '- Slot Already Booked';
                                                                // var message = '- Not Available';
                                                                var disabled = 'disabled';
                                                                var is_Allowed = 0;
                                                            }
                                                        }else{
                                                            var message = '- Shift Not Available';
                                                            var disabled = 'disabled';
                                                            var is_Allowed = 0;
                                                        }
                                                    }else{
                                                        var message = '- On Leave';
                                                        var disabled = 'disabled';
                                                        var is_Allowed = 0;
                                                    }
                                                }else{
                                                    var message = '- Store Emergency Closed';
                                                    var disabled = 'disabled';
                                                    var is_Allowed = 0;
                                                }
                                            }else{
                                                var message = '- Exceed Salon Times';
                                                var disabled = 'disabled';
                                                var is_Allowed = 0;
                                            }

                                            if(is_Allowed == 1 && disabled != 'disabled'){
                                                if(prev_stylist != "" && prev_stylist == d.stylist_details.id){
                                                    var selected = 'selected';
                                                    count++;
                                                }else{
                                                    if(count == 1){
                                                        var selected = 'selected';
                                                        count++;
                                                    }else{
                                                        var selected = '';
                                                    }
                                                }
                                            }else{
                                                var selected = '';
                                            }

                                            $('#service_stylist_id_' + booking_details_id + '_' + singleService).append('<option ' + disabled + ' ' + selected + ' value="' + d.stylist_details.id + '">' + d.stylist_details.full_name + ' ' + message + '</option>');
                                        }else{
                                            var disabled = 'disabled';
                                            var message = '- Stylist Not Available';
                                        }
                                    });
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService).trigger('chosen:updated');
                                    $('#service_executive_div_' + booking_details_id + '_' + singleService).show();
                                }else{
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService+"_chosen").hide();
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService).hide();
                                    $('#service_executive_div_' + booking_details_id + '_' + singleService).append('<label style="font-size:10px;" class="error">Please, first set Stylist designation employees.</label>');
                                    $('#service_executive_div_' + booking_details_id + '_' + singleService).show();
                                }
                            },
                        });
                    }
                }
                function removeAddService(booking_details_id,serviceID,serviceValue){
                    if(confirm('Are you sure you want to remove service?')){ 
                    // openConfirmationDialog("Are you sure you want to remove service?", function (confirmed) {
                    // if (confirmed) {
                        // $('.loader_div').show();   
                        // setTimeout(function() {
                            var current_total_service = parseFloat($("#total_add_service_price_" + booking_details_id).val());                      
                            var selected_product = parseInt($('#selected_service_product_' + booking_details_id + '_'+serviceID).text());
                            var service_price = $('#service_price_' + booking_details_id + '_' + serviceValue).val();

                            var index = user_selected_add_service.findIndex(function(id) {
                                return id === serviceValue.toString();
                            });

                            if (index !== -1) {
                                user_selected_add_service.splice(index, 1);
                                var updatedValue = user_selected_add_service.join(',');
                                $("#selected_add_service_" + booking_details_id).val(updatedValue);
                            }

                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).attr('disabled', true);

                            current_total_service = current_total_service - service_price;

                            $('#executive_for_service_button_'+booking_details_id+'_'+serviceID).text('Select Stylist'); 
                                
                            if(user_selected_add_service.length == 0){
                                $('#selected_services_empty_'+booking_details_id).show();
                                $('#selected_services_'+booking_details_id).hide();
                            }

                            var tempArray = [];
                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).each(function() {
                                if ($(this).prop('checked')) {
                                    $(this).prop('checked', false); 
                                    tempArray.push($(this).val());
                                }
                            });

                            for (var i = 0; i < tempArray.length; i++) {
                                setAddServiceProductPrice(booking_details_id,serviceID,tempArray[i]);
                            }

                            calculateTotalAddServiceDuration(booking_details_id,serviceID);
                
                            fetchTimeSlots(booking_details_id);

                            $('#total_add_service_price_' + booking_details_id).val(parseFloat(current_total_service).toFixed(2));
                            $('#total_add_service_price_text_' + booking_details_id).text(parseFloat(current_total_service).toFixed(2));

                            setPayableAddServiceAmount(booking_details_id,serviceID);

                            $("#selected_service_booking_details_"+booking_details_id+"_"+serviceID).remove();

                        //     $('.loader_div').hide();   
                        // }, 3000);
                    }
                    // });
                }
                function setAddServicePrice(serviceValue,booking_details_id,serviceID,service_duration,service_rewards,service_price){ 
                    var current_total = parseFloat($("#total_add_service_price_" + booking_details_id).val());
                    if (!user_selected_add_service.some(entry => entry.split('_')[0] === serviceID)) {
                        var booking_date = $('#booking_date_' + booking_details_id).val();
                        var booking_start = $('#booking_start_' + booking_details_id).val();

                        if (booking_date !== "" && booking_start !== "") {
                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).attr('disabled', false);

                            current_total = current_total + parseFloat(service_price);

                            user_selected_add_service.push(serviceValue);

                            var currentValue = $("#selected_add_service_" + booking_details_id).val(); 
                            if (currentValue === '') {
                                $("#selected_add_service_" + booking_details_id).val(serviceValue); 
                            } else {
                                $("#selected_add_service_" + booking_details_id).val(currentValue + ',' + serviceValue);
                            }

                            var tempArray = [];

                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).each(function() {
                                $(this).prop('checked', true); 
                                tempArray.push($(this).val());
                            });

                            for (var i = 0; i < tempArray.length; i++) {
                                setAddServiceProductPrice(booking_details_id,serviceID,tempArray[i]);
                            }
                        }else{
                            // alert('Please select booking date and timeslot first');
                            openDialog('Please select booking date and timeslot first'); 
                            $('#service_' + booking_details_id).val('');
                        }
                    }else{
                        // alert('Service already selected');
                        openDialog('Service already selected'); 
                    }
                    
                    calculateTotalAddServiceDuration(booking_details_id,serviceID);
                    fetchTimeSlots(booking_details_id);

                    $('#total_add_service_price_' + booking_details_id).val(parseFloat(current_total).toFixed(2));
                    $('#total_add_service_price_text_' + booking_details_id).text(parseFloat(current_total).toFixed(2));

                    setPayableAddServiceAmount(booking_details_id,serviceID);
                }

                function setAddServiceProductPrice(booking_details_id,serviceID,productID){
                    var product_price = parseFloat($('#service_product_price_' + booking_details_id + '_'+serviceID+'_'+productID).val());
                    var current_total_product = parseFloat($('#total_add_service_product_price_' + booking_details_id).val());
                    var selected_product = parseInt($('#selected_service_product_' + booking_details_id + '_'+serviceID).text());
                    if (isNaN(product_price) || typeof product_price === 'undefined') {
                        product_price = 0;
                    }
                    if (isNaN(selected_product) || typeof selected_product === 'undefined') {
                        selected_product = 0;
                    }

                    if ($('#add_service_product_checkbox_' + booking_details_id + '_'+serviceID+'_'+productID).is(':checked')) {      
                        current_total_product = current_total_product + product_price;
                        selected_product = selected_product + 1;

                        user_selected_add_service_product.push(productID);
                    } else {
                        addServiceRemoveValue(user_selected_add_service_product, productID);

                        current_total_product = current_total_product - product_price;
                        selected_product = selected_product - 1;
                    }

                    $('#total_add_service_product_price_' + booking_details_id).val(parseFloat(current_total_product).toFixed(2));
                    $('#total_add_service_product_price_text_' + booking_details_id).text(parseFloat(current_total_product).toFixed(2));
                    $('#selected_service_product_' + booking_details_id + '_'+serviceID).text(parseInt(selected_product));
                    
                    setPayableAddServiceProductAmount(booking_details_id,serviceID);
                }
                function addServiceRemoveValue(arr, value) {
                    var index = arr.indexOf(value);
                    if (index !== -1) {
                        arr.splice(index, 1);
                    }
                    return arr;
                }
                
                function setPayableAddServiceProductAmount(booking_details_id,serviceID){
                    total_product_amount = parseFloat($('#total_add_service_product_price_' + booking_details_id).val());

                    member_product_discount = $('#add_service_membership_product_discount_' + booking_details_id).val();
                    membership_discount_type = $('#add_service_membership_discount_type_' + booking_details_id).val();

                    if (typeof member_product_discount === 'undefined' || member_product_discount === '') {
                        member_product_discount = 0;
                    }else{
                        member_product_discount = parseFloat(member_product_discount);
                    }
                    
                    if(membership_discount_type == '0'){
                        discount = (total_product_amount * member_product_discount)/100;
                    }else if(membership_discount_type == '1'){
                        discount = member_product_discount;
                    }else{
                        discount = 0;
                    }        

                    if(total_product_amount == 0){
                        discount = 0;
                    }

                    $('#add_service_membership_product_discount_amount_' + booking_details_id).val(parseFloat(discount).toFixed(2));

                    payable = total_product_amount - discount;
                    
                    $('#add_service_product_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));
                    $('#add_service_product_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));

                    setPayableAddServiceAmount(booking_details_id,serviceID);
                }
                
                function setPayableAddServiceAmount(booking_details_id,serviceID){
                    total_service_amount = parseFloat($('#total_add_service_price_' + booking_details_id).val());   
                    
                    member_service_discount = $('#add_service_membership_service_discount_' + booking_details_id).val();
                    membership_discount_type = $('#add_service_membership_discount_type_' + booking_details_id).val();

                    if (typeof member_service_discount === 'undefined' || member_service_discount === '') {
                        member_service_discount = 0;
                    }else{
                        member_service_discount = parseFloat(member_service_discount);
                    }
                    
                    if(membership_discount_type == '0'){
                        discount = (total_service_amount * member_service_discount)/100;
                    }else if(membership_discount_type == '1'){
                        discount = member_service_discount;
                    }else{
                        discount = 0;
                    }        

                    if(total_service_amount == 0){
                        discount = 0;
                    }

                    $('#add_service_membership_service_discount_amount_' + booking_details_id).val(parseFloat(discount).toFixed(2));

                    payable = total_service_amount - discount;

                    $('#add_service_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));    
                    $('#add_service_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));    

                    setAddServicePayableAmount(booking_details_id,serviceID);
                } 
                function setPackagePrice(booking_details_id){ 
                    // alert($('#total_add_service_package_price_' + booking_details_id).val());                      
                    var package_allocation_id = $('#package_allocation_id_' + booking_details_id).val();
                    if (user_selected_add_service.some(entry => entry.split('_')[1] === '1')) {
                        if (user_selected_add_service.some(entry => entry.split('_')[3] === package_allocation_id)) {
                            var package_amt = parseFloat($('#booking_add_service_package_price_' + booking_details_id).val());
                            var package_name= ' (' + $('#add_service_package_name_hidden_' + booking_details_id).val() + ')';
                            var is_package_applicable = '1';
                        }else{
                            var package_amt = '0.00';
                            var package_name = '';
                            var is_package_applicable = '0';
                        }
                    }else{
                        var package_amt = '0.00';
                        var package_name = '';
                        var is_package_applicable = '0';
                    }
                    $('#is_package_applicable_' + booking_details_id).val(is_package_applicable);
                    $('#total_add_service_package_price_' + booking_details_id).val(parseFloat(package_amt).toFixed(2));
                    $('#total_add_service_package_price_text_' + booking_details_id).text(parseFloat(package_amt).toFixed(2));
                    $('#add_service_package_name_' + booking_details_id).text(package_name);
                }
                function setAddServicePayableAmount(booking_details_id,serviceID){
                    calculateAddServiceTotalDiscount(booking_details_id,serviceID);
                    
                    setPackagePrice(booking_details_id);

                    service_payable = parseFloat($('#add_service_payable_hidden_' + booking_details_id).val());
                    product_payable = parseFloat($('#add_service_product_payable_hidden_' + booking_details_id).val());
                    package_payable = parseFloat($('#total_add_service_package_price_' + booking_details_id).val());

                    payable = service_payable + product_payable + package_payable;

                    $('#add_service_final_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));
                    $('#add_service_final_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));

                    calculateGSTAmount(booking_details_id);
                }

                function calculateGSTAmount(booking_details_id){
                    rate = 18;
                    booking_amount = parseFloat($('#add_service_final_payable_hidden_' + booking_details_id).val());

                    gst_amount = (rate  * booking_amount) / 100;

                    $('#add_service_final_gst_hidden_' + booking_details_id).val(parseFloat(gst_amount).toFixed(2));
                    $('#add_service_final_gst_text_' + booking_details_id).text(parseFloat(gst_amount).toFixed(2));

                    setGrandTotal(booking_details_id);
                }
                function setGrandTotal(booking_details_id){
                    booking_amount = parseFloat($('#add_service_final_payable_hidden_' + booking_details_id).val());
                    gst_amount = parseFloat($('#add_service_final_gst_hidden_' + booking_details_id).val());
                    
                    total = booking_amount + gst_amount;

                    $('#add_service_final_total_hidden_' + booking_details_id).val(parseFloat(total).toFixed(2));
                    $('#add_service_final_total_text_' + booking_details_id).text(parseFloat(total).toFixed(2));
                }
                function calculateAddServiceTotalDiscount(booking_details_id,serviceID){
                    $('#add_service_discount_details_div_' + booking_details_id).html('');
                    var membership_service_discount_amount = parseFloat($('#add_service_membership_service_discount_amount_' + booking_details_id).val());
                    var membership_product_discount_amount = parseFloat($('#add_service_membership_product_discount_amount_' + booking_details_id).val());

                    total_discount = membership_service_discount_amount + membership_product_discount_amount;
                    $('#add_service_total_discount_amount_text_' + booking_details_id).text(parseFloat(total_discount).toFixed(2));
                    $('#add_service_total_discount_amount_' + booking_details_id).val(parseFloat(total_discount).toFixed(2));

                    var discount_details = '<div id="extra_service_discount_details_info"><i class="fas fa-info-circle" style="color:#0000ffb0;"></i>';
                    discount_details += '<div class="extra-service-discount-tooltip">';
                    if (membership_service_discount_amount > 0) {
                        discount_details += '<p>Membership Service Discount <span class="amount" style="float: right;">' + membership_service_discount_amount.toFixed(2) + '</span></p>';
                    }
                    if (membership_product_discount_amount > 0) {
                        discount_details += '<p>Membership Product Discount <span class="amount" style="float: right;">' + membership_product_discount_amount.toFixed(2) + '</span></p>';
                    }
                    discount_details += '<div style="border-top:1px solid #ccc;margin-top:1px;"><p>Total Discount <span class="amount" style="float: right;">' + total_discount.toFixed(2) + '</span></p></div>';
                    discount_details += '</div></div>';
                    if(total_discount > 0){
                        $('#add_service_discount_details_div_' + booking_details_id).html(discount_details);
                    }
                } 

                function calculateTotalAddServiceDuration(booking_details_id,serviceID){
                    total_duration = 0;

                    for(var i=0;i<user_selected_add_service.length;i++){
                        duration = $('#service_duration_' + booking_details_id + '_' + serviceID).val();
                        total_duration = total_duration + parseFloat(duration);
                    }

                    $('#upper_duration').text(parseInt(total_duration) + ' Mins');
                }
            </script>
        <?php 
        }else{ 
        ?>
            <div>
                <label class="error">Booking details not found</label>
            </div>
        <?php 
        }
    }    
    public function get_service_products_details_ajx(){
        $booking_rules = $this->get_booking_rules();
        if(!empty($booking_rules)){
            $booking_details_id = $this->input->post('booking_details_id');
            $this->db->select('tbl_booking_services_products_details.*,tbl_product.product_name, tbl_new_booking.amount_to_paid, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
            $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_products_details.service_id');
            $this->db->join('tbl_product','tbl_product.id = tbl_booking_services_products_details.product_id');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_products_details.customer_name');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_products_details.booking_id');
            $this->db->where('tbl_booking_services_products_details.booking_service_details_id',$booking_details_id);
            $this->db->where('tbl_booking_services_products_details.is_deleted','0');
            $booking_products = $this->db->get('tbl_booking_services_products_details')->result();

            if(!empty($booking_products)){
                $this->db->select('tbl_booking_services_details.*, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
                $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
                $this->db->where('tbl_booking_services_details.id',$booking_details_id);
                $booking_service = $this->db->get('tbl_booking_services_details')->row();
            ?>
                <div class="calender_booking_details">
                    <label style="font-size:15px;"><?php if(!empty($booking_service)){ echo $booking_service->service_name.' '; } ?>Product Details</label>
                </div>
                <div class="calender_booking_details">
                    <table style="width:100%;">
                        <thead>
                            <tr>
                                <th>Select</th>
                                <th>Product</th>
                                <th>Price</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                                if(!empty($booking_products)){
                                    foreach($booking_products as $booking_products_result){
                            ?>
                            <tr>
                                <td><input type="checkbox"></td>
                                <th><?=$booking_products_result->product_name;?></th>
                                <th><?=($booking_products_result->product_price != "") ? 'Rs. '.$booking_products_result->product_price : 'Rs. 0.00';?></th>
                            </tr>
                            <?php }} ?>
                        </tbody>
                    </table>
                </div>
            <?php 
            }else{ 
            ?>
                <div>
                    <label class="error">Products not found</label>
                </div>
            <?php 
            }
        }else{ 
        ?>
        <div>
            <label class="error">Booking rules not available</label>
        </div>
        <?php
        }
    }
    
    public function get_all_bookings_payments($booking_id){
        $this->db->select('tbl_service_payment.*');
        $this->db->where('tbl_service_payment.booking_id',$booking_id);
        $this->db->where('tbl_service_payment.is_deleted','0');
        $this->db->order_by('tbl_service_payment.id','asc');
        $payments = $this->db->get('tbl_service_payment')->result();
        return $payments;
    }
    public function get_booking_services($booking_id){
		$this->db->where('booking_id', $booking);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id')); 
        $this->db->where('is_deleted', '0');
		$result = $this->db->get('tbl_booking_services_details')->result(); 
        return $result;
    }
    public function get_customer_payments_ajx(){
        $customer = $this->input->post('customer');

        $this->db->where('tbl_salon_customer.id',$customer);
        $customer_details = $this->db->get('tbl_salon_customer')->row();

        $this->db->select('tbl_booking_payment_entry.*');
        $this->db->where('tbl_booking_payment_entry.customer_id',$customer);
        $this->db->where('tbl_booking_payment_entry.is_deleted','0');
        $this->db->order_by('tbl_booking_payment_entry.id','asc');
        $payments = $this->db->get('tbl_booking_payment_entry')->result();

        if(!empty($payments)){
        ?>
            <div class="calender_booking_details">
                <label style="font-size:15px;"><?php if(!empty($customer_details)){ echo $customer_details->full_name.' Payments'; } ?></label>
            </div>
            <div class="calender_booking_details">
                <table style="width:100%;" id="payments_table_<?=$customer;?>">
                    <thead>
                        <tr>
                            <th>Sr. No.</th>
                            <!-- <th>Opening Pending Amount</th> -->
                            <th>Paid Amount</th>
                            <!-- <th>Closing Pending Amount</th> -->
                            <th>Payment Date</th>
                            <th>Payment Mode</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php 
                            $i = 1;
                            foreach($payments as $payments_result){ 
                        ?>
                        <tr>
                            <td><?=$i++;?></td>
                            <!-- <td><?=$payments_result->opening_pending_amount;?></td> -->
                            <td><?=$payments_result->paid_amount;?></td>
                            <!-- <td><?=$payments_result->closing_pending_amount;?></td> -->
                            <td><?=date('d-m-Y',strtotime($payments_result->payment_date));?></td>
                            <td><?=$payments_result->payment_mode;?></td>
                        </tr>
                        <?php } ?>
                    </tbody>
                </table>
            </div>
            <script>                
                $('#payments_table_<?=$customer;?>').DataTable({ 
                    dom: 'Bfrtip',
                    responsive: true,
                    scrollX: false,
                    lengthMenu: [ [10, 25, 50,], [10, 25, 50] ],                    
                    buttons: [                            
                        {
                            extend: 'excel',
                            filename: 'course-list',
                            exportOptions: {
                                columns: [0,1,2,3] 
                            }
                        }                            
                    ], 
                });
            </script>
        <?php }else{ ?>
            <div>
                <label class="error">Payments not found</label>
            </div>
        <?php } 
    }
    
    
    public function add_customer_payment_ajx(){
        $customer = $this->input->post('customer');

        $this->db->where('tbl_salon_customer.id',$customer);
        $customer_details = $this->db->get('tbl_salon_customer')->row();

        if(!empty($customer_details)){
        ?>
            <div class="calender_booking_details">
                <label style="font-size:15px;"><?php if(!empty($customer_details)){ echo 'Payment for '. $customer_details->full_name; } ?></label>
            </div>
            <div class="calender_booking_details">                
                <form method="post" name="payment_form_<?=$customer_details->id;?>" id="payment_form_<?=$customer_details->id;?>" action="<?=base_url();?>add-customer-payment/<?=base64_encode($customer_details->id);?>">
                    <div class="row">
                        <div class="form-group col-md-4 col-xs-12">
                            <label>Current Pending Amount<b class="require"></b></label>
                            <input readonly type="text" class="form-control" id="pending_amount_<?=$customer_details->id; ?>" name="pending_amount_<?=$customer_details->id; ?>" value="<?=($customer_details->current_pending_amount != "" && $customer_details->current_pending_amount != null && $customer_details->current_pending_amount != "0" && $customer_details->current_pending_amount != "0.0") ? $customer_details->current_pending_amount : '0.00'; ?>">
                        </div>
                        <div class="form-group col-md-4 col-xs-12">
                            <label>Paid Amount<b class="require">*</b></label>
                            <input placeholder="Enter Paid Amount" max="<?=($customer_details->current_pending_amount != "" && $customer_details->current_pending_amount != null && $customer_details->current_pending_amount != "0" && $customer_details->current_pending_amount != "0.0") ? $customer_details->current_pending_amount : '0.00'; ?>" type="number" class="form-control" id="paid_amount_<?=$customer_details->id; ?>" name="paid_amount_<?=$customer_details->id; ?>" value="" onkeyup="calculatePendingAmount(<?=$customer_details->id; ?>)">
                        </div>
                        <div class="form-group col-md-4 col-xs-12">
                            <label>New Pending Amount<b class="require"></b></label>
                            <input readonly type="text" class="form-control" id="new_pending_amount_<?=$customer_details->id; ?>" name="new_pending_amount_<?=$customer_details->id; ?>" value="">
                        </div>
                    </div>    
                    <input type="hidden" id="total_bill_amount_<?=$customer_details->id; ?>" name="total_bill_amount_<?=$customer_details->id; ?>" value="<?=$customer_details->total_bill_amount; ?>">
                    <input type="hidden" id="total_paid_amount_<?=$customer_details->id; ?>" name="total_paid_amount_<?=$customer_details->id; ?>" value="<?=$customer_details->total_paid_amount; ?>">               
                    <div class="row">
                        <div class="form-group col-md-4 col-xs-12">
                            <label>Payment Mode<b class="require">*</b></label>
                            <select class="form-control form-select" onchange="setTransactionID('<?=$customer_details->id;?>')" name="payment_mode_<?=$customer_details->id;?>" id="payment_mode_<?=$customer_details->id;?>">
                                <option value="">Select Payment Mode</option>
                                <option value="UPI">UPI</option>
                                <option value="Cash">Cash</option>
                                <!-- <option value="Cheque">Cheque</option> -->
                                <option value="Online">Online</option>
                            </select>
                        </div>
                        <div class="form-group col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <label>Transaction ID</label>
                            <input readonly type="text" placeholder="Enter Transaction ID" class="form-control" name="transaction_id_<?=$customer_details->id;?>" id="transaction_id_<?=$customer_details->id;?>" value="">
                        </div>
                        <div class="form-group col-md-4 col-xs-12">
                            <label>Payment Date<b class="require">*</b></label>
                            <input readonly type="date" class="form-control" name="payment_date_<?=$customer_details->id;?>" id="payment_date_<?=$customer_details->id;?>" value="<?php echo date("Y-m-d"); ?>">
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-8 col-xs-12">
                            <label>Remark <b class="require">*</b></label>
                            <textarea class="form-control" placeholder="Enter Remark" name="remark_<?=$customer_details->id;?>" id="remark_<?=$customer_details->id;?>"></textarea>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <button type="submit" class="btn btn-primary" id="payment_btn" value="payment_btn">Submit</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <script> 
                function setTransactionID(id){
                    payment_mode = $('#payment_mode_'+id).val();
                    if(payment_mode == 'Cash'){
                        $('#transaction_id_'+id).attr('readonly', true);
                    }else{
                        $('#transaction_id_'+id).attr('readonly', false);
                    }
                }   
                $("#payment_date_<?=$customer_details->id;?>").datepicker({
                    dateFormat: 'dd-mm-yy',
                    maxDate: '<?php echo date('Y-d-m'); ?>',
                });    
                $('#payment_form_<?=$customer_details->id;?>').validate({
                    ignore:[],
                    rules: {
                        'payment_date_<?=$customer_details->id;?>': {
                            required: true,
                        },
                        'payment_mode_<?=$customer_details->id;?>': {
                            required: true,
                        },
                        'paid_amount_<?=$customer_details->id;?>': {
                            required: true,
                            number: true,
                            min: 1,
                        },
                        'remark_<?=$customer_details->id;?>': {
                            required: true,
                        },
                    },
                    messages: {
                        'payment_date_<?=$customer_details->id;?>': {
                            required: "Please select payment date!",
                        },
                        'payment_mode_<?=$customer_details->id;?>': {
                            required: "Please select payment mode!",
                        },
                        'paid_amount_<?=$customer_details->id;?>': {
                            required: "Please enter payment amount!",
                            number: "Please enter number only!",
                            min: "Minimum amount 1 is allowed!",
                        },
                        'remark_<?=$customer_details->id;?>': {
                            required: "Please enter remark!",
                        },
                    },
                    submitHandler: function(form) {
                        if(confirm("Are you sure to add payment?")) {
                        // openConfirmationDialog("Are you sure to add payment?", function (confirmed) {
                        // if (confirmed) {
                            form.submit();
                        } else {
                            return false;
                        }
                        // });
                    }
                });
            </script>
        <?php }else{ ?>
            <div>
                <label class="error">Payments not found</label>
            </div>
        <?php } 
    }
    
    public function get_booking_service_details($id){
		$from_date = $this->input->post('from_date');
		$to_date = $this->input->post('to_date');
		$customer = $this->input->post('customer');
		$filter_id = $this->input->post('id');
		$service = $this->input->post('service');
		$stylist = $this->input->post('stylist');
		$status = $this->input->post('status');
		$is_app = $this->input->post('is_app');
		$counter_bookings = $this->input->post('counter_bookings');
		$guest_bookings = $this->input->post('guest_bookings');

        $this->db->select('tbl_booking_services_details.*,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_sub_category.sub_category_marathi,tbl_new_booking.amount_to_paid,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
        $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
        $this->db->where('tbl_booking_services_details.is_deleted','0');        
		
		if($filter_id != "" && $filter_id != '0'){
			$this->db->where('tbl_booking_services_details.booking_id',$filter_id);
		}else{
            $this->db->where('tbl_booking_services_details.booking_id',$id);
        }
		if($is_app != "" && $is_app == 'on'){
			$this->db->where('tbl_new_booking.booking_generated_from','1');
		}
		if($counter_bookings != "" && $counter_bookings == 'on'){
			$this->db->where('tbl_new_booking.is_direct_billing','1');
		}
		if($guest_bookings != "" && $guest_bookings == 'on'){
			$this->db->where('tbl_new_booking.is_guest_booking','1');
		}
		if($customer != "" && $customer != '0'){
			$this->db->where('tbl_new_booking.customer_name',$customer);
		}
		if($from_date != "" && $from_date != '0'){
			$this->db->where('DATE(tbl_booking_services_details.service_date) >=',date('Y-m-d',strtotime($from_date)));
		}
		if($to_date != "" && $to_date != '0'){
			$this->db->where('DATE(tbl_booking_services_details.service_date) <=',date('Y-m-d',strtotime($to_date)));
		}
		if($service != "" && $service != '0'){
			$this->db->where('tbl_booking_services_details.service_id',$service);
		}
		if($stylist != "" && $stylist != '0'){
			$this->db->where('tbl_booking_services_details.stylist_id',$stylist);
		}
		if($status != ""){
			$this->db->where('tbl_booking_services_details.service_status',$status);
            if($status == "0"){
			    $this->db->where_in('tbl_new_booking.booking_status',['1','3','4']);
            }elseif($status == "1"){
			    $this->db->where_in('tbl_new_booking.booking_status',['5']);
            }elseif($status == "2"){
			    $this->db->where_in('tbl_new_booking.booking_status',['2']);
            }
		}

        $result = $this->db->get('tbl_booking_services_details')->result();
        return $result;
    }
    public function get_booking_details_single($id){
        $this->db->where('tbl_new_booking.id',$id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $result = $this->db->get('tbl_new_booking')->row();
        return $result;
    }
    public function get_booking_service_details_single($id){
        $this->db->select('tbl_booking_services_details.*,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_sub_category.sub_category_marathi,tbl_new_booking.amount_to_paid,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
        $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
        $this->db->where('tbl_booking_services_details.id',$id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $result = $this->db->get('tbl_booking_services_details')->row();
        return $result;
    }
    
    public function get_product_booking_details($id){
        $this->db->select('tbl_only_product_booking_details.*,tbl_new_booking.amount_to_paid,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_product_category.product_category, tbl_product_category.product_category_marathi,tbl_product.product_name');
        $this->db->join('tbl_product','tbl_product.id = tbl_only_product_booking_details.product_id');
        $this->db->join('tbl_product_category','tbl_product_category.id = tbl_only_product_booking_details.category_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_only_product_booking_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
        $this->db->where('tbl_only_product_booking_details.booking_id',$id);
        $this->db->where('tbl_only_product_booking_details.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','1');
        $result = $this->db->get('tbl_only_product_booking_details')->result();
        return $result;
    }
    
    public function show_service_reschedule_popup_ajx(){
        $booking_rules = $this->get_booking_rules();
        if(!empty($booking_rules)){
            $days_early_booking = $booking_rules->max_booking_range_day;
            if($days_early_booking != ""){
                $max_date = date('d-m-Y', strtotime('+'.$days_early_booking.' day'));
            }else{
                $max_date = date('d-m-Y', strtotime('+0 day'));
            }
        }else{
            $max_date = date('d-m-Y', strtotime('+0 day'));
        }
        $today = date('d-m-Y');

        $booking_service_details_id = $this->input->post('booking_service_details_id');

        $this->db->select('tbl_booking_services_details.*,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_salon_emp_service.service_duration');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->where('tbl_booking_services_details.id',$booking_service_details_id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $bookings = $this->db->get('tbl_booking_services_details')->row();

        if(!empty($bookings)){ 
            $products = explode(',',$bookings->product_ids);
            $product_details_str = '';
            if (empty($products)) {
                $product_details_str = '-';
            } else {
                for ($k = 0; $k < count($products); $k++) {
                    $product_details = $this->get_product_details($products[$k]);
                    if (!empty($product_details)) {
                        $product_details_str .= $product_details->product_name;
                        if ($k < count($products) - 1) {
                            $product_details_str .= ', ';
                        }
                    }
                }
            }
        ?>
            <div class="calender_booking_details">
                <table style="width:100%;" border="1">
                    <thead>
                        <tr>
                            <th>Customer:</th>
                            <td><?=$bookings->customer_name;?>, <?=$bookings->customer_phone;?></td>
                        </tr>
                        <tr>
                            <th>Service:</th>
                            <td><?=$bookings->service_name;?> | <?=$bookings->service_name_marathi;?> <?php if($bookings->service_added_from == '1') { ?><small>(Package Service)</small><?php } ?></td>
                        </tr>
                        <?php if($product_details_str != ""){ ?>
                        <tr>
                            <th>Products:</th>
                            <td><?=$product_details_str; ?></td>
                        </tr>
                        <?php } ?>
                        <tr>
                            <th>Scheduled On:</th>
                            <td><?=date('d-m-Y',strtotime($bookings->service_date));?>, <?=date('h:i A',strtotime($bookings->service_from));?> to <?=date('h:i A',strtotime($bookings->service_to));?></td>
                        </tr>
                        <tr>
                            <th>Stylist:</th>
                            <td><?=$bookings->stylist_name;?></td>
                        </tr>
                    </thead>
                </table>
                <!-- <form method="post" name="reschedule_form_<?=$bookings->id;?>" id="reschedule_form_<?=$bookings->id;?>" action="<?=base_url();?>reschedule_service/<?=base64_encode($bookings->id);?>">
                    <input type="hidden" name="service_id_<?=$bookings->id;?>" id="service_id_<?=$bookings->id;?>" value="<?=$bookings->service_id;?>">    
                    <input type="hidden" name="service_details_id_<?=$bookings->id;?>" id="service_details_id_<?=$bookings->id;?>" value="<?=$bookings->id;?>">    
                    <input type="hidden" name="service_duration_<?=$bookings->id;?>" id="service_duration_<?=$bookings->id;?>" value="<?=$bookings->service_duration;?>">    
                    <input type="hidden" name="service_stylist_timeslot_hidden_<?=$bookings->id;?>" id="service_stylist_timeslot_hidden_<?=$bookings->id;?>" value="">    
                    <div class="row">                
                        <div class="col-lg-3 form-group">
                            <label for="service_date">Select Date*</label>
                            <input type="text" class="form-control" name="service_date_<?=$bookings->id;?>" id="service_date_<?=$bookings->id;?>" onchange="fetchTimeSlotsReschedule(<?=$bookings->id;?>)" value="<?=date('d-m-Y', strtotime($bookings->service_date));?>">
                        </div>
                        <div class="col-lg-3 form-group">
                            <label for="service_date">Service Start*</label>
                            <input readonly type="text" class="form-control" name="service_start_<?=$bookings->id;?>" id="service_start_<?=$bookings->id;?>" placeholder="Service Start Time" value="<?=date('h:i A', strtotime($bookings->service_from));?>">
                        </div> 
                        <div class="col-lg-6 form-group" style="display:none;" id="service_executive_div_<?=$bookings->id;?>">
                            <label for="service_executive">Select Stylist*</label>
                            <select class="form-control" name="service_executive_<?=$bookings->id;?>" id="service_executive_<?=$bookings->id;?>"></select>
                            <label for="service_executive_<?=$bookings->id;?>" style="display:none;" generated="true" class="error">Please select stylist!</label>
                        </div>            
                        <div class="col-lg-12 form-group">
                            <label for="service_date">Select Time Slot*</label>
                            <div id="booking_timeslots_<?=$bookings->id;?>"></div>
                        </div>          
                        <div class="col-lg-12 form-group">
                            <button type="submit" class="btn btn-primary" id="submit_reschedule">Submit</button>
                        </div>
                    </div>
                </form> -->
                <input type="hidden" name="service_id_<?=$bookings->id;?>" id="service_id_<?=$bookings->id;?>" value="<?=$bookings->service_id;?>">    
                <input type="hidden" name="service_details_id_<?=$bookings->id;?>" id="service_details_id_<?=$bookings->id;?>" value="<?=$bookings->id;?>">    
                <input type="hidden" name="service_duration_<?=$bookings->id;?>" id="service_duration_<?=$bookings->id;?>" value="<?=$bookings->service_duration;?>">    
                <input type="hidden" name="service_stylist_timeslot_hidden_<?=$bookings->id;?>" id="service_stylist_timeslot_hidden_<?=$bookings->id;?>" value="">    
                <input type="hidden" name="previous_stylist_<?=$bookings->id;?>" id="previous_stylist_<?=$bookings->id;?>" value="">    
                <div class="row" id="reschedule_btn_div" style="margin-top:20px;">                
                    <div class="col-lg-3 form-group">
                        <label for="service_date">Select Date*</label>
                        <input style="margin-left:0px !important;" type="text" class="form-control" name="service_date_<?=$bookings->id;?>" id="service_date_<?=$bookings->id;?>" onchange="fetchTimeSlotsReschedule(<?=$bookings->id;?>)" value="<?=date('d-m-Y', strtotime($bookings->service_date));?>">
                        <label for="service_date_<?=$bookings->id;?>" id="service_date_error_<?=$bookings->id;?>" style="display:none;" generated="true" class="error">Please select date!</label>
                    </div>
                    <div class="col-lg-3 form-group">
                        <label for="service_date">Service Start*</label>
                        <input style="margin-left:0px !important;" readonly type="text" class="form-control" name="service_start_<?=$bookings->id;?>" id="service_start_<?=$bookings->id;?>" placeholder="Service Start Time" value="<?=date('h:i A', strtotime($bookings->service_from));?>">
                    </div> 
                    <div class="col-lg-6 form-group" style="display:none;" id="service_executive_div_<?=$bookings->id;?>">
                        <label for="service_executive">Select Stylist*</label>
                        <select class="form-control" name="service_executive_<?=$bookings->id;?>" id="service_executive_<?=$bookings->id;?>"></select>
                        <label for="service_executive_<?=$bookings->id;?>" id="service_executive_error_<?=$bookings->id;?>" style="display:none;" generated="true" class="error">Please select stylist!</label>
                    </div>            
                    <div class="col-lg-12 form-group">
                        <label for="service_date">Select Time Slot*</label>
                        <div id="booking_timeslots_<?=$bookings->id;?>"></div>
                    </div>          
                    <div class="col-lg-12 form-group">
                        <button type="button" class="btn btn-primary" id="submit_reschedule" onclick="rescheduleService(<?=$bookings->id;?>)">Submit</button>
                    </div>
                </div>
            </div>
            <script>
            let user_selected_reschedule_service = [$('#service_id_<?=$bookings->id;?>').val()];
            $(document).ready(function () {   
                fetchTimeSlotsReschedule(<?=$bookings->id;?>);     
                $('#reschedule_form_<?=$bookings->id;?>').validate({
                    ignore : [],
                    rules: {
                        service_executive_<?=$bookings->id;?>: {
                            required: true,
                        },
                        service_date_<?=$bookings->id;?>: {
                            required: true,
                        },
                    },
                    messages: {
                        service_executive_<?=$bookings->id;?>: {
                            required:'Please select stylist!',
                        },
                        service_date_<?=$bookings->id;?>: {
                            required: "Please select date!",
                        },
                    },
                    submitHandler: function(form) {
                        if(confirm("Are you sure to reschedule service?")) {
                        // openConfirmationDialog("Are you sure to reschedule service?", function (confirmed) {
                        // if (confirmed) {
                            form.submit();
                        } else {
                            return false;
                        }
                        // });
                    }
                });
                $("#service_date_<?=$bookings->id;?>").datepicker({
                    dateFormat: 'dd-mm-yy',
                    maxDate: '<?php echo $max_date; ?>',
                    minDate: '<?php echo $today; ?>',
                });
            });              
            function formatToOnlyDate_PHPFormatResc(date) {
                var year = date.getFullYear();
                var month = ('0' + (date.getMonth() + 1)).slice(-2); // Adding leading zero if necessary
                var day = ('0' + date.getDate()).slice(-2); // Adding leading zero if necessary
                return year + '-' + month + '-' + day;
            }                               
            function convertTo24HourFormatResc(time) {
                var hours = parseInt(time.split(':')[0]);
                var minutes = parseInt(time.split(':')[1].split(' ')[0]);
                var ampm = time.split(' ')[1];

                if (ampm === 'PM' && hours < 12) {
                    hours += 12;
                }
                if (ampm === 'AM' && hours === 12) {
                    hours = 0;
                }

                var formattedTime = ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2) + ':00';
                return formattedTime;
            }
            function fetchTimeSlotsReschedule(booking_details_id){
                var booking_date = $('#service_date_' + booking_details_id).val();
                var booking_start = $('#service_start_' + booking_details_id).val();
                if(booking_date != ""){
                    $('#booking_timeslots_' + booking_details_id).html('');
                    $.ajax({
                        type: "POST",
                        url: "<?=base_url();?>salon/Ajax_controller/get_day_timeslots_reschedule_ajx",
                        data:{
                            'booking_details_id':booking_details_id,
                            'booking_date':booking_date,
                            'booking_start':booking_start,
                            'user_selected_service': user_selected_reschedule_service
                        },
                        success: function(data){
                            $('#booking_timeslots_' + booking_details_id).show();
                            $('#booking_timeslots_' + booking_details_id).html(data);

                            if(booking_start != ""){
                                setServiceTimeSlotsReschedule(booking_details_id);
                            }
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            console.log(textStatus, errorThrown);
                        }
                    }); 
                }
            }
            function setBookingStartReschedule(booking_details_id,value){
                if(value == ""){
                    var selectedValue = $('input[name="booking_start_time_slot_' + booking_details_id + ']:checked').val();
                }else{
                    var selectedValue = value;
                }
                if (selectedValue != "") {
                    // $('#booking_timeslots').hide();
                    $('#service_start_' + booking_details_id).val(selectedValue);
                    $('.loader_div').show();
                    fetchTimeSlotsReschedule(booking_details_id);
                    $('.loader_div').hide();
                }
            }
            function setServiceTimeSlotsReschedule(booking_details_id){
                $('#service_executive_error_' + booking_details_id).hide();
                $('#service_executive_error_' + booking_details_id).text('');
                $('#service_date_error_' + booking_details_id).hide();
                $('#service_date_error_' + booking_details_id).text('');
                for(var i=0;i<user_selected_reschedule_service.length;i++){
                    var singleService = user_selected_reschedule_service[i];            
                    var service_duration = $('#service_duration_' + booking_details_id).val();

                    var booking_date = $('#service_date_' + booking_details_id).val();

                    if(booking_date != "" && $('#service_start_' + booking_details_id).val() != ""){
                        var booking_start = $('#service_start_' + booking_details_id).val();
                        var dateParts = booking_date.split("-");
                        var day = parseInt(dateParts[0], 10);
                        var month = parseInt(dateParts[1], 10);
                        var year = parseInt(dateParts[2], 10);

                        booking_start = convertTo24HourFormatResc(booking_start)

                        var timeParts = booking_start.split(":");
                        var hours = parseInt(timeParts[0], 10);
                        var minutes = parseInt(timeParts[1], 10);

                        if (booking_start.includes("PM") && hours !== 12) {
                            hours += 12;
                        } else if (booking_start.includes("AM") && hours === 12) {
                            hours = 0;
                        }
                        
                        selected_slot_start = new Date(year, month - 1, day, hours, minutes, 0);
                        var selected_slot_end = new Date(selected_slot_start.getTime() + (service_duration * 60000));

                        var formatted_slot_start_time = formatTime(selected_slot_start);
                        var formatted_slot_end_time = formatTime(selected_slot_end);

                        var formatted_slot_start_time_24hr = convertTo24HourFormatResc(formatted_slot_start_time);
                        var formatted_slot_end_time_24hr = convertTo24HourFormatResc(formatted_slot_end_time);
                        var formatted_booking_date_PHP = formatToOnlyDate_PHPFormatResc(selected_slot_start);
                        var timeslot_string = formatted_booking_date_PHP + ' ' + formatted_slot_start_time_24hr + '@@@' + formatted_booking_date_PHP + ' ' + formatted_slot_end_time_24hr;

                        $('#service_stylist_timeslot_hidden_'+ booking_details_id +'').val(timeslot_string);

                        getTimeStylistResc(booking_details_id,booking_date,selected_slot_start,selected_slot_end,singleService,service_duration);
                    }
                }
            }
            function formatTime(time) {
                var hours = time.getHours();
                var minutes = time.getMinutes();
                var ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12;
                hours = hours ? hours : 12; // the hour '0' should be '12'
                minutes = minutes < 10 ? '0' + minutes : minutes;

                return hours + ':' + minutes + ' ' + ampm;
            }            
                
            function formatDate(date) {
                var year = date.getFullYear();
                var month = ('0' + (date.getMonth() + 1)).slice(-2);
                var day = ('0' + date.getDate()).slice(-2);
                var hours = ('0' + date.getHours()).slice(-2);
                var minutes = ('0' + date.getMinutes()).slice(-2);
                var seconds = ('0' + date.getSeconds()).slice(-2);

                return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
            } 
            
            function getTimeStylistResc(booking_details_id,booking_date,selected_slot_start,selected_slot_end,serviceID,service_duration){
                var formatted_start = formatDate(selected_slot_start);
                var formatted_end = formatDate(selected_slot_end);
                if (formatted_start !== "" && typeof formatted_start !== "undefined" && formatted_end !== "" && typeof formatted_end !== "undefined") {
                    selectedTimeSlot = formatted_start + '@@@' + formatted_end;

                    $("#service_executive_div_"+booking_details_id).hide();
                    $("#service_executive_"+booking_details_id).html("");
                    var previous_stylist = $('#previous_stylist_'+booking_details_id).val();
                    $.ajax({
                        type: "POST",
                        url: "<?= base_url(); ?>salon/Ajax_controller/get_available_stylists_servicewise_ajx",
                        data: { 'service':serviceID,'selectedTimeSlot': selectedTimeSlot, 'previous_stylist' : previous_stylist },
                        success: function(data) {
                            $("#service_executive_"+booking_details_id).chosen();
                            $("#service_executive_"+booking_details_id).val('');
                            var stylists = $.parseJSON(data);
                            if(stylists.length > 0){
                                $("#service_executive_"+booking_details_id).empty();
                                $("#service_executive_"+booking_details_id).append('<option value="">Select Executive</option>');
                                var opts = $.parseJSON(data);
                                var count = 1;
                                console.log(opts)
                                $.each(opts, function(i, d) {
                                    store_flag = d.store_flag;
                                    is_service_available = d.is_service_available;
                                    is_shift_available = d.is_shift_available;
                                    is_booking_present = d.is_booking_present;
                                    is_on_break = d.is_on_break;
                                    short_break_flag = d.short_break_flag;
                                    is_on_leave_flag = d.is_on_leave_flag;
                                    is_emergency_flag = d.is_emergency_flag;

                                    if(is_service_available == '1'){
                                        if(store_flag == '1'){
                                            if(is_emergency_flag == '0'){
                                                if(is_on_leave_flag == '0'){
                                                    if(is_shift_available == '1'){
                                                        if(is_booking_present == '0'){
                                                            if(is_on_break == '0'){
                                                                if(short_break_flag == '1'){
                                                                    var message = '';
                                                                    var disabled = '';
                                                                    var is_Allowed = 1;
                                                                }else{
                                                                    var message = '- Stylist On Short Break';
                                                                    var disabled = 'disabled';
                                                                    var is_Allowed = 0;
                                                                }
                                                            }else{
                                                                var message = '- Stylist On Break';
                                                                var disabled = 'disabled';
                                                                var is_Allowed = 0;
                                                            }
                                                        }else{
                                                            var message = '- Slot Already Booked';
                                                            var disabled = 'disabled';
                                                            var is_Allowed = 0;
                                                        }
                                                    }else{
                                                        var message = '- Shift Not Available';
                                                        var disabled = 'disabled';
                                                        var is_Allowed = 0;
                                                    }
                                                }else{
                                                    var message = '- On Leave';
                                                    var disabled = 'disabled';
                                                    var is_Allowed = 0;
                                                }
                                            }else{
                                                var message = '- Store Emergency Closed';
                                                var disabled = 'disabled';
                                                var is_Allowed = 0;
                                            }
                                        }else{
                                            var message = '- Exceed Salon Times';
                                            var disabled = 'disabled';
                                            var is_Allowed = 0;
                                        }
                                        
                                        var selected = '';
                                        if(d.to_be_selected == '1'){
                                            selected = 'selected';
                                            $('#previous_stylist_'+booking_details_id).val(d.stylist_details.id);
                                        }

                                        $("#service_executive_"+booking_details_id).append('<option ' + disabled + ' ' + selected + ' value="' + d.stylist_details.id + '">' + d.stylist_details.full_name + ' ' + message + '</option>');
                                    }else{
                                        var disabled = 'disabled';
                                        var message = '- Stylist Not Available';
                                    }
                                });
                                $("#service_executive_"+booking_details_id).trigger('chosen:updated');
                                $("#service_executive_div_"+booking_details_id).show();
                            }else{
                                $("#service_executive_"+booking_details_id+"_chosen").hide();
                                $("#service_executive_"+booking_details_id).hide();
                                $("#service_executive_div_"+booking_details_id).append('<label style="font-size:10px;" class="error">Please, first set Stylist designation employees.</label>');
                                $("#service_executive_div_"+booking_details_id).show();
                            }
                        },
                    });
                }
            }
            </script>
        <?php 
        }else{ 
        ?>
            <div>
                <label class="error">Booking details not found</label>
            </div>
        <?php 
        }
    }
    
    
    public function show_service_complete_popup_ajx(){
        $booking_service_details_id = $this->input->post('booking_service_details_id');
        $booking_id = $this->input->post('booking_id');

        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $bookings = $this->db->get('tbl_new_booking')->row();

        $this->db->select('tbl_booking_services_details.*,tbl_new_booking.amount_to_paid,tbl_new_booking.payment_status,tbl_new_booking.payment_date,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_salon_emp_service.service_duration');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->where('tbl_booking_services_details.booking_id',$booking_id);
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where('tbl_booking_services_details.service_status','0');
        $booking_services = $this->db->get('tbl_booking_services_details')->result();

        if(!empty($bookings)){
            $description = '';
            if(!empty($booking_services)){
                $service_details_ids = array();
                if(!empty($booking_services)){
                    foreach($booking_services as $data){
                        $description .= ''.$data->service_name.'|'.$data->service_name_marathi.': '.$data->stylist_name.'<br>';
                        $service_details_ids[] = $data->id;
                    }
                }
            }
        ?>
            <div class="calender_booking_details">
                <table style="width:100%;" border="1">
                    <thead>
                        <tr>
                            <th>Customer:</th>
                            <td><?=$bookings->customer_name;?>, <?=$bookings->customer_phone;?></td>
                        </tr>
                        <tr>
                            <th>Services:</th>
                            <td><?=$description?></td>
                        </tr>
                        <tr>
                            <th>Date:</th>
                            <td><?=date('d-m-Y',strtotime($bookings->service_start_date));?></td>
                        </tr>
                        <tr>
                            <th>Duration:</th>
                            <td><?=date('h:i A',strtotime($bookings->service_start_time));?> to <?=date('h:i A',strtotime($bookings->service_end_time));?></td>
                        </tr>
                    </thead>
                </table>
                <!-- <form method="post" name="payment_form_<?=$bookings->id;?>" id="payment_form_<?=$bookings->id;?>" action="<?=base_url();?>complete_booking_service/<?=base64_encode($bookings->id);?>">
                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-primary" id="payment_btn" value="payment_btn">Complete Service</button>
                        </div>
                    </div>
                </form> -->
                <div class="col-lg-12 col-md-12 col-xs-12" style="margin-top:20px;margin-left:-10px;">
                    <div class="form-group" id="payment_btn_div">
                        <button type="button" class="btn btn-primary" id="payment_btn" value="payment_btn" onclick="completeService(<?=$bookings->id;?>)">Complete Booking</button>
                    </div>
                </div>
            </div>
            <script>
            $(document).ready(function () {        
                $('#payment_form_<?=$bookings->id;?>').validate({
                    rules: {},
                    messages: {},
                    submitHandler: function(form) {
                        if(confirm("Are you sure to complete service?")) {
                        // openConfirmationDialog("Are you sure to complete service?", function (confirmed) {
                        // if (confirmed) {
                            form.submit();
                        } else {
                            return false;
                        }
                        // });
                    }
                });
            });
            </script>
        <?php 
        }else{ 
        ?>
            <div>
                <label class="error">Booking details not found</label>
            </div>
        <?php 
        }
    }
    
    public function add_extra_service($booking_details_id){
        // echo '<pre>'; print_r($_POST); exit();
        $this->db->where('id',$booking_details_id);
        $single_details = $this->db->get('tbl_booking_services_details')->row();
        if(!empty($single_details)){
            $this->db->where('id',$single_details->booking_id);
            $this->db->where('booking_type','0');
            $single = $this->db->get('tbl_new_booking')->row();
            if(!empty($single)){
                $customer_id = $single->customer_name;   
        
                $products = array();
                $services = explode(',',$this->input->post('selected_add_service_' . $booking_details_id));
                if($services != "" && is_array($services) && !empty($services)){
                    for($i=0;$i<count($services);$i++){
                        $single_array = $this->input->post('add_service_product_checkbox_' . $booking_details_id . '_' . $services[$i]);
                        if ($single_array != "" && $single_array != null && is_array($single_array) && !empty($single_array)) {
                            $products = array_merge($products,$single_array);
                        }
                    }
                }
            
                $total_service_amount = $this->input->post('total_add_service_price_' . $booking_details_id);
                $total_product_amount = $this->input->post('total_add_service_product_price_' . $booking_details_id);
                $service_payable_amount = $this->input->post('add_service_payable_hidden_' . $booking_details_id);
                $product_payable_amount = $this->input->post('add_service_product_payable_hidden_' . $booking_details_id);
                $payable_amount = $this->input->post('add_service_final_payable_hidden_' . $booking_details_id);
                
                $is_membership = $this->input->post('add_service_is_membership_' . $booking_details_id);
                $membership_id = $this->input->post('add_service_membership_id_' . $booking_details_id);
                $membership_discount_type = $this->input->post('add_service_membership_discount_type_' . $booking_details_id);
                $membership_service_discount = $this->input->post('add_service_membership_service_discount_' . $booking_details_id);
                $membership_product_discount = $this->input->post('add_service_membership_product_discount_' . $booking_details_id);
                $membership_service_discount_amount = $this->input->post('add_service_membership_service_discount_amount_' . $booking_details_id);
                $membership_product_discount_amount = $this->input->post('add_service_membership_product_discount_amount_' . $booking_details_id);
                
                $total_discount_amount = $this->input->post('add_service_total_discount_amount_' . $booking_details_id);
                
                $pre_services = explode(',',$single->services);
                $pre_products = explode(',',$single->products);

                if ($pre_services != "" && $pre_services != null && is_array($pre_services) && !empty($pre_services)) {
                    if ($services != "" && $services != null && is_array($services) && !empty($services)) {
                        $new_services = array_merge($services,$pre_services);
                    }else{
                        $new_services = $pre_services;
                    }
                }else{
                    if ($services != "" && $services != null && is_array($services) && !empty($services)) {
                        $new_services = $services;
                    }else{
                        $new_services = array();
                    }
                }

                if ($pre_products != "" && $pre_products != null && is_array($pre_products) && !empty($pre_products)) {
                    if ($products != "" && $products != null && is_array($products) && !empty($products)) {
                        $new_products = array_merge($products,$pre_products);
                    }else{
                        $new_products = $pre_products;
                    }
                }else{
                    if ($products != "" && $products != null && is_array($products) && !empty($products)) {
                        $new_products = $products;
                    }else{
                        $new_products = array();
                    }
                }                         
                
                $extra_booking_data = array(
                    'booking_id' 		                => $single->id,
                    'branch_id' 			            => $this->session->userdata('branch_id'),
                    'salon_id' 				            => $this->session->userdata('salon_id'),
                    'customer_name' 		            => $customer_id,
                    'added_against_service_details_id' 	=> $booking_details_id,
                    'services' 		                    => !empty($services) ? implode(',',$services) : '',
                    'products' 		                    => !empty($products) ? implode(',',$products) : '',   
                    'extra_services_total_amount' 		=> $total_service_amount,
                    'extra_products_total_amount' 		=> $total_product_amount, 
                    'extra_services_payable_amount' 	=> $service_payable_amount,
                    'extra_products_payable_amount' 	=> $product_payable_amount, 
                    'extra_service_payable_final_amount'=> $payable_amount,                       
                    'is_membership' 		            => $is_membership,
                    'membership_id' 		            => $membership_id, 
                    'membership_discount_type' 	        => $membership_discount_type,
                    'membership_service_discount' 	    => $membership_service_discount, 
                    'membership_product_discount'       => $membership_product_discount, 
                    'membership_service_discount_amount'=> $membership_service_discount_amount, 
                    'membership_product_discount_amount'=> $membership_product_discount_amount, 
                    'total_discount_amount'             => $total_discount_amount, 
                    'added_on'                          => date("Y-m-d"),
                );
                // echo '<pre>'; print_r($_POST); exit;
                $this->db->insert('tbl_booking_extra_services', $extra_booking_data);
                $extra_booking_id = $this->db->insert_id();

                $pre_extra_booking_id = explode(',',$single->extra_booking_ids);
                $pre_extra_booking_id[] = $extra_booking_id;
                $new_extra_booking_ids = implode(',',$pre_extra_booking_id);

                $booking_data = array(
                    'services' 		        => !empty($new_services) ? implode(',',$new_services) : '',
                    'products' 		        => !empty($new_products) ? implode(',',$new_products) : '',
                    'extra_services' 		=> !empty($services) ? implode(',',$services) : '',
                    'extra_products' 		=> !empty($products) ? implode(',',$products) : '',                       
                    'extra_booking_ids'     => $new_extra_booking_ids,        
                );
                // echo '<pre>'; print_r($_POST); exit();
                $this->db->where('id', $single->id);
                $this->db->update('tbl_new_booking', $booking_data);
                $booking_id = $single->id; 

                if($services != "" && is_array($services) && !empty($services)){
                    for($i=0;$i<count($services);$i++){
                        $products_single = $this->input->post('add_service_product_checkbox_' . $booking_details_id . '_' . $services[$i]);
                        $service_price = $this->input->post('service_price_' . $booking_details_id . '_' . $services[$i]); 
                        $original_service_price = $this->input->post('service_original_price_' . $booking_details_id . '_' . $services[$i]); 

                        $is_offer_applied = $this->input->post('is_offer_applied_' . $booking_details_id . '_' . $services[$i]);    
                        $applied_offer_id = $this->input->post('applied_offer_id_' . $booking_details_id . '_' . $services[$i]);    
                        $service_offer_discount = $this->input->post('service_offer_discount_' . $booking_details_id . '_' . $services[$i]);    
                        $service_offer_discount_type = $this->input->post('service_offer_discount_type_' . $booking_details_id . '_' . $services[$i]);    
                        $service_offer_discount_amount = $this->input->post('service_offer_discount_amount_' . $booking_details_id . '_' . $services[$i]);                                                

                        // service regular discount related start
                        $service_discount_in = $this->input->post('service_discount_in_' . $booking_details_id . '_' . $services[$i]);    
                        $service_discount_type = $this->input->post('service_discount_type_' . $booking_details_id . '_' . $services[$i]);    
                        $service_discount_value = $this->input->post('service_discount_value_' . $booking_details_id . '_' . $services[$i]);    
                        
                        $is_service_discount_applied = $this->input->post('is_service_discount_applied_' . $booking_details_id . '_' . $services[$i]);    
                        $service_discount_rewards_type = $this->input->post('service_discount_rewards_type_' . $booking_details_id . '_' . $services[$i]);    
                        $service_discount_row_id = $this->input->post('service_discount_row_id_' . $booking_details_id . '_' . $services[$i]);    
                        $service_discount_customer_criteria = $this->input->post('service_discount_customer_criteria_' . $booking_details_id . '_' . $services[$i]);    

                        $service_discount_slab_min = $this->input->post('service_discount_slab_min_' . $booking_details_id . '_' . $services[$i]);    
                        $service_discount_slab_max = $this->input->post('service_discount_slab_max_' . $booking_details_id . '_' . $services[$i]);    
                        $service_slab_increment = $this->input->post('service_slab_increment_' . $booking_details_id . '_' . $services[$i]);    
                        $service_applied_flexible_slab = $this->input->post('service_applied_flexible_slab_' . $booking_details_id . '_' . $services[$i]);    
                        $service_received_discount = $this->input->post('service_received_discount_' . $booking_details_id . '_' . $services[$i]);  
                        
                        $service_rewards_discount_slab_min = $this->input->post('service_rewards_discount_slab_min_' . $booking_details_id . '_' . $services[$i]);    
                        $service_rewards_discount_slab_max = $this->input->post('service_rewards_discount_slab_max_' . $booking_details_id . '_' . $services[$i]);    
                        $service_rewards_slab_increment = $this->input->post('service_rewards_slab_increment_' . $booking_details_id . '_' . $services[$i]);    
                        $service_rewards_applied_flexible_slab = $this->input->post('service_rewards_applied_flexible_slab_' . $booking_details_id . '_' . $services[$i]);    
                        $service_rewards_received_discount = $this->input->post('service_rewards_received_discount_' . $booking_details_id . '_' . $services[$i]);  
                        // service regular discount related end

                        $received_total_service = $total_service_amount;
                        if($received_total_service != "" && $received_total_service != "0.00" && $received_total_service != null && $received_total_service != 0){
                            $price_share_in_total_service = (float)(($service_price/$received_total_service) * 100);
                            $discount_share_membership_amount = (float)(($membership_service_discount_amount * $price_share_in_total_service) / 100);
                        }else{
                            $discount_share_membership_amount = 0;
                        }

                        $total_single_service_discount = $discount_share_membership_amount;
                        $single_service_discounted_amount = $service_price - $total_single_service_discount;

                        $service_stylist_id = explode('@@@',$this->input->post('service_stylist_id_' . $booking_details_id . '_' . $services[$i]));
                        $service_Stylist_id = $service_stylist_id[0];
                        $service_Stylist_shift_id = $service_stylist_id[1];
                        $service_Stylist_shift_type = $service_stylist_id[2];
                        $stylist_data = array(
                            'booking_id' 		    => $booking_id,
                            'branch_id' 			=> $this->session->userdata('branch_id'),
                            'salon_id' 				=> $this->session->userdata('salon_id'),
                            'customer_name' 		=> $customer_id,
                            'service_added_from'	=> '0', //single
                            'is_extra_service'	    => '1',
                            'service_id'     		=> $services[$i],
                            'service_price'     	=> $service_price,
                            'original_service_price'=> $original_service_price,
                            'product_ids'     		=> (!empty($products_single)) ? implode(',',$products_single) : null,
                            'service_reward_points' => $this->input->post('service_rewards_' . $booking_details_id . '_' . $services[$i]),
                            // 'stylist_id'      		=> $this->input->post('service_stylist_id_' . $booking_details_id . '_' . $services[$i]),
                            'stylist_id'      		=> $service_Stylist_id,
                            'booking_shift_id'      => $service_Stylist_shift_id,
                            'booking_shift_type'    => $service_Stylist_shift_type,
                            'service_date'     		=> date('Y-m-d',strtotime($this->input->post('booking_date_' . $booking_details_id))),
                            'service_from'    	    => date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $booking_details_id . '_' . $services[$i]))[0])),
                            'service_to'      	    => date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $booking_details_id . '_' . $services[$i]))[1])),
                            'created_on'            => date("Y-m-d H:i:s"),
                    
                            'received_discount_amount_while_booking'     	=> $total_single_service_discount,
                            'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                            'service_discounted_price_while_booking'     	=> $single_service_discounted_amount,
                    
                            'is_service_offer_applied'     	                => $is_offer_applied,
                            'applied_offer_id'     	                        => $is_offer_applied == '1' ? $applied_offer_id : '',
                            'service_offer_discount'                        => $is_offer_applied == '1' ? $service_offer_discount : '',
                            'service_offer_discount_type'     	            => $is_offer_applied == '1' ? $service_offer_discount_type : '',
                            'service_offer_discount_amount'     	        => $is_offer_applied == '1' ? $service_offer_discount_amount : '',

                            'is_service_discount_applied'                   => $is_service_discount_applied,
                            'service_marketing_discount_type'               => $service_discount_rewards_type,
                            'service_discount_customer_criteria'            => $service_discount_customer_criteria,
                            'service_discount_row_id'                       => $service_discount_row_id,
                    
                            'discount_in'     	                            => $service_discount_in,
                            'discount_type'     	                        => $service_discount_type,
                            'discount_value'     	                        => $service_discount_value,

                            'discount_slab_min'     	                    => $service_discount_slab_min,
                            'discount_slab_max'     	                    => $service_discount_slab_max,
                            'slab_increment'     	                        => $service_slab_increment,
                            'applied_flexible_slab'     	                => $service_applied_flexible_slab,
                            'received_discount'     	                    => $service_received_discount,

                            'rewards_discount_slab_min'     	            => $service_rewards_discount_slab_min,
                            'rewards_discount_slab_max'     	            => $service_rewards_discount_slab_max,
                            'rewards_slab_increment'     	                => $service_rewards_slab_increment,
                            'rewards_applied_flexible_slab'     	        => $service_rewards_applied_flexible_slab,
                            'rewards_received_discount'     	            => $service_rewards_received_discount,
                        );
                        $this->db->insert('tbl_booking_services_details', $stylist_data);
                        $booking_service_details_id = $this->db->insert_id();
        
                        if($products_single != "" && is_array($products_single) && !empty($products_single)){
                            for($j=0;$j<count($products_single);$j++){
                                $product_price = $this->input->post('service_product_price_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_original_price = $this->input->post('product_original_price_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);                                      
                        
                                ////product discount related start

                                $is_product_discount_applied = $this->input->post('is_product_discount_applied_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_discount_row_id = $this->input->post('product_discount_row_id_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_discount_in = $this->input->post('product_discount_in_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_discount_type = $this->input->post('product_discount_type_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_discount_value = $this->input->post('product_discount_value_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);

                                //discount
                                $product_discount_slab_min = $this->input->post('product_discount_slab_min_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_discount_slab_max = $this->input->post('product_discount_slab_max_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_slab_increment = $this->input->post('product_slab_increment_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_applied_flexible_slab = $this->input->post('product_applied_flexible_slab_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);
                                $product_received_discount = $this->input->post('product_received_discount_' . $booking_details_id . '_' . $services[$i] . '_' . $products_single[$j]);

                                ////product discount related end

                                $received_total_product = $total_product_amount;
                                if($received_total_product != "" && $received_total_product != "0.00" && $received_total_product != null && $received_total_product != 0){
                                    $price_share_in_total_product = (float)(($product_price/$received_total_product) * 100);
                                    $discount_share_membership_amount = (float)(($membership_product_discount_amount * $price_share_in_total_product) / 100);
                                }else{
                                   $discount_share_membership_amount = 0; 
                                }
                                $total_single_product_discount = $discount_share_membership_amount;
                                $single_product_discounted_amount = $product_price - $total_single_product_discount;

                                $service_product_data = array(
                                    'booking_service_details_id'  => $booking_service_details_id,
                                    'booking_id' 		    => $booking_id,
                                    'branch_id' 			=> $this->session->userdata('branch_id'),
                                    'salon_id' 				=> $this->session->userdata('salon_id'),
                                    'customer_name' 		=> $customer_id,
                                    'product_added_from'	=> '0', //single
                                    'is_extra_product'	    => '1',
                                    'service_id'     		=> $services[$i],
                                    'product_id'     		=> $products_single[$j],
                                    'product_price'     	=> $product_price,
                                    'product_original_price'=> $product_original_price,
                                    'created_on'            => date("Y-m-d H:i:s"),
                    
                                    'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                                    'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                                    'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,

                                    'is_product_discount_applied'                   => $is_product_discount_applied,
                                    'product_discount_row_id'                       => $product_discount_row_id,

                                    'product_discount_in'     	                    => $product_discount_in,
                                    'product_discount_type'     	                => $product_discount_type,
                                    'product_discount_value'     	                => $product_discount_value,
                                    
                                    'product_discount_slab_min'     	            => $product_discount_slab_min,
                                    'product_discount_slab_max'     	            => $product_discount_slab_max,
                                    'product_slab_increment'     	                => $product_slab_increment,
                                    'product_applied_flexible_slab'     	        => $product_applied_flexible_slab,
                                    'product_received_discount'     	            => $product_received_discount,                                
                                );
                                $this->db->insert('tbl_booking_services_products_details', $service_product_data);
                            }
                        }
                    }
                }

                $this->update_booking_service_end($booking_id);

                return true;
            }else{
                return false;
            }
        }else{
            return false;
        }
    }
    
    public function update_service($booking_details_id){
        // echo '<pre>'; print_r($_POST); exit();
        $this->db->where('id',$booking_details_id);
        $this->db->where('booking_type','0');
        $single = $this->db->get('tbl_new_booking')->row();
        if(!empty($single)){            
            $customer_id = $single->customer_name;   
            $original_services = explode(',',$single->services);
    
            $products = array();
            $serviceIDs = array();

            $services = explode(',',$this->input->post('selected_add_service_' . $booking_details_id));
            if($services != "" && is_array($services) && !empty($services)){
                for($i=0;$i<count($services);$i++){
                    $serviceID = explode('_',$services[$i])[0];
                    $service_added_from = explode('_',$services[$i])[1];
                    $is_offer_applied = explode('_',$services[$i])[2];
                    $serviceIDs[] = $serviceID;
                    $single_array = $this->input->post('add_service_product_checkbox_' . $booking_details_id . '_' . $serviceID);
                    if ($single_array != "" && $single_array != null && is_array($single_array) && !empty($single_array)) {
                        $products = array_merge($products,$single_array);
                    }
                }
            }
            $not_included_services = array_values(array_diff($original_services, $serviceIDs));
        
            $total_service_amount = $this->input->post('total_add_service_price_' . $booking_details_id);
            $total_product_amount = $this->input->post('total_add_service_product_price_' . $booking_details_id);
            $service_payable_amount = $this->input->post('add_service_payable_hidden_' . $booking_details_id);
            $product_payable_amount = $this->input->post('add_service_product_payable_hidden_' . $booking_details_id);
            $payable_amount = $this->input->post('add_service_final_payable_hidden_' . $booking_details_id);
            
            $is_package = $this->input->post('is_package_applicable_' . $booking_details_id);
            $selected_package = $this->input->post('add_service_selected_package_id_' . $booking_details_id);
            $selected_package_type = $this->input->post('included_package_type_' . $booking_details_id);
            $package_allocation_id = $this->input->post('package_allocation_id_' . $booking_details_id);
            $package_price = $this->input->post('total_add_service_package_price_' . $booking_details_id);

            $is_member = $this->input->post('add_service_is_membership_' . $booking_details_id);
            $membership_id = $this->input->post('add_service_membership_id_' . $booking_details_id);
            $membership_discount_type = $this->input->post('add_service_membership_discount_type_' . $booking_details_id);
            $membership_service_discount = $this->input->post('add_service_membership_service_discount_' . $booking_details_id);
            $membership_product_discount = $this->input->post('add_service_membership_product_discount_' . $booking_details_id);
            $membership_service_discount_amount = $this->input->post('add_service_membership_service_discount_amount_' . $booking_details_id);
            $membership_product_discount_amount = $this->input->post('add_service_membership_product_discount_amount_' . $booking_details_id);
            
            $total_discount_amount = $this->input->post('add_service_total_discount_amount_' . $booking_details_id);               
            $gst_amount = $this->input->post('add_service_final_gst_hidden_' . $booking_details_id);               
            $amount_to_paid = $this->input->post('add_service_final_total_hidden_' . $booking_details_id);               
                        
            $is_gst_applicable = $this->input->post('is_gst_applicable_' . $booking_details_id) == "1" ? $this->input->post('is_gst_applicable_' . $booking_details_id) : '0';                       
            $salon_gst_no = $this->input->post('salon_gst_no_' . $booking_details_id);                       
            $salon_gst_rate = $this->input->post('salon_gst_rate_' . $booking_details_id);           

            $old_package_allocation = $single->package_allocation_id;
            $old_package_selected = $single->is_package_included;

            // echo '<pre>'; print_r($_POST);exit;

            if($old_package_selected == '1' && $is_package == '0'){
                $old_allocation_status_data = array(
                    'added_in_booking_id'       =>  null,
                    'is_booking_done'           =>  '0',
                    
                    'item_used_in_booking_id'   =>  null,
                    'used_status'               =>  '0',
                    'service_date'              =>  null,
                    'service_from'              =>  null,
                    'service_to'                =>  null,
                    'item_used_on'              =>  null,
                );
                $this->db->where('allocation_id',$old_package_allocation);
                $this->db->update('tbl_booking_package_detail_status',$old_allocation_status_data);
                
                $old_allocation_data = array(
                    'allocated_in_booking_id'       =>  null,
                    'is_booking_done'               =>  '0',
                    'is_lapsed'                     =>  '0',
                );
                $this->db->where('id',$old_package_allocation);
                $this->db->update('tbl_customer_package_allocations',$old_allocation_data);
            }

            $package_rewards = '';
            if($is_package != '' && $is_package != null && $is_package == '1'){
                $package_details = $this->get_package_details($selected_package);
                if(!empty($package_details)){
                    $package_rewards = $package_details->reward_point;
                }
            }

            $booking_data = array(                
                'is_membership_booking' => $is_member,
                'membership_id' 		=> $membership_id,
                'membership_discount_type'	=> $membership_discount_type,
                'm_service_discount'	=> $membership_service_discount,
                'm_product_discount' 	=> $membership_product_discount,

                'is_package_included'	=> ($is_package != "" && $is_package != null && $is_package == '1') ? '1' : '0',
                'pacakge_id' 			=> ($is_package != "" && $is_package != null && $is_package == '1') ? $selected_package : null,
                'package_amount' 		=> ($is_package != "" && $is_package != null && $is_package == '1') ? $package_price : '0.00',
                'package_allocation_id' => ($is_package != "" && $is_package != null && $is_package == '1') ? $package_allocation_id : null,
                'used_package_type'     => ($is_package != "" && $is_package != null && $is_package == '1') ? $selected_package_type : null,
                'package_rewards'       => ($is_package != "" && $is_package != null && $is_package == '1' && $package_rewards != "") ? $package_rewards : null,
                // 'reminder' 				=> $reminder,
                // 'payment_method' 		=> $payment_method,
                // 'note'   				=> $note,

                'm_service_discount_amount'	    => $membership_service_discount_amount,
                'm_product_discount_amount' 	=> $membership_product_discount_amount,
                'services' 		        => !empty($serviceIDs) ? implode(',',$serviceIDs) : '',
                'products' 		        => !empty($products) ? implode(',',$products) : '',
                'total_service_price'   => $total_service_amount,
                'total_product_price'   => $total_product_amount,
                'service_price'         => $service_payable_amount,
                'product_price'         => $product_payable_amount,

                'payble_price'          => $payable_amount,
                'total_discount_amount' => $total_discount_amount,
                'booking_amount'        => $payable_amount,
                'gst_amount'            => $gst_amount,
                'amount_to_paid'        => $amount_to_paid,

                'is_gst_applicable'     => $is_gst_applicable,
                'salon_gst_no'          => $salon_gst_no,
                'salon_gst_rate'        => $salon_gst_rate,

                'service_start_date'    => date("Y-m-d",strtotime($this->input->post('booking_date_' . $booking_details_id))),
                'service_start_time'    => date("H:i:s",strtotime($this->input->post('booking_start_' . $booking_details_id))),
            );
            // echo '<pre>'; print_r($booking_data); exit;

            //update existing booking service
            $this->db->where('id', $single->id);
            $this->db->update('tbl_new_booking', $booking_data);
            $booking_id = $single->id; 

            if($services != "" && is_array($services) && !empty($services)){
                for($i=0;$i<count($services);$i++){
                    $serviceID = explode('_',$services[$i])[0];
                    $service_added_from = explode('_',$services[$i])[1];
                    $is_offer_applied = explode('_',$services[$i])[2];

                    $service_added_from = $this->input->post('service_added_from_' . $booking_details_id . '_' . $services[$i]);
                    $service_package_id = $this->input->post('service_package_id_' . $booking_details_id . '_' . $services[$i]);
                    $service_package_allocation_id = $this->input->post('service_package_allocation_id_' . $booking_details_id . '_' . $services[$i]);
                    $service_package_allocation_details_id = $this->input->post('service_package_allocation_details_id_' . $booking_details_id . '_' . $services[$i]);

                    $products_single = $this->input->post('add_service_product_checkbox_' . $booking_details_id . '_' . $serviceID);
                    $service_price = $this->input->post('service_price_' . $booking_details_id . '_' . $services[$i]); 
                    $original_service_price = $this->input->post('service_original_price_' . $booking_details_id . '_' . $services[$i]); 

                    $is_offer_applied = $this->input->post('is_offer_applied_' . $booking_details_id . '_' . $services[$i]);    
                    $applied_offer_id = $this->input->post('applied_offer_id_' . $booking_details_id . '_' . $services[$i]);    
                    $service_offer_discount = $this->input->post('service_offer_discount_' . $booking_details_id . '_' . $services[$i]);    
                    $service_offer_discount_type = $this->input->post('service_offer_discount_type_' . $booking_details_id . '_' . $services[$i]);    
                    $service_offer_discount_amount = $this->input->post('service_offer_discount_amount_' . $booking_details_id . '_' . $services[$i]);                                                

                    //service discount related start
                    $service_discount_in = $this->input->post('service_discount_in_' . $booking_details_id . '_' . $services[$i]);    
                    $service_discount_type = $this->input->post('service_discount_type_' . $booking_details_id . '_' . $services[$i]);
                    $service_discount_value = $this->input->post('service_discount_value_' . $booking_details_id . '_' . $services[$i]);
                    $service_discount_slab_min = $this->input->post('service_discount_slab_min_' . $booking_details_id . '_' . $services[$i]); 
                    $service_discount_slab_max = $this->input->post('service_discount_slab_max_' . $booking_details_id . '_' . $services[$i]);
                    $service_slab_increment = $this->input->post('service_slab_increment_' . $booking_details_id . '_' . $services[$i]);
                    $service_applied_flexible_slab = $this->input->post('service_applied_flexible_slab_' . $booking_details_id . '_' . $services[$i]);
                    $service_received_discount = $this->input->post('service_received_discount_' . $booking_details_id . '_' . $services[$i]);
                    
                    $is_service_discount_applied = $this->input->post('is_service_discount_applied_' . $booking_details_id . '_' . $services[$i]);    
                    $service_marketing_discount_type = $this->input->post('service_marketing_discount_type_' . $booking_details_id . '_' . $services[$i]);
                    $service_discount_customer_criteria = $this->input->post('service_discount_customer_criteria_' . $booking_details_id . '_' . $services[$i]);
                    $service_discount_row_id = $this->input->post('service_discount_row_id_' . $booking_details_id . '_' . $services[$i]); 
                    $rewards_discount_slab_min = $this->input->post('rewards_discount_slab_min_' . $booking_details_id . '_' . $services[$i]);
                    $rewards_discount_slab_max = $this->input->post('rewards_discount_slab_max_' . $booking_details_id . '_' . $services[$i]);
                    $rewards_slab_increment = $this->input->post('rewards_slab_increment_' . $booking_details_id . '_' . $services[$i]);
                    $rewards_applied_flexible_slab = $this->input->post('rewards_applied_flexible_slab_' . $booking_details_id . '_' . $services[$i]);
                    $rewards_received_discount = $this->input->post('rewards_received_discount_' . $booking_details_id . '_' . $services[$i]);
                    //service discount related end

                    $received_total_service = $total_service_amount;
                    if($received_total_service != "" && $received_total_service != "0.00" && $received_total_service != null && $received_total_service != 0){
                        $price_share_in_total_service = (float)(($service_price/$received_total_service) * 100);
                        $discount_share_membership_amount = (float)(($membership_service_discount_amount * $price_share_in_total_service) / 100);
                    }else{
                        $discount_share_membership_amount = 0;
                    }

                    $total_single_service_discount = $discount_share_membership_amount;
                    $single_service_discounted_amount = $service_price - $total_single_service_discount;

                    $service_stylist_id = explode('@@@',$this->input->post('service_stylist_id_' . $booking_details_id . '_' . $serviceID));
                    $edit_service_stylist_id = $service_stylist_id[0];
                    $edit_service_stylist_shift_id = $service_stylist_id[1];
                    $edit_service_stylist_shift_type = $service_stylist_id[2];
                    $stylist_data = array(
                        'booking_id' 		    => $booking_id,
                        'branch_id' 			=> $this->session->userdata('branch_id'),
                        'salon_id' 				=> $this->session->userdata('salon_id'),
                        'customer_name' 		=> $customer_id,
                        'service_added_from'	=> $service_added_from, //single
                        'is_extra_service'	    => '0',
                        'service_id'     		=> $services[$i],

                        'package_id'                    =>  $service_package_id,
                        'package_allocation_id'         =>  $service_package_allocation_id,
                        'package_allocation_status_id'  =>  $service_package_allocation_details_id,

                        'service_price'     	=> $service_price,
                        'original_service_price'=> $original_service_price,
                        'product_ids'     		=> (!empty($products_single)) ? implode(',',$products_single) : null,
                        'service_reward_points' => $this->input->post('service_rewards_' . $booking_details_id . '_' . $services[$i]),
                        // 'stylist_id'      		=> $this->input->post('service_stylist_id_' . $booking_details_id . '_' . $serviceID),
                        'stylist_id'      		=> $edit_service_stylist_id,
                        'booking_shift_id'      => $edit_service_stylist_shift_id,
                        'booking_shift_type'    => $edit_service_stylist_shift_type,
                        'service_date'     		=> date('Y-m-d',strtotime($this->input->post('booking_date_' . $booking_details_id))),
                        'service_from'    	    => date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $booking_details_id . '_' . $serviceID))[0])),
                        'service_to'      	    => date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $booking_details_id . '_' . $serviceID))[1])),
                
                        'received_discount_amount_while_booking'     	=> $total_single_service_discount,
                        'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                        'service_discounted_price_while_booking'     	=> $single_service_discounted_amount,
                
                        'is_service_offer_applied'     	                => $is_offer_applied,
                        'applied_offer_id'     	                        => $is_offer_applied == '1' ? $applied_offer_id : '',
                        'service_offer_discount'                        => $is_offer_applied == '1' ? $service_offer_discount : '',
                        'service_offer_discount_type'     	            => $is_offer_applied == '1' ? $service_offer_discount_type : '',
                        'service_offer_discount_amount'     	        => $is_offer_applied == '1' ? $service_offer_discount_amount : '',                        

                        'is_service_discount_applied'                   => $is_service_discount_applied,
                        'service_marketing_discount_type'               => $service_marketing_discount_type,
                        'service_discount_customer_criteria'            => $service_discount_customer_criteria,
                        'service_discount_row_id'                       => $service_discount_row_id,
                
                        'discount_in'     	                            => $service_discount_in,
                        'discount_type'     	                        => $service_discount_type,
                        'discount_value'     	                        => $service_discount_value,
                        
                        'discount_slab_min'     	                    => $service_discount_slab_min,
                        'discount_slab_max'     	                    => $service_discount_slab_max,
                        'slab_increment'     	                        => $service_slab_increment,
                        'applied_flexible_slab'     	                => $service_applied_flexible_slab,
                        'received_discount'     	                    => $service_received_discount,
                    
                        'rewards_discount_slab_min'     	            => $rewards_discount_slab_min,
                        'rewards_discount_slab_max'     	            => $rewards_discount_slab_max,
                        'rewards_slab_increment'     	                => $rewards_slab_increment,
                        'rewards_applied_flexible_slab'     	        => $rewards_applied_flexible_slab,
                        'rewards_received_discount'     	            => $rewards_received_discount,
                    );

                    $this->db->where('booking_id',$booking_id);
                    $this->db->where('service_id',$serviceID);
                    $this->db->where('customer_name',$customer_id);
                    $this->db->where('is_deleted','0');
                    $booking_service_details = $this->db->get('tbl_booking_services_details')->row();

                    if(empty($booking_service_details)){
                        //insert new SERVICE DETAILS
                        $date_array = array(
                            'created_on' => date('Y-m-d H:i:s')
                        );
                        $new_array = array_merge($stylist_data,$date_array);
                        $this->db->insert('tbl_booking_services_details', $new_array);
                        $booking_service_details_id = $this->db->insert_id();                        
    
                        if($products_single != "" && is_array($products_single) && !empty($products_single)){
                            for($j=0;$j<count($products_single);$j++){
                                $product_price = $this->input->post('service_product_price_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);                                      
                                $product_original_price = $this->input->post('product_original_price_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);                                      
                        
                                ////product discount related start

                                $is_product_discount_applied = $this->input->post('is_product_discount_applied_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_row_id = $this->input->post('product_discount_row_id_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_in = $this->input->post('product_discount_in_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_type = $this->input->post('product_discount_type_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_value = $this->input->post('product_discount_value_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);

                                //discount
                                $product_discount_slab_min = $this->input->post('product_discount_slab_min_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_slab_max = $this->input->post('product_discount_slab_max_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_slab_increment = $this->input->post('product_slab_increment_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_applied_flexible_slab = $this->input->post('product_applied_flexible_slab_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_received_discount = $this->input->post('product_received_discount_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);

                                ////product discount related end
                                
                                $received_total_product = $total_product_amount;
                                if($received_total_product != "" && $received_total_product != "0.00" && $received_total_product != null && $received_total_product != 0){
                                    $price_share_in_total_product = (float)(($product_price/$received_total_product) * 100);
                                    $discount_share_membership_amount = (float)(($membership_product_discount_amount * $price_share_in_total_product) / 100);
                                }else{
                                    $discount_share_membership_amount = 0; 
                                }
                                $total_single_product_discount = $discount_share_membership_amount;
                                $single_product_discounted_amount = $product_price - $total_single_product_discount;

                                $service_product_data = array(
                                    'booking_service_details_id'  => $booking_service_details_id,
                                    'booking_id' 		    => $booking_id,
                                    'branch_id' 			=> $this->session->userdata('branch_id'),
                                    'salon_id' 				=> $this->session->userdata('salon_id'),
                                    'customer_name' 		=> $customer_id,
                                    'product_added_from'	=> $service_added_from, //single
                                    'is_extra_product'	    => '0',
                                    'service_id'     		=> $services[$i],
                                    'product_id'     		=> $products_single[$j],
                                    'product_price'     	=> $product_price,
                                    'product_original_price'=> $product_original_price,
                                    'created_on'            => date("Y-m-d H:i:s"),
                    
                                    'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                                    'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                                    'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,                                                              

                                    'is_product_discount_applied'                   => $is_product_discount_applied,
                                    'product_discount_row_id'                       => $product_discount_row_id,

                                    'product_discount_in'     	                    => $product_discount_in,
                                    'product_discount_type'     	                => $product_discount_type,
                                    'product_discount_value'     	                => $product_discount_value,
                                    
                                    'product_discount_slab_min'     	            => $product_discount_slab_min,
                                    'product_discount_slab_max'     	            => $product_discount_slab_max,
                                    'product_slab_increment'     	                => $product_slab_increment,
                                    'product_applied_flexible_slab'     	        => $product_applied_flexible_slab,
                                    'product_received_discount'     	            => $product_received_discount,
                                );
                                $this->db->insert('tbl_booking_services_products_details', $service_product_data);
                            }
                        }
                    }else{
                        $service_booking_details_id = $booking_service_details->id;

                        $old_service_from = $booking_service_details->service_from;
                        $old_service_to = $booking_service_details->service_to;
                        $old_service_executive = $booking_service_details->stylist_id;

                        $old_service_added_from = $booking_service_details->service_added_from;
                        $old_package_allocation_status_id = $booking_service_details->package_allocation_status_id;
                        $old_package_allocation_id = $booking_service_details->package_allocation_id;
                        
                        //update existing booking service package allocation status details IF DIFFERENT PACKAGE ALLOCATION SELECTED FOR SAME SERIVCE
                        if($old_service_added_from == '1' && $service_package_allocation_details_id != $old_package_allocation_status_id){
                            $allocation_data = array(
                                'item_used_in_booking_id'   =>  null,
                                'used_status'               =>  '0',
                                'service_date'              =>  null,
                                'service_from'              =>  null,
                                'service_to'                =>  null,
                                'item_used_on'              =>  null,
                            );
                            $this->db->where('id',$old_package_allocation_status_id);
                            $this->db->update('tbl_booking_package_detail_status',$allocation_data);

                            $this->db->where('allocation_id', $old_package_allocation_id);
                            $this->db->where('is_deleted','0');
                            $this->db->where('used_status','0');
                            $unused_services = $this->db->get('tbl_booking_package_detail_status')->result();
                            if(!empty($unused_services)){
                                $this->db->where('id',$old_package_allocation_id);
                                $this->db->where('customer_name',$customer_id);
                                $this->db->where('is_deleted','0');
                                $package_allocation_single = $this->db->get('tbl_customer_package_allocations')->row();                                
                                if(!empty($package_allocation_single)){
                                    $allocation_single_data = array(
                                        'is_lapsed'  =>  '0',
                                    );
                                    $this->db->where('id',$package_allocation_single->id);
                                    $this->db->update('tbl_customer_package_allocations',$allocation_single_data);
                                }
                            }
                        }

                        //update existing booking service details
                        $this->db->where('id',$service_booking_details_id);
                        $this->db->where('booking_id',$booking_id);
                        $this->db->update('tbl_booking_services_details', $stylist_data);
                        $booking_service_details_id = $service_booking_details_id;

                        // insert reschedule details 
                        $reschedule_data = array(
                            'customer_id'       =>  $customer_id,
                            'branch_id' 	    =>  $this->session->userdata('branch_id'),
                            'salon_id' 			=>  $this->session->userdata('salon_id'),
                            'rescheduled_from'  =>  '0',
                            'booking_id'        =>  $booking_id,
                            'service_details_id'=>  $service_booking_details_id,
                            'service_id'        =>  $services[$i],
                            'old_details'       =>  date('Y-m-d H:i:s',strtotime($old_service_from)).'@@@'.date('Y-m-d H:i:s',strtotime($old_service_to)).'@@@'.$old_service_executive,
                            'new_details'       =>  date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $booking_details_id . '_' . $serviceID))[0])).'@@@'.date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $booking_details_id . '_' . $serviceID))[1])).'@@@'.$edit_service_stylist_id,
                            'created_on'        =>  date("Y-m-d H:i:s")
                        );
                        $this->db->insert('tbl_customer_rescheduled_bookings',$reschedule_data);

                        //update existing booking service products details
                        if($products_single != "" && is_array($products_single) && !empty($products_single)){
                            for($j=0;$j<count($products_single);$j++){
                                $product_price = $this->input->post('service_product_price_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);                                      
                                $product_original_price = $this->input->post('product_original_price_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);                                      
                        
                                ////product discount related start

                                $is_product_discount_applied = $this->input->post('is_product_discount_applied_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_row_id = $this->input->post('product_discount_row_id_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_in = $this->input->post('product_discount_in_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_type = $this->input->post('product_discount_type_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_value = $this->input->post('product_discount_value_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);

                                //discount
                                $product_discount_slab_min = $this->input->post('product_discount_slab_min_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_discount_slab_max = $this->input->post('product_discount_slab_max_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_slab_increment = $this->input->post('product_slab_increment_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_applied_flexible_slab = $this->input->post('product_applied_flexible_slab_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);
                                $product_received_discount = $this->input->post('product_received_discount_' . $booking_details_id . '_' . $serviceID . '_' . $products_single[$j]);

                                ////product discount related end
                                
                                $received_total_product = $total_product_amount;
                                if($received_total_product != "" && $received_total_product != "0.00" && $received_total_product != null && $received_total_product != 0){
                                    $price_share_in_total_product = (float)(($product_price/$received_total_product) * 100);
                                    $discount_share_membership_amount = (float)(($membership_product_discount_amount * $price_share_in_total_product) / 100);
                                }else{
                                    $discount_share_membership_amount = 0; 
                                }
                                $total_single_product_discount = $discount_share_membership_amount;
                                $single_product_discounted_amount = $product_price - $total_single_product_discount;

                                $service_product_data = array(
                                    'booking_service_details_id'  => $booking_service_details_id,
                                    'booking_id' 		    => $booking_id,
                                    'branch_id' 			=> $this->session->userdata('branch_id'),
                                    'salon_id' 				=> $this->session->userdata('salon_id'),
                                    'customer_name' 		=> $customer_id,
                                    'product_added_from'	=> $service_added_from, //single
                                    'is_extra_product'	    => '0',
                                    'service_id'     		=> $services[$i],
                                    'product_id'     		=> $products_single[$j],
                                    'product_price'     	=> $product_price,
                                    'product_original_price'=> $product_original_price,
                    
                                    'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                                    'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                                    'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,                                                            

                                    'is_product_discount_applied'                   => $is_product_discount_applied,
                                    'product_discount_row_id'                       => $product_discount_row_id,

                                    'product_discount_in'     	                    => $product_discount_in,
                                    'product_discount_type'     	                => $product_discount_type,
                                    'product_discount_value'     	                => $product_discount_value,
                                    
                                    'product_discount_slab_min'     	            => $product_discount_slab_min,
                                    'product_discount_slab_max'     	            => $product_discount_slab_max,
                                    'product_slab_increment'     	                => $product_slab_increment,
                                    'product_applied_flexible_slab'     	        => $product_applied_flexible_slab,
                                    'product_received_discount'     	            => $product_received_discount,
                                );
                                $this->db->where('booking_service_details_id',$service_booking_details_id);
                                $this->db->where('service_id',$services[$i]);
                                $this->db->where('booking_id',$booking_id);
                                $this->db->update('tbl_booking_services_products_details', $service_product_data);
                            }
                        }     
                    }                    
                        
                    //update existing booking service PACKAGE ALLOCATION details
                    if($service_added_from == '1'){   
                        if($service_package_allocation_details_id != "" && $service_package_allocation_details_id != null){
                            $this->db->where('item_type','0');
                            $this->db->where('is_deleted','0');
                            $this->db->where('id',$service_package_allocation_details_id);
                            $this->db->where('item_id',$serviceID);
                            $this->db->where('customer_name',$customer_id);
                            $service_package_allocation_details = $this->db->get('tbl_booking_package_detail_status')->row();
                            if(!empty($service_package_allocation_details)){
                                $package_item_used_details = array(
                                    'item_used_in_booking_id'   => $booking_id,
                                    'used_status'               =>  '1',
                                    'service_date'     		    =>  date('Y-m-d',strtotime($this->input->post('booking_date_' . $booking_details_id))),
                                    'service_from'    	        =>  date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $booking_details_id . '_' . $serviceID))[0])),
                                    'service_to'      	        =>  date('Y-m-d H:i:s',strtotime(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $booking_details_id . '_' . $serviceID))[1])),
                                    'item_used_on'              =>  date("Y-m-d"),
                                );
                                $this->db->where('item_type','0');
                                $this->db->where('is_deleted','0');
                                $this->db->where('id',$service_package_allocation_details->id);
                                $this->db->where('item_id',$serviceID);
                                $this->db->where('customer_name',$customer_id);
                                $this->db->update('tbl_booking_package_detail_status', $package_item_used_details);

                                $this->db->where('allocation_id', $service_package_allocation_details->allocation_id);
                                $this->db->where('is_deleted','0');
                                $this->db->where('used_status','1');
                                $used_services = $this->db->get('tbl_booking_package_detail_status')->num_rows();
                                
                                $this->db->where('allocation_id', $service_package_allocation_details->allocation_id);
                                $this->db->where('is_deleted','0');
                                $total_services = $this->db->get('tbl_booking_package_detail_status')->num_rows();

                                if($used_services == $total_services){
                                    $is_lapsed = '1';
                                }else{
                                    $is_lapsed = '0';
                                }

                                $this->db->where('id',$service_package_allocation_details->allocation_id);
                                $this->db->where('customer_name',$customer_id);
                                $this->db->where('is_deleted','0');
                                $package_allocation_single = $this->db->get('tbl_customer_package_allocations')->row();                                
                                if(!empty($package_allocation_single)){
                                    $allocation_single_data = array(
                                        'is_lapsed'  =>  $is_lapsed,
                                    );
                                    $this->db->where('id',$package_allocation_single->id);
                                    $this->db->update('tbl_customer_package_allocations',$allocation_single_data);
                                }
                            }
                        }
                    }
                }
            }

            //update existing booking service PACKAGE ALLOCATION details of which USER HAS REMOVED
            for($k=0;$k<count($not_included_services);$k++){
                $this->db->where('booking_id',$booking_id);
                $this->db->where('service_id',$not_included_services[$k]);
                $this->db->where('customer_name',$customer_id);
                $this->db->where('is_deleted','0');
                $not_included_details = $this->db->get('tbl_booking_services_details')->row();
                if(!empty($not_included_details)){
                    if($not_included_details->service_added_from == '1'){
                        $this->db->where('item_used_in_booking_id',$booking_id);
                        $this->db->where('item_id',$not_included_services[$k]);
                        $this->db->where('customer_name',$customer_id);
                        $this->db->where('is_deleted','0');
                        $this->db->where('item_type','0');
                        $this->db->where('used_status','1');
                        $package_allocation_detail = $this->db->get('tbl_booking_package_detail_status')->row();
                        if(!empty($package_allocation_detail)){
                            $allocation_data = array(
                                'item_used_in_booking_id'   =>  null,
                                'used_status'               =>  '0',
                                'service_date'              =>  null,
                                'service_from'              =>  null,
                                'service_to'                =>  null,
                                'item_used_on'              =>  null,
                            );
                            $this->db->where('id',$package_allocation_detail->id);
                            $this->db->update('tbl_booking_package_detail_status',$allocation_data);

                            $this->db->where('allocation_id', $package_allocation_detail->allocation_id);
                            $this->db->where('is_deleted','0');
                            $this->db->where('used_status','0');
                            $unused_services = $this->db->get('tbl_booking_package_detail_status')->result();
                            if(!empty($unused_services)){
                                $this->db->where('id',$package_allocation_detail->allocation_id);
                                $this->db->where('customer_name',$customer_id);
                                $this->db->where('is_deleted','0');
                                $package_allocation_single = $this->db->get('tbl_customer_package_allocations')->row();                                
                                if(!empty($package_allocation_single)){
                                    $allocation_single_data = array(
                                        'is_lapsed'  =>  '0',
                                    );
                                    $this->db->where('id',$package_allocation_single->id);
                                    $this->db->update('tbl_customer_package_allocations',$allocation_single_data);
                                }
                            }
                        }
                    }

                    $this->db->where('id',$not_included_details->id);
                    $this->db->update('tbl_booking_services_details',array('is_deleted'=>'1'));                    
                
                    $this->db->where('booking_service_details_id',$not_included_details->id);
                    $this->db->where('booking_id',$booking_id);
                    $this->db->where('service_id',$not_included_services[$k]);
                    $this->db->where('customer_name',$customer_id);
                    $this->db->where('is_deleted','0');
                    $this->db->update('tbl_booking_services_products_details',array('is_deleted'=>'1'));
                }
            }

            $this->update_booking_service_end($booking_id);

            $this->db->where('id',$customer_id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('is_deleted','0');
            $customer_details = $this->db->get('tbl_salon_customer')->row();
            if($customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
                $services_text = '';
                $this->db->where('id',$booking_id);
                $booking_details = $this->db->get('tbl_new_booking')->row();
                if(!empty($booking_details)){
                    $services = explode(',',$booking_details->services);
                    if(count($services) > 0){
                        for($i=0;$i<count($services);$i++){
                            $this->db->where('id',$services[$i]);
                            $this->db->where('branch_id',$this->session->userdata('branch_id'));
                            $this->db->where('salon_id',$this->session->userdata('salon_id'));
                            $this->db->where('is_deleted','0');
                            $service_details = $this->db->get('tbl_salon_emp_service')->row();
                            if (!empty($service_details)) {
                                // $services_text .= $service_details->service_name . '|' . $service_details->service_name_marathi;
                                $services_text .= $service_details->service_name;
                                
                                if ($i < count($services) - 1) {
                                    $services_text .= ', ';
                                }
                            }
                        }
                        $services_text = trim($services_text,',');
                        $services_text = trim($services_text,' ');
                        $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                        $finalNumber = substr($cleanedNumber, -10);
                        $finalNumber = '91' . $finalNumber;

                        $this->db->where('is_deleted','0');
                        $this->db->where('id',$this->session->userdata('branch_id'));
                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                        $branch = $this->db->get('tbl_branch')->row();
                        $visit_text = '';
                        if(!empty($branch)){
                            if($branch->branch_name != ""){
                                $visit_text .= $branch->branch_name;
                            }
                        }

                        $type = '6';
                        $message = "Hello, " . $customer_details->full_name . "!%0aRescheduled Appointment:%0a%0a\u{1F5D3}" . date('d M, Y',strtotime($booking_details->service_start_date)) . " at%0a\u{1F55B}" . date('h:i A',strtotime($booking_details->service_start_time)) . " for%0a\u{1F488}" . $services_text . "%0a%0aFeel free to reach out if you have any questions.%0a%0aThank you!%0a" . $visit_text . "";
                        $app_message = "Hello, " . $customer_details->full_name . "!\nRescheduled Appointment:\n\n📅 " . date('d M, Y', strtotime($booking_details->service_start_date)) . " at\n🕒 " . date('h:i A', strtotime($booking_details->service_start_time)) . " for\n💇‍♀️ " . $services_text . "\n\nFeel free to reach out if you have any questions.\n\nThank you!\n" . $visit_text . "";
                        $number = $finalNumber;
                        $customer = $customer_details->id;
                        $salon_id = $customer_details->salon_id;
                        $branch_id = $customer_details->branch_id;
                        $for_order_id = $booking_details->id;
                        $for_offer_id = '';
                        $for_query_id = '';
                        $consent_form_id = '';
                        $title = 'Appointment Rescheduled';
                        $generated_from = '0';
                        $notification_data = [
                            "landing_page"  => 'order_details',
                            "redirect_id"   => (string)$for_order_id
                        ];
                    
                        $message_send_on = '';
                        $template_id = '';                        
                        $email_subject = '';
                        $email_html = '';
                        $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                        if(!empty($booking_rules)){
                            if($booking_rules->booking_reminder_type == '1'){
                                $message_send_on = '0'; //SMS
                                $template_id = '';
                            }elseif($booking_rules->booking_reminder_type == '2'){
                                $message_send_on = '2'; //EMAIL
                                $email_html = '';
                            }elseif($booking_rules->booking_reminder_type == '3'){
                                $message_send_on = '1'; //WP
                            }
                        }
                        $membership_history_id = '';
                        $package_allocation_id = '';
                        $giftcard_purchase_id = '';
                        $trying_booking_id = '';
                        $wp_template_data = [];
                        $cron_id = '';

                        $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                    }
                }
            }
            
            return true;
        }else{
            return false;
        }
    }
    public function get_single_payment($id){
        $this->db->where('tbl_booking_payment_entry.id',$id);
        $result = $this->db->get('tbl_booking_payment_entry');
		$result = $result->row();
        return $result;
    }
    public function get_all_customer(){
        $this->db->where('tbl_salon_customer.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_customer.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_customer.is_deleted','0');
        $this->db->where('tbl_salon_customer.is_guest', '0');
        $this->db->order_by('tbl_salon_customer.id','desc');
        $result = $this->db->get('tbl_salon_customer');
		$result = $result->result();
        return $result;
    }
    public function get_customer_details_extra_service($id){
		$this->db->select('tbl_salon_customer.*,cities.name as city_name,states.name as state_name');
        $this->db->where('tbl_salon_customer.id',$id);
        $this->db->where('tbl_salon_customer.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_customer.salon_id',$this->session->userdata('salon_id'));
		$this->db->join('states','states.id = tbl_salon_customer.state','left');
		$this->db->join('cities','cities.id = tbl_salon_customer.city','left');
        $result = $this->db->get('tbl_salon_customer');
		$result = $result->row();

        if(!empty($result)){
            if($result->membership_id != "" && $result->membership_id != null && $result->membership_id != "0"){
                $this->db->select('tbl_customer_membership_history.*, tbl_memebership.membership_name');
                $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_customer_membership_history.membership_id');
                $this->db->where('tbl_customer_membership_history.id',$result->membership_pkey);
                $this->db->where('tbl_customer_membership_history.customer_id', $result->id);
                $this->db->where('DATE(tbl_customer_membership_history.membership_start) <=', date('Y-m-d'));
                $this->db->where('DATE(tbl_customer_membership_history.membership_end) >=', date('Y-m-d'));
                $this->db->where('tbl_customer_membership_history.is_deleted','0');
                $this->db->where('tbl_customer_membership_history.membership_status','0');
                $membership_details = $this->db->get('tbl_customer_membership_history')->row();

                if(!empty($membership_details)){
                    $membership = $membership_details;
                    $is_member = '1';
                }else{
                    $membership = array();
                    $is_member = '0';
                }
            }else{
                $membership = array();
                $is_member = '0';
            }

            return
                array(
                    'customer'              =>  $result,
                    'is_member'             =>  $is_member,
                    'membership'            =>  $membership,
                );
        }else{
            return array();
        }
    }
    public function get_membership_single_details($membership){
        $this->db->where('tbl_memebership.id',$membership);
        $membership_details = $this->db->get('tbl_memebership')->row();
        return $membership_details;
    }
    public function get_membership_details($membership_pkey,$customer){
        $this->db->select('tbl_customer_membership_history.*, tbl_memebership.membership_name');
        $this->db->join('tbl_memebership', 'tbl_memebership.id = tbl_customer_membership_history.membership_id');
        $this->db->where('tbl_customer_membership_history.id',$membership_pkey);
        $this->db->where('tbl_customer_membership_history.customer_id', $customer);
        $this->db->where('DATE(tbl_customer_membership_history.membership_end) >=', date('Y-m-d'));
        $membership_details = $this->db->get('tbl_customer_membership_history')->row();
        return $membership_details;
    }
    public function show_add_service_popup_ajx(){
        $booking_rules = $this->get_booking_rules();
		$stylists = $this->Salon_model->get_salon_all_stylists();
        if(!empty($booking_rules)){
            $rules_employee_selection = $booking_rules->employee_selection;
            $days_early_booking = $booking_rules->max_booking_range_day;
            if($days_early_booking != ""){
                $max_date = date('d-m-Y', strtotime('+'.$days_early_booking.' day'));
            }else{
                $max_date = date('d-m-Y', strtotime('+0 day'));
            }
        }else{
            $rules_employee_selection = '1';
            $max_date = date('d-m-Y', strtotime('+0 day'));
        }
        $today = date('d-m-Y');

        $offers_list = $this->Salon_model->get_all_active_offers();

        $booking_id = $this->input->post('booking_id');

        $this->db->select('tbl_new_booking.*,tbl_salon_customer.gender as customer_gender, tbl_salon_customer.membership_pkey,tbl_salon_customer.id as customer_id, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $single_booking = $this->db->get('tbl_new_booking')->row();

        if(!empty($single_booking)){
            $this->db->select('tbl_booking_services_details.*,tbl_new_booking.service_end_time,tbl_new_booking.service_end_date,tbl_salon_customer.membership_pkey,tbl_salon_customer.id as customer_id, tbl_new_booking.amount_to_paid,tbl_new_booking.payment_status,tbl_new_booking.is_membership_booking,tbl_new_booking.membership_id,tbl_new_booking.membership_discount_type,tbl_new_booking.m_service_discount,tbl_new_booking.m_product_discount,tbl_new_booking.payment_date,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_salon_emp_service.service_duration');
            $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
            $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
            $this->db->where('tbl_booking_services_details.booking_id',$single_booking->id);
            $this->db->where('DATE(tbl_booking_services_details.service_to)',$single_booking->service_end_date);
            $this->db->where('TIME(tbl_booking_services_details.service_to)',$single_booking->service_end_time);
            $this->db->where('tbl_booking_services_details.is_deleted','0');
            $this->db->order_by('tbl_booking_services_details.service_to','desc');
            $this->db->limit(1);
            $bookings = $this->db->get('tbl_booking_services_details')->row();

            if(!empty($bookings)){
                $category = $this->get_all_sup_category_gender($single_booking->customer_gender);
                $booking_service_details_id = $bookings->id;
                $prev_stylist_id = $bookings->stylist_id;

                $this->db->where('tbl_booking_services_details.booking_id',$bookings->booking_id);
                $this->db->where('tbl_booking_services_details.is_deleted','0');
                $this->db->where('tbl_booking_services_details.service_status != ','2');
                $all_services = $this->db->get('tbl_booking_services_details')->result();
                $bookings_services_array = array();
                if(!empty($all_services)){
                    foreach($all_services as $all_services_result){
                        $bookings_services_array[] = $all_services_result->service_id;
                    }
                }

                $is_member = '0';
                $membership_id = '';
                $membership_discount_type = '';
                $membership_service_discount = '0.00';
                $membership_product_discount = '0.00';
                $membership_button = '';

                if($bookings->is_membership_booking == '1'){
                    $membership_details = $this->get_membership_details($bookings->membership_pkey,$bookings->customer_id);
                    if(!empty($membership_details)){
                        $is_member = '1';
                        $membership_id = $bookings->membership_id;
                        $membership_discount_type = $bookings->membership_discount_type;
                        $membership_service_discount = $bookings->m_service_discount;
                        $membership_product_discount = $bookings->m_product_discount;
                        $membership_text_color = $membership_details->text_color;
                        $membership_bg_color = $membership_details->bg_color;
                        $membership_name = $membership_details->membership_name;
                        $membership_button = '<a class="btn btn-sm" style="margin-top: -5px;float:right; background-color:'.$membership_bg_color.'; color:'.$membership_text_color.'">'.$membership_name.'</a>';
                    }    
                }
                $products = $this->Salon_model->get_all_active_product_new($single_booking->customer_id);
        ?>
            <h5 style="margin-bottom: -10px;margin-left: 10px;margin-top:-5px;"><b style="font-weight: 600;">Customer: <?=$bookings->customer_name.' ['.$bookings->customer_phone.']';?></b><?=$membership_button; ?></h5>
            <hr>
            <form style="margin-top:-10px;" method="post" name="payment_form_<?=$bookings->id;?>" id="payment_form_<?=$bookings->id;?>" action="<?=base_url();?>add_extra_service/<?=base64_encode($bookings->id);?>">
                <input type="hidden" name="employee_selection_rule_<?=$bookings->id;?>" id="employee_selection_rule_<?=$bookings->id;?>" value="<?php if(!empty($booking_rules)){ echo $booking_rules->employee_selection; } ?>">     
                <div class="row">
                    <?php 
                    if(!empty($booking_rules)){ 
                        if($booking_rules->employee_selection == '2'){ 
                    ?>
                    <div class="form-group custom_label col-md-2 col-xs-12">
                        <label>Stylist<b class="require">*</b></label>
                        <select class="form-control chosen-select" id="employee_<?=$bookings->id;?>" name="employee_<?=$bookings->id;?>" onchange="fetchTimeSlots(<?=$bookings->id;?>)">   
                            <!-- <option value="">Select Stylist</option> -->
                            <?php if(!empty($stylists)){ foreach($stylists as $employee_result){ ?>
                                <option value="<?=$employee_result->id;?>" data-img-src="<?=base_url();?>admin_assets/images/employee_profile/<?=$employee_result->profile_photo;?>" <?php if($bookings->stylist_id == $employee_result->id){ echo 'selected'; }?>><?=$employee_result->full_name;?></option>
                            <?php }} ?>
                        </select>
                        <label for="employee_<?=$bookings->id;?>" style="display:none;" generated="true" class="error">Please select stylist!</label> 
                    </div>
                    <?php }} ?>
                    <div class="form-group custom_label <?php if(!empty($booking_rules) && $booking_rules->employee_selection == "2"){ echo 'col-md-1'; }else{ echo 'col-md-2'; } ?> col-xs-12">
                        <label>Service Date<b class="require">*</b></label>
                        <input readonly type="text" class="form-control" name="booking_date_<?=$bookings->id;?>" id="booking_date_<?=$bookings->id;?>" placeholder="Select Booking Date" onchange="fetchTimeSlots(<?=$bookings->id;?>)" value="<?=date('d-m-Y',strtotime($bookings->service_end_date));?>">
                    </div>
                    <div class="form-group custom_label <?php if(!empty($booking_rules) && $booking_rules->employee_selection == "2"){ echo 'col-md-1'; }else{ echo 'col-md-2'; } ?> col-xs-12">
                        <label>Service Start<b class="require">*</b></label>
                        <input readonly type="text" class="form-control" name="booking_start_<?=$bookings->id;?>" id="booking_start_<?=$bookings->id;?>" placeholder="Start From Time Slot">
                    </div> 
                    <div class="form-group custom_label col-md-3 col-xs-12">
                        <label>Category<b class="require">*</b></label>
                        <select id="category_<?=$bookings->id;?>" name="category_<?=$bookings->id;?>" class="form-control">
                            <option value="">Select Category</option>
                            <?php
                                if(!empty($category)){
                                    foreach($category as $category_result){
                                        if($category_result->gender == '0'){
                                            $gender = ' - [Male]';
                                        }else if($category_result->gender == '1'){
                                            $gender = ' - [Female]';
                                        }else{
                                            $gender = '';
                                        }
                            ?>
                            <option value="<?=$category_result->id; ?>"><?=$category_result->sup_category; ?>|<?=$category_result->sup_category_marathi; ?> <?=$gender; ?></option>
                            <?php }} ?>
                        </select>
                        <label for="category_<?=$bookings->id;?>" generated="true" class="error" style="display:none;width:100%;text-align:left;">Please select category!</label>
                    </div>
                    <div class="form-group custom_label col-md-2 col-xs-12">
                        <label>Sub Category</label>
                        <select id="sub_category_<?=$bookings->id;?>" name="sub_category_<?=$bookings->id;?>" class="form-control">
                            <option value="">Select Sub Category</option>
                        </select>
                        <label for="sub_category_<?=$bookings->id;?>" generated="true" class="error" style="display:none;width:100%;text-align:left;">Please select sub category!</label>
                    </div>
                    <div class="form-group custom_label col-md-3 col-xs-12">
                        <label>Service<b class="require">*</b></label>
                        <select id="service_<?=$bookings->id;?>" name="service_<?=$bookings->id;?>" class="form-control">
                            <option value="">Select Service</option>
                        </select>
                        <label for="selected_add_service_<?=$bookings->id;?>" generated="true" class="error" style="display:none;width:100%;text-align:left;">Please select service!</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-8 col-md-6 col-sm-12  col-xs-12">
                        <input type="hidden" name="previous_stylist_<?=$bookings->id;?>" id="previous_stylist_<?=$bookings->id;?>" value="<?=$prev_stylist_id;?>">    
                        <input type="hidden" name="previous_start_<?=$bookings->id;?>" id="previous_start_<?=$bookings->id;?>" value="">
                        <input type="hidden" name="slot_start_time_<?=$bookings->id;?>" id="slot_start_time_<?=$bookings->id;?>" value="<?=date('H:i:s',strtotime($bookings->service_to));?>">
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" id="booking_timeslots_<?=$bookings->id;?>" style="display:none;"></div> 
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" id="selected_services_empty_<?=$bookings->id;?>">
                            <div class="row single_added_extra_service_details">
                                <div class="col-md-12 col-sm-12 col-xs-12 selected-servicesbox" style="height:60px; padding-top: 9px; padding-left:0px;">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="text-align:center;">
                                        <label class="noserviceavl" style="margin-top: 10px;background-color:transparent !important; font-size: 11px !important;color: #4c4c4c !important;">Service not selected</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" id="selected_services_<?=$bookings->id;?>" style="display:none;"></div>
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-12 col-xs-12 extra_service_price_table">
                        <table style="width:100%;" class="">
                            <thead>
                                <tr style="background-color: white;">
                                    <th>Service Price</th>
                                    <th id="total_add_service_price_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;">
                                    <th>Products Price</th>
                                    <th id="total_add_service_product_price_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="background-color: white;border-top: 1px solid #ccc;">
                                    <th>
                                        Discount
                                        <div id="add_service_discount_details_div_<?=$bookings->id;?>" style="position: relative;display:inline-block; width:auto;"></div>
                                    </th>
                                    <th id="add_service_total_discount_amount_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                                <tr style="border-top: 0.5px solid #afafaf;">
                                    <th>Total Amount</th>
                                    <th id="add_service_final_payable_text_<?=$bookings->id;?>">0.00</th>
                                </tr>
                            </thead>
                        </table>
                        <input type="hidden" name="add_service_is_membership_<?=$bookings->id;?>" id="add_service_is_membership_<?=$bookings->id;?>" value="<?=$is_member;?>">
                        <input type="hidden" name="add_service_membership_id_<?=$bookings->id;?>" id="add_service_membership_id_<?=$bookings->id;?>" value="<?=$membership_id;?>">
                        <input type="hidden" name="add_service_membership_discount_type_<?=$bookings->id;?>" id="add_service_membership_discount_type_<?=$bookings->id;?>" value="<?=$membership_discount_type;?>">
                        <input type="hidden" name="add_service_membership_service_discount_<?=$bookings->id;?>" id="add_service_membership_service_discount_<?=$bookings->id;?>" value="<?=$membership_service_discount;?>">
                        <input type="hidden" name="add_service_membership_product_discount_<?=$bookings->id;?>" id="add_service_membership_product_discount_<?=$bookings->id;?>" value="<?=$membership_product_discount;?>">
                        
                        <input type="hidden" name="add_service_membership_service_discount_amount_<?=$bookings->id;?>" id="add_service_membership_service_discount_amount_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_membership_product_discount_amount_<?=$bookings->id;?>" id="add_service_membership_product_discount_amount_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_total_discount_amount_<?=$bookings->id;?>" id="add_service_total_discount_amount_<?=$bookings->id;?>" value="">

                        <input type="hidden" name="total_add_service_price_<?=$bookings->id;?>" id="total_add_service_price_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_payable_hidden_<?=$bookings->id;?>" id="add_service_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_product_payable_hidden_<?=$bookings->id;?>" id="add_service_product_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="total_add_service_product_price_<?=$bookings->id;?>" id="total_add_service_product_price_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="add_service_final_payable_hidden_<?=$bookings->id;?>" id="add_service_final_payable_hidden_<?=$bookings->id;?>" value="0.00">
                        <input type="hidden" name="selected_add_service_<?=$bookings->id;?>" id="selected_add_service_<?=$bookings->id;?>" value="">
                        <input type="hidden" name="selected_sub_category_<?=$bookings->id;?>" id="selected_sub_category_<?=$bookings->id;?>" value="">
                        
                        <label class="error" id="stylist_timeslot_error_<?=$bookings->id;?>" style="display:none;margin-top:5px;"></label>
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12" style="margin-top: 10px;margin-left: -10px;">
                            <button type="submit" class="btn btn-primary" id="payment_btn" value="payment_btn">Add Service</button>
                        </div>
                    </div>
                </div>
            </form>
            <script>
                var rules_employee_selection = <?php echo $rules_employee_selection; ?>;
                var customer_id = '<?php echo $bookings->customer_id; ?>';
                var user_selected_add_service = [];
                var user_selected_add_service_product = [];
                var user_selected_timeslots_add_service = [];
                var user_selected_stylist_timeslots_add_service = [];

                var selected_slot_start = '<?php echo  ($bookings->service_end_date != "" && $bookings->service_end_time != "") ? date('Y-m-d H:i:s',strtotime($bookings->service_end_date.' '.$bookings->service_end_time)) : ''; ?>';
                var selected_slot_start_date = '<?php echo ($bookings->service_end_date != "") ? date('d-m-Y', strtotime($bookings->service_end_date)) : ''; ?>';
                var selected_slot_start_time = '<?php echo  ($bookings->service_end_time != "") ? date('H:i:s',strtotime($bookings->service_end_time)) : ''; ?>';

                if(selected_slot_start_date != ""){
                    var parts = selected_slot_start_date.split('-');
                    var day = parts[0].trim();
                    if (day.length === 1) {
                        day = '0' + day; 
                    }
                    var selected_formattedDate = day + '-' + parts[1].trim() + '-' + parts[2].trim();
                } else {
                    var selected_formattedDate = '';
                }
                
                $(document).ready(function () {  
                    if(selected_slot_start_date != "" && selected_slot_start_time != ""){
                        $('#booking_date_<?=$bookings->id;?>').val(selected_slot_start_date);
                        fetchTimeSlots(<?=$bookings->id;?>);
                        
                        var timeParts = selected_slot_start_time.split(":");
                        var hours = parseInt(timeParts[0], 10);
                        var minutes = parseInt(timeParts[1], 10);
                        
                        var ampm = hours >= 12 ? 'PM' : 'AM';
                        hours = hours % 12;
                        hours = hours ? hours : 12;
                        
                        minutes = minutes < 10 ? '0' + minutes : minutes;
                        
                        selectedValue = hours + ':' + minutes + ' ' + ampm;

                        setBookingStart(selectedValue,<?=$bookings->id;?>);
                        
                        // $('#booking_timeslots_<?=$bookings->id;?>').hide();
                    }
                    // $("#booking_date_<?=$bookings->id;?>").datepicker({
                    //     dateFormat: 'dd-mm-yy',
                    //     maxDate: '<?php echo $max_date; ?>',
                    //     minDate: '<?php echo $today; ?>',
                    // });  
                    var today_date = '<?php echo  ($today != "") ? date('d-m-Y',strtotime($today)) : ''; ?>';

                    $("#employee_<?=$bookings->id;?>").chosen(); 
                    $("#category_<?=$bookings->id;?>").chosen(); 
                    $("#sub_category_<?=$bookings->id;?>").chosen(); 
                    $("#service_<?=$bookings->id;?>").chosen(); 

                    $('#payment_form_<?=$bookings->id;?>').validate({
                        ignore:[],
                        rules: {
                            'category_<?=$bookings->id;?>': {
                                required: true,
                            },
                            'selected_add_service_<?=$bookings->id;?>': {
                                required: true,
                            },
                            'employee_<?=$bookings->id;?>': {
                                required: function(element) {
                                    return $('#employee_selection_rule_<?=$bookings->id;?>').val() == '2';
                                },
                            },
                        },
                        messages: {
                            'category_<?=$bookings->id;?>': {
                                required: "Please select category!",
                            },
                            'selected_add_service_<?=$bookings->id;?>': {
                                required: "Please select service!",
                            },
                            'employee_<?=$bookings->id;?>': {
                                required: "Please select stylist!",
                            },
                        },
                        submitHandler: function(form) {
                            var validation_flag = 1;
                            $(".service_executive_<?=$bookings->id;?>").each(function () {
                                if ($(this).val() == "") {
                                    validation_flag = 0;
                                    return false;
                                }
                            });
                            if (validation_flag == 1) {
                                if (confirm("Are you sure you want to add service?")) {
                                // openConfirmationDialog("Are you sure you want to add service?", function (confirmed) {
                                // if (confirmed) {
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").hide('');
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").html('');

                                    form.submit();
                                } else {
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").hide('');
                                    $("#stylist_timeslot_error_<?=$bookings->id;?>").html('');
                                    return false;
                                }
                                // });
                            } else {
                                $("#stylist_timeslot_error_<?=$bookings->id;?>").show('');
                                $("#stylist_timeslot_error_<?=$bookings->id;?>").html('Please select stylists for the selected service'); 
                            }
                        }
                    });

                    $('#category_<?=$bookings->id;?>').change(function() {
                        var bookings_services_array = <?php echo json_encode($bookings_services_array); ?>;
                        $('.loader_div').show();   
                        setTimeout(function() {
                            var booking_details_id = <?= $bookings->id; ?>;
                            var category = $('#category_' + booking_details_id).val();
                            var sub_category = $('#sub_category_' + booking_details_id).val();
                            if (category !== "" && typeof category !== "undefined") {
                                $.ajax({
                                    type: "POST",
                                    url: "<?= base_url(); ?>salon/Ajax_controller/get_category_sub_categories",
                                    data: { 'category': category, 'customer_id': customer_id },
                                    success: function(data) {                                        
                                        $("#sub_category_"+booking_details_id).empty();
                                        $("#sub_category_"+booking_details_id).append('<option value="">Select Sub Category</option>');
                                        var opts = $.parseJSON(data);
                                        $.each(opts, function(i, d) {
                                            if(d.gender == '0'){
                                                var gender = ' - [Male]';
                                            }else if(d.gender == '1'){
                                                var gender = ' - [Female]';
                                            }else{
                                                var gender = '';
                                            }
                                            if(d.id == $('#selected_sub_category_'+booking_details_id).val()){
                                                $("#sub_category_"+booking_details_id).append('<option selected value="' + d.id + '">' + d.sub_category + '|' + d.sub_category_marathi + '' + gender + '</option>');
                                            }else{
                                                $("#sub_category_"+booking_details_id).append('<option value="' + d.id + '">' + d.sub_category + '|' + d.sub_category_marathi + '' + gender + '</option>');
                                            }
                                        });
                                        $("#sub_category_"+booking_details_id).trigger('chosen:updated');
                                        $("#sub_category_"+booking_details_id).chosen();
                                    }
                                });

                                $.ajax({
                                    type: "POST",
                                    url: "<?= base_url(); ?>salon/Ajax_controller/get_category_services",
                                    data: { 'sub_category': sub_category, 'category': category, 'customer_id': customer_id },
                                    success: function(data) {
                                        $('.loader_div').hide(); 

                                        $("#service_"+booking_details_id).empty();
                                        $("#service_"+booking_details_id).append('<option value="">Select Service</option>');
                                        var stylists = $.parseJSON(data);
                                        if (stylists.length > 0) {
                                            var opts = $.parseJSON(data);
                                            var offers_list = <?php echo json_encode($offers_list); ?>;

                                            $.each(opts, function(i, d) {
                                                if(bookings_services_array.includes(d.id)){
                                                    var exist_disabled = 'disabled';
                                                    var exist_disabled_text = '- Service Already Exist in Booking';
                                                }else{
                                                    var exist_disabled = '';
                                                    var exist_disabled_text = '';
                                                }
                                                $("#service_" + booking_details_id).append('<option value="' + d.id + '" ' + exist_disabled + '>' + d.service_name + '|' + d.service_name_marathi + ' ' + exist_disabled_text + '</option>');

                                                var count = offers_list.length;
                                                count = 0;
                                                var service_offer_discount = 0;
                                                var rewards = 0;

                                                var single_offer_discount_type = '';
                                                var service_offer_discount_offers = '';
                                                var service_offer_discount = '';
                                                var offer_id = '';
                                                var is_offer_applied = '0';

                                                for (var j = 0; j < count; j++) {
                                                    var single_offer_services = offers_list[j]['service_name'];

                                                    if (single_offer_services.includes(d.id.toString())) {                                                        
                                                        var single_offer_discount_type = offers_list[j]['discount_in'];
                                                        if (single_offer_discount_type === '0') {
                                                            service_offer_discount = (d.final_price * offers_list[j]['discount']) / 100;
                                                        } else {
                                                            service_offer_discount = offers_list[j]['discount'];
                                                        }
                                                        service_offer_discount_offers = offers_list[j]['discount'];
                                                        rewards = offers_list[j]['reward_point'];
                                                        offer_id = offers_list[j]['id'];
                                                        is_offer_applied = '1';
                                                        break;
                                                    }
                                                }

                                                var service_applied_discount = d.service_applied_discount;
                                                var service_price_consider;
                                                var original_price = d.final_price;                                                

                                                var service_discount_rewards_type = '';
                                                var discount_in = '';
                                                var discount_type = '';
                                                var discount_amount_value = '';
                                                var discount_row_id = '';
                                                var customer_criteria = '';
                                                var is_discount_applied = '0';

                                                var discount_text = '';
                                                var discount_amount = 0;
                                                var slab_increment = '5';
                                                var slab_consider = '';
                                                var min_slab = '';
                                                var max_slab = '';

                                                var rewards_text = '';
                                                var rewards_discount_amount = 0;
                                                var rewards_slab_increment = '5';
                                                var rewards_slab_consider = '';
                                                var rewards_min_slab = '';
                                                var rewards_max_slab = '';

                                                if(service_applied_discount.is_discount_applied == '1'){
                                                    is_discount_applied = '1';
                                                    discount_row_id = service_applied_discount.discount_row_id;
                                                    customer_criteria = service_applied_discount.customer_criteria;
                                                    discount_type = service_applied_discount.discount_type;
                                                    discount_in = service_applied_discount.discount_in;
                                                    discount_amount_value = parseFloat(service_applied_discount.discount_amount);
                                                    min_slab = service_applied_discount.min_flexible;
                                                    max_slab = service_applied_discount.max_flexible;
                                                    if(discount_type == '1'){    //Flexible
                                                        var customer_last_service_booking = d.customer_last_service_booking;
                                                        if (customer_last_service_booking) {           
                                                            if(customer_criteria == '1'){                             
                                                                prev_Applied_slab = customer_last_service_booking.rewards_applied_flexible_slab;
                                                            }else{
                                                                prev_Applied_slab = customer_last_service_booking.applied_flexible_slab;
                                                            }

                                                            if(prev_Applied_slab != ""){
                                                                next_slab = prev_Applied_slab + slab_increment;
                                                            }else{
                                                                next_slab = min_slab + slab_increment;
                                                            }

                                                            if(next_slab > max_slab){
                                                                slab_consider = min_slab;
                                                            }else{
                                                                slab_consider = next_slab;
                                                            }
                                                        }else{
                                                            slab_consider = min_slab;
                                                        }

                                                        if(discount_in == '0'){  //percentage
                                                            discount_amount = (parseFloat(slab_consider) * parseFloat(original_price)) / 100;
                                                        }else if(discount_in == '1'){ //flat
                                                            discount_amount = parseFloat(slab_consider);
                                                        }
                                                    }else if(discount_type == '0'){   //Fixed
                                                        if(discount_in == '0'){  //percentage
                                                            discount_amount = (parseFloat(discount_amount_value) * parseFloat(original_price)) / 100;
                                                        }else if(discount_in == '1'){ //flat
                                                            discount_amount = parseFloat(discount_amount_value);
                                                        }
                                                    }
                                                }

                                                if(is_discount_applied == '1'){
                                                    if(customer_criteria == '1'){  //for regular customer rewards are given
                                                        rewards_discount_amount = discount_amount;
                                                        rewards_slab_increment = slab_increment;
                                                        rewards_slab_consider = slab_consider;
                                                        rewards_min_slab = min_slab;
                                                        rewards_max_slab = max_slab;

                                                        discount_amount = 0;
                                                        slab_increment = '5';
                                                        slab_consider = '';
                                                        min_slab = '';
                                                        max_slab = '';

                                                        service_discount_rewards_type = '1';   // rewards
                                                    }else{                                    
                                                        service_discount_rewards_type = '0';   // discount
                                                    }
                                                }

                                                // if (d.discount_type == '1') {    // Flexible
                                                //     var customer_last_service_booking = d.customer_last_service_booking;
                                                //     if (customer_last_service_booking) {
                                                //         min_slab = d.min;
                                                //         max_slab = d.max;
                                                //         slab_increment = d.slab_increment;
                                                //         var prev_Applied_slab = customer_last_service_booking.applied_flexible_slab;

                                                //         var next_slab;
                                                //         if (prev_Applied_slab !== "") {
                                                //             next_slab = prev_Applied_slab + slab_increment;
                                                //         } else {
                                                //             next_slab = min_slab + slab_increment;
                                                //         }

                                                //         if (next_slab > max_slab) {
                                                //             slab_consider = min_slab;
                                                //         } else {
                                                //             slab_consider = next_slab;
                                                //         }
                                                //     } else {
                                                //         min_slab = d.min;
                                                //         max_slab = d.max;
                                                //         slab_increment = d.slab_increment;
                                                //         slab_consider = min_slab;
                                                //     }

                                                //     if (d.discount_in == '0') {  // Percentage
                                                //         discount_amount = (slab_consider * d.final_price) / 100;
                                                //     } else if (d.discount_in == '1') { // Flat
                                                //         discount_amount = slab_consider;
                                                //     }
                                                // } else if (d.discount_type == '0') {   // Fixed
                                                //     if (d.discount_in == '0') {  // Percentage
                                                //         discount_amount = (d.service_discount * d.final_price) / 100;
                                                //     } else if (d.discount_in == '1') { // Flat
                                                //         discount_amount = d.service_discount;
                                                //     }
                                                // }

                                                var service_price_consider = d.final_price - discount_amount;
                                                var original_price = d.final_price;

                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_price_' + booking_details_id + '_' + d.id + '" id="service_price_' + booking_details_id + '_' + d.id + '" value="' + parseFloat(service_price_consider).toFixed(2) + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_original_price_' + booking_details_id + '_' + d.id + '" id="service_original_price_' + booking_details_id + '_' + d.id + '" value="' + parseFloat(original_price).toFixed(2) + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_marathi_name_' + booking_details_id + '_' + d.id + '" id="service_marathi_name_' + booking_details_id + '_' + d.id + '" value="' + d.service_name_marathi + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_name_' + booking_details_id + '_' + d.id + '" id="service_name_' + booking_details_id + '_' + d.id + '" value="' + d.service_name + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_sub_cat_marathi_name_' + booking_details_id + '_' + d.id + '" id="service_sub_cat_marathi_name_' + booking_details_id + '_' + d.id + '" value="' + d.sub_category_marathi + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_sub_cat_name_' + booking_details_id + '_' + d.id + '" id="service_sub_cat_name_' + booking_details_id + '_' + d.id + '" value="' + d.sub_category_name + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_duration_' + booking_details_id + '_' + d.id + '" id="service_duration_' + booking_details_id + '_' + d.id + '" value="' + d.service_duration + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_rewards_' + booking_details_id + '_' + d.id + '" id="service_rewards_' + booking_details_id + '_' + d.id + '" value="' + d.reward_point + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_products_' + booking_details_id + '_' + d.id + '" id="service_products_' + booking_details_id + '_' + d.id + '" value="' + d.product + '">');
                                                
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="is_offer_applied_' + booking_details_id + '_' + d.id + '" id="is_offer_applied_' + booking_details_id + '_' + d.id + '" value="' + is_offer_applied + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="applied_offer_id_' + booking_details_id + '_' + d.id + '" id="applied_offer_id_' + booking_details_id + '_' + d.id + '" value="' + offer_id + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_' + booking_details_id + '_' + d.id + '" id="service_offer_discount_' + booking_details_id + '_' + d.id + '" value="' + service_offer_discount_offers + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_type_' + booking_details_id + '_' + d.id + '" id="service_offer_discount_type_' + booking_details_id + '_' + d.id + '" value="' + single_offer_discount_type + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_offer_discount_amount_' + booking_details_id + '_' + d.id + '" id="service_offer_discount_amount_' + booking_details_id + '_' + d.id + '" value="' + service_offer_discount + '">');
                                            
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_discount_in_' + booking_details_id + '_' + d.id + '" id="service_discount_in_' + booking_details_id + '_' + d.id + '" value="' + discount_in + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_discount_type_' + booking_details_id + '_' + d.id + '" id="service_discount_type_' + booking_details_id + '_' + d.id + '" value="' + discount_type + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_discount_value_' + booking_details_id + '_' + d.id + '" id="service_discount_value_' + booking_details_id + '_' + d.id + '" value="' + discount_amount_value + '">');
                                                
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="is_service_discount_applied_' + booking_details_id + '_' + d.id + '" id="is_service_discount_applied_' + booking_details_id + '_' + d.id + '" value="' + is_discount_applied + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_discount_rewards_type_' + booking_details_id + '_' + d.id + '" id="service_discount_rewards_type_' + booking_details_id + '_' + d.id + '" value="' + service_discount_rewards_type + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_discount_row_id_' + booking_details_id + '_' + d.id + '" id="service_discount_row_id_' + booking_details_id + '_' + d.id + '" value="' + discount_row_id + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_discount_customer_criteria_' + booking_details_id + '_' + d.id + '" id="service_discount_customer_criteria_' + booking_details_id + '_' + d.id + '" value="' + customer_criteria + '">');

                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_discount_slab_min_' + booking_details_id + '_' + d.id + '" id="service_discount_slab_min_' + booking_details_id + '_' + d.id + '" value="' + min_slab + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_discount_slab_max_' + booking_details_id + '_' + d.id + '" id="service_discount_slab_max_' + booking_details_id + '_' + d.id + '" value="' + max_slab + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_slab_increment_' + booking_details_id + '_' + d.id + '" id="service_slab_increment_' + booking_details_id + '_' + d.id + '" value="' + slab_increment + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_applied_flexible_slab_' + booking_details_id + '_' + d.id + '" id="service_applied_flexible_slab_' + booking_details_id + '_' + d.id + '" value="' + slab_consider + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_received_discount_' + booking_details_id + '_' + d.id + '" id="service_received_discount_' + booking_details_id + '_' + d.id + '" value="' + discount_amount + '">');
                                                
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_rewards_discount_slab_min_' + booking_details_id + '_' + d.id + '" id="service_rewards_discount_slab_min_' + booking_details_id + '_' + d.id + '" value="' + rewards_min_slab + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_rewards_discount_slab_max_' + booking_details_id + '_' + d.id + '" id="service_rewards_discount_slab_max_' + booking_details_id + '_' + d.id + '" value="' + rewards_max_slab + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_rewards_slab_increment_' + booking_details_id + '_' + d.id + '" id="service_rewards_slab_increment_' + booking_details_id + '_' + d.id + '" value="' + rewards_slab_increment + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_rewards_applied_flexible_slab_' + booking_details_id + '_' + d.id + '" id="service_rewards_applied_flexible_slab_' + booking_details_id + '_' + d.id + '" value="' + rewards_slab_consider + '">');
                                                $("#service_" + booking_details_id).append('<input type="hidden" name="service_rewards_received_discount_' + booking_details_id + '_' + d.id + '" id="service_rewards_received_discount_' + booking_details_id + '_' + d.id + '" value="' + rewards_discount_amount + '">');
                                                
                                            });
                                        }
                                        $("#service_"+booking_details_id).trigger('chosen:updated');
                                        $("#service_"+booking_details_id).chosen();
                                    }
                                });
                            }
                        }, 1500);
                    });

                    $('#sub_category_<?=$bookings->id;?>').change(function() {
                        $('#selected_sub_category_<?=$bookings->id;?>').val($(this).val());
                        $('#category_<?=$bookings->id;?>').trigger('change');
                    });

                    $('#service_<?=$bookings->id;?>').change(function() {
                        var booking_details_id = <?= $bookings->id; ?>;
                        var all_products = <?= json_encode($products); ?>;
                        var selected_from = 'extra_service_add';
                        var category = $('#category_' + booking_details_id).val();
                        var serviceID = $('#service_' + booking_details_id).val();
                        
                        $("#stylist_timeslot_error_" + booking_details_id).hide('');
                        $("#stylist_timeslot_error_" + booking_details_id).html('');

                        if(!user_selected_add_service.includes(serviceID)){   
                            // $('#booking_timeslots_' + booking_details_id).hide();                
                            var booking_date = $('#booking_date_' + booking_details_id).val();
                            var booking_start = $('#booking_start_' + booking_details_id).val();

                            if (booking_date !== "" && booking_start !== "") {
                                $('.loader_div').show();   
                                setTimeout(function() {
                                    var productsArray = [];
                                    var service_duration = $('#service_duration_' + booking_details_id + '_' + serviceID).val();
                                    
                                    var service_sub_cat_marathi_name = $('#service_sub_cat_marathi_name_' + booking_details_id + '_' + serviceID).val();
                                    var service_sub_cat_name = $('#service_sub_cat_name_' + booking_details_id + '_' + serviceID).val();
                                    var service_name = $('#service_name_' + booking_details_id + '_' + serviceID).val();
                                    var service_marathi_name = $('#service_marathi_name_' + booking_details_id + '_' + serviceID).val();
                                    var service_rewards = $('#service_rewards_' + booking_details_id + '_' + serviceID).val();
                                    var final_price = $('#service_price_' + booking_details_id + '_' + serviceID).val();
                                    var service_original_price = $('#service_original_price_' + booking_details_id + '_' + serviceID).val();
                                    var service_products = $('#service_products_' + booking_details_id + '_' + serviceID).val();
                                    productsArray = service_products.split(',');
                                    if(parseFloat(final_price) < parseFloat(service_original_price)){
                                        price = '<s>'+parseFloat(service_original_price).toFixed(2)+'</s> '+parseFloat(final_price).toFixed(2)+'';
                                    }else{
                                        price = final_price;
                                    }

                                    var tomorrow = new Date();
                                    tomorrow.setDate(tomorrow.getDate() + 1);

                                    var tomorrowFormatted = tomorrow.toISOString().split('T')[0];
                                    var total_count = 0;
                                    var z = 0;
                                    var product_count = 0;
                                    service_details = 
                                        '<style>#service_stylist_id_' + booking_details_id + '_' + serviceID + '_chosen{ pointer-events: none !important; background-color: #e9ecef; color: #6c757d; }</style>' +
                                        '<div class="row single_added_extra_service_details" id="selected_service_details_'+ booking_details_id +'_'+ serviceID +'">'+
                                            '<input type="hidden" id="service_added_from_'+ booking_details_id +'_'+ serviceID +'" value="'+ selected_from +'">'+
                                            '<div class="col-md-12 col-sm-12 col-xs-12 selected-servicesbox" style="height: auto; padding-top: 9px; padding-left:0px;">'+
                                                '<div class="col-lg-8 col-md-12 col-sm-12 col-xs-12">'+
                                                    '<span class="left-span" style="font-size: 13px !important;">'+ service_sub_cat_name +'|'+service_sub_cat_marathi_name+' -> <b>'+ service_name +'|'+service_marathi_name+'</b> <span style="margin-left:15px;">'+ price +'</span></span>'+
                                                    '<div class="span-row">'+
                                                        '<span class="bottom-span">'+ service_duration +' Mins</span>'+
                                                        '<input type="hidden" id="service_reward_points_'+ booking_details_id +'_'+ serviceID +'" name="service_reward_points_'+ booking_details_id +'_'+ serviceID +'" value="">'+
                                                        '<span class="bottom-span" id="service_stylist_timeslot_'+ booking_details_id +'_'+ serviceID +'"></span>'+
                                                        '<div class="col-lg-6" id="service_executive_div_'+ booking_details_id +'_' + serviceID + '" style="display:none;">'+
                                                            '<select class="form-control service_executive_'+ booking_details_id +'" name="service_stylist_id_'+ booking_details_id +'_' + serviceID + '" id="service_stylist_id_'+ booking_details_id +'_' + serviceID + '"></select>'+
                                                        '</div>'+
                                                        '<input type="hidden" class="service_stylist_timeslot_validation_'+ booking_details_id +'" id="service_stylist_timeslot_hidden_'+ booking_details_id +'_'+ serviceID +'" name="service_stylist_timeslot_hidden_'+ booking_details_id +'_'+ serviceID +'" value="">'+
                                                    '</div>'+
                                                '</div>'+
                                                '<div class="col-lg-4 col-md-12 col-sm-12 col-xs-12" style="position:realtive;display:flex; justify-content:center;">'+
                                                    '<button  style="display: block;position: static; margin-top:5px;" type="button" id="product_for_service_button_'+ booking_details_id +'_' + serviceID + '" class="btn  modalbtn" onclick="showPopup(\'ServiceProductModal_'+ booking_details_id +'_' + serviceID + '\')" data-toggle="modal" data-target="#ServiceProductModal_'+ booking_details_id +'_' + serviceID + '"><span id="selected_service_product_'+ booking_details_id +'_' + serviceID + '">0</span>/<span id="total_service_product_'+ booking_details_id +'_' + serviceID + '">0</span></button>'+
                                                    '<div class="modal fade" style="background-color: #00000080; overflow-x:visible !important; overflow-y:visible !important;" id="ServiceProductModal_'+ booking_details_id +'_'+ serviceID +'" tabindex="-1" role="dialog" aria-labelledby="ServiceProductModalLabel_'+ booking_details_id +'_'+ serviceID +'" aria-hidden="true">'+
                                                        '<div class="modal-dialog" role="document" style="width:500px;">'+
                                                            '<div class="modal-content">'+
                                                                '<div class="modal-header">'+
                                                                    '<h5 class="modal-title" id="ServiceProductModalLabel_'+ booking_details_id +'_'+ serviceID +'">'+ service_name +' Service Products</h5>'+
                                                                    '<button type="button" class="close" data-dismiss="modal" aria-label="Close" style="float:none !important; position:absolute;right:10px;top:10px;"  onclick="closePopup(\'ServiceProductModal_'+ booking_details_id +'_'+ serviceID + '\')">'+
                                                                        '<span aria-hidden="true">&times;</span>'+
                                                                    '</button>'+
                                                                '</div>'+
                                                                '<div class="modal-body extra_service_products">'+
                                                                    '<table style="width:100%;">'+
                                                                        '<thead>'+
                                                                            '<tr>'+
                                                                                '<th>Select</th>'+
                                                                                '<th>Product</th>'+
                                                                                '<th>Price</th>'+
                                                                            '</tr>'+
                                                                        '</thead>'+
                                                                        '<tbody>';
                                                    all_products.forEach(function(product) {
                                                        if (productsArray.includes(product.id)) {
                                                            product_count++;
                                                            if(selected_from == '1'){
                                                                var product_price = '0.00';
                                                                var product_price_text = '<div class="service_price_title" ><b>Rs. 0.00</b></div>';
                                                            }else{
                                                                if(product.original_product_price != product.service_product_price_consider){
                                                                    var product_price_text = '<div class="service_price_title"  title="Offer Price"><b>Rs. <s>' + product.original_product_price + '</s> ' + product.service_product_price_consider + '</b></div>';
                                                                }else{
                                                                    var product_price_text = '<div class="service_price_title" ><b>Rs. ' + product.original_product_price + '</b></div>';
                                                                }
                                                                var product_price = product.service_product_price_consider;
                                                            }                                                                                      
                                                            service_details += '<input type="hidden" name="product_discount_in_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_in_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_in + '">' + 
                                                                                '<input type="hidden" name="product_discount_type_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_type_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_type + '">' + 
                                                                                '<input type="hidden" name="product_discount_value_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_value_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_amount_value + '">' + 
                                                                                '<input type="hidden" name="is_product_discount_applied_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="is_product_discount_applied_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.is_product_discount_applied + '">' + 
                                                                                '<input type="hidden" name="product_discount_row_id_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_row_id_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_row_id + '">' + 
                                                                                '<input type="hidden" name="product_discount_slab_min_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_slab_min_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_min_slab + '">' + 
                                                                                '<input type="hidden" name="product_discount_slab_max_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_discount_slab_max_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_max_slab + '">' + 
                                                                                '<input type="hidden" name="product_slab_increment_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_slab_increment_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_slab_increment + '">' + 
                                                                                '<input type="hidden" name="product_applied_flexible_slab_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_applied_flexible_slab_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_slab_consider + '">' + 
                                                                                '<input type="hidden" name="product_received_discount_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_received_discount_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.product_discount_amount + '">' + 
                                                                                '<input type="hidden" name="product_original_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" id="product_original_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="' + product.original_product_price + '">';

                                                        service_details += '<tr>' +
                                                                                '<td><input type="checkbox" class="product-checkbox add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'" name="add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'[]" id="add_service_product_checkbox_'+ booking_details_id +'_'+ serviceID +'_' + product.id + '" value="' + product.id + '" onclick="setAddServiceProductPrice('+ booking_details_id +',' + serviceID + ',' + product.id + ')"></td>' +
                                                                                '<td>' + product.product_name + '' + product.product_discount_text + '</td>' +
                                                                                '<td>' + product_price_text + '</td>' +
                                                                            '</tr>' +
                                                                            '<input type="hidden" id="service_product_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" name="service_product_price_'+ booking_details_id +'_'+ serviceID +'_'+ product.id +'" value="'+ product_price +'">';
                                                        }
                                                    });
                                                    if(product_count == 0){
                                                        service_details += '<tr>' +
                                                                                '<td colspan="3" style="text-align:center;">Products not available</td>' +
                                                                            '</tr>';
                                                    }
                                                    service_details += '</tbody>'+
                                                                    '</table>'+
                                                                '</div>'+
                                                            '</div>'+
                                                        '</div>'+
                                                    '</div>'+
                                                    '<button class="ser_model_X" style="display: block;position: absolute;background: white;border: none;outline: none;box-shadow: none;padding: 0px;margin: 0px;right: 0px;top: 0px; margin-top:2px;" type="button" id="remove_add_service_button_'+ booking_details_id +'_' + serviceID + '" class="btn" onclick="removeAddService(' + booking_details_id + ',' + serviceID + ')"><span style="color: red;font-size: 15px;padding: 2px 6px;border-radius: 100%;"><i class="fa fa-times"></i></span></button>'+
                                                '</div>'+
                                            '</div>'+   
                                        '</div>';
                                    $('#selected_services_empty_'+booking_details_id).hide();
                                    $('#selected_services_' + booking_details_id).append(service_details);
                                    $('#selected_services_' + booking_details_id).show();
                                    $('#total_service_product_' + booking_details_id + '_' + serviceID).text(product_count);

                                    $('.loader_div').hide();   
                                    setAddServicePrice(booking_details_id,serviceID,service_duration,service_rewards,final_price);
                                }, 3000);
                            }else{
                                // alert('Please select booking date and timeslot first');
                                openDialog('Please select booking date and timeslot first'); 
                                $('#service_' + booking_details_id).val('');
                            }
                        }else{
                            $('.loader_div').hide(); 
                            // alert('Service already selected');
                            openDialog('Service already selected'); 
                        }                        
                        $('#service_' + booking_details_id).val('');
                        $('#service_' + booking_details_id).trigger("chosen:updated");
                    });
                });
                
                function formatTime(time) {
                    var hours = time.getHours();
                    var minutes = time.getMinutes();
                    var ampm = hours >= 12 ? 'PM' : 'AM';
                    hours = hours % 12;
                    hours = hours ? hours : 12; // the hour '0' should be '12'
                    minutes = minutes < 10 ? '0' + minutes : minutes;

                    return hours + ':' + minutes + ' ' + ampm;
                }
                function formatToOnlyDate(date) {
                    var monthNames = [
                        "Jan", "Feb", "Mar",
                        "Apr", "May", "Jun", "Jul",
                        "Aug", "Sep", "Oct",
                        "Nov", "Dec"
                    ];

                    var day = date.getDate();
                    var monthIndex = date.getMonth();
                    var year = date.getFullYear();

                    return day + ' ' + monthNames[monthIndex] + ' ' + year;
                }
                function formatToOnlyDate_PHPFormat(date) {
                    var year = date.getFullYear();
                    var month = ('0' + (date.getMonth() + 1)).slice(-2); // Adding leading zero if necessary
                    var day = ('0' + date.getDate()).slice(-2); // Adding leading zero if necessary
                    return year + '-' + month + '-' + day;
                }                
                function convertTo24HourFormat(time) {
                    var hours = parseInt(time.split(':')[0]);
                    var minutes = parseInt(time.split(':')[1].split(' ')[0]);
                    var ampm = time.split(' ')[1];

                    if (ampm === 'PM' && hours < 12) {
                        hours += 12;
                    }
                    if (ampm === 'AM' && hours === 12) {
                        hours = 0;
                    }

                    var formattedTime = ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2) + ':00';
                    return formattedTime;
                }
                function fetchTimeSlots(booking_details_id){
                    var booking_date = $('#booking_date_'+booking_details_id).val();
                    var booking_start = $('#booking_start_'+booking_details_id).val();
                    var slot_start_time = $('#slot_start_time_'+booking_details_id).val();
                    var employee = $('#employee_'+booking_details_id).val();
                    var employee_selection_rule = $('#employee_selection_rule_'+booking_details_id).val();
                    if(booking_date != ""){
                        $('#booking_timeslots_'+booking_details_id).html('');
                        $.ajax({
                            type: "POST",
                            url: "<?=base_url();?>salon/Ajax_controller/get_day_timeslots_extra_service_ajx",
                            data:{
                                'source':'vendor_panel',
                                'booking_details_id':booking_details_id,
                                'booking_date':booking_date,
                                'selected_slot_start_time':slot_start_time,
                                'booking_start':booking_start,
                                'user_selected_service': user_selected_add_service,
                                'employee': employee,
                                'employee_selection_rule': employee_selection_rule,
                            },
                            success: function(data){
                                $('#booking_timeslots_'+booking_details_id).show();
                                $('#booking_timeslots_'+booking_details_id).html(data);

                                if($('#booking_start_'+booking_details_id).val() != ""){
                                    setServiceTimeSlots(booking_details_id);
                                }
                            },
                            error: function(jqXHR, textStatus, errorThrown) {
                                console.log(textStatus, errorThrown);
                            }
                        }); 
                    }
                }                
                function setBookingStart(value,booking_details_id) {
                    if(value == ""){
                        var selectedValue = $('input[name="booking_start_time_slot_'+booking_details_id+'"]:checked').val();
                    }else{
                        var selectedValue = value;
                    }
                    if (selectedValue != "") {
                        // $('#booking_timeslots').hide();
                        $('#booking_start_'+booking_details_id).val(selectedValue);
                        $('.loader_div').show();
                        fetchTimeSlots(booking_details_id);
                        $('.loader_div').hide();
                    }
                }
                
                function setServiceTimeSlots(booking_details_id){
                    for(var i=0;i<user_selected_add_service.length;i++){
                        var singleService = user_selected_add_service[i];            
                        var service_duration = $('#service_duration_' + booking_details_id + '_' + singleService).val();
                        var service_rewards = $('#service_rewards_' + booking_details_id + '_' + singleService).val();

                        var booking_date = $('#booking_date_'+booking_details_id).val();
                        var previous_start = $('#previous_start_'+booking_details_id).val();

                        if(booking_date != "" && $('#booking_start_'+booking_details_id).val() != ""){
                            if(i == 0){
                                var booking_start = $('#booking_start_'+booking_details_id).val();
                            }else{
                                var booking_start = previous_start;
                            }
                            
                            var dateParts = booking_date.split("-");
                            var day = parseInt(dateParts[0], 10);
                            var month = parseInt(dateParts[1], 10);
                            var year = parseInt(dateParts[2], 10);

                            var timeParts = booking_start.split(":");
                            var hours = parseInt(timeParts[0], 10);
                            var minutes = parseInt(timeParts[1], 10);

                            if (booking_start.includes("PM") && hours !== 12) {
                                hours += 12;
                            } else if (booking_start.includes("AM") && hours === 12) {
                                hours = 0;
                            }
                            
                            selected_slot_start = new Date(year, month - 1, day, hours, minutes, 0);
                            var selected_slot_end = new Date(selected_slot_start.getTime() + (service_duration * 60000));

                            var formatted_slot_start_time = formatTime(selected_slot_start);
                            var formatted_slot_end_time = formatTime(selected_slot_end);

                            var formatted_slot_start_time_24hr = convertTo24HourFormat(formatted_slot_start_time);
                            var formatted_slot_end_time_24hr = convertTo24HourFormat(formatted_slot_end_time);
                            var formatted_booking_date_PHP = formatToOnlyDate_PHPFormat(selected_slot_start);
                            var timeslot_string = formatted_booking_date_PHP + ' ' + formatted_slot_start_time_24hr + '@@@' + formatted_booking_date_PHP + ' ' + formatted_slot_end_time_24hr;

                            $('#service_reward_points_' + booking_details_id + '_' + singleService).val(service_rewards);
                            $('#service_stylist_timeslot_hidden_' + booking_details_id + '_' + singleService).val(timeslot_string);
                            $('#service_stylist_timeslot_' + booking_details_id + '_' + singleService).text(formatted_slot_start_time + ' to ' + formatted_slot_end_time);
                                        
                            getTimeStylist(booking_details_id,booking_date,selected_slot_start,selected_slot_end,singleService,service_duration);

                            $('#previous_start_'+booking_details_id).val(formatted_slot_end_time_24hr);
                        }
                    }
                }
                
                function formatDate(date) {
                    var year = date.getFullYear();
                    var month = ('0' + (date.getMonth() + 1)).slice(-2);
                    var day = ('0' + date.getDate()).slice(-2);
                    var hours = ('0' + date.getHours()).slice(-2);
                    var minutes = ('0' + date.getMinutes()).slice(-2);
                    var seconds = ('0' + date.getSeconds()).slice(-2);

                    return year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
                }    
                function getTimeStylist(booking_details_id,booking_date,selected_slot_start,selected_slot_end,singleService,service_duration){
                    var formatted_start = formatDate(selected_slot_start);
                    var formatted_end = formatDate(selected_slot_end);

                    if (formatted_start !== "" && typeof formatted_start !== "undefined" && formatted_end !== "" && typeof formatted_end !== "undefined") {
                        selectedTimeSlot = formatted_start + '@@@' + formatted_end;
                        $('#service_executive_div_' + booking_details_id + '_' + singleService).hide();
                        $('#service_stylist_id_' + booking_details_id + '_' + singleService).html("");
                        var previous_stylist = $('#previous_stylist_' + booking_details_id).val();
                        var selected_employee = $('#employee_'+booking_details_id).val();
                        var employee_selection_rule = $('#employee_selection_rule_'+booking_details_id).val();
                        $.ajax({
                            type: "POST",
                            url: "<?= base_url(); ?>salon/Ajax_controller/get_available_stylists_servicewise_ajx",
                            data: { 'service':singleService,'selectedTimeSlot': selectedTimeSlot, 'selected_employee': selected_employee, 'employee_selection_rule': employee_selection_rule, 'previous_stylist': previous_stylist },
                            success: function(data) {
                                $('#service_stylist_id_' + booking_details_id + '_' + singleService).chosen();
                                $('#service_stylist_id_' + booking_details_id + '_' + singleService).val('');
                                var stylists = $.parseJSON(data);
                                if(stylists.length > 0){
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService).empty();
                                    // $('#service_stylist_id_' + booking_details_id + '_' + singleService).append('<option value="">Select Executive</option>');
                                    var opts = $.parseJSON(data);
                                    var count = 1;
                                    $.each(opts, function(i, d) {
                                        store_flag = d.store_flag;
                                        is_service_available = d.is_service_available;
                                        is_shift_available = d.is_shift_available;
                                        is_booking_present = d.is_booking_present;
                                        is_on_break = d.is_on_break;
                                        short_break_flag = d.short_break_flag;
                                        is_on_leave_flag = d.is_on_leave_flag;
                                        is_emergency_flag = d.is_emergency_flag;
                            
                                        shift_id = d.shift_id;
                                        shift_type = d.shift_type;
                                        
                                        var emp_unique_id = d.stylist_details.id + '@@@' + shift_id + '@@@' + shift_type;
                                        
                                        if(is_service_available == '1'){
                                            if(store_flag == '1'){
                                                if(is_emergency_flag == '0'){
                                                    if(is_on_leave_flag == '0'){
                                                        if(is_shift_available == '1'){
                                                            if(is_booking_present == '0'){
                                                                if(is_on_break == '0'){
                                                                    if(short_break_flag == '1'){
                                                                        var message = '';
                                                                        var disabled = '';
                                                                        var is_Allowed = 1;
                                                                    }else{
                                                                        var message = '- Stylist On Short Break';
                                                                        var disabled = 'disabled';
                                                                        var is_Allowed = 0;
                                                                    }
                                                                }else{
                                                                    var message = '- Stylist On Break';
                                                                    var disabled = 'disabled';
                                                                    var is_Allowed = 0;
                                                                }
                                                            }else{
                                                                var message = '- Slot Already Booked';
                                                                var disabled = 'disabled';
                                                                var is_Allowed = 0;
                                                            }
                                                        }else{
                                                            var message = '- Shift Not Available';
                                                            var disabled = 'disabled';
                                                            var is_Allowed = 0;
                                                        }
                                                    }else{
                                                        var message = '- On Leave';
                                                        var disabled = 'disabled';
                                                        var is_Allowed = 0;
                                                    }
                                                }else{
                                                    var message = '- Store Emergency Closed';
                                                    var disabled = 'disabled';
                                                    var is_Allowed = 0;
                                                }
                                            }else{
                                                var message = '- Exceed Salon Times';
                                                var disabled = 'disabled';
                                                var is_Allowed = 0;
                                            }

                                            var selected = '';
                                            if(d.to_be_selected == '1'){
                                                selected = 'selected';
                                                $('#previous_stylist_' + booking_details_id).val(d.stylist_details.id);
                                            }
                                            
                                            if(rules_employee_selection == '2'){
                                                selected = '';
                                            }

                                            // $('#service_stylist_id_' + booking_details_id + '_' + singleService).append('<option ' + disabled + ' ' + selected + ' value="' + d.stylist_details.id + '">' + d.stylist_details.full_name + ' ' + message + '</option>');
                                            $('#service_stylist_id_' + booking_details_id + '_' + singleService).append('<option ' + disabled + ' ' + selected + ' value="' + emp_unique_id + '">' + d.stylist_details.full_name + ' ' + message + '</option>');
                                        }else{
                                            var disabled = 'disabled';
                                            var message = '- Stylist Not Available';
                                        }
                                    });
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService).trigger('chosen:updated');
                                    $('#service_executive_div_' + booking_details_id + '_' + singleService).show();
                                }else{
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService+"_chosen").hide();
                                    $('#service_stylist_id_' + booking_details_id + '_' + singleService).hide();
                                    $('#service_executive_div_' + booking_details_id + '_' + singleService).append('<label style="font-size:10px;" class="error">Please, first set Stylist designation employees.</label>');
                                    $('#service_executive_div_' + booking_details_id + '_' + singleService).show();
                                }
                            },
                        });
                    }
                }
                function removeAddService(booking_details_id,serviceID){
                    if(confirm('Are you sure you want to remove service?')){ 
                    // openConfirmationDialog("Are you sure you want to remove service?", function (confirmed) {
                    // if (confirmed) {
                        $('.loader_div').show();   
                        setTimeout(function() {
                            var current_total = parseFloat($("#total_add_service_price_" + booking_details_id).val());                      
                            var selected_product = parseInt($('#selected_service_product_' + booking_details_id + '_'+serviceID).text());
                            var service_price = $('#service_price_' + booking_details_id + '_' + serviceID).val();

                            var index = user_selected_add_service.findIndex(function(id) {
                                return id === serviceID.toString();
                            });

                            if (index !== -1) {
                                user_selected_add_service.splice(index, 1);
                                var updatedValue = user_selected_add_service.join(',');
                                $("#selected_add_service_" + booking_details_id).val(updatedValue);
                            }

                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).attr('disabled', true);

                            current_total = current_total - service_price;

                            $('#executive_for_service_button_'+booking_details_id+'_'+serviceID).text('Select Stylist'); 
                                
                            if(user_selected_add_service.length == 0){
                                $('#selected_services_empty_'+booking_details_id).show();
                                $('#selected_services_'+booking_details_id).hide();
                            }

                            var tempArray = [];
                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).each(function() {
                                if ($(this).prop('checked')) {
                                    $(this).prop('checked', false); 
                                    tempArray.push($(this).val());
                                }
                            });

                            for (var i = 0; i < tempArray.length; i++) {
                                setAddServiceProductPrice(booking_details_id,serviceID,tempArray[i]);
                            }

                            calculateTotalAddServiceDuration(booking_details_id,serviceID);
                
                            fetchTimeSlots(booking_details_id);

                            $('#total_add_service_price_' + booking_details_id).val(parseFloat(current_total).toFixed(2));
                            $('#total_add_service_price_text_' + booking_details_id).text(parseFloat(current_total).toFixed(2));

                            setPayableAddServiceAmount(booking_details_id,serviceID);

                            $("#selected_service_details_"+booking_details_id+"_"+serviceID).remove();

                            $('.loader_div').hide();   
                        }, 3000);
                    }
                    // });
                }
                function setAddServicePrice(booking_details_id,serviceID,service_duration,service_rewards,service_price){ 
                    var current_total = parseFloat($("#total_add_service_price_" + booking_details_id).val());
                    if(!user_selected_add_service.includes(serviceID)){                        
                        var booking_date = $('#booking_date_' + booking_details_id).val();
                        var booking_start = $('#booking_start_' + booking_details_id).val();

                        if (booking_date !== "" && booking_start !== "") {
                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).attr('disabled', false);

                            current_total = current_total + parseFloat(service_price);

                            user_selected_add_service.push(serviceID);
                            var currentValue = $("#selected_add_service_" + booking_details_id).val(); 
                            if (currentValue === '') {
                                $("#selected_add_service_" + booking_details_id).val(serviceID); 
                            } else {
                                $("#selected_add_service_" + booking_details_id).val(currentValue + ',' + serviceID);
                            }

                            var tempArray = [];

                            $(".add_service_product_checkbox_"+booking_details_id+"_"+serviceID).each(function() {
                                $(this).prop('checked', true); 
                                tempArray.push($(this).val());
                            });

                            for (var i = 0; i < tempArray.length; i++) {
                                setAddServiceProductPrice(booking_details_id,serviceID,tempArray[i]);
                            }
                        }else{
                            // alert('Please select booking date and timeslot first');
                            openDialog('Please select booking date and timeslot first'); 
                            $('#service_' + booking_details_id).val('');
                        }
                    }else{
                        // alert('Service already selected');
                        openDialog('Service already selected'); 
                    }
                    
                    calculateTotalAddServiceDuration(booking_details_id,serviceID);
                    fetchTimeSlots(booking_details_id);

                    $('#total_add_service_price_' + booking_details_id).val(parseFloat(current_total).toFixed(2));
                    $('#total_add_service_price_text_' + booking_details_id).text(parseFloat(current_total).toFixed(2));

                    setPayableAddServiceAmount(booking_details_id,serviceID);
                }

                function setAddServiceProductPrice(booking_details_id,serviceID,productID){
                    var product_price = parseFloat($('#service_product_price_' + booking_details_id + '_'+serviceID+'_'+productID).val());
                    var current_total = parseFloat($('#total_add_service_product_price_' + booking_details_id).val());
                    var selected_product = parseInt($('#selected_service_product_' + booking_details_id + '_'+serviceID).text());
                    
                    if ($('#add_service_product_checkbox_' + booking_details_id + '_'+serviceID+'_'+productID).is(':checked')) {      
                        current_total = current_total + product_price;
                        selected_product = selected_product + 1;

                        user_selected_add_service_product.push(productID);
                    } else {
                        addServiceRemoveValue(user_selected_add_service_product, productID);

                        current_total = current_total - product_price;
                        selected_product = selected_product - 1;
                    }

                    $('#total_add_service_product_price_' + booking_details_id).val(parseFloat(current_total).toFixed(2));
                    $('#total_add_service_product_price_text_' + booking_details_id).text(parseFloat(current_total).toFixed(2));
                    $('#selected_service_product_' + booking_details_id + '_'+serviceID).text(parseInt(selected_product));
                    
                    setPayableAddServiceProductAmount(booking_details_id,serviceID);
                    $('.loader_div').hide(); 
                }
                function addServiceRemoveValue(arr, value) {
                    var index = arr.indexOf(value);
                    if (index !== -1) {
                        arr.splice(index, 1);
                    }
                    return arr;
                }
                
                function setPayableAddServiceProductAmount(booking_details_id,serviceID){
                    total_product_amount = parseFloat($('#total_add_service_product_price_' + booking_details_id).val());

                    member_product_discount = $('#add_service_membership_product_discount_' + booking_details_id).val();
                    membership_discount_type = $('#add_service_membership_discount_type_' + booking_details_id).val();

                    if (typeof member_product_discount === 'undefined' || member_product_discount === '') {
                        member_product_discount = 0;
                    }else{
                        member_product_discount = parseFloat(member_product_discount);
                    }
                    
                    if(membership_discount_type == '0'){
                        discount = (total_product_amount * member_product_discount)/100;
                    }else if(membership_discount_type == '1'){
                        discount = member_product_discount;
                    }else{
                        discount = 0;
                    }        

                    if(total_product_amount == 0){
                        discount = 0;
                    }

                    $('#add_service_membership_product_discount_amount_' + booking_details_id).val(parseFloat(discount).toFixed(2));

                    payable = total_product_amount - discount;
                    
                    $('#add_service_product_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));
                    $('#add_service_product_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));

                    setPayableAddServiceAmount(booking_details_id,serviceID);
                }
                
                function setPayableAddServiceAmount(booking_details_id,serviceID){
                    total_service_amount = parseFloat($('#total_add_service_price_' + booking_details_id).val());   
                    
                    member_service_discount = $('#add_service_membership_service_discount_' + booking_details_id).val();
                    membership_discount_type = $('#add_service_membership_discount_type_' + booking_details_id).val();

                    if (typeof member_service_discount === 'undefined' || member_service_discount === '') {
                        member_service_discount = 0;
                    }else{
                        member_service_discount = parseFloat(member_service_discount);
                    }
                    
                    if(membership_discount_type == '0'){
                        discount = (total_service_amount * member_service_discount)/100;
                    }else if(membership_discount_type == '1'){
                        discount = member_service_discount;
                    }else{
                        discount = 0;
                    }        

                    if(total_service_amount == 0){
                        discount = 0;
                    }

                    $('#add_service_membership_service_discount_amount_' + booking_details_id).val(parseFloat(discount).toFixed(2));

                    payable = total_service_amount - discount;

                    $('#add_service_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));    
                    $('#add_service_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));    

                    setAddServicePayableAmount(booking_details_id,serviceID);
                } 
                function setAddServicePayableAmount(booking_details_id,serviceID){
                    calculateAddServiceTotalDiscount(booking_details_id,serviceID);

                    service_payable = parseFloat($('#add_service_payable_hidden_' + booking_details_id).val());
                    product_payable = parseFloat($('#add_service_product_payable_hidden_' + booking_details_id).val());

                    payable = service_payable + product_payable;

                    $('#add_service_final_payable_hidden_' + booking_details_id).val(parseFloat(payable).toFixed(2));
                    $('#add_service_final_payable_text_' + booking_details_id).text(parseFloat(payable).toFixed(2));
                }
                
                function calculateAddServiceTotalDiscount(booking_details_id,serviceID){
                    $('#add_service_discount_details_div_' + booking_details_id).html('');
                    var membership_service_discount_amount = parseFloat($('#add_service_membership_service_discount_amount_' + booking_details_id).val());
                    var membership_product_discount_amount = parseFloat($('#add_service_membership_product_discount_amount_' + booking_details_id).val());

                    total_discount = membership_service_discount_amount + membership_product_discount_amount;
                    $('#add_service_total_discount_amount_text_' + booking_details_id).text(parseFloat(total_discount).toFixed(2));
                    $('#add_service_total_discount_amount_' + booking_details_id).val(parseFloat(total_discount).toFixed(2));

                    var discount_details = '<div id="extra_service_discount_details_info"><i class="fas fa-info-circle" style="color:#0000ffb0;"></i>';
                    discount_details += '<div class="extra-service-discount-tooltip">';
                    if (membership_service_discount_amount > 0) {
                        discount_details += '<p>Membership Service Discount <span class="amount" style="float: right;">' + membership_service_discount_amount.toFixed(2) + '</span></p>';
                    }
                    if (membership_product_discount_amount > 0) {
                        discount_details += '<p>Membership Product Discount <span class="amount" style="float: right;">' + membership_product_discount_amount.toFixed(2) + '</span></p>';
                    }
                    discount_details += '<div style="border-top:1px solid #ccc;margin-top:1px;"><p>Total Discount <span class="amount" style="float: right;">' + total_discount.toFixed(2) + '</span></p></div>';
                    discount_details += '</div></div>';
                    if(total_discount > 0){
                        $('#add_service_discount_details_div_' + booking_details_id).html(discount_details);
                    }
                } 

                function calculateTotalAddServiceDuration(booking_details_id,serviceID){
                    total_duration = 0;

                    for(var i=0;i<user_selected_add_service.length;i++){
                        duration = $('#service_duration_' + booking_details_id + '_' + serviceID).val();
                        total_duration = total_duration + parseFloat(duration);
                    }

                    $('#upper_duration').text(parseInt(total_duration) + ' Mins');
                }
            </script>
        <?php 
        }else{ 
        ?>
            <div>
                <label class="error">Booking details not found</label>
            </div>
        <?php 
        }}else{ 
        ?>
            <div>
                <label class="error">Booking not found</label>
            </div>
        <?php 
        }
    }
    
    public function get_booking_category_services(){                                            
        $category = $this->input->post('category');
        $sub_category = $this->input->post('sub_category');
        $booking_id = $this->input->post('booking_details_id');
        $custID = $this->input->post('booking_customer_id');

        $this->db->select('tbl_new_booking.*,tbl_salon_customer.gender as customer_gender, tbl_salon_customer.membership_pkey,tbl_salon_customer.id as customer_id,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','0');
        $bookings = $this->db->get('tbl_new_booking')->row();

        if(!empty($bookings)){
			$this->db->select('tbl_salon_emp_service.*,tbl_admin_sub_category.sub_category as service_sub_category,tbl_admin_sub_category.sub_category_marathi');
            $this->db->where('tbl_salon_emp_service.branch_id', $bookings->branch_id);
            $this->db->where('tbl_salon_emp_service.salon_id', $bookings->salon_id);
            $this->db->where('tbl_salon_emp_service.category',$category);
            if($bookings->customer_gender != ""){
                $this->db->where('tbl_salon_emp_service.gender',$bookings->customer_gender);
            }
            if($sub_category != ""){
                $this->db->where('tbl_salon_emp_service.sub_category',$sub_category);
            }
            $this->db->where('tbl_salon_emp_service.is_deleted','0');
			$this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
            $services = $this->db->get('tbl_salon_emp_service')->result();

            $custom = array();

            if(!empty($services)){
                foreach($services as $services_result){
                    $offers_list = $this->get_all_active_offers();
                    
                    $single_offer_discount_type = '';
                    $service_offer_discount_offers = '';
                    $service_offer_discount = '';
                    $offer_id = '';
                    $is_offer_applied = '0';

                    $service_discount_rewards_type = '';
                    $discount_in = '';
                    $discount_type = '';
                    $discount_amount_value = '';
                    $discount_row_id = '';
                    $customer_criteria = '';
                    $is_discount_applied = '0';

                    $discount_amount = 0;
                    $slab_increment = '5';
                    $slab_consider = '';
                    $min_slab = '';
                    $max_slab = '';

                    $rewards_discount_amount = 0;
                    $rewards_slab_increment = '5';
                    $rewards_slab_consider = '';
                    $rewards_min_slab = '';
                    $rewards_max_slab = '';

                    $service_applied_discount = $this->get_customer_service_applied_discount($custID,$services_result->id);
                    if($service_applied_discount['is_discount_applied'] == '1'){
                        $is_discount_applied = '1';
                        $discount_row_id = $service_applied_discount['discount_row_id'];
                        $customer_criteria = $service_applied_discount['customer_criteria'];
                        $discount_type = $service_applied_discount['discount_type'];
                        $discount_in = $service_applied_discount['discount_in'];
                        $discount_amount_value = (float)$service_applied_discount['discount_amount'];
                        $min_slab = $service_applied_discount['min_flexible'];
                        $max_slab = $service_applied_discount['max_flexible'];
                        if($discount_type == '1'){    //Flexible
                            $customer_last_service_booking = $this->get_customer_last_service_booking($custID,$services_result->id);
                            if(!empty($customer_last_service_booking)){            
                                if($customer_criteria == '1'){                             
                                    $prev_Applied_slab = $customer_last_service_booking->rewards_applied_flexible_slab;
                                }else{
                                    $prev_Applied_slab = $customer_last_service_booking->applied_flexible_slab;
                                }

                                if($prev_Applied_slab != ""){
                                    $next_slab = $prev_Applied_slab + $slab_increment;
                                }else{
                                    $next_slab = $min_slab + $slab_increment;
                                }

                                if($next_slab > $max_slab){
                                    $slab_consider = $min_slab;
                                }else{
                                    $slab_consider = $next_slab;
                                }
                            }else{
                                $slab_consider = $min_slab;
                            }

                            if($discount_in == '0'){  //percentage
                                $discount_amount = ((float)$slab_consider * (float)$services_result->final_price) / 100;
                            }elseif($discount_in == '1'){ //flat
                                $discount_amount = (float)$slab_consider;
                            }
                        }elseif($discount_type == '0'){   //Fixed
                            if($discount_in == '0'){  //percentage
                                $discount_amount = ((float)$discount_amount_value * (float)$services_result->final_price) / 100;
                            }elseif($discount_in == '1'){ //flat
                                $discount_amount = (float)$discount_amount_value;
                            }
                        }
                    }

                    if($is_discount_applied == '1'){
                        if($customer_criteria == '1'){  //for regular customer rewards are given
                            $rewards_discount_amount = $discount_amount;
                            $rewards_slab_increment = $slab_increment;
                            $rewards_slab_consider = $slab_consider;
                            $rewards_min_slab = $min_slab;
                            $rewards_max_slab = $max_slab;

                            $discount_amount = 0;
                            $slab_increment = '5';
                            $slab_consider = '';
                            $min_slab = '';
                            $max_slab = '';

                            $service_discount_rewards_type = '1';   // rewards
                        }else{                                    
                            $service_discount_rewards_type = '0';   // discount
                        }
                    }

                    $service_price_consider = (float)$services_result->final_price - (float)$discount_amount;
                    $original_price = (float)$services_result->final_price;                        

                    $custom[] = array(
                        'id'                    =>  $services_result->id,
                        'service_name'          =>  $services_result->service_name,
                        'sub_category'          =>  $services_result->service_sub_category,
                        'sub_category_marathi'  =>  $services_result->sub_category_marathi,
                        'service_name_marathi'  =>  $services_result->service_name_marathi,
                        'service_duration'      =>  $services_result->service_duration,
                        'reward_point'          =>  $services_result->reward_point,
                        'product'               =>  $services_result->product,
                        'service_price'         =>  $service_price_consider,
                        'service_original_price'=>  $original_price,
                        'prev_stylist'          =>  '',
                        'is_offer_applied'      =>  $is_offer_applied,
                        'applied_offer_id'      =>  $offer_id,
                        'service_offer_discount_type'   =>  $single_offer_discount_type,
                        'service_offer_discount'        =>  $service_offer_discount_offers,
                        'service_offer_discount_amount' =>  $service_offer_discount,
                        'service_added_from'            =>  '0',
                        'service_booking_details_id'    =>  '',
                        'is_package_service'            =>  '0',
                        'package_id'                    =>  '',
                        'package_allocation_id'         =>  '',
                        'package_allocation_details_id' =>  '',
                        'package_name'                  =>  '',
                        'package_button'                =>  '',
                        
                        'service_marketing_discount_type' =>  $service_discount_rewards_type,
                        'is_service_discount_applied'           =>  $is_discount_applied,
                        'service_discount_row_id'               =>  $discount_row_id,
                        'service_discount_customer_criteria'    =>  $customer_criteria,

                        'discount_in'                   =>  $discount_in,
                        'discount_type'                 =>  $discount_type,
                        'discount_value'                =>  $discount_amount_value,

                        'discount_slab_min'             =>  $min_slab,
                        'discount_slab_max'             =>  $max_slab,
                        'slab_increment'                =>  $slab_increment,
                        'applied_flexible_slab'         =>  $slab_consider,
                        'received_discount'             =>  $discount_amount,

                        'rewards_discount_slab_max'     =>  $rewards_max_slab,
                        'rewards_discount_slab_min'     =>  $rewards_min_slab,
                        'rewards_slab_increment'        =>  $rewards_slab_increment,
                        'rewards_applied_flexible_slab' =>  $rewards_slab_consider,
                        'rewards_received_discount'     =>  $rewards_discount_amount,
                    );
                }
            }
            
            $allocations = $this->get_customer_booking_package_allocation($bookings->package_allocation_id);
            // $allocations = $this->get_customer_all_active_package_allocation($bookings->customer_id);
            if(!empty($allocations)){
                foreach($allocations as $allocations_result){
                    $allocation_services = $this->get_customer_active_package_services($bookings->customer_id,$allocations_result->id);
                    if(!empty($allocation_services)){
                        foreach($allocation_services as $allocation_services_result){  
                            $service_details = $this->get_service_details($allocation_services_result->item_id);                          
                            $package_service_products = $this->get_package_products_single($allocation_services_result->pacakge_id,$service_details->id);                         
                            if(!empty($service_details)){
                                if($service_details->category == $category){
                                    $custom[] = array(
                                        'id'                    =>  $service_details->id,
                                        'service_name'          =>  $service_details->service_name,
                                        'sub_category'          =>  $services_result->service_sub_category,
                                        'sub_category_marathi'  =>  $services_result->sub_category_marathi,
                                        'service_name_marathi'  =>  $service_details->service_name_marathi,
                                        'service_duration'      =>  $service_details->service_duration,
                                        'reward_point'          =>  $service_details->reward_point,
                                        'product'               =>  !empty($package_service_products) ? $package_service_products->product_ids : '',
                                        'service_price'         =>  '0',
                                        'service_original_price'=>  '0',
                                        'prev_stylist'          =>  '',
                                        'is_offer_applied'      =>  '0',
                                        'applied_offer_id'      =>  '',
                                        'service_offer_discount_type'   =>  '',
                                        'service_offer_discount'        =>  '',
                                        'service_offer_discount_amount' =>  '',
                                        'service_added_from'            =>  '1',
                                        'service_booking_details_id'    =>  '',
                                        'is_package_service'            =>  '1',
                                        'package_id'                    =>  $allocation_services_result->pacakge_id,
                                        'package_allocation_id'         =>  $allocations_result->id,
                                        'package_allocation_details_id' =>  $allocation_services_result->id,
                                        'package_name'                  =>  $allocations_result->package_name,
                                        'package_button'                =>  '<button class="btn btn-sm" style="float:left; background-color:'.$allocations_result->bg_color.'; color:'.$allocations_result->text_color.'">'.$allocations_result->package_name.'</button>',
                                    );
                                }
                            }
                        }
                    }
                }
            }
            echo json_encode($custom);
        }else{
            echo json_encode(array());
        }
    }
    public function get_category_sub_categories(){
        $category = $this->input->post('category');
        $sub_category = $this->input->post('sub_category');
        $customer_id = $this->input->post('customer_id');

        $this->db->where('id',$customer_id);
        $this->db->where('is_deleted','0');
        $customer = $this->db->get('tbl_salon_customer')->row();
        
        $gender = '';
        if(!empty($customer)){
            $gender = $customer->gender;
        }
        
        $this->db->where('sup_category',$category);
        if($sub_category != ""){
            $this->db->where('tbl_salon_emp_service.sub_category',$sub_category);
        }
        if($gender != ""){
            $this->db->where('gender',$gender);
        }
        $this->db->where('is_deleted','0');
        $result = $this->db->get('tbl_admin_sub_category')->result();
        echo json_encode($result);
    }
    public function get_category_services(){
        $category = $this->input->post('category');
        $sub_category = $this->input->post('sub_category');
        $customer_id = $this->input->post('customer_id');

        $this->db->where('id',$customer_id);
        $this->db->where('is_deleted','0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $customer = $this->db->get('tbl_salon_customer')->row();
        
        $gender = '';
        if(!empty($customer)){
            $gender = $customer->gender;
        }

        $this->db->select('tbl_salon_emp_service.*,tbl_admin_sub_category.sub_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_service_category.sup_category, tbl_admin_service_category.sup_category_marathi');
        $this->db->join('tbl_admin_sub_category', 'tbl_salon_emp_service.sub_category = tbl_admin_sub_category.id');
        $this->db->join('tbl_admin_service_category', 'tbl_salon_emp_service.category = tbl_admin_service_category.id');
        $this->db->where('tbl_salon_emp_service.category',$category);
        if($sub_category != ""){
            $this->db->where('tbl_salon_emp_service.sub_category',$sub_category);
        }
        if($gender != ""){
            $this->db->where('tbl_salon_emp_service.gender',$gender);
        }
        $this->db->where('tbl_salon_emp_service.is_deleted','0');
        $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $services = $this->db->get('tbl_salon_emp_service')->result();
        if(!empty($services)){
            foreach($services as &$services_result){
                $services_result->customer_last_service_booking =  $this->Salon_model->get_customer_last_service_booking($customer_id,$services_result->id);
                $services_result->service_applied_discount = $this->get_customer_service_applied_discount($customer_id,$services_result->id);
            }
        }
        echo json_encode($services);
    }
    
    public function show_service_cancel_popup_ajx(){
        $booking_service_details_id = $this->input->post('booking_service_details_id');
        $booking_id = $this->input->post('booking_id');

        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $bookings = $this->db->get('tbl_new_booking')->row();
        if(!empty($bookings)){
            $this->db->select('tbl_booking_services_details.*,tbl_salon_employee.full_name as stylist_name, tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_salon_emp_service.service_duration');
            $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
            $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
            $this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
            $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
            $this->db->where('tbl_booking_services_details.booking_id',$bookings->id);
            $this->db->where('tbl_booking_services_details.is_deleted','0');
            $booking_services = $this->db->get('tbl_booking_services_details')->result();
            $description = '';
            $service_details_ids = array();
            if(!empty($booking_services)){
                foreach($booking_services as $data){
                    $description .= ''.$data->service_name.'|'.$data->service_name_marathi.': '.$data->stylist_name.'<br>';
                    $service_details_ids[] = $data->id;
                }
            }
        ?>
            <div class="calender_booking_details">
                <table style="width:100%;" border="1">
                    <thead>
                        <tr>
                            <th>Customer</th>
                            <th>Booking Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td style="padding: 5px;"><?=$bookings->customer_name;?>, <?=$bookings->customer_phone;?></td>
                            <td style="padding: 5px;"><?=date('d-m-Y',strtotime($bookings->service_start_date));?></td>
                        </tr>
                    </tbody>
                </table>
                <!-- <form method="post" name="cancel_form_<?=$bookings->id;?>" id="cancel_form_<?=$bookings->id;?>" enctype="multipart/form-data" action="<?=base_url();?>cancel_booking_service/<?=base64_encode($bookings->id);?>">
                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <label>Remark<b class="require">*</b></label>
                            <textarea class="form-control" name="remark_<?=$bookings->id;?>" id="remark_<?=$bookings->id;?>"></textarea>
                        </div>
                        <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <button type="submit" class="btn btn-primary" id="cancel_btn" value="cancel_btn">Save</button>
                        </div>
                    </div>
                </form> --> 
                    <table id="example" class="table  table-bordered dt-responsive nowrap example list_table"  style="margin-top:10px; width:100%">
						<thead>
							<tr>
								<th>Select</th>
								<th>Service</th>
								<th>Duration</th>
								<th>Stylist</th>
							<tr>
						</thead>
						<tbody>
						<?php
							if(!empty($booking_services)){
								$z = 1;
								foreach($booking_services as $booking_services_result){
                                    if($booking_services_result->service_added_from == '1'){
                                        $background_color = 'background-color:#d1ddfd;';
                                    }else{
                                        $background_color = '';
                                    }
                                    if($booking_services_result->service_status == '2'){
                                        $background_color = 'background-color:#ffd8d8;';
                                    }
						?>
							<tr style="<?=$background_color;?>">
								<td>
                                    <?php if($booking_services_result->service_status != '2'){ ?>
                                        <?php if($booking_services_result->service_added_from != '1'){ ?>
                                            <input type="checkbox" checked class="service_details_checkboxes" name="services_for_cancel_<?=$bookings->id;?>" value="<?=$booking_services_result->id;?>">
                                        <?php } ?>
                                    <?php } ?>
                                </td>
								<td><?=$booking_services_result->service_name;?><br><?=$booking_services_result->service_name_marathi;?></td>
								<td><?= date('h:i A',strtotime($booking_services_result->service_from)).' to '.date('h:i A',strtotime($booking_services_result->service_to));?></td>
								<td><?=$booking_services_result->stylist_name;?></td>
							</tr>
							<?php 
								}} 
							?>
						</tbody>
					</table>               
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" id="cancel_btn_div" style="margin-top:20px;">
                    <!-- <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        <label>Remark</label>
                        <textarea class="form-control" name="remark_<?=$bookings->id;?>" id="remark_<?=$bookings->id;?>"></textarea>
                    </div> -->
                    <label for="remark_<?=$bookings->id;?>" id="remark_error_<?=$bookings->id;?>" generated="true" class="error"></label>
                    <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        <button type="button" class="btn btn-danger" id="cancel_btn" value="cancel_btn" onclick="cancelService(<?=$bookings->id;?>)">Cancel Service</button>
                    </div>
                </div>
            </div>
            <script>
            $(document).ready(function () {        
                $('#cancel_form_<?=$bookings->id;?>').validate({
                    rules: {
                        remark_<?=$bookings->id;?>: {
                            // required: true,
                        },
                    },
                    messages: {
                        remark_<?=$bookings->id;?>: {
                            // required:'Please enter remark!',
                        },
                    },
                    submitHandler: function(form) {
                        if(confirm("Are you sure to cancel service?")) {
                        // openConfirmationDialog("Are you sure to cancel service?", function (confirmed) {
                        // if (confirmed) {
                            form.submit();
                        } else {
                            return false;
                        }
                        // });
                    }
                });
            });
            </script>
        <?php 
        }else{ 
        ?>
            <div>
                <label class="error">Booking details not found</label>
            </div>
        <?php 
        }
    }
    
    public function show_bill_update_popup_ajx(){
        $profile = $this->Salon_model->get_user_profile();
        $payment_modes = [];
        if (!empty($profile)) {
            $payment_modes = $profile->payment_options != "" ? explode(',', $profile->payment_options) : [];
        }
        $booking_id = $this->input->post('booking_id');

        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $bookings = $this->db->get('tbl_new_booking')->row();
        if(!empty($bookings)){
            $this->db->select('tbl_service_payment.*, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
            $this->db->from('tbl_service_payment');
            $this->db->join('tbl_salon_customer', 'tbl_service_payment.customer_name = tbl_salon_customer.id');
            $this->db->where('tbl_service_payment.is_deleted', '0');
            $this->db->where('tbl_service_payment.booking_id', $bookings->id);
            $this->db->where('tbl_service_payment.id', $bookings->booking_payment_id);
            $service_payment = $this->db->get();
            $service_payment = $service_payment->row(); 
            if(!empty($service_payment)){
                $booking = $bookings;
                $actual_paid_amount = $service_payment->actual_paid_amount != "" ? $service_payment->actual_paid_amount : 0;
                $payment_mode_multiple = $service_payment->payment_mode_multiple != "" ? explode(',',$service_payment->payment_mode_multiple) : [$service_payment->payment_mode];
                $payment_amount_multiple = $service_payment->payment_amount_multiple != "" ? explode(',',$service_payment->payment_amount_multiple) : [$actual_paid_amount];
                $payment_transaction_id_multiple = $service_payment->payment_transaction_id_multiple != "" ? explode(',',$service_payment->payment_transaction_id_multiple) : [$service_payment->transaction_id];
        ?>
                <div class="calender_booking_details">
                    <?php echo '<label>Total Paid Amount:</label> Rs. ' . $actual_paid_amount . ''; ?>
                    <form method="post" name="update_bill_form_<?=$bookings->id;?>" id="update_bill_form_<?=$bookings->id;?>" enctype="multipart/form-data" action="<?=base_url();?>update_bill/<?=base64_encode($bookings->id);?>/<?=base64_encode($bookings->booking_payment_id);?>">
                        <div class="row" id="more_payment_modes_<?=$booking->id;?>">
                            <div class="form-group col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <?php for($k=0;$k<count($payment_mode_multiple);$k++){ ?>
                                <div class="row payment-row" id="payment_row_<?=$k;?>">
                                    <div class="form-group col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <label>Payment Mode<b class="require">*</b></label>
                                        <select class="form-control form-select payment_mode" name="payment_mode_<?=$booking->id;?>[]" id="payment_mode_<?=$booking->id;?>_<?=$k;?>" data-id="<?=$k;?>">
                                            <option value="">Select Payment Mode</option>
                                            <?php if(!empty($payment_modes)){ for($i=0;$i<count($payment_modes); $i++){ ?>
                                                <option value="<?=$payment_modes[$i];?>" <?php if($payment_mode_multiple[$k] == $payment_modes[$i]){ echo 'selected'; } ?>><?=$payment_modes[$i];?></option>
                                            <?php }}else{ ?>
                                                <option value="UPI" <?php if($payment_mode_multiple[$k] == 'UPI'){ echo 'selected'; } ?>>UPI</option>
                                                <option value="Cash" <?php if($payment_mode_multiple[$k] == 'Cash'){ echo 'selected'; } ?>>Cash</option>
                                                <option value="Card" <?php if($payment_mode_multiple[$k] == 'Card'){ echo 'selected'; } ?>>Card</option>
                                                <option value="Online" <?php if($payment_mode_multiple[$k] == 'Online'){ echo 'selected'; } ?>>Online</option>
                                            <?php } ?>
                                        </select>
                                    </div>
                                    <div class="form-group col-lg-5 col-md-5 col-sm-6 col-xs-12">
                                        <label>Amount<b class="require">*</b></label>
                                        <input type="text" min="0" class="form-control mode_amount" name="mode_amount_<?=$booking->id;?>[]" id="mode_amount_<?=$booking->id;?>_<?=$k;?>" value="<?=$payment_amount_multiple[$k];?>" placeholder="Enter Payment Mode Amount">
                                    </div>
                                    <div class="form-group col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                        <label>Transaction ID</label>
                                        <input readonly type="text" placeholder="Enter Transaction ID transaction_id" class="form-control" name="transaction_id_<?=$booking->id;?>[]" id="transaction_id_<?=$booking->id;?>_<?=$k;?>" value="<?=$payment_transaction_id_multiple[$k];?>">
                                    </div>
                                    <?php if($k == 0){ ?>
                                        <div class="form-group col-lg-1 col-md-1 col-sm-6 col-xs-12">
                                            <button type="button" title="Add More" style="margin-top:25px;" class="btn btn-primary add-payment-mode" onclick="createPaymentModeDiv(<?=$booking->id;?>)"><i class="fa fa-plus"></i></button>
                                        </div>
                                    <?php }else{ ?>
                                        <div class="form-group col-lg-1 col-md-1 col-sm-6 col-xs-12">
                                            <button type="button" style="margin-top:25px;" class="btn btn-primary remove-payment" title="Remove" data-id="<?=$k;?>"><i class="fa fa-trash"></i></button>
                                        </div>
                                    <?php } ?>
                                </div>
                                <?php } ?>
                            </div>
                            <label class="error" style="display:none;" id="stock_selection_error_<?=$booking->id;?>">Please enter payment amount!</label>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <label>Payment Date<b class="require">*</b></label>
                                <input readonly type="text" class="form-control" placeholder="Enter Payment Date" name="payment_date_<?=$bookings->id;?>" id="payment_date_<?=$bookings->id;?>" value="<?=date('d-m-Y',strtotime($service_payment->payment_date)); ?>">
                                <label for="payment_date_<?=$bookings->id;?>" generated="true" class="error" style="display:none;float:left; width:100%;">Please enter payment amount!</label>
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <button type="submit" class="btn btn-primary" id="update_bill_submit_<?=$bookings->id;?>" value="update_bill_submit_<?=$bookings->id;?>">Save</button>
                            </div>
                        </div>
                    </form>   
                </div>
                <script>
                function createPaymentModeDiv(bookingId){
                    let uniqueId = new Date().getTime();
                    let current_remaining = calculateRemainingAmount(bookingId);
                    $('#stock_selection_error_<?=$booking->id;?>').html('');
                    $('#stock_selection_error_<?=$booking->id;?>').hide();
                    if(current_remaining > 0){
                        let newRow = `
                            <div class="row payment-row" id="payment_row_${uniqueId}">
                                <div class="form-group col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <label>Payment Mode<b class="require">*</b></label>
                                    <select class="form-control form-select chosen-select payment_mode" name="payment_mode_${bookingId}[]" id="payment_mode_${uniqueId}" data-id="${uniqueId}">
                                        ${paymentOptions}
                                    </select>
                                </div>
                                <div class="form-group col-lg-5 col-md-3 col-sm-6 col-xs-12">
                                    <label>Amount<b class="require">*</b></label>
                                    <input type="text" min="0" class="form-control mode_amount" name="mode_amount_${bookingId}[]" id="mode_amount_${uniqueId}" placeholder="Enter Payment Mode Amount" value="${current_remaining}" max="${current_remaining}">
                                </div>
                                <div class="form-group col-lg-3 col-md-3 col-sm-6 col-xs-12">
                                    <label>Transaction ID</label>
                                    <input readonly type="text" placeholder="Enter Transaction ID" class="form-control" name="transaction_id_${bookingId}[]" id="transaction_id_${bookingId}_${uniqueId}">
                                </div>
                                <div class="form-group col-lg-1 col-md-1 col-sm-6 col-xs-12">
                                    <button type="button" style="margin-top:25px;" class="btn btn-primary remove-payment" title="Remove" data-id="${uniqueId}"><i class="fa fa-trash"></i></button>
                                </div>
                            </div>
                        `;
                        $(`#more_payment_modes_${bookingId}`).append(newRow);
                        $(`#payment_row_${uniqueId} .chosen-select`).chosen();  
                        $(`#payment_row_${uniqueId} .payment_mode`).trigger('change');
                    }else{
                        $('#stock_selection_error_<?=$booking->id;?>').html('You cannot add more payments as the total paid amount is reached.');
                        $('#stock_selection_error_<?=$booking->id;?>').show();
                    }
                }

                var today = new Date();
                var tenYearsAgo = new Date(today.getFullYear() - 10, today.getMonth(), today.getDate());

                var paymentOptions = `<?php 
                    if (!empty($payment_modes)) { 
                        for ($i = 0; $i < count($payment_modes); $i++) { 
                            echo '<option value="'.$payment_modes[$i].'">'.$payment_modes[$i].'</option>'; 
                        } 
                    } else { 
                        echo '<option value="UPI">UPI</option>';
                        echo '<option value="Cash">Cash</option>';
                        echo '<option value="Card">Card</option>';
                        echo '<option value="Online">Online</option>';
                    } 
                ?>`;
                function calculateRemainingAmount(bookingId) {
                    let totalAmount = parseFloat(<?php echo $actual_paid_amount; ?>) || 0;
                    let totalEntered = 0;
                    
                    $(`#more_payment_modes_${bookingId} .mode_amount, #mode_amount_${bookingId}`).each(function() {
                        let amount = parseFloat($(this).val()) || 0;
                        totalEntered += amount;
                    });

                    let remaining = totalAmount - totalEntered;
                    return remaining > 0 ? remaining : 0;
                }
                $(document).ready(function () { 
                    $(".form-select").chosen(); 
                    $('#payment_date_<?=$bookings->id;?>').datepicker({
                        dateFormat: 'dd-mm-yy',
                        minDate: tenYearsAgo,
                        maxDate: today,
                    });      
                    $('#update_bill_form_<?=$bookings->id;?>').validate({
                        ignore: [],
                        rules: {
                            'payment_date_<?=$bookings->id;?>': {
                                required: true,
                            },
                            'payment_mode_<?=$bookings->id;?>[]': {
                                required: true,
                            },
                        },
                        messages: {
                            'payment_date_<?=$bookings->id;?>': {
                                required: "Please select payment date!",
                            },
                            'payment_mode_<?=$bookings->id;?>[]': {
                                required: "Please select payment mode!",
                            },
                        },
                        submitHandler: function(form) {
                            let current_remaining = calculateRemainingAmount(<?=$booking->id;?>);
                            if(current_remaining == 0){  
                                $('#stock_selection_error_<?=$booking->id;?>').html('');
                                $('#stock_selection_error_<?=$booking->id;?>').hide();     

                                if(confirm("Are you sure to update payment details?")) {
                                    form.submit();
                                } else {
                                    return false;
                                }
                            }else{
                                $('#stock_selection_error_<?=$booking->id;?>').html('Please ensure that the total paid amount matches the required amount before proceeding.');
                                $('#stock_selection_error_<?=$booking->id;?>').show();
                            }
                        }
                    });
                });

                $(document).ready(function() {
                    $('.chosen-select').chosen();
                    $(document).on('click', '.remove-payment', function() {
                        let rowId = $(this).data('id');
                        $(`#payment_row_${rowId}`).remove();
                    });

                    function handlePaymentModeChange(element) {
                        let uniqueId = $(element).data('id');
                        let selectedValue = $(element).val();
                        let transactionField = $(`#transaction_id_<?=$booking->id;?>_${uniqueId}`);

                        if (selectedValue == "Cash") {
                            transactionField.prop('readonly', true).val("").attr("placeholder", "N/A for Cash");
                        } else {
                            transactionField.prop('readonly', false).attr("placeholder", "Enter Transaction ID");
                        }
                    }

                    $(document).on('change', '.payment_mode', function() {
                        handlePaymentModeChange(this);
                    });

                    $('.payment_mode').each(function() {
                        handlePaymentModeChange(this);
                    });
                });
                </script>
            <?php 
            }else{ 
            ?>
                <div>
                    <label class="error">Booking payment details not found</label>
                </div>
            <?php 
            }
        }else{ 
        ?>
            <div>
            <label class="error">Booking details not found</label>
            </div>
        <?php 
        }
    }
    public function update_bill(){
        $booking_id = base64_decode($this->uri->segment(2));
        $booking_payment_id = base64_decode($this->uri->segment(3));

        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name as customer_name,tbl_salon_customer.customer_phone');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.id',$booking_id);
        $this->db->where('tbl_new_booking.booking_payment_id',$booking_payment_id);
        $this->db->where('tbl_new_booking.is_deleted','0');
        $bookings = $this->db->get('tbl_new_booking')->row();
        if(!empty($bookings)){
            $this->db->select('tbl_service_payment.*, tbl_salon_customer.full_name,tbl_salon_customer.email,tbl_salon_customer.customer_phone');
            $this->db->from('tbl_service_payment');
            $this->db->join('tbl_salon_customer', 'tbl_service_payment.customer_name = tbl_salon_customer.id');
            $this->db->where('tbl_service_payment.is_deleted', '0');
            $this->db->where('tbl_service_payment.booking_id', $bookings->id);
            $this->db->where('tbl_service_payment.id', $bookings->booking_payment_id);
            $service_payment = $this->db->get();
            $service_payment = $service_payment->row(); 
            if(!empty($service_payment)){
                $all_payment_mode = $this->input->post('payment_mode_' . $booking_id);
                $all_transaction_id = $this->input->post('transaction_id_' . $booking_id);
                $all_mode_amount = $this->input->post('mode_amount_' . $booking_id);

                $payment_mode_multiple = !empty($all_payment_mode) ? implode(',',$all_payment_mode) : null;
                $payment_transaction_id_multiple = !empty($all_transaction_id) ? implode(',',$all_transaction_id) : null;
                $payment_amount_multiple = !empty($all_mode_amount) ? implode(',',$all_mode_amount) : null;
                
                $payment_mode = !empty($all_payment_mode) && count($all_payment_mode) == 1 ? $all_payment_mode[0] : null;
                $transaction_id = !empty($all_transaction_id) && count($all_transaction_id) == 1 ? $all_transaction_id[0] : null;

                $data = array(
                    'payment_date'          => date('Y-m-d',strtotime($this->input->post('payment_date_' . $service_payment->booking_id))),
                    'payment_mode'          => $payment_mode,
                    'transaction_id'        => $transaction_id,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
                );
                // echo '<pre>'; print_r($data); exit;
                $this->db->where('id', $service_payment->id);
                $this->db->where('booking_id', $service_payment->booking_id);
                $this->db->update('tbl_service_payment',$data);

                $data = array(
                    'payment_date'          => date('Y-m-d',strtotime($this->input->post('payment_date_' . $service_payment->booking_id))),
                    'payment_mode'          => $payment_mode,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
                );
                $this->db->where('payment_status', '1');
                $this->db->where('booking_payment_id', $service_payment->id);
                $this->db->where('booking_id', $service_payment->booking_id);
                $this->db->update('tbl_booking_services_details',$data);
                
                $this->db->where('payment_status', '1');
                $this->db->where('booking_payment_id', $service_payment->id);
                $this->db->where('booking_id', $service_payment->booking_id);
                $this->db->update('tbl_booking_services_products_details',$data);
                
                $this->db->where('type', '0');
                $this->db->where('booking_payment_id', $service_payment->id);
                $this->db->where('booking_id', $service_payment->booking_id);
                $this->db->update('tbl_booking_payment_entry',$data);
                
                $this->db->where('booking_payment_id', $service_payment->id);
                $this->db->where('id', $service_payment->booking_id);
                $this->db->update('tbl_new_booking',$data);

                return true;
            }else{
                return false;
            }
        }else{
            return false;
        }
    }
    public function get_saloon_working_hrs_slots(){
        $booking_rules = $this->get_booking_rules();
        $date = $this->input->post('date');

        $timestamp = strtotime($date);        
        $dayOfWeek = date('l', $timestamp);

        if($dayOfWeek == 'Monday'){
            $column = 'is_monday';
            $from = 'from_monday';
            $to = 'to_monday';
        }elseif($dayOfWeek == 'Tuesday'){
            $column = 'is_tuesday';
            $from = 'from_tuesday';
            $to = 'to_tuesday';
        }elseif($dayOfWeek == 'Wednesday'){
            $column = 'is_wednesday';
            $from = 'from_wednesday';
            $to = 'to_wednesday';
        }elseif($dayOfWeek == 'Thursday'){
            $column = 'is_thursday';
            $from = 'from_thursday';
            $to = 'to_thursday';
        }elseif($dayOfWeek == 'Friday'){
            $column = 'is_friday';
            $from = 'from_friday';
            $to = 'to_friday';
        }elseif($dayOfWeek == 'Saturday'){
            $column = 'is_saturday';
            $from = 'from_saturday';
            $to = 'to_saturday';
        }elseif($dayOfWeek == 'Sunday'){
            $column = 'is_sunday';
            $from = 'from_sunday';
            $to = 'to_sunday';
        }else{
            $column = '';
            $from = '';
            $to = '';
        }
        $this->db->where($column, '1');
        $this->db->where('status', '1');
        $this->db->where('is_deleted', '0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $working_hrs = $this->db->get('tbl_booking_rules')->row();
        
        if(!empty($working_hrs)){
            $start = $working_hrs->$from;
            $end = $working_hrs->$to;

            if(!empty($booking_rules)){

            }
        }

    }
    public function get_all_salon_bookings()
    {       
        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone');
        $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
		$this->db->join('tbl_salon_customer', 'tbl_new_booking.customer_name = tbl_salon_customer.id');
        $this->db->where('tbl_new_booking.is_deleted', '0');
        $this->db->where('tbl_new_booking.booking_type','0');
        $this->db->order_by('tbl_new_booking.id', 'DESC');
        $result = $this->db->get('tbl_new_booking');
        return $result->result();
    }
    
    public function get_all_salon_product_bookings()
    {       
        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone');
        $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
		$this->db->join('tbl_salon_customer', 'tbl_new_booking.customer_name = tbl_salon_customer.id');
        $this->db->where('tbl_new_booking.is_deleted', '0');
        $this->db->where('tbl_new_booking.booking_type','1');
        $this->db->order_by('tbl_new_booking.id', 'DESC');
        $result = $this->db->get('tbl_new_booking');
        return $result->result();
    }
    public function get_salon_bookings()
    {       
        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email,tbl_booking_services_details.service_date,tbl_booking_services_details.service_from,tbl_booking_services_details.service_to,tbl_booking_services_details.stylist_id,tbl_booking_services_details.service_id');
		$this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
		$this->db->join('tbl_booking_services_details','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->where('tbl_new_booking.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_new_booking.salon_id',$this->session->userdata('salon_id'));
		$this->db->where('tbl_new_booking.services !=','');
		$this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','0');
		
		$is_app = isset($_GET['is_app']) ? $_GET['is_app'] : '';
		if($is_app != "" && $is_app == 'on'){
			$this->db->where('tbl_new_booking.booking_generated_from','1');
		}
		$counter_bookings = isset($_GET['counter_bookings']) ? $_GET['counter_bookings'] : '';
		if($counter_bookings != "" && $counter_bookings == 'on'){
			$this->db->where('tbl_new_booking.is_direct_billing','1');
		}
		$guest_bookings = isset($_GET['guest_bookings']) ? $_GET['guest_bookings'] : '';
		if($guest_bookings != "" && $guest_bookings == 'on'){
			$this->db->where('tbl_new_booking.is_guest_booking','1');
		}
        if(isset($_GET['id']) && $_GET['id'] != "" && $_GET['id'] != '0'){
			$this->db->where('tbl_new_booking.id',$_GET['id']);
		}
        if(isset($_GET['customer']) && $_GET['customer'] != "" && $_GET['customer'] != '0'){
			$this->db->where('tbl_new_booking.customer_name',$_GET['customer']);
		}
        if(isset($_GET['from_date']) && $_GET['from_date'] != "" && $_GET['from_date'] != '0'){
			$this->db->where('DATE(tbl_booking_services_details.service_date) >=',date('Y-m-d',strtotime($_GET['from_date'])));
		}
        if(isset($_GET['to_date']) && $_GET['to_date'] != "" && $_GET['to_date'] != '0'){
			$this->db->where('DATE(tbl_booking_services_details.service_date) <=',date('Y-m-d',strtotime($_GET['to_date'])));
		}
        if(isset($_GET['service']) && $_GET['service'] != "" && $_GET['service'] != '0'){
			$this->db->where('tbl_booking_services_details.service_id',$_GET['service']);
		}
        if(isset($_GET['stylist']) && $_GET['stylist'] != "" && $_GET['stylist'] != '0'){
			$this->db->where('tbl_booking_services_details.stylist_id',$_GET['stylist']);
		}
		if(isset($_GET['status']) && $_GET['status'] != ""){
			$this->db->where('tbl_booking_services_details.service_status',$_GET['status']);
            if($_GET['status'] == "0"){
			    $this->db->where_in('tbl_new_booking.booking_status',['1','3','4']);
            }elseif($_GET['status'] == "1"){
			    $this->db->where_in('tbl_new_booking.booking_status',['5']);
            }elseif($_GET['status'] == "2"){
			    $this->db->where_in('tbl_new_booking.booking_status',['2']);
            }
		}
		$this->db->order_by('tbl_new_booking.id','desc');
		$this->db->group_by('tbl_new_booking.id');
		$result = $this->db->get('tbl_new_booking')->result();
		return $result;
    }
    
    public function get_salon_product_bookings()
    {       
        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email,tbl_only_product_booking_details.category_id,tbl_only_product_booking_details.product_id');
		$this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
		$this->db->join('tbl_only_product_booking_details','tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
        $this->db->where('tbl_new_booking.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_new_booking.salon_id',$this->session->userdata('salon_id'));
		$this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','1');
		
		$counter_bookings = isset($_GET['counter_bookings']) ? $_GET['counter_bookings'] : '';
		if($counter_bookings != "" && $counter_bookings == 'on'){
			$this->db->where('tbl_new_booking.is_direct_billing','1');
		}
        if(isset($_GET['id']) && $_GET['id'] != "" && $_GET['id'] != '0'){
			$this->db->where('tbl_new_booking.id',$_GET['id']);
		}
        if(isset($_GET['customer']) && $_GET['customer'] != "" && $_GET['customer'] != '0'){
			$this->db->where('tbl_new_booking.customer_name',$_GET['customer']);
		}
        if(isset($_GET['from_date']) && $_GET['from_date'] != "" && $_GET['from_date'] != '0'){
			$this->db->where('DATE(tbl_new_booking.booking_date) >=',date('Y-m-d',strtotime($_GET['from_date'])));
		}
        if(isset($_GET['to_date']) && $_GET['to_date'] != "" && $_GET['to_date'] != '0'){
			$this->db->where('DATE(tbl_new_booking.booking_date) <=',date('Y-m-d',strtotime($_GET['to_date'])));
		}
        if(isset($_GET['product']) && $_GET['product'] != "" && $_GET['product'] != '0'){
			$this->db->where('tbl_only_product_booking_details.product_id',$_GET['product']);
		}
        if(isset($_GET['category']) && $_GET['category'] != "" && $_GET['category'] != '0'){
			$this->db->where('tbl_only_product_booking_details.category_id',$_GET['category']);
		}
        if(isset($_GET['status']) && $_GET['status'] != ""){
			$this->db->where('tbl_new_booking.payment_status',$_GET['status']);
		}
		$this->db->order_by('tbl_new_booking.id','desc');
		$this->db->group_by('tbl_new_booking.id');
		$result = $this->db->get('tbl_new_booking')->result();
		return $result;
    }
    public function get_all_bookings_statuswise_dashboard()
    {       
		return array(
            'today_all'               =>  $this->get_all_bookings_status_date('',date('Y-m-d')),
            'today_completed'         =>  $this->get_all_bookings_status_date('1',date('Y-m-d')),
            'today_pending'           =>  $this->get_all_bookings_status_date('0',date('Y-m-d')),
            'today_cancelled'         =>  $this->get_all_bookings_status_date('2',date('Y-m-d')),
        );
    }
    public function get_all_employee_attendance_dashboard()
    {       
        $present = count($this->get_employee_attendance('','1',date('Y-m-d'),date('Y-m-d')));
        $first_half_day = count($this->get_employee_attendance('','3',date('Y-m-d'),date('Y-m-d')));
        $second_half_day = count($this->get_employee_attendance('','4',date('Y-m-d'),date('Y-m-d')));
        $total_employee = count($this->get_all_salon_employees());
        $absent = $total_employee - ($present + $first_half_day + $second_half_day);
		return array(
            'present'               =>  $present,
            'absent'                =>  $absent,
            'half_day'              =>  $first_half_day + $second_half_day,
            'total_employee'        =>  $total_employee,
        );
    }
    public function get_all_bookings_status_date($status,$date)
    {       
        $this->db->select('tbl_booking_services_details.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email');
		$this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
		$this->db->join('tbl_new_booking','tbl_new_booking.id = tbl_booking_services_details.booking_id');
		$this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where('tbl_booking_services_details.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id',$this->session->userdata('salon_id'));
        if($status != ""){
		    $this->db->where('tbl_booking_services_details.service_status',$status);
        }
        if($date != ""){
		    $this->db->where('DATE(tbl_booking_services_details.service_date)',$date);
        }
		$result = $this->db->get('tbl_booking_services_details')->num_rows();
		return $result;
    }
    
	public function get_all_bookings_ajax(){
		$limit = $this->input->post('limit');
		$offset = $this->input->post('offset');
		$from_date = $this->input->post('from_date');
		$to_date = $this->input->post('to_date');
		$customer = $this->input->post('customer');
		$id = $this->input->post('id');
		$service = $this->input->post('service');
		$stylist = $this->input->post('stylist');
		$status = $this->input->post('status');
		$is_app = $this->input->post('is_app');
		$counter_bookings = $this->input->post('counter_bookings');
		$guest_bookings = $this->input->post('guest_bookings');

		$this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email,tbl_booking_services_details.service_date,tbl_booking_services_details.service_from,tbl_booking_services_details.service_to,tbl_booking_services_details.stylist_id,tbl_booking_services_details.service_id');
		$this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
		$this->db->join('tbl_booking_services_details','tbl_new_booking.id = tbl_booking_services_details.booking_id');
        $this->db->where('tbl_new_booking.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_new_booking.salon_id',$this->session->userdata('salon_id'));
		$this->db->where('tbl_new_booking.services !=','');
		$this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','0');
		
		if($is_app != "" && $is_app == 'on'){
			$this->db->where('tbl_new_booking.booking_generated_from','1');
		}
		if($counter_bookings != "" && $counter_bookings == 'on'){
			$this->db->where('tbl_new_booking.is_direct_billing','1');
		}
		if($guest_bookings != "" && $guest_bookings == 'on'){
			$this->db->where('tbl_new_booking.is_guest_booking','1');
		}
		if($id != "" && $id != '0'){
			$this->db->where('tbl_new_booking.id',$id);
		}
		if($customer != "" && $customer != '0'){
			$this->db->where('tbl_new_booking.customer_name',$customer);
		}
		if($from_date != "" && $from_date != '0'){
			$this->db->where('DATE(tbl_booking_services_details.service_date) >=',date('Y-m-d',strtotime($from_date)));
		}
		if($to_date != "" && $to_date != '0'){
			$this->db->where('DATE(tbl_booking_services_details.service_date) <=',date('Y-m-d',strtotime($to_date)));
		}
		if($service != "" && $service != '0'){
			$this->db->where('tbl_booking_services_details.service_id',$service);
		}
		if($stylist != "" && $stylist != '0'){
			$this->db->where('tbl_booking_services_details.stylist_id',$stylist);
		}
		if($status != ""){
			$this->db->where('tbl_booking_services_details.service_status',$status);
            if($status == "0"){
			    $this->db->where_in('tbl_new_booking.booking_status',['1','3','4']);
            }elseif($status == "1"){
			    $this->db->where_in('tbl_new_booking.booking_status',['5']);
            }elseif($status == "2"){
			    $this->db->where_in('tbl_new_booking.booking_status',['2']);
            }
		}
		$this->db->order_by('tbl_new_booking.id','desc');
		$this->db->group_by('tbl_new_booking.id');
		$this->db->limit($limit,$offset);
		$result = $this->db->get('tbl_new_booking')->result();
		return $result;
    }
    
	public function get_all_product_bookings_ajax(){
		$limit = $this->input->post('limit');
		$offset = $this->input->post('offset');
		$from_date = $this->input->post('from_date');
		$to_date = $this->input->post('to_date');
		$customer = $this->input->post('customer');
		$id = $this->input->post('id');
		$product = $this->input->post('product');
		$category = $this->input->post('category');
		$status = $this->input->post('status');
		$stylist = $this->input->post('stylist');
		$is_app = $this->input->post('is_app');
		$counter_bookings = $this->input->post('counter_bookings');

		$this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email,tbl_only_product_booking_details.category_id,tbl_only_product_booking_details.product_id');
		$this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_new_booking.customer_name');
		$this->db->join('tbl_only_product_booking_details','tbl_new_booking.id = tbl_only_product_booking_details.booking_id');
        $this->db->where('tbl_new_booking.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_new_booking.salon_id',$this->session->userdata('salon_id'));
		$this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.booking_type','1');
		
		if($counter_bookings != "" && $counter_bookings == 'on'){
			$this->db->where('tbl_new_booking.is_direct_billing','1');
		}
		if($is_app != "" && $is_app == 'on'){
			$this->db->where('tbl_new_booking.booking_generated_from','1');
		}
		if($id != "" && $id != '0'){
			$this->db->where('tbl_new_booking.id',$id);
		}
		if($customer != "" && $customer != '0'){
			$this->db->where('tbl_new_booking.customer_name',$customer);
		}
		if($from_date != "" && $from_date != '0'){
			$this->db->where('DATE(tbl_new_booking.booking_date) >=',date('Y-m-d',strtotime($from_date)));
		}
		if($to_date != "" && $to_date != '0'){
			$this->db->where('DATE(tbl_new_booking.booking_date) <=',date('Y-m-d',strtotime($to_date)));
		}
		if($product != "" && $product != '0'){
			$this->db->where('tbl_only_product_booking_details.product_id',$product);
		}
		if($category != "" && $category != '0'){
			$this->db->where('tbl_only_product_booking_details.category_id',$category);
		}
		if($stylist != "" && $stylist != '0'){
            $this->db->where('(tbl_only_product_booking_details.stylist_id = "'.$stylist.'" OR tbl_only_product_booking_details.stylist_after_bill = "'.$stylist.'")');
		}
		if($status != ""){
			$this->db->where('tbl_new_booking.payment_status',$status);
		}
		$this->db->order_by('tbl_new_booking.id','desc');
		$this->db->group_by('tbl_new_booking.id');
		$this->db->limit($limit,$offset);
		$result = $this->db->get('tbl_new_booking')->result();
		return $result;
    }

	public function get_stylist_details($id){
		$this->db->where('tbl_salon_employee.id', $id);
		$result = $this->db->get('tbl_salon_employee')->row();
		return $result;
	}
	public function get_employee_details($id){
		$this->db->where('tbl_salon_employee.id', $id);
		$result = $this->db->get('tbl_salon_employee')->row();
		return $result;
	}
    public function submit_form() {
        $branch_id = '8';
        $salon_id = '8';
        $uid = $branch_id.'@@@'.$salon_id;
        $type = 'sender';
        $project = 'salon';

        $service = $this->input->post('service');
        $stylist = $this->input->post('stylist');
    
        $stylist_details = $this->get_stylist_details($stylist);
        $service_details = $this->get_service_details($service);
    
        $duration = 30;
    
        $from_date = $this->input->post('date');
        $from_time = $this->input->post('time');
        $service_from = date('Y-m-d H:i:s', strtotime($from_date . ' ' . $from_time));
        $service_end = date('Y-m-d H:i:s', strtotime($service_from . ' +' . $duration . ' minutes'));
    
        $message = 'Received booking of ' . (!empty($service_details) ? $service_details->service_name : '') . ' for ' . (!empty($stylist_details) ? $stylist_details->full_name : '') . ' on ' . date('d M, Y h:i A', strtotime($service_from));
        $data = json_encode([
            'message_type'  => 'booking_placed',
            'branch_id'     => $branch_id,
            'salon_id'      => $salon_id,
            'project'       => $project,
            'uid'           => $uid,
            'message'     => $message,
            'stylist'     => $stylist,
            'service_from' => $service_from,
            'service_to'   => $service_end,
            'service_date' => date('Y-m-d', strtotime($from_date)),
            'service_name' => !empty($service_details) ? $service_details->service_name : '',
            'stylist_name' => !empty($stylist_details) ? $stylist_details->full_name : ''
        ]);
        
        $this->send_data_to_socket_client_test('test',$uid,$type,$project,$message,$data);
    }

    public function send_data_to_socket_client($from,$uid, $type, $project, $message, $data) {
        $loop = Factory::create(); // Create the event loop instance
        $connector = new Connector($loop); // Pass the loop to the Connector
    
        // Prepare the URL with base64-encoded query parameters
        $url = SOCKET_URL.'?project='.base64_encode($project).'&uid='.base64_encode($uid).'&type='.base64_encode($type);
        
        // Define SSL context options to ignore certificate verification
        $contextOptions = [
            'ssl' => [
                'verify_peer'       => false,
                'verify_peer_name'  => false,
                'allow_self_signed' => true,
                'verify_depth'      => 0 
            ]
        ];        
    
        // Establish connection with SSL context options
        $connector($url, [], $contextOptions)
        ->then(function($connection) use ($url, $from, $uid, $type, $project, $message, $data) {
            try {
                // Send data to WebSocket server
                $connection->send($data);
                
                // Insert success record into database
                $this->insert_notification($from, $uid, $type, $project, $message, $data, $url, '1');
                
                // Close the connection after sending the data
                $connection->close();
                
                return true;
            } catch (Exception $e) {
                // In case of failure while sending data
                $this->insert_notification($from, $uid, $type, $project, $message, $data, $url, '0', $e->getMessage());
                return false;
            }
        })
        ->otherwise(function($e) use ($url, $from, $uid, $type, $project, $message, $data) {
            // Error occurred during WebSocket connection
            $this->insert_notification($from, $uid, $type, $project, $message, $data, $url, '0', $e->getMessage());
            return false;
        });
    
        // Run the event loop
        $loop->run();
    }
    
    public function send_data_to_socket_client_test($from,$uid, $type, $project, $message, $data) {
        $loop = Factory::create(); // Create the event loop instance
        $connector = new Connector($loop); // Pass the loop to the Connector
    
        // Prepare the URL with base64-encoded query parameters
        $url = TEST_SOCKET_URL.'?project='.base64_encode($project).'&uid='.base64_encode($uid).'&type='.base64_encode($type);
        
        // Define SSL context options to ignore certificate verification
        $contextOptions = [
            'ssl' => [
                'verify_peer'       => false,
                'verify_peer_name'  => false,
                'allow_self_signed' => true,
                'verify_depth'      => 0 
            ]
        ];        
    
        // Establish connection with SSL context options
        $connector($url, [], $contextOptions)
        ->then(function($connection) use ($url, $from, $uid, $type, $project, $message, $data) {
            try {
                // Send data to WebSocket server
                $connection->send($data);
                                
                // Close the connection after sending the data
                $connection->close();
                
                echo json_encode(
                    array(
                        'status'    =>  'true',
                        'message'   =>  'Data sent to socket client successfully',
                        'error'     =>  ''
                    )
                );
            } catch (Exception $e) {
                echo json_encode(
                    array(
                        'status'    =>  'false',
                        'message'   =>  'Error occured',
                        'error'     =>  $e->getMessage()
                    )
                );
            }
        })
        ->otherwise(function($e) use ($url, $from, $uid, $type, $project, $message, $data) {
            echo json_encode(
                array(
                    'status'    =>  'false',
                    'message'   =>  'Error occured',
                    'error'     =>  $e->getMessage()
                )
            );
        });
    
        // Run the event loop
        $loop->run();
    }
    private function insert_notification($from, $uid, $type, $project, $message, $data, $url, $status, $error = '') {
        $json_decode_data = !empty($data) ? json_decode($data) : [];
        $message_type_raw = $json_decode_data->message_type ?? '';
        $insert_data = array(
            'message_type'  =>  $message_type_raw,
            'uid'           =>  $uid,
            'from'          =>  $from,
            'type'          =>  $type,
            'project'       =>  $project,
            'message'       =>  $message,
            'data'          =>  $data,
            'url'           =>  $url,
            'status'        =>  $status,
            'error'         =>  $error,
            'created_on'    =>  date('Y-m-d H:i:s'),
        );
        $this->db->insert('tbl_salon_socket_notification', $insert_data);
    }
    
    public function get_day_timeslots_ajx(){
        $booking_rules = $this->get_booking_rules();
        
        $slot_type = $this->input->post('slot_type');
        $slot_thresholds = [
            'morning'   => ['start' => '05:00:00', 'end' => '12:00:00'],
            'afternoon' => ['start' => '12:00:00', 'end' => '17:00:00'],
            'evening'   => ['start' => '17:00:00', 'end' => '23:00:00'],
        ];

        $employee = $this->input->post('employee');
        $employee_selection_rule = $this->input->post('employee_selection_rule');
        $user_selected_service = $this->input->post('user_selected_service');

        $date = date('Y-m-d',strtotime($this->input->post('booking_date')));
        $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise($date);

        if($this->input->post('booking_start') == ""){
            if($this->input->post('selected_slot_start_time') != ""){
                $booking_start = date('H:i:s',strtotime($this->input->post('selected_slot_start_time')));
            }else{
                $booking_start = '';
            }
        }else{
            $booking_start = date('H:i:s',strtotime($this->input->post('booking_start')));
        }

        if(!empty($booking_rules)){
            if(!$is_emergency){
                $working_hrs = $this->get_saloon_working_hrs($date);
                $duration = $booking_rules->slot_time;

                if($working_hrs['is_allowed'] == 1){
                    $minutes_early_booking = !empty($booking_rules->booking_time_range) ? $booking_rules->booking_time_range : 0;
                    if($this->input->post('source') == 'vendor_panel'){
                        $minutes_early_booking = 0;
                    }

                    $store_start = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['start']));
                    $store_end = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['end']));
                    $one_hour_prior = date('Y-m-d H:i:s', strtotime($store_end . ' -1 hour'));
                    $store_end_for_timeslots = $store_end;
                    if($date == date('Y-m-d') && date('Y-m-d H:i:s') >= $one_hour_prior){   // change it to >= when make it live
                        $store_end_for_timeslots = date('Y-m-d 23:59:59', strtotime($date));
                    }

                    // $slots = $this->generateCommonTimePairs($date,$store_start,$store_end_for_timeslots,$duration);


                    
                    $threshold = $slot_thresholds[$slot_type];

                    $threshold_start = date('Y-m-d H:i:s', strtotime($date . ' ' . $threshold['start']));
                    $threshold_end   = date('Y-m-d H:i:s', strtotime($date . ' ' . $threshold['end']));

                    $slot_start_time = max($store_start, $threshold_start);
                    $slot_end_time   = min($store_end_for_timeslots, $threshold_end);

                    $slots = $this->Salon_model->generateCommonTimePairs($date, $slot_start_time, $slot_end_time, $duration);



                    $slots_morning = [];
                    $slots_afternoon = [];
                    $slots_evening = [];

                    for($i=0;$i<count($slots);$i++){
                        $slot_time = date('H:i:s', strtotime($slots[$i]['from']));
                        if ($slot_time >= '05:00:00' && $slot_time < '12:00:00') {
                            $slots_morning[] = $slots[$i];
                        } elseif ($slot_time >= '12:00:00' && $slot_time < '17:00:00') {
                            $slots_afternoon[] = $slots[$i];
                        } else {
                            $slots_evening[] = $slots[$i];
                        }
                    }
                    if($booking_start != ""){
                        // if ($booking_start >= '05:00:00' && $booking_start < '12:00:00') {
                        if($slot_type == 'morning'){
                            $is_morning_active = 'active';
                            $is_afternoon_active = '';
                            $is_evening_active = '';
                            $morning_content = 'display: block;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: none;';
                        // }elseif ($booking_start >= '12:00:00' && $booking_start < '17:00:00') {
                        }elseif ($slot_type == 'afternoon'){
                            $is_morning_active = '';
                            $is_afternoon_active = 'active';
                            $is_evening_active = '';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: block;';
                            $evening_content = 'display: none;';
                        } else {
                            $is_morning_active = '';
                            $is_afternoon_active = '';
                            $is_evening_active = 'active';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: block;';
                        }
                    }else{
                        // if (date('H:i:s') >= '05:00:00' && date('H:i:s') < '12:00:00') {
                        if($slot_type == 'morning'){
                            $is_morning_active = 'active';
                            $is_afternoon_active = '';
                            $is_evening_active = '';
                            $morning_content = 'display: block;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: none;';
                        // }elseif (date('H:i:s') >= '12:00:00' && date('H:i:s') < '17:00:00') {
                        }elseif ($slot_type == 'afternoon'){
                            $is_morning_active = '';
                            $is_afternoon_active = 'active';
                            $is_evening_active = '';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: block;';
                            $evening_content = 'display: none;';
                        }else{
                            $is_morning_active = '';
                            $is_afternoon_active = '';
                            $is_evening_active = 'active';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: block;';
                        }
                    }
        ?>
        <div class="tab">
            <button type="button" class="slot-tablinks <?=$is_morning_active;?>" onclick="fetchTimeSlots('morning'), openSlot(event, 'Morning')">Morning</button>
            <button type="button" class="slot-tablinks <?=$is_afternoon_active;?>" onclick="fetchTimeSlots('afternoon'), openSlot(event, 'Afternoon')">Afternoon</button>
            <button type="button" class="slot-tablinks <?=$is_evening_active;?>" onclick="fetchTimeSlots('evening'), openSlot(event, 'Evening')">Evening</button>
        </div>
        <?php if(!empty($slots_morning)){ ?>
        <div id="Morning" class="slot-tabcontent" style="<?=$morning_content;?>">
            <div class="row timeslot_row" style="align-items: self-start;margin: 0px !important; height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $morning_allowed_slots = 0;
                if(!empty($slots_morning)){
                    foreach ($slots_morning as $slot) {
                        $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slot['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                        $current_date = date('Y-m-d H:i:s');
                        if ($current_date <= $allowed_booking_datetime) {
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s', strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s', strtotime($slot['from']));
                            if (date('Y-m-d H:i:s', strtotime($slot['from'])) >= $selected_start) {
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slot['from'], $user_selected_service);
                                if($is_vacent){
                                    $morning_allowed_slots++;
                                    $style = $is_vacent ? "#00800045" : "#ff000061";
                    ?>
                                    <div class="single_timeslot" style="cursor:pointer;background-color:<?= $style ?>; " onclick="selectTimeslotRadio('<?= str_replace([' ', '-', ':'], '_', $slot['from']); ?>')">
                                        <input type="radio" style="cursor:pointer;" <?php if ($booking_start != '' && $booking_start == date('H:i:s', strtotime($slot['from']))) {
                                                                echo 'checked';
                                                            } ?> class="booking_start_time_slot" name="booking_start_time_slot" id="booking_start_time_slot_<?= str_replace([' ', '-', ':'], '_', $slot['from']); ?>" value="<?= date('h:i A', strtotime($slot['from'])); ?>">
                                        <label style="cursor:pointer;font-size: 11px;"><?= date('h:i A', strtotime($slot['from'])); ?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($morning_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php }if(!empty($slots_afternoon)){ ?>
        <div id="Afternoon" class="slot-tabcontent" style="<?=$afternoon_content;?>">
            <div class="row timeslot_row" style="align-items: self-start;margin: 0px !important; height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $afternoon_allowed_slots = 0;
                if(!empty($slots_afternoon)){
                    foreach ($slots_afternoon as $slot) {
                        $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slot['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                        $current_date = date('Y-m-d H:i:s');
                        if ($current_date <= $allowed_booking_datetime) {
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s', strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s', strtotime($slot['from']));
                            if (date('Y-m-d H:i:s', strtotime($slot['from'])) >= $selected_start) {
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slot['from'], $user_selected_service);
                                if($is_vacent){
                                    $afternoon_allowed_slots++;
                                    $style = $is_vacent ? "#00800045" : "#ff000061";
                    ?>
                                    <div class="single_timeslot" style="cursor:pointer;background-color:<?= $style ?>; " onclick="selectTimeslotRadio('<?= str_replace([' ', '-', ':'], '_', $slot['from']); ?>')">
                                        <input type="radio" style="cursor:pointer;" <?php if ($booking_start != '' && $booking_start == date('H:i:s', strtotime($slot['from']))) {
                                                                echo 'checked';
                                                            } ?> class="booking_start_time_slot" name="booking_start_time_slot" id="booking_start_time_slot_<?= str_replace([' ', '-', ':'], '_', $slot['from']); ?>" value="<?= date('h:i A', strtotime($slot['from'])); ?>">
                                        <label style="font-size: 11px;cursor:pointer;"><?= date('h:i A', strtotime($slot['from'])); ?></label>
                                    </div>
                                    <?php
                                }
                            }
                        }
                    }
                }
                if($afternoon_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size:11px;color:red;margin-top:40px;"> Slots not available </label>
                </div>
                <?php } ?>
            </div>
        </div>
        <?php }if(!empty($slots_evening)){ ?>
        <div id="Evening" class="slot-tabcontent" style="<?=$evening_content;?>">
            <div class="row timeslot_row" style="align-items: self-start;margin: 0px !important; height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $evening_allowed_slots = 0;
                if(!empty($slots_evening)){
                    foreach ($slots_evening as $slot) {
                        $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slot['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                        $current_date = date('Y-m-d H:i:s');
                        if ($current_date <= $allowed_booking_datetime) {
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s', strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s', strtotime($slot['from']));
                            if (date('Y-m-d H:i:s', strtotime($slot['from'])) >= $selected_start) {
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slot['from'], $user_selected_service,$store_end);
                                if($is_vacent){
                                    $evening_allowed_slots++;
                                    $style = $is_vacent ? "#00800045" : "#ff000061";
                                    if(date('Y-m-d',strtotime($slot['from'])) == date('Y-m-d') && date('Y-m-d H:i:s',strtotime($slot['from'])) >= date('Y-m-d H:i:s',strtotime($store_end))){
                                        $style = "#ff000061";
                                    }
                    ?>
                                    <div class="single_timeslot" style="background-color:<?= $style ?>; " onclick="selectTimeslotRadio('<?= str_replace([' ', '-', ':'], '_', $slot['from']); ?>')">
                                        <input type="radio" style="cursor:pointer;" <?php if ($booking_start != '' && $booking_start == date('H:i:s', strtotime($slot['from']))) {
                                                                echo 'checked';
                                                            } ?> class="booking_start_time_slot" name="booking_start_time_slot" id="booking_start_time_slot_<?= str_replace([' ', '-', ':'], '_', $slot['from']); ?>" value="<?= date('h:i A', strtotime($slot['from'])); ?>">
                                        <label style="font-size: 11px;cursor:pointer;"><?= date('h:i A', strtotime($slot['from'])); ?></label>
                                    </div>
                                    <?php
                                }
                            }
                        }
                    }
                }
                if($evening_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size:11px;color:red;margin-top:40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php } ?>
        <script>
            // $('#booking_timeslots').css('border','1px solid #ccc').css('border-radius','5px;');
            function openSlot(evt, slotPeriod) {
                var i, tabcontent, tablinks;

                // Hide all tab contents
                tabcontent = document.getElementsByClassName("slot-tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }

                // Remove the active class from all tabs
                tablinks = document.getElementsByClassName("slot-tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }

                // Show the current tab and add an "active" class to the button that opened the tab
                document.getElementById(slotPeriod).style.display = "block";
                evt.currentTarget.className += " active";
            }
    
        </script>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Store is closed for selected date</label>
            </div>
        <?php } ?>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Salon is closed because of emergency</label>
            </div>
        <?php }}else{ ?>
            <div class="col-lg-12">
                <label class="error">Booking Rules not available</label>
            </div>
        <?php }
    }
    public function get_day_timeslots_reschedule_ajx(){
        $booking_rules = $this->get_booking_rules();
        
        $booking_details_id = $this->input->post('booking_details_id');
        $user_selected_service = $this->input->post('user_selected_service');

        $date = date('Y-m-d',strtotime($this->input->post('booking_date')));

        $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise($date);
        if($this->input->post('booking_start') == ""){
            if($this->input->post('selected_slot_start_time') != ""){
                $booking_start = date('H:i:s',strtotime($this->input->post('selected_slot_start_time')));
            }else{
                $booking_start = '';
            }
        }else{
            $booking_start = date('H:i:s',strtotime($this->input->post('booking_start')));
        }

        if(!empty($booking_rules)){
            if(!$is_emergency){
                $working_hrs = $this->get_saloon_working_hrs($date);
                $duration = $booking_rules->slot_time;

                if($working_hrs['is_allowed'] == 1){
                    $minutes_early_booking = !empty($booking_rules->booking_time_range) ? $booking_rules->booking_time_range : 0;
                    if($this->input->post('source') == 'vendor_panel'){
                        $minutes_early_booking = 0;
                    }

                    $store_start = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['start']));
                    $store_end = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['end']));
                    $slots = $this->generateCommonTimePairs($date,$store_start,$store_end,$duration);

                    $slots_morning = [];
                    $slots_afternoon = [];
                    $slots_evening = [];

                    for($i=0;$i<count($slots);$i++){
                        $slot_time = date('H:i:s', strtotime($slots[$i]['from']));
                        if ($slot_time >= '05:00:00' && $slot_time < '12:00:00') {
                            $slots_morning[] = $slots[$i];
                        } elseif ($slot_time >= '12:00:00' && $slot_time < '17:00:00') {
                            $slots_afternoon[] = $slots[$i];
                        } else {
                            $slots_evening[] = $slots[$i];
                        }
                    }
                    if($booking_start != ""){
                        if ($booking_start >= '05:00:00' && $booking_start < '12:00:00') {
                            $is_morning_active = 'active';
                            $is_afternoon_active = '';
                            $is_evening_active = '';
                            $morning_content = 'display: block;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: none;';
                        }elseif ($booking_start >= '12:00:00' && $booking_start < '17:00:00') {
                            $is_morning_active = '';
                            $is_afternoon_active = 'active';
                            $is_evening_active = '';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: block;';
                            $evening_content = 'display: none;';
                        } else {
                            $is_morning_active = '';
                            $is_afternoon_active = '';
                            $is_evening_active = 'active';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: block;';
                        }
                    }else{
                        if (date('H:i:s') >= '05:00:00' && date('H:i:s') < '12:00:00') {
                            $is_morning_active = 'active';
                            $is_afternoon_active = '';
                            $is_evening_active = '';
                            $morning_content = 'display: block;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: none;';
                        }elseif (date('H:i:s') >= '12:00:00' && date('H:i:s') < '17:00:00') {
                            $is_morning_active = '';
                            $is_afternoon_active = 'active';
                            $is_evening_active = '';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: block;';
                            $evening_content = 'display: none;';
                        }else{
                            $is_morning_active = '';
                            $is_afternoon_active = '';
                            $is_evening_active = 'active';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: block;';
                        }
                    }
        ?>
        <div class="tab">
            <?php if(!empty($slots_morning)){ ?>
            <button type="button" class="slot-tablinks <?=$is_morning_active;?>" onclick="openSlot(event, 'Morning')">Morning</button>
            <?php }if(!empty($slots_afternoon)){ ?>
            <button type="button" class="slot-tablinks <?=$is_afternoon_active;?>" onclick="openSlot(event, 'Afternoon')">Afternoon</button>
            <?php }if(!empty($slots_evening)){ ?>
            <button type="button" class="slot-tablinks <?=$is_evening_active;?>" onclick="openSlot(event, 'Evening')">Evening</button>
            <?php } ?>
        </div>
        <?php if(!empty($slots_morning)){ ?>
        <div id="Morning" class="slot-tabcontent" style="<?=$morning_content;?>">
            <div class="row timeslot_row resc_service_timeslots" style="align-items: self-start;margin: 0px !important; gap:1px !important; display: flex !important;height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $morning_allowed_slots = 0;
                if(!empty($slots_morning)){
                    $slots = $slots_morning;
                    for($i=0;$i<count($slots);$i++){
                        $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                        $current_date = date('Y-m-d H:i:s');
                        if ($current_date <= $allowed_booking_datetime) {
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slots[$i]['from'],$user_selected_service);
                                if($is_vacent){
                                    $morning_allowed_slots++;
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: 13% !important;margin: 5px 2px !important;">
                                        <input type="radio" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>" onchange="setBookingStartEdit('',<?=$booking_details_id;?>)">
                                        <label style=" font-size: 11px;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($morning_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php }if(!empty($slots_afternoon)){ ?>
        <div id="Afternoon" class="slot-tabcontent" style="<?=$afternoon_content;?>">
            <div class="row timeslot_row resc_service_timeslots" style="align-items: self-start;margin: 0px !important; gap:1px !important; display: flex !important;height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $afternoon_allowed_slots = 0;
                if(!empty($slots_afternoon)){
                    $slots = $slots_afternoon;
                    for($i=0;$i<count($slots);$i++){
                        $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                        $current_date = date('Y-m-d H:i:s');
                        if ($current_date <= $allowed_booking_datetime) {
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slots[$i]['from'],$user_selected_service);
                                if($is_vacent){
                                    $afternoon_allowed_slots++;
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: 13% !important;margin: 5px 2px !important;">
                                        <input type="radio" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>" onchange="setBookingStartEdit('',<?=$booking_details_id;?>)">
                                        <label style=" font-size: 11px;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($afternoon_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php }if(!empty($slots_evening)){ ?>
        <div id="Evening" class="slot-tabcontent" style="<?=$evening_content;?>">
            <div class="row timeslot_row resc_service_timeslots" style="align-items: self-start;margin: 0px !important; gap:1px !important; display: flex !important;height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $evening_allowed_slots = 0;
                if(!empty($slots_evening)){
                    $slots = $slots_evening;
                    for($i=0;$i<count($slots);$i++){
                        $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                        $current_date = date('Y-m-d H:i:s');
                        if ($current_date <= $allowed_booking_datetime) {
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slots[$i]['from'],$user_selected_service);
                                if($is_vacent){
                                    $evening_allowed_slots++;
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: 13% !important;margin: 5px 2px !important;">
                                        <input type="radio" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>" onchange="setBookingStartEdit('',<?=$booking_details_id;?>)">
                                        <label style=" font-size: 11px;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($evening_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php } ?>
        <script>
            $('#booking_timeslots').css('border','1px solid #ccc').css('border-radius','5px;');
            function openSlot(evt, slotPeriod) {
                var i, tabcontent, tablinks;

                // Hide all tab contents
                tabcontent = document.getElementsByClassName("slot-tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }

                // Remove the active class from all tabs
                tablinks = document.getElementsByClassName("slot-tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }

                // Show the current tab and add an "active" class to the button that opened the tab
                document.getElementById(slotPeriod).style.display = "block";
                evt.currentTarget.className += " active";
            }    
        </script>
        </div>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Store is closed for selected date</label>
            </div>
        <?php } ?>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Store closed because of emergency</label>
            </div>
        <?php } ?>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Booking Rules not available</label>
            </div>
        <?php }
    }
    public function check_slot_vacent_for_selected_services($from,$selected_services,$store_end = ''){
        $selected_single_slot_from = date('Y-m-d H:i:s',strtotime($from));
        $booking_date = $this->input->post('booking_date') != "" ? date('Y-m-d',strtotime($this->input->post('booking_date'))) : '';;

        if(!empty($selected_services)){
            for($i=0;$i<count($selected_services);$i++){
                $late_flag = false;
                if($store_end != "" && $booking_date != ""){
                    if(date('Y-m-d',strtotime($booking_date)) == date('Y-m-d') && date('Y-m-d H:i:s', strtotime($selected_single_slot_from)) >= $store_end){
                        $late_flag = true;
                    }
                }
                $single_stylist_flag = 0;

                $stylists = $this->get_service_stylists($selected_services[$i]);
                if(!empty($stylists)){
                    $service_details = $this->get_service_details($selected_services[$i]);
                    if(!empty($service_details)){
                        $duration = (int)$service_details->service_duration;

                        $selected_single_slot_to = date('Y-m-d H:i:s', strtotime($selected_single_slot_from . ' +' . $duration . ' minutes'));

                        if($store_end != "" && $booking_date != ""){
                            if(date('Y-m-d',strtotime($booking_date)) == date('Y-m-d') && date('Y-m-d H:i:s', strtotime($selected_single_slot_to)) >= $store_end){
                                $late_flag = true;
                            }
                        }

                        // $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise($selected_single_slot_from,$selected_single_slot_to);
                        // $is_stylist_available_storewise = $late_flag ? $late_flag : $is_stylist_available_storewise;
                        // if($is_stylist_available_storewise){
                        //     $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d',strtotime($selected_single_slot_from)));
                        //     $is_emergency = $late_flag ? $late_flag : !$is_emergency;
                        //     if($is_emergency){
                                foreach($stylists as $stylists_result){
                                    $is_stylist_on_leave = $this->check_staff_is_on_leave($stylists_result->id,date('Y-m-d',strtotime($selected_single_slot_from)));
                                    $is_stylist_on_leave = $late_flag ? $late_flag : ($is_stylist_on_leave == '0' ? true : false);
                                    if($is_stylist_on_leave){
                                        $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise($stylists_result->id,$selected_single_slot_from,$selected_single_slot_to);
                                        $is_stylist_available_shiftwise = $late_flag ? $late_flag : $is_stylist_available_shiftwise;
                                        if($is_stylist_available_shiftwise){
                                            $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise($stylists_result->id,$selected_single_slot_from,$selected_single_slot_to);
                                            $is_stylist_available_bookingwise = $late_flag ? $late_flag : $is_stylist_available_bookingwise;
                                            if($is_stylist_available_bookingwise){
                                                // $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($stylists_result->id,$selected_single_slot_from,$selected_single_slot_to);
                                                // $is_stylist_available_breakwise = $late_flag ? $late_flag : $is_stylist_available_breakwise;
                                                // if($is_stylist_available_breakwise){
                                                    $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($stylists_result->id,$selected_single_slot_from,$selected_single_slot_to);
                                                    if($is_stylist_available_short_breakwise){
                                                        $single_stylist_flag = 1;
                                                        break;
                                                    }
                                                // }
                                            }
                                        }
                                    }
                                }
                        //     }
                        // }
                    }
                }            

                if($single_stylist_flag == 0){
                    return false;
                }

                $selected_single_slot_from = $selected_single_slot_to;
            }
        }
        return true;
    }
    public function check_slot_vacent_for_selected_services_late_hrs($from,$selected_services,$late_flag){
        $selected_single_slot_from = date('Y-m-d H:i:s',strtotime($from));

        if(!empty($selected_services)){
            for($i=0;$i<count($selected_services);$i++){
                $single_stylist_flag = 0;

                $stylists = $this->get_service_stylists($selected_services[$i]);
                if(!empty($stylists)){
                    $service_details = $this->get_service_details($selected_services[$i]);
                    if(!empty($service_details)){
                        $duration = (int)$service_details->service_duration;

                        $selected_single_slot_to = date('Y-m-d H:i:s', strtotime($selected_single_slot_from . ' +' . $duration . ' minutes'));

                        foreach($stylists as $stylists_result){
                            $is_stylist_on_leave = $this->check_staff_is_on_leave($stylists_result->id,date('Y-m-d',strtotime($selected_single_slot_from)));
                            if($is_stylist_on_leave == '0'){
                                $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise($stylists_result->id,$selected_single_slot_from,$selected_single_slot_to);
                                $is_stylist_available_shiftwise = $late_flag ? $late_flag : $is_stylist_available_shiftwise;
                                if($is_stylist_available_shiftwise){
                                    $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise($stylists_result->id,$selected_single_slot_from,$selected_single_slot_to);
                                    $is_stylist_available_bookingwise = $late_flag ? $late_flag : $is_stylist_available_bookingwise;
                                    if($is_stylist_available_bookingwise){
                                        $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($stylists_result->id,$selected_single_slot_from,$selected_single_slot_to);
                                        if($is_stylist_available_breakwise){
                                            $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($stylists_result->id,$selected_single_slot_from,$selected_single_slot_to);
                                            if($is_stylist_available_short_breakwise){
                                                $single_stylist_flag = 1;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }            

                if($single_stylist_flag == 0){
                    return false;
                }

                $selected_single_slot_from = $selected_single_slot_to;
            }
        }
        return true;
    }
    public function check_slot_vacent_for_selected_services_all_stylist($from,$selected_services, $branch_id, $salon_id, $stylist_id, $reservation_id = ''){
        $selected_from = date('Y-m-d H:i:s',strtotime($from));

        if(!empty($selected_services)){
            for($i=0;$i<count($selected_services);$i++){
                $single_stylist_flag = 0;
                
                $stylists = $this->get_service_stylists_all_single($selected_services[$i], $branch_id, $salon_id, $stylist_id);

                if(!empty($stylists)){
                    $service_details = $this->get_service_details_all($selected_services[$i], $branch_id, $salon_id);
                    if(!empty($service_details)){
                        $duration = (int)$service_details->service_duration;

                        $selected_to = date('Y-m-d H:i:s', strtotime($selected_from . ' +' . $duration . ' minutes'));

                        // $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise_all($selected_from,$selected_to, $branch_id, $salon_id);
                        // if($is_stylist_available_storewise){
                        //     $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise_all(date('Y-m-d',strtotime($selected_from)), $branch_id, $salon_id);
                        //     if(!$is_emergency){
                                foreach($stylists as $stylists_result){
                                    $is_stylist_available_reservationwise = $this->get_is_selected_stylist_available_slot_reservewise($stylists_result->id,$selected_from,$selected_to, $reservation_id, $branch_id, $salon_id);
                                    if($is_stylist_available_reservationwise){
                                        $is_stylist_on_leave = $this->check_staff_is_on_leave_all($stylists_result->id,date('Y-m-d',strtotime($selected_from)), $branch_id, $salon_id);
                                        if($is_stylist_on_leave == '0'){
                                            $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                            if($is_stylist_available_shiftwise){
                                                $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                if($is_stylist_available_bookingwise){
                                                    $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                    if($is_stylist_available_breakwise){
                                                        $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                        if($is_stylist_available_short_breakwise){
                                                            $single_stylist_flag = 1;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                        //     }
                        // }
                    }
                }            

                if($single_stylist_flag == 0){
                    return false;
                }

                $selected_from = $selected_to;
            }
        }
        return true;
    }
    public function check_slot_vacent_for_selected_services_all($from,$selected_services, $branch_id, $salon_id){
        $selected_from = date('Y-m-d H:i:s',strtotime($from));

        if(!empty($selected_services)){
            for($i=0;$i<count($selected_services);$i++){
                $single_stylist_flag = 0;

                $stylists = $this->get_service_stylists_all($selected_services[$i], $branch_id, $salon_id);

                if(!empty($stylists)){
                    $service_details = $this->get_service_details_all($selected_services[$i], $branch_id, $salon_id);
                    if(!empty($service_details)){
                        $duration = (int)$service_details->service_duration;

                        $selected_to = date('Y-m-d H:i:s', strtotime($selected_from . ' +' . $duration . ' minutes'));

                        $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise_all($selected_from,$selected_to, $branch_id, $salon_id);
                        if($is_stylist_available_storewise){
                            $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise_all(date('Y-m-d',strtotime($selected_from)), $branch_id, $salon_id);
                            if(!$is_emergency){
                                foreach($stylists as $stylists_result){
                                    $is_stylist_on_leave = $this->check_staff_is_on_leave_all($stylists_result->id,date('Y-m-d',strtotime($selected_from)), $branch_id, $salon_id);
                                    if($is_stylist_on_leave == '0'){
                                        $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                        if($is_stylist_available_shiftwise){
                                            $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                            if($is_stylist_available_bookingwise){
                                                $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                if($is_stylist_available_breakwise){
                                                    $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                    if($is_stylist_available_short_breakwise){
                                                        $single_stylist_flag = 1;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }            

                if($single_stylist_flag == 0){
                    return false;
                }

                $selected_from = $selected_to;
            }
        }
        return true;
    }
    public function check_slot_vacent_for_selected_resch_services_all($from,$reschedule_details, $branch_id, $salon_id){
        $selected_from = date('Y-m-d H:i:s',strtotime($from));
        // $selected_slot_to = date('Y-m-d H:i:s',strtotime($to));

        $available_employees = [];
        if(!empty($reschedule_details)){
            for($i=0;$i<count($reschedule_details);$i++){
                $single_stylist_flag = 0;

                $stylists = $this->get_service_stylists_all($reschedule_details[$i]['service_id'], $branch_id, $salon_id);

                if(!empty($stylists)){
                    $service_details = $this->get_service_details_all($reschedule_details[$i]['service_id'], $branch_id, $salon_id);
                    if(!empty($service_details)){
                        $duration = (int)$service_details->service_duration;

                        $selected_to = date('Y-m-d H:i:s', strtotime($selected_from . ' +' . $duration . ' minutes'));

                        $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise_all($selected_from,$selected_to, $branch_id, $salon_id);
                        if($is_stylist_available_storewise){
                            $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise_all(date('Y-m-d',strtotime($selected_from)), $branch_id, $salon_id);
                            if(!$is_emergency){
                                foreach($stylists as $stylists_result){
                                    $is_stylist_on_leave = $this->check_staff_is_on_leave_all($stylists_result->id,date('Y-m-d',strtotime($selected_from)), $branch_id, $salon_id);
                                    if($is_stylist_on_leave == '0'){
                                        $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                        if($is_stylist_available_shiftwise){
                                            $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_resch_bookingwise_all($reschedule_details[$i]['booking_details_id'],$stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                            if($is_stylist_available_bookingwise){
                                                $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                if($is_stylist_available_breakwise){
                                                    $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                    if($is_stylist_available_short_breakwise){
                                                        $single_stylist_flag = 1;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                // foreach ($stylists as $result) {
                                //     $stylist_services = explode(',', $result->service_name);
                                //     if (in_array($service, $stylist_services)) {
                                //         $is_stylist_available_storewise = $this->Salon_model->get_is_selected_booking_available_storewise_all($selected_from, $selected_slot_to,$branch_id,$salon_id);
                                //         if ($is_stylist_available_storewise) {
                                //             $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise_all(date('Y-m-d', strtotime($selected_from)),$branch_id,$salon_id);
                                //             if (!$is_emergency) {
                                //                 // $is_stylist_available_shiftwise = $this->Salon_model->get_is_selected_stylist_available_shiftwise_all($result->id, $selected_from, $selected_slot_to,$branch_id,$salon_id);
                                //                 $is_stylist_available_shiftwise = $this->Salon_model->get_is_selected_stylist_available_shiftwise_details_all($result->id, $selected_from, $selected_slot_to,$branch_id,$salon_id);
                                //                 if ($is_stylist_available_shiftwise['is_allowed']) {
                                //                     $is_stylist_available_breakwise = $this->Salon_model->get_is_selected_stylist_available_breakwise_all($result->id, $selected_from, $selected_slot_to,$branch_id,$salon_id);
                                //                     if ($is_stylist_available_breakwise) {
                                    //                     $is_stylist_available_short_breakwise = $this->Salon_model->get_is_selected_stylist_available_short_breakwise($result->id, $selected_from, $selected_slot_to,$branch_id,$salon_id);
                                    //                     if ($is_stylist_available_short_breakwise) {
                                    //                         $is_stylist_available_bookingwise = $this->Salon_model->get_is_selected_stylist_available_bookingwise_all($result->id, $selected_from, $selected_slot_to,$branch_id,$salon_id);
                                    //                         if ($is_stylist_available_bookingwise) {
                                    //                             $leave_flag = $this->Salon_model->check_staff_is_on_leave_all($result->id, date('Y-m-d', strtotime($selected_from)),$branch_id,$salon_id);
                                    //                             if($leave_flag == '0'){
                                    //                                 $single_service_emp = array(
                                    //                                     'stylist_id'            => $result->id,
                                    //                                     'stylist_shift_id'      => $is_stylist_available_shiftwise['shift_id'],
                                    //                                     'stylist_shift_type'    => $is_stylist_available_shiftwise['shift_type'],
                                    //                                     'stylist_name'          => $result->full_name,
                                    //                                     'stylist_designation'   => $result->designation_name,
                                    //                                     'profile_photo'         => $result->profile_photo != "" ? base_url('admin_assets/images/employee_profile/' . $result->profile_photo) : '',
                                    //                                 );

                                    //                                 $available_employees[] = $single_service_emp;
                                    //                             }
                                    //                         }
                                                            // }
                                //                     }
                                //                 }                                                
                                //             }
                                //         }
                                //     }
                                // }
                            }
                        }
                    }
                }            

                // echo 'from: '; print_r($from);
                // echo '<pre>'; print_r($available_employees);
                // echo 'end';
                if($single_stylist_flag == 0){
                    return false;
                }

                $selected_from = $selected_to;
            }
        }
        return true;
    }
    public function check_slot_vacent_for_selected_resch_services_all_stylist($from,$reschedule_details, $branch_id, $salon_id, $stylist_id, $reservation_id = ''){
        $selected_from = date('Y-m-d H:i:s',strtotime($from));
        // $selected_slot_to = date('Y-m-d H:i:s',strtotime($to));

        $available_employees = [];
        if(!empty($reschedule_details)){
            for($i=0;$i<count($reschedule_details);$i++){
                $single_stylist_flag = 0;

                $stylists = $this->get_service_stylists_all_single($reschedule_details[$i]['service_id'], $branch_id, $salon_id, $stylist_id);

                if(!empty($stylists)){
                    $service_details = $this->get_service_details_all($reschedule_details[$i]['service_id'], $branch_id, $salon_id);
                    if(!empty($service_details)){
                        $duration = (int)$service_details->service_duration;

                        $selected_to = date('Y-m-d H:i:s', strtotime($selected_from . ' +' . $duration . ' minutes'));

                        $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise_all($selected_from,$selected_to, $branch_id, $salon_id);
                        if($is_stylist_available_storewise){
                            $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise_all(date('Y-m-d',strtotime($selected_from)), $branch_id, $salon_id);
                            if(!$is_emergency){
                                foreach($stylists as $stylists_result){
                                    $is_stylist_available_slot_reservationwise = $this->get_is_selected_stylist_available_slot_reservewise($stylists_result->id,$selected_from,$selected_to, $reservation_id, $branch_id, $salon_id);
                                    if($is_stylist_available_slot_reservationwise){
                                        $is_stylist_on_leave = $this->check_staff_is_on_leave_all($stylists_result->id,date('Y-m-d',strtotime($selected_from)), $branch_id, $salon_id);
                                        if($is_stylist_on_leave == '0'){
                                            $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                            if($is_stylist_available_shiftwise){
                                                $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_resch_bookingwise_all($reschedule_details[$i]['booking_details_id'],$stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                if($is_stylist_available_bookingwise){
                                                    $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise_all($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                    if($is_stylist_available_breakwise){
                                                        $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($stylists_result->id,$selected_from,$selected_to, $branch_id, $salon_id);
                                                        if($is_stylist_available_short_breakwise){
                                                            $single_stylist_flag = 1;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }        
                
                if($single_stylist_flag == 0){
                    return false;
                }

                $selected_from = $selected_to;
            }
        }
        return true;
    }
    public function get_is_selected_stylist_available_resch_bookingwise_all($booking_details_id, $stylist, $selected_from, $selected_to, $branch_id, $salon_id){
        $custom = array();
        $selected_from_dt = strtotime($selected_from);
        $selected_to_dt = strtotime($selected_to);


        $this->db->where('tbl_booking_services_details.branch_id', $branch_id);
        $this->db->where('tbl_booking_services_details.salon_id', $salon_id);
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.id', $booking_details_id);
        $exist = $this->db->get('tbl_booking_services_details')->row();
        if(!empty($exist)){
            $this->db->where('tbl_booking_services_details.branch_id', $branch_id);
            $this->db->where('tbl_booking_services_details.salon_id', $salon_id);
            $this->db->where('tbl_booking_services_details.stylist_id', $stylist);
            $this->db->where('DATE(tbl_booking_services_details.service_date)', date('Y-m-d', $selected_from_dt));
            $this->db->where('tbl_booking_services_details.is_deleted', '0');
            $this->db->where('tbl_booking_services_details.service_status != ', '2');
            $this->db->where('tbl_booking_services_details.id != ', $exist->id);
            $this->db->where('tbl_booking_services_details.booking_id != ', $exist->booking_id);
            $bookings = $this->db->get('tbl_booking_services_details')->result();

            $overlapping_bookings = array();
            $stylist_available = true;

            if(!empty($bookings)){
                foreach($bookings as $bookings_result){
                    $service_from_dt = strtotime($bookings_result->service_from);
                    $service_to_dt = strtotime($bookings_result->service_to);

                    if(($selected_from_dt >= $service_from_dt && $selected_from_dt < $service_to_dt) || 
                        ($selected_to_dt > $service_from_dt && $selected_to_dt <= $service_to_dt) ||
                        ($selected_from_dt < $service_from_dt && $selected_to_dt > $service_to_dt)){
                            if($exist->id != $bookings_result->id){
                                $stylist_available = false;
                                $overlapping_bookings[] = $bookings_result->id;
                            }
                    }
                }
            }

            $custom[] = array(
                'stylist'                 =>  $stylist,
                'overlapping_bookings'    =>  $overlapping_bookings,
            );            

            if($stylist_available){
                return true; // Return true as soon as an available stylist is found
            }
        
            return false; // Return false only if no stylist is available
        }else{
            return false;
        }
    }
    
    public function check_slot_vacent_for_selected_services_edit($booking_details_id,$from,$selected_services){
        $selected_from = date('Y-m-d H:i:s',strtotime($from));

        if(!empty($selected_services)){
            for($i=0;$i<count($selected_services);$i++){
                $single_stylist_flag = 0;

                $stylists = $this->get_service_stylists($selected_services[$i]);

                if(!empty($stylists)){
                    $service_details = $this->get_service_details($selected_services[$i]);
                    if(!empty($service_details)){
                        $duration = (int)$service_details->service_duration;

                        $selected_to = date('Y-m-d H:i:s', strtotime($selected_from . ' +' . $duration . ' minutes'));

                        // $is_stylist_available_storewise = $this->get_is_selected_booking_available_storewise($selected_from,$selected_to);
                        // if($is_stylist_available_storewise){
                            $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise(date('Y-m-d',strtotime($selected_from)));
                            if(!$is_emergency){
                                foreach($stylists as $stylists_result){
                                    $is_stylist_on_leave = $this->check_staff_is_on_leave($stylists_result->id,date('Y-m-d',strtotime($selected_from)));
                                    if($is_stylist_on_leave == '0'){
                                        $is_stylist_available_shiftwise = $this->get_is_selected_stylist_available_shiftwise($stylists_result->id,$selected_from,$selected_to);
                                        if($is_stylist_available_shiftwise){
                                            $is_stylist_available_bookingwise = $this->get_is_selected_stylist_available_bookingwise_edit($booking_details_id,$stylists_result->id,$selected_from,$selected_to);
                                            if($is_stylist_available_bookingwise){
                                                // $is_stylist_available_breakwise = $this->get_is_selected_stylist_available_breakwise($stylists_result->id,$selected_from,$selected_to);
                                                // if($is_stylist_available_breakwise){
                                                    $is_stylist_available_short_breakwise = $this->get_is_selected_stylist_available_short_breakwise($stylists_result->id,$selected_from,$selected_to);
                                                    if($is_stylist_available_short_breakwise){
                                                        $single_stylist_flag = 1;
                                                        break;
                                                    }
                                                // }
                                            }
                                        }
                                    }
                                }
                            }
                        // }
                    }
                }        
                if($single_stylist_flag == 0){
                    return false;
                }

                $selected_from = $selected_to;
            }
        }   
        return true;
    }
    

    public function get_is_selected_booking_available_storewise($selected_from, $selected_to){
        $working_hrs = $this->get_saloon_working_hrs(date('Y-m-d',strtotime($selected_from)));
        if(!empty($working_hrs)){
            $store_start = date('H:i:s',strtotime($working_hrs['start']));
            $store_end = date('H:i:s',strtotime($working_hrs['end']));

            $selected_from_time = date('H:i:s',strtotime($selected_from));
            $selected_to_time = date('H:i:s',strtotime($selected_to));

            if ($selected_from_time >= $store_start && $selected_to_time <= $store_end) {
                return true;
            }
        }

        return false;
    }
    public function get_is_selected_booking_available_storewise_all($selected_from, $selected_to,$branch_id,$salon_id){
        $working_hrs = $this->get_saloon_working_hrs_all(date('Y-m-d',strtotime($selected_from)),$branch_id,$salon_id);
        if(!empty($working_hrs)){
            $store_start = date('H:i:s',strtotime($working_hrs['start']));
            $store_end = date('H:i:s',strtotime($working_hrs['end']));

            $selected_from_time = date('H:i:s',strtotime($selected_from));
            $selected_to_time = date('H:i:s',strtotime($selected_to));

            if ($selected_from_time >= $store_start && $selected_to_time <= $store_end) {
                return true;
            }
        }

        return false;
    }
    
    public function get_is_selected_stylist_available_shiftwise($stylist, $selected_slot_datetime_from, $selected_slot_datetime_to){
        $shift_details = $this->get_stylist_shifts(date('Y-m-d',strtotime($selected_slot_datetime_from)),$stylist);
        // echo '<pre>Shift to'; print_r($shift_details);
        if(!empty($shift_details)){
            $shift_single_from = date('H:i:s',strtotime($shift_details['shift_from']));
            $shift_single_to = date('H:i:s',strtotime($shift_details['shift_to']));

            $shift_break_from = date('H:i:s',strtotime($shift_details['shift_break_from']));
            $shift_break_to = date('H:i:s',strtotime($shift_details['shift_break_to']));

            $selected_slot_from_datetime_time = date('H:i:s',strtotime($selected_slot_datetime_from));
            $selected_slot_to_datetime_time = date('H:i:s',strtotime($selected_slot_datetime_to));
            
            if ($selected_slot_from_datetime_time >= $shift_single_from && $selected_slot_to_datetime_time <= $shift_single_to) {                    
                if(($selected_slot_from_datetime_time >= $shift_break_from && $selected_slot_from_datetime_time < $shift_break_to) || 
                    ($selected_slot_to_datetime_time > $shift_break_from && $selected_slot_to_datetime_time <= $shift_break_to) ||
                    ($selected_slot_from_datetime_time < $shift_break_from && $selected_slot_to_datetime_time > $shift_break_to)){
                    return false;
                }

                return true;
            }
        }

        return false;
    }
    public function get_is_selected_stylist_available_shiftwise_all($stylist, $selected_from, $selected_to, $branch_id, $salon_id){
        $shift_details = $this->get_stylist_shifts_all(date('Y-m-d',strtotime($selected_from)),$stylist, $branch_id, $salon_id);
        if(!empty($shift_details)){
            $shift_from = date('H:i:s',strtotime($shift_details['shift_from']));
            $shift_to = date('H:i:s',strtotime($shift_details['shift_to']));

            $selected_from_time = date('H:i:s',strtotime($selected_from));
            $selected_to_time = date('H:i:s',strtotime($selected_to));

            if ($selected_from_time >= $shift_from && $selected_to_time <= $shift_to) {
                return true;
            }
        }

        return false;
    }
    public function get_is_selected_stylist_available_shiftwise_details($stylist, $selected_slot_datetime_from, $selected_slot_datetime_to){
        $shift_details = $this->get_stylist_shifts(date('Y-m-d',strtotime($selected_slot_datetime_from)),$stylist);
        $shift_id = '';
        $shift_type = '';
        if(!empty($shift_details)){
            $shift_single_from = date('H:i:s',strtotime($shift_details['shift_from']));
            $shift_single_to = date('H:i:s',strtotime($shift_details['shift_to']));

            $shift_break_from = date('H:i:s',strtotime($shift_details['shift_break_from']));
            $shift_break_to = date('H:i:s',strtotime($shift_details['shift_break_to']));

            $shift_id = $shift_details['shift_id'];
            $shift_type = $shift_details['shift_type'];

            $selected_slot_from_datetime_time = date('H:i:s',strtotime($selected_slot_datetime_from));
            $selected_slot_to_datetime_time = date('H:i:s',strtotime($selected_slot_datetime_to));
            
            if ($selected_slot_from_datetime_time >= $shift_single_from && $selected_slot_to_datetime_time <= $shift_single_to) {
                if(($selected_slot_from_datetime_time >= $shift_break_from && $selected_slot_from_datetime_time < $shift_break_to) || 
                    ($selected_slot_to_datetime_time > $shift_break_from && $selected_slot_to_datetime_time <= $shift_break_to) ||
                    ($selected_slot_from_datetime_time < $shift_break_from && $selected_slot_to_datetime_time > $shift_break_to)){
                    return array(
                        'is_allowed'    =>  false,
                        'shift_id'      =>  $shift_id,
                        'shift_type'    =>  $shift_type,
                    );
                }
                return array(
                    'is_allowed'    =>  true,
                    'shift_id'      =>  $shift_id,
                    'shift_type'    =>  $shift_type,
                );
            }
        }

        return array(
            'is_allowed'    =>  false,
            'shift_id'      =>  $shift_id,
            'shift_type'    =>  $shift_type,
        );
    }
    public function get_is_selected_stylist_available_shiftwise_details_all($stylist, $selected_from, $selected_to, $branch_id, $salon_id){
        $shift_details = $this->get_stylist_shifts_all(date('Y-m-d',strtotime($selected_from)),$stylist, $branch_id, $salon_id);
        if(!empty($shift_details)){
            $shift_from = date('H:i:s',strtotime($shift_details['shift_from']));
            $shift_to = date('H:i:s',strtotime($shift_details['shift_to']));
            $shift_id = $shift_details['shift_id'];
            $shift_type = $shift_details['shift_type'];

            $selected_from_time = date('H:i:s',strtotime($selected_from));
            $selected_to_time = date('H:i:s',strtotime($selected_to));

            // echo '<pre>'; print_r($selected_from_time);
            // echo '<pre>'; print_r($shift_from);
            // echo '<pre>'; print_r($shift_to); exit;
            if ($selected_from_time >= $shift_from && $selected_to_time <= $shift_to) {
                return array(
                    'is_allowed'    =>  true,
                    'shift_id'      =>  $shift_id,
                    'shift_type'    =>  $shift_type,
                );
            }
        }

        return array(
            'is_allowed'    =>  false,
            'shift_id'      =>  '',
            'shift_type'    =>  '',
        );
    }
    public function get_is_selected_stylist_available_breakwise($stylist, $selected_from, $selected_to){
        $shift_details = $this->get_stylist_shifts(date('Y-m-d',strtotime($selected_from)),$stylist);
        if(!empty($shift_details)){
            $shift_break_from = date('H:i:s',strtotime($shift_details['shift_break_from']));
            $shift_break_to = date('H:i:s',strtotime($shift_details['shift_break_to']));

            $selected_from_time = date('H:i:s',strtotime($selected_from));
            $selected_to_time = date('H:i:s',strtotime($selected_to));
            
            // echo '<pre>selected_from_time: '; print_r($selected_from_time);
            // echo '<pre>shift_break_from: '; print_r($shift_break_from);
            // echo '<pre>shift_break_to: '; print_r($shift_break_to);
            if(($selected_from_time >= $shift_break_from && $selected_from_time < $shift_break_to) || 
                ($selected_to_time > $shift_break_from && $selected_to_time <= $shift_break_to) ||
                ($selected_from_time < $shift_break_from && $selected_to_time > $shift_break_to)){
                return false;
            }

            return true;
        }
        
        return false;
    }
    public function get_is_selected_stylist_available_slot_reservewise($stylist, $selected_from, $selected_to, $reservation_id = '' , $branch_id = '', $salon_id = ''){
        if($salon_id == ''){
            $salon_id = $this->session->userdata('salon_id');
        }
        if($branch_id == ''){
            $branch_id = $this->session->userdata('branch_id');
        }

        $selected_from_date = date('Y-m-d',strtotime($selected_from));
        $selected_from = date('Y-m-d H:i:s',strtotime($selected_from));
        $selected_to = date('Y-m-d H:i:s',strtotime($selected_to));
        
        if($reservation_id != ""){
            $this->db->where('id !=', $reservation_id);
        }
        $this->db->where('slot_from <', $selected_to);
        $this->db->where('slot_to >', $selected_from);
        $this->db->where('stylist_id', $stylist);
        $this->db->where('branch_id', $branch_id);
        $this->db->where('salon_id', $salon_id);
        $this->db->where('status', '0');
        $this->db->where('expire_on >', date('Y-m-d H:i:s'));
        $reservation = $this->db->get('tbl_stylist_slot_reservations')->row(); 

        if(!empty($reservation)){
            return false;
        }
        return true;
    }
    public function get_is_selected_stylist_available_short_breakwise($stylist, $selected_from, $selected_to, $branch_id = '', $salon_id = ''){
        if($salon_id == ''){
            $salon_id = $this->session->userdata('salon_id');
        }
        if($branch_id == ''){
            $branch_id = $this->session->userdata('branch_id');
        }

        $selected_from_date = date('Y-m-d',strtotime($selected_from));
        $selected_from = date('Y-m-d H:i:s',strtotime($selected_from));
        $selected_to = date('Y-m-d H:i:s',strtotime($selected_to));
        
        $this->db->where('DATE(break_date)', $selected_from_date);
        $this->db->where('branch_id', $branch_id);
        $this->db->where('salon_id', $salon_id);
        $this->db->where('stylist_id', $stylist);
        $this->db->where('from <', $selected_to);
        $this->db->where('to >', $selected_from);
        $this->db->where('is_deleted', '0');
        $this->db->where_in('break_status', ['0','2']);
        $breaks = $this->db->get('tbl_stylist_short_breaks')->result();

        if(!empty($breaks)){
            return false;
        }
        return true;
    }
    public function get_is_selected_stylist_available_breakwise_all($stylist, $selected_from, $selected_to, $branch_id, $salon_id){
        $shift_details = $this->get_stylist_shifts_all(date('Y-m-d',strtotime($selected_from)),$stylist, $branch_id, $salon_id);
        if(!empty($shift_details)){
            $shift_break_from = date('H:i:s',strtotime($shift_details['shift_break_from']));
            $shift_break_to = date('H:i:s',strtotime($shift_details['shift_break_to']));

            $selected_from_time = date('H:i:s',strtotime($selected_from));
            $selected_to_time = date('H:i:s',strtotime($selected_to));
            
            if(($selected_from_time >= $shift_break_from && $selected_from_time < $shift_break_to) || 
                ($selected_to_time > $shift_break_from && $selected_to_time <= $shift_break_to) ||
                ($selected_from_time < $shift_break_from && $selected_to_time > $shift_break_to)){
                return false;
            }

            return true;
        }
        
        return false;
    }
    public function get_is_selected_stylist_available_bookingwise($stylist, $selected_from, $selected_to)
    {
        $branch_id = $this->session->userdata('branch_id');
        $salon_id  = $this->session->userdata('salon_id');

        // Get buffering time in seconds (default 5 minutes = 300 sec)
        $buffer_minutes = 5;
        $rules = $this->Salon_model->get_booking_rules();
        if (!empty($rules) && !empty($rules->buffering_time)) {
            $buffer_minutes = (int)$rules->buffering_time;
        }
        $buffer_seconds = $buffer_minutes * 60;

        // Extract date from selected_from for matching service_date
        $service_date = date('Y-m-d', strtotime($selected_from));

        // Build query to check for overlapping bookings
        $this->db->select('id');
        $this->db->from('tbl_booking_services_details');
        $this->db->where([
            'branch_id'   => $branch_id,
            'salon_id'    => $salon_id,
            'stylist_id'  => $stylist,
            'is_deleted'  => '0'
        ]);
        $this->db->where('service_status !=', '2');
        $this->db->where('DATE(service_date)', $service_date);

        // SQL overlap condition with buffer applied
        $this->db->where("(
            UNIX_TIMESTAMP('$selected_from') < UNIX_TIMESTAMP(service_to) + $buffer_seconds
            AND
            UNIX_TIMESTAMP('$selected_to') > UNIX_TIMESTAMP(service_from) - $buffer_seconds
        )", null, false);

        $query = $this->db->get();

        // Return true if stylist is available (no overlaps), else false
        return ($query->num_rows() === 0);
    }

    public function get_is_selected_stylist_available_bookingwise_old($stylist, $selected_from, $selected_to){
        $custom = array();
        $selected_from_dt = strtotime($selected_from);
        $selected_to_dt = strtotime($selected_to);

        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.stylist_id', $stylist);
        $this->db->where('DATE(tbl_booking_services_details.service_date)', date('Y-m-d', strtotime($selected_from_dt)));
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.service_status != ', '2');
        $bookings = $this->db->get('tbl_booking_services_details')->result();

        $overlapping_bookings = array();
        $stylist_available = true;

        if(!empty($bookings)){
            $rules = $this->Salon_model->get_booking_rules(); 
            if(!empty($rules)){
                $buffering_time = $rules->buffering_time != "" ? $rules->buffering_time : '5';
            }else{
                $buffering_time = '5';
            }
            // if($this->input->post('source') == 'vendor_panel'){
            //     $buffering_time = '0';
            // }
            foreach($bookings as $bookings_result){
                // $service_from_dt = strtotime($bookings_result->service_from);
                // $service_to_dt = strtotime($bookings_result->service_to);
                
                $service_from_dt = new DateTime($bookings_result->service_from);
                $service_from_dt->modify("-{$buffering_time} minutes");
                $service_from_dt = $service_from_dt->format('Y-m-d H:i:s');
                $service_from_dt = strtotime($service_from_dt);
                
                $service_to_dt = new DateTime($bookings_result->service_to);
                $service_to_dt->modify("+{$buffering_time} minutes");
                $service_to_dt = $service_to_dt->format('Y-m-d H:i:s');
                $service_to_dt = strtotime($service_to_dt);

                if(($selected_from_dt >= $service_from_dt && $selected_from_dt < $service_to_dt) || 
                    ($selected_to_dt > $service_from_dt && $selected_to_dt <= $service_to_dt) ||
                    ($selected_from_dt < $service_from_dt && $selected_to_dt > $service_to_dt)){
                    $stylist_available = false;
                    $overlapping_bookings[] = $bookings_result->id;
                }
            }
        }

        $custom[] = array(
            'stylist'                 =>  $stylist,
            'overlapping_bookings'    =>  $overlapping_bookings,
        );

        if($stylist_available){
            return true; // Return true as soon as an available stylist is found
        }
    
        return false; // Return false only if no stylist is available
    }
    public function get_is_selected_stylist_available_bookingwise_all($stylist, $selected_from, $selected_to, $branch_id, $salon_id){
        $custom = array();
        $selected_from_dt = strtotime($selected_from);
        $selected_to_dt = strtotime($selected_to);

        $this->db->where('tbl_booking_services_details.branch_id', $branch_id);
        $this->db->where('tbl_booking_services_details.salon_id', $salon_id);
        $this->db->where('tbl_booking_services_details.stylist_id', $stylist);
        $this->db->where('DATE(tbl_booking_services_details.service_date)', date('Y-m-d', $selected_from_dt));
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.service_status != ', '2');
        $bookings = $this->db->get('tbl_booking_services_details')->result();

        $overlapping_bookings = array();
        $stylist_available = true;

        if(!empty($bookings)){
            $rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id); 
            if(!empty($rules)){
                $buffering_time = $rules->buffering_time != "" ? $rules->buffering_time : '5';
            }else{
                $buffering_time = '5';
            }
            // if($this->input->post('source') == 'vendor_panel'){
            //     $buffering_time = '0';
            // }
            foreach($bookings as $bookings_result){
                // $service_from_dt = strtotime($bookings_result->service_from);
                // $service_to_dt = strtotime($bookings_result->service_to);
                
                $service_from_dt = new DateTime($bookings_result->service_from);
                $service_from_dt->modify("-{$buffering_time} minutes");
                $service_from_dt = $service_from_dt->format('Y-m-d H:i:s');
                $service_from_dt = strtotime($service_from_dt);
                
                $service_to_dt = new DateTime($bookings_result->service_to);
                $service_to_dt->modify("+{$buffering_time} minutes");
                $service_to_dt = $service_to_dt->format('Y-m-d H:i:s');
                $service_to_dt = strtotime($service_to_dt);

                if(($selected_from_dt >= $service_from_dt && $selected_from_dt < $service_to_dt) || 
                    ($selected_to_dt > $service_from_dt && $selected_to_dt <= $service_to_dt) ||
                    ($selected_from_dt < $service_from_dt && $selected_to_dt > $service_to_dt)){
                    $stylist_available = false;
                    $overlapping_bookings[] = $bookings_result->id;
                }
            }
        }

        $custom[] = array(
            'stylist'                 =>  $stylist,
            'overlapping_bookings'    =>  $overlapping_bookings,
        );

        if($stylist_available){
            return true; // Return true as soon as an available stylist is found
        }
    
        return false; // Return false only if no stylist is available
    }
    
    public function get_is_selected_stylist_available_bookingwise_edit($booking_details_id, $stylist, $selected_from, $selected_to){
        $custom = array();
        $selected_from_dt = strtotime($selected_from);
        $selected_to_dt = strtotime($selected_to);

        $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_booking_services_details.stylist_id', $stylist);
        $this->db->where('DATE(tbl_booking_services_details.service_date)', date('Y-m-d', $selected_from_dt));
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.service_status != ', '2');
        $bookings = $this->db->get('tbl_booking_services_details')->result();

        $overlapping_bookings = array();
        $stylist_available = true;

        if(!empty($bookings)){
            $rules = $this->Salon_model->get_booking_rules(); 
            if(!empty($rules)){
                $buffering_time = $rules->buffering_time != "" ? $rules->buffering_time :'5';
            }else{
                $buffering_time = '5';
            }
            // if($this->input->post('source') == 'vendor_panel'){
            //     $buffering_time = '0';
            // }
            foreach($bookings as $bookings_result){
                // $service_from_dt = strtotime($bookings_result->service_from);
                // $service_to_dt = strtotime($bookings_result->service_to);
                
                $service_from_dt = new DateTime($bookings_result->service_from);
                $service_from_dt->modify("-{$buffering_time} minutes");
                $service_from_dt = $service_from_dt->format('Y-m-d H:i:s');
                $service_from_dt = strtotime($service_from_dt);
                
                $service_to_dt = new DateTime($bookings_result->service_to);
                $service_to_dt->modify("+{$buffering_time} minutes");
                $service_to_dt = $service_to_dt->format('Y-m-d H:i:s');
                $service_to_dt = strtotime($service_to_dt);

                if(($selected_from_dt >= $service_from_dt && $selected_from_dt < $service_to_dt) || 
                    ($selected_to_dt > $service_from_dt && $selected_to_dt <= $service_to_dt) ||
                    ($selected_from_dt < $service_from_dt && $selected_to_dt > $service_to_dt)){
                        if($bookings_result->booking_id != $booking_details_id){
                            $stylist_available = false;
                            $overlapping_bookings[] = $bookings_result->id;
                        }
                }
            }
        }

        // print_r($overlapping_bookings);
        $custom[] = array(
            'stylist'                 =>  $stylist,
            'overlapping_bookings'    =>  $overlapping_bookings,
        );

        if($stylist_available){
            return true; // Return true as soon as an available stylist is found
        }
    
        return false; // Return false only if no stylist is available
    }
    public function get_is_any_stylist_available($selected_from, $selected_to){
        $stylists = $this->get_all_salon_stylists();
        $custom = array();
    
        if(!empty($stylists)){
            $selected_from_dt = strtotime($selected_from);
            $selected_to_dt = strtotime($selected_to);
    
            foreach($stylists as $result){
                $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
                $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
                $this->db->where('tbl_booking_services_details.stylist_id', $result->id);
                $this->db->where('DATE(tbl_booking_services_details.service_date)', date('Y-m-d', $selected_from_dt));
                $this->db->where('tbl_booking_services_details.is_deleted', '0');
                $bookings = $this->db->get('tbl_booking_services_details')->result();
    
                $overlapping_bookings = array();
                $stylist_available = true;
    
                if(!empty($bookings)){
                    foreach($bookings as $bookings_result){
                        $service_from_dt = strtotime($bookings_result->service_from);
                        $service_to_dt = strtotime($bookings_result->service_to);
    
                        if(($selected_from_dt >= $service_from_dt && $selected_from_dt < $service_to_dt) || 
                            ($selected_to_dt > $service_from_dt && $selected_to_dt <= $service_to_dt) ||
                            ($selected_from_dt < $service_from_dt && $selected_to_dt > $service_to_dt)){
                            $stylist_available = false;
                            $overlapping_bookings[] = $bookings_result->id;
                        }
                    }
                }
    
                $custom[] = array(
                    'stylist'                 =>  $result->id,
                    'overlapping_bookings'    =>  $overlapping_bookings,
                );
    
                if($stylist_available){
                    return true; // Return true as soon as an available stylist is found
                }
            }
        }
    
        return false; // Return false only if no stylist is available
    }
    
    public function get_day_timeslots_extra_service_ajx(){
        $booking_rules = $this->get_booking_rules();
        
        $user_selected_service = $this->input->post('user_selected_service');
        
        $date = date('Y-m-d',strtotime($this->input->post('booking_date')));
        $booking_details_id = $this->input->post('booking_details_id');

        $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise($date);
        if($this->input->post('booking_start') == ""){
            if($this->input->post('selected_slot_start_time') != ""){
                $booking_start = date('H:i:s',strtotime($this->input->post('selected_slot_start_time')));
            }else{
                $booking_start = '';
            }
        }else{
            $booking_start = date('H:i:s',strtotime($this->input->post('booking_start')));
        }

        if(!empty($booking_rules)){
            if(!$is_emergency){
                $working_hrs = $this->get_saloon_working_hrs($date);
                $duration = $booking_rules->slot_time;

                if($working_hrs['is_allowed'] == 1){
                    $minutes_early_booking = !empty($booking_rules->booking_time_range) ? $booking_rules->booking_time_range : 0;
                    if($this->input->post('source') == 'vendor_panel'){
                        $minutes_early_booking = 0;
                    }

                    $store_start = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['start']));
                    $store_end = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['end']));
                    $slots = $this->generateCommonTimePairs($date,$store_start,$store_end,$duration);
                    
                    $slots_morning = [];
                    $slots_afternoon = [];
                    $slots_evening = [];

                    for($i=0;$i<count($slots);$i++){
                        $slot_time = date('H:i:s', strtotime($slots[$i]['from']));
                        if ($slot_time >= '05:00:00' && $slot_time < '12:00:00') {
                            $slots_morning[] = $slots[$i];
                        } elseif ($slot_time >= '12:00:00' && $slot_time < '17:00:00') {
                            $slots_afternoon[] = $slots[$i];
                        } else {
                            $slots_evening[] = $slots[$i];
                        }
                    }
                    if($booking_start != ""){
                        if ($booking_start >= '05:00:00' && $booking_start < '12:00:00') {
                            $is_morning_active = 'active';
                            $is_afternoon_active = '';
                            $is_evening_active = '';
                            $morning_content = 'display: block;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: none;';
                        }elseif ($booking_start >= '12:00:00' && $booking_start < '17:00:00') {
                            $is_morning_active = '';
                            $is_afternoon_active = 'active';
                            $is_evening_active = '';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: block;';
                            $evening_content = 'display: none;';
                        } else {
                            $is_morning_active = '';
                            $is_afternoon_active = '';
                            $is_evening_active = 'active';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: block;';
                        }
                    }else{
                        if (date('H:i:s') >= '05:00:00' && date('H:i:s') < '12:00:00') {
                            $is_morning_active = 'active';
                            $is_afternoon_active = '';
                            $is_evening_active = '';
                            $morning_content = 'display: block;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: none;';
                        }elseif (date('H:i:s') >= '12:00:00' && date('H:i:s') < '17:00:00') {
                            $is_morning_active = '';
                            $is_afternoon_active = 'active';
                            $is_evening_active = '';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: block;';
                            $evening_content = 'display: none;';
                        }else{
                            $is_morning_active = '';
                            $is_afternoon_active = '';
                            $is_evening_active = 'active';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: block;';
                        }
                    }
        ?>
        <div class="tab">
            <?php if(!empty($slots_morning)){ ?>
            <button type="button" class="slot-tablinks <?=$is_morning_active;?>" onclick="openSlot(event, 'Morning')">Morning</button>
            <?php }if(!empty($slots_afternoon)){ ?>
            <button type="button" class="slot-tablinks <?=$is_afternoon_active;?>" onclick="openSlot(event, 'Afternoon')">Afternoon</button>
            <?php }if(!empty($slots_evening)){ ?>
            <button type="button" class="slot-tablinks <?=$is_evening_active;?>" onclick="openSlot(event, 'Evening')">Evening</button>
            <?php } ?>
        </div>
        <?php if(!empty($slots_morning)){ ?>
        <div id="Morning" class="slot-tabcontent" style="<?=$morning_content;?>">
            <div class="row timeslot_row extra_service_timeslots" style="align-items: self-start;margin: 0px !important; display: flex !important;height: auto !important; max-height: 75px; overflow: hidden; overflow-y: auto;">
                <?php
                $morning_allowed_slots = 0;
                if(!empty($slots_morning)){
                    $slots = $slots_morning;
                    for($i=0;$i<count($slots);$i++){
                        $allowed = '0';
                        if($this->input->post('source') == 'vendor_panel'){
                            $allowed = '1';
                        }else{
                            $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                            $current_date = date('Y-m-d H:i:s');
                            if ($current_date <= $allowed_booking_datetime) {
                                $allowed = '1';
                            }
                        }
                        if($allowed == '1'){
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slots[$i]['from'],$user_selected_service);
                                if($is_vacent){
                                    $morning_allowed_slots++;
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: 13% !important;margin: 5px 2px !important;">
                                        <input type="radio" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>" onchange="setBookingStart('',<?=$booking_details_id;?>)">
                                        <label style=" font-size: 11px;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($morning_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php }if(!empty($slots_afternoon)){ ?>
        <div id="Afternoon" class="slot-tabcontent" style="<?=$afternoon_content;?>">
            <div class="row timeslot_row extra_service_timeslots" style="align-items: self-start;margin: 0px !important; display: flex !important;height: auto !important; max-height: 75px; overflow: hidden; overflow-y: auto;">
                <?php
                $afternoon_allowed_slots = 0;
                if(!empty($slots_afternoon)){
                    $slots = $slots_afternoon;
                    for($i=0;$i<count($slots);$i++){
                        $allowed = '0';
                        if($this->input->post('source') == 'vendor_panel'){
                            $allowed = '1';
                        }else{
                            $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                            $current_date = date('Y-m-d H:i:s');
                            if ($current_date <= $allowed_booking_datetime) {
                                $allowed = '1';
                            }
                        }
                        if($allowed == '1'){
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slots[$i]['from'],$user_selected_service);
                                if($is_vacent){
                                    $afternoon_allowed_slots++;
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: 13% !important;margin: 5px 2px !important;">
                                        <input type="radio" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>" onchange="setBookingStart('',<?=$booking_details_id;?>)">
                                        <label style=" font-size: 11px;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($afternoon_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php }if(!empty($slots_evening)){ ?>
        <div id="Evening" class="slot-tabcontent" style="<?=$evening_content;?>">
            <div class="row timeslot_row extra_service_timeslots" style="align-items: self-start;margin: 0px !important; display: flex !important;height: auto !important; max-height: 75px; overflow: hidden; overflow-y: auto;">
                <?php
                $evening_allowed_slots = 0;
                if(!empty($slots_evening)){
                    $slots = $slots_evening;
                    for($i=0;$i<count($slots);$i++){
                        $allowed = '0';
                        if($this->input->post('source') == 'vendor_panel'){
                            $allowed = '1';
                        }else{
                            $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                            $current_date = date('Y-m-d H:i:s');
                            if ($current_date <= $allowed_booking_datetime) {
                                $allowed = '1';
                            }
                        }
                        if($allowed == '1'){
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services($slots[$i]['from'],$user_selected_service);
                                if($is_vacent){
                                    $evening_allowed_slots++;
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: 13% !important;margin: 5px 2px !important;">
                                        <input type="radio" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>" onchange="setBookingStart('',<?=$booking_details_id;?>)">
                                        <label style=" font-size: 11px;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($evening_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php } ?>
        <script>
            $('#booking_timeslots').css('border','1px solid #ccc').css('border-radius','5px;');
            function openSlot(evt, slotPeriod) {
                var i, tabcontent, tablinks;

                // Hide all tab contents
                tabcontent = document.getElementsByClassName("slot-tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }

                // Remove the active class from all tabs
                tablinks = document.getElementsByClassName("slot-tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }

                // Show the current tab and add an "active" class to the button that opened the tab
                document.getElementById(slotPeriod).style.display = "block";
                evt.currentTarget.className += " active";
            }    
        </script>
        </div>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Store is closed for selected date</label>
            </div>
        <?php } ?>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Store closed because emergency</label>
            </div>
        <?php } ?>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Booking Rules not available</label>
            </div>
        <?php }
    }
    public function get_day_timeslots_edit_service_ajx(){
        $booking_rules = $this->get_booking_rules();
        
        $slot_type = $this->input->post('slot_type');
        $slot_thresholds = [
            'morning'   => ['start' => '05:00:00', 'end' => '12:00:00'],
            'afternoon' => ['start' => '12:00:00', 'end' => '17:00:00'],
            'evening'   => ['start' => '17:00:00', 'end' => '23:00:00'],
        ];
        
        $user_selected_service = $this->input->post('user_selected_service');
        $employee = $this->input->post('employee');
        $employee_selection_rule = $this->input->post('employee_selection_rule');

        if(!empty($user_selected_service)){
            $all_selected_services = array_map(function($value) {
                return explode('_', $value)[0];
            }, $user_selected_service);
        }else{
            $all_selected_services = array();
        }

        $date = date('Y-m-d',strtotime($this->input->post('booking_date')));
        $booking_details_id = $this->input->post('booking_id');

        $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise($date);
        if($this->input->post('booking_start') == ""){
            if($this->input->post('selected_slot_start_time') != ""){
                $booking_start = date('H:i:s',strtotime($this->input->post('selected_slot_start_time')));
            }else{
                $booking_start = '';
            }
        }else{
            $booking_start = date('H:i:s',strtotime($this->input->post('booking_start')));
        }

        if(!empty($booking_rules)){
            if(!$is_emergency){
                $working_hrs = $this->get_saloon_working_hrs($date);
                $duration = $booking_rules->slot_time;
                if($working_hrs['is_allowed'] == 1){
                    $minutes_early_booking = !empty($booking_rules->booking_time_range) ? $booking_rules->booking_time_range : 0;
                    if($this->input->post('source') == 'vendor_panel'){
                        $minutes_early_booking = 0;
                    }

                    $store_start = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['start']));
                    $store_end = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['end']));
                    $one_hour_prior = date('Y-m-d H:i:s', strtotime($store_end . ' -1 hour'));
                    $store_end_for_timeslots = $store_end;
                    if($date == date('Y-m-d') && date('Y-m-d H:i:s') >= $one_hour_prior){   // change it to >= when make it live
                        $store_end_for_timeslots = date('Y-m-d 23:59:59', strtotime($date));
                    }

                    // $slots = $this->generateCommonTimePairs($date,$store_start,$store_end,$duration);


                    
                    $threshold = $slot_thresholds[$slot_type];

                    $threshold_start = date('Y-m-d H:i:s', strtotime($date . ' ' . $threshold['start']));
                    $threshold_end   = date('Y-m-d H:i:s', strtotime($date . ' ' . $threshold['end']));

                    $slot_start_time = max($store_start, $threshold_start);
                    $slot_end_time   = min($store_end_for_timeslots, $threshold_end);

                    $slots = $this->Salon_model->generateCommonTimePairs($date, $slot_start_time, $slot_end_time, $duration);




                    $slots_morning = [];
                    $slots_afternoon = [];
                    $slots_evening = [];

                    for($i=0;$i<count($slots);$i++){
                        $slot_time = date('H:i:s', strtotime($slots[$i]['from']));
                        if ($slot_time >= '05:00:00' && $slot_time < '12:00:00') {
                            $slots_morning[] = $slots[$i];
                        } elseif ($slot_time >= '12:00:00' && $slot_time < '17:00:00') {
                            $slots_afternoon[] = $slots[$i];
                        } else {
                            $slots_evening[] = $slots[$i];
                        }
                    }
                    if($booking_start != ""){
                        // if ($booking_start >= '05:00:00' && $booking_start < '12:00:00') {
                        if($slot_type == 'morning'){
                            $is_morning_active = 'active';
                            $is_afternoon_active = '';
                            $is_evening_active = '';
                            $morning_content = 'display: block;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: none;';
                        // }elseif ($booking_start >= '12:00:00' && $booking_start < '17:00:00') {
                        }elseif ($slot_type == 'afternoon'){
                            $is_morning_active = '';
                            $is_afternoon_active = 'active';
                            $is_evening_active = '';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: block;';
                            $evening_content = 'display: none;';
                        } else {
                            $is_morning_active = '';
                            $is_afternoon_active = '';
                            $is_evening_active = 'active';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: block;';
                        }
                    }else{
                        // if (date('H:i:s') >= '05:00:00' && date('H:i:s') < '12:00:00') {
                        if($slot_type == 'morning'){
                            $is_morning_active = 'active';
                            $is_afternoon_active = '';
                            $is_evening_active = '';
                            $morning_content = 'display: block;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: none;';
                        // }elseif (date('H:i:s') >= '12:00:00' && date('H:i:s') < '17:00:00') {
                        }elseif ($slot_type == 'afternoon'){
                            $is_morning_active = '';
                            $is_afternoon_active = 'active';
                            $is_evening_active = '';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: block;';
                            $evening_content = 'display: none;';
                        }else{
                            $is_morning_active = '';
                            $is_afternoon_active = '';
                            $is_evening_active = 'active';
                            $morning_content = 'display: none;';
                            $afternoon_content = 'display: none;';
                            $evening_content = 'display: block;';
                        }
                    }
        ?>
        <div class="tab">
            <button type="button" class="slot-tablinks <?=$is_morning_active;?>" onclick="fetchTimeSlots(<?=$booking_details_id; ?>,'morning','manual'), openSlot(event, 'Morning')">Morning</button>
            <button type="button" class="slot-tablinks <?=$is_afternoon_active;?>" onclick="fetchTimeSlots(<?=$booking_details_id; ?>,'afternoon','manual'), openSlot(event, 'Afternoon')">Afternoon</button>
            <button type="button" class="slot-tablinks <?=$is_evening_active;?>" onclick="fetchTimeSlots(<?=$booking_details_id; ?>,'evening','manual'), openSlot(event, 'Evening')">Evening</button>
        </div>
        <?php if(!empty($slots_morning)){ ?>
        <div id="Morning" class="slot-tabcontent" style="<?=$morning_content;?>">
            <div class="row timeslot_row extra_service_timeslots" style="align-items: self-start;margin: 0px !important; display: flex !important;height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $morning_allowed_slots = 0;
                if(!empty($slots_morning)){
                    $slots = $slots_morning;
                    for($i=0;$i<count($slots);$i++){
                        $allowed = '0';
                        if($this->input->post('source') == 'vendor_panel'){
                            $allowed = '1';
                        }else{
                            $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                            $current_date = date('Y-m-d H:i:s');
                            if ($current_date <= $allowed_booking_datetime) {
                                $allowed = '1';
                            }
                        }
                        if($allowed == '1'){
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services_edit($booking_details_id,$slots[$i]['from'],$all_selected_services);
                                if($is_vacent){
                                    $morning_allowed_slots++;
                                    // echo '<pre>'; print_r($is_vacent);
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="cursor:pointer;background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: max-content !important;text-align:center;margin: 5px 2px !important;" onclick="selectTimeslotRadioEdit('','<?= str_replace([' ', '-', ':'], '_', $slots[$i]['from']); ?>',<?=$booking_details_id;?>)">
                                        <input type="radio" style="cursor:pointer;" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>_<?= str_replace([' ', '-', ':'], '_', $slots[$i]['from']); ?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>">
                                        <label style=" font-size: 11px;cursor:pointer;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($morning_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php }if(!empty($slots_afternoon)){ ?>
        <div id="Afternoon" class="slot-tabcontent" style="<?=$afternoon_content;?>">
            <div class="row timeslot_row extra_service_timeslots" style="align-items: self-start;margin: 0px !important; display: flex !important;height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $afternoon_allowed_slots = 0;
                if(!empty($slots_afternoon)){
                    $slots = $slots_afternoon;
                    for($i=0;$i<count($slots);$i++){
                        $allowed = '0';
                        if($this->input->post('source') == 'vendor_panel'){
                            $allowed = '1';
                        }else{
                            $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                            $current_date = date('Y-m-d H:i:s');
                            if ($current_date <= $allowed_booking_datetime) {
                                $allowed = '1';
                            }
                        }
                        if($allowed == '1'){
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services_edit($booking_details_id,$slots[$i]['from'],$all_selected_services);
                                if($is_vacent){
                                    $afternoon_allowed_slots++;
                                    // echo '<pre>'; print_r($is_vacent);
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="cursor:pointer;background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: max-content !important;text-align:center;margin: 5px 2px !important;" onclick="selectTimeslotRadioEdit('','<?= str_replace([' ', '-', ':'], '_', $slots[$i]['from']); ?>',<?=$booking_details_id;?>)">
                                        <input type="radio" style="cursor:pointer;" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>_<?= str_replace([' ', '-', ':'], '_', $slots[$i]['from']); ?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>">
                                        <label style=" font-size: 11px;cursor:pointer;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($afternoon_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php }if(!empty($slots_evening)){ ?>
        <div id="Evening" class="slot-tabcontent" style="<?=$evening_content;?>">
            <div class="row timeslot_row extra_service_timeslots" style="align-items: self-start;margin: 0px !important; display: flex !important;height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                <?php
                $evening_allowed_slots = 0;
                if(!empty($slots_evening)){
                    $slots = $slots_evening;
                    for($i=0;$i<count($slots);$i++){
                        $allowed = '0';
                        if($this->input->post('source') == 'vendor_panel'){
                            $allowed = '1';
                        }else{
                            $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slots[$i]['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                            $current_date = date('Y-m-d H:i:s');
                            if ($current_date <= $allowed_booking_datetime) {
                                $allowed = '1';
                            }
                        }
                        if($allowed == '1'){
                            $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s',strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s',strtotime($slots[$i]['from']));
                            if(date('Y-m-d H:i:s',strtotime($slots[$i]['from'])) >= $selected_start){
                                $is_vacent = $this->check_slot_vacent_for_selected_services_edit($booking_details_id,$slots[$i]['from'],$all_selected_services);
                                if($is_vacent){
                                    $evening_allowed_slots++;
                                    // echo '<pre>'; print_r($is_vacent);
                                    if($is_vacent){
                                        $style = "#00800045";
                                    }else{
                                        $style = '#ff000061';
                                    }
                    ?>
                                    <div class="single_timeslot" style="cursor:pointer;background-color:<?=$style;?>;display: inline-block !important;padding: 2px 2px !important; width: max-content !important;text-align:center;margin: 5px 2px !important;" onclick="selectTimeslotRadioEdit('','<?= str_replace([' ', '-', ':'], '_', $slots[$i]['from']); ?>',<?=$booking_details_id;?>)">
                                        <input type="radio" style="cursor:pointer;" <?php if($booking_start != '' && $booking_start == date('H:i:s',strtotime($slots[$i]['from']))){ echo 'checked'; }?> class="booking_start_time_slot" name="booking_start_time_slot_<?=$booking_details_id;?>" id="booking_start_time_slot_<?=$booking_details_id;?>_<?= str_replace([' ', '-', ':'], '_', $slots[$i]['from']); ?>" value="<?=date('h:i A',strtotime($slots[$i]['from']));?>">
                                        <label style=" font-size: 11px;cursor:pointer;"><?=date('h:i A',strtotime($slots[$i]['from']));?></label>
                                    </div>
                    <?php
                                }
                            }
                        }
                    }
                }
                if($evening_allowed_slots == 0){
                ?>
                <div style="width:100%;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                </div>
                <?php
                }
                ?>
            </div>
        </div>
        <?php } ?>
        <script>
            $('#booking_timeslots').css('border','1px solid #ccc').css('border-radius','5px;');
            function openSlot(evt, slotPeriod) {
                var i, tabcontent, tablinks;

                // Hide all tab contents
                tabcontent = document.getElementsByClassName("slot-tabcontent");
                for (i = 0; i < tabcontent.length; i++) {
                    tabcontent[i].style.display = "none";
                }

                // Remove the active class from all tabs
                tablinks = document.getElementsByClassName("slot-tablinks");
                for (i = 0; i < tablinks.length; i++) {
                    tablinks[i].className = tablinks[i].className.replace(" active", "");
                }

                // Show the current tab and add an "active" class to the button that opened the tab
                document.getElementById(slotPeriod).style.display = "block";
                evt.currentTarget.className += " active";
            }    
        </script>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Store is closed for selected date</label>
            </div>
        <?php } ?>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Store is closed becuse of emergency</label>
            </div>
        <?php } ?>
        <?php }else{ ?>
            <div class="col-lg-12">
                <label class="error">Booking Rules not available</label>
            </div>
        <?php }
    }



    public function get_student_data_ajax(){
        $this->db->select('tbl_student.*, 
                       tbl_payment_entry.course_name as payment_course_name,
                       tbl_course_master.course_name as master_course_name');
        $this->db->join('tbl_payment_entry', 'tbl_payment_entry.student_name = tbl_student.id', 'left');
        $this->db->join('tbl_course_master', 'tbl_course_master.id = tbl_payment_entry.course_name', 'left');
        $this->db->where('tbl_student.is_deleted','0');
        $this->db->where('tbl_student.phone',$this->input->post('phone'));
        $result = $this->db->get('tbl_student');
        echo json_encode($result->row());
    }

    public function get_student_payment_ajax(){
        $this->db->where('tbl_payment_entry.is_deleted','0');
        $this->db->where('tbl_payment_entry.student_name',$this->input->post('student_name'));
        $result = $this->db->get('tbl_payment_entry');
        echo json_encode($result->row());
    }


    // public function  get_total_fees_ajax($id){

    //     $course_names = explode('@@@',$id);
    //     // echo "<pre>";print_r($id);exit;
    //     $this->db->where('is_deleted','0');
	// 	$this->db->where('status','1');
    //     $this->db->group_start();
    //     foreach($course_names as $course_name){
    //         $this->db->or_where('course_name',$course_name);
    //     }
    //     $this->db->group_end();

    //     $result = $this->db->get('tbl_payment_entry');
	// 	$result = $result->result();
    //     // echo "<pre>";print_r($result);exit;

    //     $total_fees = 0;
    //     if ($result) {
    //         foreach($result as $row){
    //             $total_fees += $row->total_fees;
    //         }
    //     }
    //         return ['total_fees' => $total_fees];
    // }

    public function get_total_fees_ajax() {
        $id = $this->input->post('course_name_id');
        $course_names = explode('@@@', $id);
    
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $this->db->group_start();
        foreach($course_names as $course_name){
            $this->db->or_where('course_name', $course_name);
        }
        $this->db->group_end();
    
        $result = $this->db->get('tbl_payment_entry');
        $result = $result->result();
    
        $total_fees = 0;
        if ($result) {
            foreach($result as $row){
                $total_fees = $row->total_fees;
            }
        }
    
        return ['total_fees' => $total_fees];
    }
    
    
    

    
    // public function  get_fees_data_ajax($course_name_id,$student_id){
    //     $course_names = explode('@@@',$course_name_id);
    //     $course_name = $course_names[0];
    //     $this->db->where('is_deleted','0');
    //     $this->db->where('student_name',$student_id);
    //     $this->db->where('course_name',$course_name);
    //     $this->db->where('id','DESC');
    //     $result = $this->db->get('tbl_fees_history',1);
    //     if ($result->num_rows() > 0){
    //         $fees_data = $result->row_array();
    //         $total_paid_fees = $fees_data['total_paid_fees'];
    //         $total_pending_fees = $fees_data['total_pending_fees'];
    //     } else {
    //         $total_paid_fees = 0;
    //         $total_pending_fees = 0;          
    //     }
    //     $response  = array(
    //         'total_paid_fees' => $total_paid_fees,
    //         'total_pending_fees' => $total_pending_fees
    //     );
    //     echo json_encode($response);
    // } 

    public function get_fees_data_ajax() {
        $course_name_id = $this->input->post('course_name_id');
        $student_id = $this->input->post('student_id');
        $course_names = explode('@@@', $course_name_id);
        $course_name = $course_names[0];
        $this->db->select('tbl_fees_history.*,SUM(amount_to_paid) as paid_amount');
        $this->db->where('tbl_fees_history.is_deleted', '0');
        $this->db->where('tbl_fees_history.student_name', $student_id);
        $this->db->where('tbl_fees_history.course_name', $course_name);
        $this->db->order_by('tbl_fees_history.id', 'DESC'); 
        $result = $this->db->get('tbl_fees_history'); 
        
        if ($result->num_rows() > 0) {
            $fees_data = $result->row_array();
            $total_paid_fees = $fees_data['paid_amount'];
            $total_fees = $fees_data['total_fees'];
            // $total_pending_fees = $fees_data['total_pending_fees'];
            $total_pending_fees = (float) $total_fees - (float) $total_paid_fees;

            $total_fees = $this->get_total_fees_for_course($course_name, $student_id);

            if($total_pending_fees == "0"){
                $total_pending_fee = $total_fees;
            }else{
                $total_pending_fee = $total_pending_fees;
            }
            // echo "<pre>";print_r($total_fees);exit;

        } 
        else {
            $total_paid_fees = 0;
            $total_fees = 0;
            $total_pending_fees = (float) $total_fees - (float) $total_paid_fees;

            // echo "<pre>";print_r($total_fees);exit;
            $total_pending_fees = (float) $total_fees - (float) $total_paid_fees;
        }
        $response = array(
            'total_paid_fees' => $total_paid_fees,
            'total_pending_fees' => $total_pending_fee,
        );
        echo json_encode($response);
    }
    

    public function get_total_fees_for_course($course_name, $student_id) {
        // $this->db->select('tbl_payment_entry');
        $this->db->where('course_name', $course_name);
        $this->db->where('student_name', $student_id);
        $result = $this->db->get('tbl_payment_entry'); 
        if ($result->num_rows() > 0) {
            $course_data = $result->row_array();
            return $course_data['total_fees'];
        } else {
            return 0; 
        }
    }
    

    public function get_date_time_filter() {

        if(isset($_GET['daterange']) && $_GET['daterange'] != ""){
            $daterange = json_decode($_GET['daterange']);
            $from = date('Y-m-d', strtotime($daterange->start));
            $to = date('Y-m-d', strtotime($daterange->end));  
        
            $this->db->where('is_deleted', '0');
            if ($from != "" && $to != "") {
                $this->db->where('DAY(tbl_salon_customer.dob) >=', date('d', strtotime($from)));
                $this->db->where('DAY(tbl_salon_customer.dob) <=', date('d', strtotime($to)));
                $this->db->where('MONTH(tbl_salon_customer.dob) >=', date('m', strtotime($from)));
                $this->db->where('MONTH(tbl_salon_customer.dob) <=', date('m', strtotime($to)));
            }
            $this->db->where('branch_id', $this->session->userdata('branch_id'));
            $this->db->where('salon_id', $this->session->userdata('salon_id'));
            $this->db->order_by('id', 'DESC');
            $customers = $this->db->get('tbl_salon_customer')->result();
            $results = array();
            foreach ($customers as $customer) {
                $dob = date('Y') . '-' . date('m-d', strtotime($customer->dob));
                $nextBirthday = date('Y') . '-' . date('m-d', strtotime($customer->dob));
                if (strtotime($nextBirthday) < time()) {
                    $nextBirthday = date('Y-m-d', strtotime($nextBirthday . ' +1 year'));
                }
        
                $daysUntilNextBirthday = floor((strtotime($nextBirthday) - time()) / (60 * 60 * 24));
                $monthsUntilNextBirthday = floor($daysUntilNextBirthday / 30.4375); 
            
                $result = array(
                    'customer' => $customer,
                    'days_until_next_birthday' => $daysUntilNextBirthday,
                    'months_until_next_birthday' => $monthsUntilNextBirthday
                );
                $results[] = $result;
            }
    
            return $results;
        }
    }
    

    
    public function get_product_barcodes_ajax(){
        $product_name = $this->input->post('product_name');        
        $this->db->where('product_status','0');
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        // $this->db->where('DATE(exp_date) >',date('Y-m-d'));
        $this->db->where('product_name',$product_name);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_product_barcode')->result();
        echo json_encode($result);
    }
    public function get_category_product($category){   
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('product_category',$category);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product')->result();
        return $result;
    }
    public function get_category_product_ajax(){
        $category = $this->input->post('category');        
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('product_category',$category);
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('CAST(`order` AS UNSIGNED)', 'asc');                           
        $result = $this->db->get('tbl_product')->result();
        echo json_encode($result);
    }
    public function fetch_total_sales_report_data_ajx(){
        $is_counter = $this->input->post('is_counter');
        $from_date = $this->input->post('from_date') != "" ? date('Y-m-d',strtotime($this->input->post('from_date'))) : '';
        $to_date = $this->input->post('to_date') != "" ? date('Y-m-d',strtotime($this->input->post('to_date'))) : '';

        $total_service_sale = (float)$this->get_total_service_sale('',$from_date,$to_date,'1',$is_counter)['total_price'];
        $total_product_sale = (float)$this->get_total_product_sale('',$from_date,$to_date,'1',$is_counter)['total_price'];
        $total_expense = (float)$this->get_total_expense($from_date,$to_date)['total_expense'];

        $total_service_product_sale = (float)$this->get_total_product_sale('',$from_date,$to_date,'1',$is_counter)['total_service_product_price'];
        $total_only_product_sale = (float)$this->get_total_product_sale('',$from_date,$to_date,'1',$is_counter)['total_only_product_price'];

        $total_package_sales = (float)$this->get_total_package_sale('',$from_date,$to_date,$is_counter)['total_price'];
        $total_membership_sales = (float)$this->get_total_membership_sale('',$from_date,$to_date,'1',$is_counter)['total_price'];
        $total_giftcard_sales = (float)$this->get_total_giftcard_sale('',$from_date,$to_date,$is_counter)['total_price'];

        $total_sale = $total_service_sale + $total_product_sale + $total_package_sales + $total_membership_sales + $total_giftcard_sales;

        echo json_encode(array(
            'total_service_sales'    =>  $total_service_sale,
            'total_product_sales'    =>  $total_product_sale,
            'total_sales'            =>  (float)$total_sale,
            'total_expenses'         =>  $total_expense,
            
            'total_service_product_sale'      =>  $total_service_product_sale,
            'total_only_product_sale'         =>  $total_only_product_sale,

            'total_membership_sales' =>  $total_membership_sales,
            'total_package_sales'    =>  (float)$total_package_sales,
            'total_giftcard_sales'   =>  $total_giftcard_sales,
        ));
    }
    
    public function fetch_finance_report_data_ajx(){
        $from_date = $this->input->post('from_date') != "" ? date('Y-m-d',strtotime($this->input->post('from_date'))) : date('Y-m-d');
        $to_date = $this->input->post('to_date') != "" ? date('Y-m-d',strtotime($this->input->post('to_date'))) : date('Y-m-d');

        $total_cash_sales = (float)$this->get_total_payments('',['Cash'],$from_date,$to_date)['total_price'];
        $total_online_sales = (float)$this->get_total_payments('',['Online'],$from_date,$to_date)['total_price'];
        $total_card_sales = (float)$this->get_total_payments('',['Card'],$from_date,$to_date)['total_price'];
        $total_upi_sales = (float)$this->get_total_payments('',['UPI'],$from_date,$to_date)['total_price'];
        $total_cheque_sales = (float)$this->get_total_payments('',['Cheque'],$from_date,$to_date)['total_price'];
        // Cheque
        $total_due_sales = (float)$this->get_total_due_amount_for_period($from_date,$to_date);
        $total_petty_cash = (float)$this->get_total_petty_cash_for_period('2',$from_date,$to_date)['total_amount'];

        echo json_encode(array(
            'total_cash_sales'    =>  $total_cash_sales,
            'total_online_sales'  =>  $total_online_sales,
            'total_card_sales'    =>  $total_card_sales,            
            'total_due_sales'     =>  $total_due_sales,
            'total_petty_cash'    =>  $total_petty_cash,

            'total_upi_sales'     =>  $total_upi_sales,
            'total_cheque_sales'  =>  $total_cheque_sales
        ));
    }
    public function get_total_due_amount_for_period($from_date, $to_date){
        $type = ['0','2'];
        $total_closing_pending_amount = 0;

        $this->db->where('tbl_booking_payment_entry.is_deleted', '0');
        $this->db->where('tbl_booking_payment_entry.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_booking_payment_entry.salon_id', $this->session->userdata('salon_id'));
        $this->db->group_by('tbl_booking_payment_entry.customer_id');
        $query = $this->db->get('tbl_booking_payment_entry');
        $result = $query->result();
        if(!empty($result)){
            foreach($result as $row){
                $this->db->where_in('tbl_booking_payment_entry.type', $type);
                $this->db->where('tbl_booking_payment_entry.customer_id', $row->customer_id);
                if ($from_date != "") {
                    $this->db->where('DATE(tbl_booking_payment_entry.payment_date) >=', $from_date);
                }
                if ($to_date != "") {
                    $this->db->where('DATE(tbl_booking_payment_entry.payment_date) <=', $to_date);
                }

                $this->db->where('tbl_booking_payment_entry.is_deleted', '0');
                $this->db->where('tbl_booking_payment_entry.closing_pending_amount !=', '');
                $this->db->where('tbl_booking_payment_entry.closing_pending_amount !=', null);
                $this->db->where('tbl_booking_payment_entry.branch_id', $this->session->userdata('branch_id'));
                $this->db->where('tbl_booking_payment_entry.salon_id', $this->session->userdata('salon_id'));
                $this->db->order_by('tbl_booking_payment_entry.payment_date' ,'desc');
                $this->db->limit(1);
                $latest = $this->db->get('tbl_booking_payment_entry')->row();
                if(!empty($latest)){
                    $total_closing_pending_amount = $total_closing_pending_amount + (float)$latest->closing_pending_amount;
                }
            }
        }        
        return $total_closing_pending_amount;
    }
    public function get_total_petty_cash_for_period($type,$from_date, $to_date){
        $this->db->select('tbl_petty_cash_entries.type, tbl_petty_cash_entries.amount');
    
        if ($type != "" && $type != "2") {
            $this->db->where('tbl_petty_cash_entries.type', $type);
        }
        if ($from_date != "") {
            $this->db->where('DATE(tbl_petty_cash_entries.created_on) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_petty_cash_entries.created_on) <=', $to_date);
        }
        
        $this->db->where('tbl_petty_cash_entries.is_deleted', '0');
        $this->db->where('tbl_petty_cash_entries.amount !=', '');
        $this->db->where('tbl_petty_cash_entries.amount !=', '0');
        $this->db->where('tbl_petty_cash_entries.amount !=', '0.00');
        $this->db->where('tbl_petty_cash_entries.amount !=', null);
        $this->db->where('tbl_petty_cash_entries.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_petty_cash_entries.salon_id', $this->session->userdata('salon_id'));
        
        $query = $this->db->get('tbl_petty_cash_entries');
        $result = $query->result();
        
        $total_amount = 0;
        if (!empty($result)) {
            foreach ($result as $entry) {
                if ($entry->type == '0') {
                    $total_amount -= $entry->amount;
                } elseif ($entry->type == '1') {
                    $total_amount += $entry->amount;
                }
            }
        }
    
        return array(
            'result'        => $result,
            'total_amount'  =>  $total_amount
        );
    }
    
    public function fetch_redemption_report_data_ajx(){
        $from_date = $this->input->post('from_date') != "" ? date('Y-m-d',strtotime($this->input->post('from_date'))) : '';
        $to_date = $this->input->post('to_date') != "" ? date('Y-m-d',strtotime($this->input->post('to_date'))) : '';

        $total_package_sales = (float)$this->get_total_package_sale('1',$from_date,$to_date)['total_price'];
        $total_giftcard_redemption = (float)$this->get_total_giftcard_redemption('',$from_date,$to_date)['total_price'];
        $total_reward_redemption = (float)$this->get_total_reward_redemption($from_date,$to_date)['total_price'];
        $package_redemption_result = $this->get_package_redemption_result('1',$from_date,$to_date)['result'];
        $total_package_sales = $this->get_package_redemption_result('1',$from_date,$to_date)['total_service_price'];

        echo json_encode(array(
            'total_package_redemption_sales'    =>  $total_package_sales,
            'total_giftcard_redemption_sales'   =>  $total_giftcard_redemption,
            'total_reward_redemption_sales'     =>  $total_reward_redemption,
            'package_redemption_result'         =>  $package_redemption_result
        ));
    }
    
    
    public function get_total_reward_redemption($from_date,$to_date){
        $this->db->select('tbl_service_payment.*');
        $this->db->select_sum('tbl_service_payment.reward_discount_amount', 'total_reward_discount_amount');
        if ($from_date != "") {
            $this->db->where('DATE(tbl_service_payment.booking_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_service_payment.booking_date) <=', $to_date);
        }
        $this->db->where('tbl_service_payment.is_deleted', '0');
        $this->db->where('tbl_service_payment.reward_discount_amount !=', '');
        $this->db->where('tbl_service_payment.reward_discount_amount !=', '0');
        $this->db->where('tbl_service_payment.reward_discount_amount !=', '0.00');
        $this->db->where('tbl_service_payment.reward_discount_amount !=', null);
		$this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
        $query = $this->db->get('tbl_service_payment');
        $result = $query->result();
        
        $total_reward_discount_amount = 0;
        if (!empty($result)) {
            $total_reward_discount_amount = $query->row()->total_reward_discount_amount;
        }
        
        return array(
            'result'        => $result,
            'total_price' => $total_reward_discount_amount
        );
    }
    public function get_total_giftcard_redemption($giftcard_id,$from_date,$to_date){
        $this->db->select('tbl_service_payment.*, tbl_gift_card.gift_name,  tbl_gift_card.gift_price');
        $this->db->select_sum('tbl_gift_card.gift_price', 'total_gift_price');
        $this->db->join('tbl_gift_card', 'tbl_gift_card.id = tbl_service_payment.applied_giftcard_id');
        if ($giftcard_id != "") {
            $this->db->where('tbl_service_payment.applied_giftcard_id', $giftcard_id);
        }
        if ($from_date != "") {
            $this->db->where('DATE(tbl_service_payment.booking_date) >=', $from_date);
        }
        if ($to_date != "") {
            $this->db->where('DATE(tbl_service_payment.booking_date) <=', $to_date);
        }
        $this->db->where('tbl_service_payment.is_deleted', '0');
        $this->db->where('tbl_service_payment.booking_type','0');
        $this->db->where('tbl_service_payment.is_giftcard_applied', '1');
        $this->db->where('tbl_service_payment.applied_giftcard_id !=', '');
        $this->db->where('tbl_service_payment.applied_giftcard_id !=', '0');
        $this->db->where('tbl_service_payment.applied_giftcard_id !=', null);
		$this->db->where('tbl_service_payment.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_service_payment.salon_id', $this->session->userdata('salon_id'));
        $query = $this->db->get('tbl_service_payment');
        $result = $query->result();
        
        $total_gift_price = 0;
        if (!empty($result)) {
            $total_gift_price = $query->row()->total_gift_price;
        }
        
        return array(
            'result'        => $result,
            'total_price' => $total_gift_price
        );
    }
    public function get_salon_total_working_mins_for_day($date){
        $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
        $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation');
        $this->db->where('tbl_salon_employee.is_deleted','0');
        $this->db->where('tbl_salon_employee.status','1');
		$this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_employee')->result();
        $total_mins = 0;
        $total_break_mins = 0;
        $total_actual_working_mins = 0;
        if(!empty($result)){
            foreach($result as $result_data){
                $shift_details = $this->get_stylist_shift_details($result_data->shift,$result_data->shift_type,$date);
                if(!empty($shift_details)){
                    $start = strtotime($date.' '.$shift_details['shift_from']);
                    $end = strtotime($date.' '.$shift_details['shift_to']);
                    $mins = ($end - $start) / 60;
                    
                    $break_start = strtotime($date.' '.$shift_details['shift_break_from']);
                    $break_end = strtotime($date.' '.$shift_details['shift_break_to']);
                    $break_mins = ($break_end - $break_start) / 60;

                    $actual_working_mins = $mins - $break_mins;

                    $total_mins += $mins;
                    $total_break_mins += $break_mins;
                    $total_actual_working_mins += $actual_working_mins;
                }
            }
        }
        return array(
            'total_mins'                =>  $total_mins,
            'total_break_mins'          =>  $total_break_mins,
            'total_actual_working_mins' =>  $total_actual_working_mins
        );
    }
    public function get_salon_total_booked_mins_for_day($date){
        $this->db->where('service_start_date',date('Y-m-d',strtotime($date)));
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
		$this->db->where('branch_id', $this->session->userdata('branch_id'));
		$this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where_in('booking_status',['1','3','4','5']);
        $result = $this->db->get('tbl_new_booking')->result();
        $total_mins = 0;
        if(!empty($result)){
            foreach($result as $result_data){
                $start = strtotime($result_data->service_start_date . ' ' . $result_data->service_start_time);
                $end = strtotime($result_data->service_end_date . ' ' . $result_data->service_end_time);
                $mins = ($end - $start) / 60;
                $total_mins += $mins;
            }
        }
        return $total_mins;
    }
    public function formatTime($minutes) {
        if ($minutes < 60) {
            return $minutes . ' mins';
        } else {
            $hours = floor($minutes / 60);
            $mins = $minutes % 60;
            return $hours . ' hr' . ($mins > 0 ? ' ' . $mins . ' mins' : '');
        }
    }
    
    public function get_dashboard_popup_data_ajx()
    {        
        $feature_slugs = explode(',', $this->session->userdata('subscription_feature_slugs'));
        $type = $this->input->post('type');
        if($type == '1' || $type == "2"){
            $this->db->from('tbl_salon_customer');
            $this->db->where('tbl_salon_customer.is_deleted', '0');
            $this->db->where('tbl_salon_customer.branch_id', $this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_customer.salon_id', $this->session->userdata('salon_id'));
            if ($type == '1') {
                $this->db->where('MONTH(tbl_salon_customer.dob)', date('m'));
                $this->db->where('DAY(tbl_salon_customer.dob)', date('d'));
            } elseif ($type == '2') {
                $this->db->where('MONTH(tbl_salon_customer.doa)', date('m'));
                $this->db->where('DAY(tbl_salon_customer.doa)', date('d'));
            }
            $this->db->order_by('tbl_salon_customer.id', 'DESC');        
            $result = $this->db->get();
            $result = $result->result();
            ?>
                <div class="x_panel">
                    <table id="example" class="table" style="width:100%;">
                        <thead>
                            <tr>
                                <!-- <th>Sr. No.</th> -->
                                <th>Name</th>
                                <th>Mobile</th>
                                <!-- <th>Email</th> -->
                                <th>Birthday</th>
                                <th>Anniversary</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php
                                $i = 1;
                                if(!empty($result)){
                                    foreach($result as $data){
                            ?>  
                            <tr>
                                <!-- <td><?=$i++;?></td> -->
                                <td><?=$data->full_name;?></td>
                                <td><?=$data->customer_phone;?></td>
                                <!-- <td><?=$data->email;?></td> -->
                                <td><?=$data->dob != "" && $data->dob != '0000-00-00' && $data->dob != '1970-01-01' ? date('d-m-Y',strtotime($data->dob)) : '-';?></td>
                                <td><?=$data->doa != "" && $data->doa != '0000-00-00' && $data->doa != '1970-01-01' ? date('d-m-Y',strtotime($data->doa)) : '-';?></td>
                            </tr>
                            <?php }}else{ ?>
                                <tr>
                                    <td colspan="6" style="text-align:center;">No Data Available</td>
                                </tr>
                            <?php } ?>
                        </tbody>
                    </table>
                </div>
                <script>
                    var type = '<?php echo $type; ?>';
                    if(type == '1'){
                        $('#dashboardModalLabel').text('Today Birthday').css('color','black');
                    }else if(type == '2'){
                        $('#dashboardModalLabel').text('Today Anniversary').css('color','black');
                    }
                    // $('#dashboardModal_dialog').removeClass('modal-sm').addClass('modal-lg');
                    // $('#dashboardModal_dialog').css('width','auto');
                    // $('#dashboardModal_dialog').css('margin-top','150px');

                    // if ($.fn.DataTable.isDataTable('#example')) {
                    //     $('#example').DataTable().destroy();
                    // }
                    // $('#example').DataTable({ 
                    //     dom: 'Blfrtip',
                    //     responsive: true,
                    //     scrollX:300,
                    //     lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],                            
                    //     buttons: [                                    
                    //         {
                    //             extend: 'excel',
                    //             filename: 'product-list',
                    //             exportOptions: {
                    //                 columns: [0,1,2,3,4,5] 
                    //             }
                    //         }
                    //     ], 
                    // });
                </script>
            <?php
        }elseif($type == '3'){
            $result = $this->get_low_stock_products();
        ?>
            <div class="x_panel">
                <table id="example" class="table" style="width:100%;">
                    <thead>
                        <tr>
                            <th>Sr. No.</th>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Available Stock</th>
                            <th>Low Stock Value</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php
                            $i = 1;
                            if(!empty($result)){
                                foreach($result as $data){
                                    $sub_category = $this->get_product_category_row($data->product_category);
                        ?>  
                        <tr>
                            <td><?=$i++;?></td>
                            <td><?=$data->product_name;?></td>
                            <td><?=!empty($sub_category) ? $sub_category->product_category : '-';?></td>
                            <td><?=$data->current_stock;?></td>
                            <td><?=$data->low_stock;?></td>
                        </tr>
                        <?php }}else{ ?>
                            <tr>
                                <td colspan="5" style="text-align:center;">No Data Available</td>
                            </tr>
                        <?php } ?>
                    </tbody>
                </table>
            </div>
            <script>
                $('#dashboardModalLabel').text('Low Stock Products').css('color','black');
                // $('#dashboardModal_dialog').removeClass('modal-sm').addClass('modal-lg');
                // $('#dashboardModal_dialog').css('width','1000px');
                // $('#dashboardModal_dialog').css('margin-top','150px');

                // if ($.fn.DataTable.isDataTable('#example')) {
                //     $('#example').DataTable().destroy();
                // }
                // $('#example').DataTable({ 
                //     dom: 'Blfrtip',
                //     responsive: true,
                //     scrollX:300,
                //     lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],                            
                //     buttons: [                                    
                //         {
                //             extend: 'excel',
                //             filename: 'product-list',
                //             exportOptions: {
                //                 columns: [0,1,2,3,4] 
                //             }
                //         }
                //     ], 
                // });
            </script>
            <?php
        }elseif($type == '4'){            
            $today_service_sale = (float)$this->get_employee_service_sale('',date('Y-m-d'),date('Y-m-d'),'','1')['amount'];
            $today_service_product_sale = (float)$this->get_employee_service_product_sale('',date('Y-m-d'),date('Y-m-d'),'','1')['amount'];
            $today_product_sale = (float)$this->get_employee_product_sale('',date('Y-m-d'),date('Y-m-d'),'1')['amount'];
            $today_membership_sale = (float)$this->get_employee_membership_sale('',date('Y-m-d'),date('Y-m-d'),'1')['amount'];
            $today_package_sale = (float)$this->get_employee_package_sale('',date('Y-m-d'),date('Y-m-d'),'1')['amount'];
            $today_giftcard_sale = (float)$this->get_employee_giftcard_sale('',date('Y-m-d'),date('Y-m-d'),'1')['amount'];

            $total_sale = $today_service_sale + $today_service_product_sale + $today_product_sale + $today_membership_sale + $today_package_sale + $today_giftcard_sale;
            
            $total_cash_sales = (float)$this->get_total_payments('',['Cash'],date('Y-m-d'),date('Y-m-d'))['total_price'];
            $total_online_sales = (float)$this->get_total_payments('',['Online'],date('Y-m-d'),date('Y-m-d'))['total_price'];
            $total_card_sales = (float)$this->get_total_payments('',['Card'],date('Y-m-d'),date('Y-m-d'))['total_price'];
            $total_upi_sales = (float)$this->get_total_payments('',['UPI'],date('Y-m-d'),date('Y-m-d'))['total_price'];
            $total_cheque_sales = (float)$this->get_total_payments('',['Cheque'],date('Y-m-d'),date('Y-m-d'))['total_price'];
            $total_due_sales = (float)$this->get_total_due_amount_for_period(date('Y-m-d'),date('Y-m-d'));
            $total_expense = (float)$this->get_total_expense(date('Y-m-d'),date('Y-m-d'))['total_expense'];

            $final_amount = $total_sale - ($total_upi_sales + $total_card_sales + $total_cheque_sales + $total_expense + $total_due_sales);

            $total_working_mins = $this->get_salon_total_working_mins_for_day(date('Y-m-d'))['total_actual_working_mins'];
            $total_booked_mins = $this->get_salon_total_booked_mins_for_day(date('Y-m-d'));
        ?>
        <div class="x_panel">
            <table id="example" class="table" style="width:100%;">
                <tbody>
                    <tr style="background-color:#0080003b;">
                        <th style="text-align:center;">Today Sale</th>
                        <td>Rs. <?= number_format($total_sale, 2); ?></td>
                    </tr>
                    <tr>
                        <th style="text-align:center;">Expenses</th>
                        <td>Rs. <?= number_format($total_expense, 2); ?></td>
                    </tr>
                    <tr>
                        <th style="text-align:center;">Cash</th>
                        <td>Rs. <?= number_format($total_cash_sales, 2); ?></td>
                    </tr>
                    <tr>
                        <th style="text-align:center;">UPI</th>
                        <td>Rs. <?= number_format($total_upi_sales, 2); ?></td>
                    </tr>
                    <tr>
                        <th style="text-align:center;">Card</th>
                        <td>Rs. <?= number_format($total_card_sales, 2); ?></td>
                    </tr>
                    <tr>
                        <th style="text-align:center;">Cheque</th>
                        <td>Rs. <?= number_format($total_cheque_sales, 2); ?></td>
                    </tr>
                    <!-- <tr>
                        <th style="text-align:center;">Online Payment</th>
                        <td>Rs. <?= number_format($total_online_sales + $total_card_sales, 2); ?></td>
                    </tr> -->
                    <tr>
                        <th style="text-align:center;">Due</th>
                        <td>Rs. <?= number_format($total_due_sales, 2); ?></td>
                    </tr>
                    <tr style="background-color:#0016803b;">
                        <th style="text-align:center;">Available Amount</th>
                        <th>Rs. <?= number_format($final_amount, 2); ?></th>
                    </tr>
                    <!-- <tr>
                        <th style="text-align:center;">Total Working Time</th>
                        <th><?=$this->formatTime($total_working_mins);?></th>
                    </tr>
                    <tr>
                        <th style="text-align:center;">Booked Time</th>
                        <th><?=$this->formatTime($total_booked_mins);?></th>
                    </tr>
                    <tr>
                        <th style="text-align:center;">Free Time</th>
                        <th><?=$this->formatTime($total_working_mins - $total_booked_mins);?></th>
                    </tr> -->
                </tbody>
            </table>
        </div>
        <script>
            $('#dashboardModalLabel').text('Today Account Report').css('color','black');
            // $('#dashboardModal_dialog').removeClass('modal-sm').addClass('modal-lg');
            // $('#dashboardModal_dialog').css('width','500px');
            // $('#dashboardModal_dialog').css('margin-top','150px');

            // if ($.fn.DataTable.isDataTable('#example')) {
            //     $('#example').DataTable().destroy();
            // }
            // $('#example').DataTable({ 
            //     dom: 'Blfrtip',
            //     responsive: true,
            //     scrollX:300,
            //     lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],                            
            //     buttons: [                                    
            //         {
            //             extend: 'excel',
            //             filename: 'product-list',
            //             exportOptions: {
            //                 columns: [0,1,2,3,4] 
            //             }
            //         }
            //     ], 
            // });
        </script>
        <?php
        }elseif($type == '0'){
            $today_service_reminders = $this->get_service_reminders_fixed(date('Y-m-d'));
            $yesterday_cancel_services = $this->get_yesterday_cancel_services();
            $reminders = $this->get_all_reminders(date('Y-m-d'),date('Y-m-d'));
            // echo '<pre>'; print_r($today_service_reminders); exit;
        ?>  
        <div class="EnqBtns">
            <a id="inquiry_add_button" href="<?=base_url();?>add-reminder-form" class="<?php if(empty(array_intersect(['add-reminder-form'], $feature_slugs))) { echo 'blurred '; }?>btn btn-info">Add New</a>
            <a href="<?=base_url();?>add-reminder-form" class="<?php if(empty(array_intersect(['add-reminder-form'], $feature_slugs))) { echo 'blurred '; }?>btn btn-primary">View All</a>    
        </div>
        <div class="navtabs">
            <div class="<?php if(empty(array_intersect(['today_reminders'], $feature_slugs))) { echo 'blurred '; }?>navtab active" id="navtab_1" data-target="reminder" onclick="showTabContent('1')">Today Reminders</div>
            <div class="<?php if(empty(array_intersect(['yesterday_cancel_appointments'], $feature_slugs))) { echo 'blurred '; }?>navtab" id="navtab_3" data-target="cancelled_bookings" onclick="showTabContent('3')">Yesterday Cancelled Appointments</div>
            <div class="<?php if(empty(array_intersect(['service_repeat_reminder_list'], $feature_slugs))) { echo 'blurred '; }?>navtab" id="navtab_7" data-target="service_reminder" onclick="showTabContent('7')">Service Reminders</div>
            <!-- <div class="navtab" id="navtab_6" data-target="all_reminder" onclick="showTabContent('6')">All Reminders</div> -->
            <div class="<?php if(empty(array_intersect(['add-reminder-form'], $feature_slugs))) { echo 'blurred '; }?>navtab" id="navtab_5" data-target="add_reminder" onclick="showTabContent('5')">Add Reminder</div>
        </div>
        <div class="content navtab_content new-content" style="max-height:500px; overflow:auto;max-width:100%; padding: 0px 0px 0px 0px;" id="7_content"> 
            <table id="7_example" class="content_table table" style="width:100%;">
                <thead>
                    <tr>
                        <th style="text-align:center;">Sr. No.</th>
                        <th style="text-align:center;">Name</th>
                        <th style="text-align:center;">Mobile</th>
                        <th style="text-align:center;">Booking Date</th>
                        <th style="text-align:center;">Action</th>
                    </tr>
                </thead>
                <tbody>
                    <?php
                        $i = 1;
                        if(!empty($today_service_reminders)){
                            foreach($today_service_reminders as $data){
                    ?>  
                    <tr>
                        <td><?=$i++;?></td>
                        <td><?=$data->full_name;?></td>
                        <td><?=$data->customer_phone;?></td>
                        <td><?=date('d-m-Y',strtotime($data->booking_date));?></td>
                        <td>
                            <a style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" class="btn btn-primary event-action-button" target="_blank" href="<?=base_url();?>booking-list?id=<?=$data->id;?>&status=&customer=<?=$data->customer_name;?>&from_date=<?=date('d-m-Y',strtotime($data->booking_date));?>&to_date=<?=date('d-m-Y',strtotime($data->booking_date));?>&service=&stylist=" title="Details">
                                <i style="font-size: 15px;color: black;" class="fas fa-info-circle"></i>
                            </a>     
                            <?php if($data->payment_status == '1'){ ?>                       
                                <a style="margin-right:0px;background-color:transparent !important; border:none;outline:none; box-shadow:none;" class="btn btn-primary event-action-button" target="_blank" href="<?=base_url();?>booking-print/<?=base64_encode($data->id);?>/<?=base64_encode($data->booking_payment_id);?>" title="Receipt"><i style="font-size: 15px;color: black;" class="fas fa-receipt"></i></a>
                            <?php } ?>
                        </td>
                    </tr>
                    <?php }}else{ ?>
                        <tr>
                            <td colspan="6" style="text-align:center;">No Data Available</td>
                        </tr>
                    <?php } ?>
                </tbody>
            </table>
        </div>
        <div class="<?php if(empty(array_intersect(['today_reminders'], $feature_slugs))) { echo 'blurred '; }?>content navtab_content new-content" style="max-height:400px; overflow:auto;max-width:100%; padding: 0px 0px 0px 0px;" id="1_content">       
            <table id="1_example" class="content_table table" style="width:100%;">
                <thead>
                    <tr>
                        <th style="text-align:left;width:20%;">Sr. No.</th>
                        <th style="text-align:left;width:80%;">Description</th>
                    </tr>
                </thead>
                <tbody>
                    <?php
                        $i = 1;
                        if(!empty($reminders)){
                            foreach($reminders as $data){
                    ?>  
                    <tr>
                        <td style="text-align:left;width:20%;"><?=$i++;?></td>
                        <td style="text-align:left;width:80%;"><?=$data->description;?></td>
                    </tr>
                    <?php }}else{ ?>
                        <tr>
                            <td colspan="2" style="text-align:center;">No Data Available</td>
                        </tr>
                    <?php } ?>
                </tbody>
            </table>
        </div>
        <div class="content navtab_content new-content" style="max-height:500px; overflow:auto;max-width:100%; padding: 0px 0px 0px 0px;" id="6_content"> 
            <table id="6_example" class="content_table table" style="width:100%;">
                <thead>
                    <tr>
                        <th style="text-align:left;">Sr. No.</th>
                        <th style="text-align:left;">Description</th>
                        <th style="text-align:left;">Date</th>
                    </tr>
                </thead>
                <tbody>
                    <?php
                        $i = 1;
                        if(!empty($all_reminders)){
                            foreach($all_reminders as $data){
                    ?>  
                    <tr>
                        <td style="text-align:left;"><?=$i++;?></td>
                        <td style="text-align:left;"><?=$data->description;?></td>
                        <td style="text-align:left;"><?=date('d-m-Y',strtotime($data->reminder_date));?></td>
                    </tr>
                    <?php }}else{ ?>
                        <tr>
                            <td colspan="3" style="text-align:center;">No Data Available</td>
                        </tr>
                    <?php } ?>
                </tbody>
            </table>
        </div>
        <div class="content navtab_content new-content" style="max-height:500px; overflow:auto;max-width:100%; padding: 0px 0px 0px 0px;" id="3_content"> 
            <table id="3_example" class="content_table table" style="width:100%;">
                <thead>
                    <tr>
                        <th>Sr. No.</th>
                        <th>Name</th>
                        <th>Mobile</th>
                        <th>Service</th>
                        <th>Stylist</th>
                    </tr>
                </thead>
                <tbody>
                    <?php
                        $i = 1;
                        if(!empty($yesterday_cancel_services)){
                            foreach($yesterday_cancel_services as $data){
                    ?>  
                    <tr>
                        <td><?=$i++;?></td>
                        <td><?=$data->full_name;?></td>
                        <td><?=$data->customer_phone;?></td>
                        <td><?=$data->service_name.'|'.$data->service_name_marathi;?></td>
                        <td><?=$data->stylist_name;?></td>
                    </tr>
                    <?php }}else{ ?>
                        <tr>
                            <td colspan="5" style="text-align:center;">No Data Available</td>
                        </tr>
                    <?php } ?>
                </tbody>
            </table>
        </div>
        <div class="content navtab_content new-content" style="max-width:100%; padding: 0px 0px 0px 0px;" id="5_content"> 
            <form id="add_reminder_form" class="add_reminder_form" name="add_reminder_form" method="post" action="<?=base_url();?>add-reminder" enctype="multipart/form-data" data-parsley-validate>                                
                <div class="row">                  
                    <div class="col-xs-12 form-group">
                        <label for="fullname">Description</label>
                        <textarea class="form-control" placeholder="Enter Description" name="description" id="description"></textarea>
                    </div>   
                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 form-group">
                        <label for="fullname">Reminder Date</label>
                        <input type="text" class="form-control custom_date" placeholder="Select Reminder Date" name="reminder_date" id="reminder_date" value="">
                    </div>                                                                                 
                </div>                                                                                 
                <div class="row">
                    <div class="col-md-2  col-sm-3 col-xs-12">
                        <button type="submit" id="submit_reminder_button" class="btn btn-success" style="margin-top:0px;">Submit</button>
                    </div>	
                </div>	
                <div class="clearfix"></div>
            </form>
        </div>
        <script>
            $(".chosen-select").chosen();
            $(".custom_date").datepicker({
                dateFormat: "dd-mm-yy",
                changeMonth: true,
                changeYear: true,
                maxDate: "60",
                minDate: 0,
                yearRange: "-100:+0",
            });
            // $('#dashboardModal_dialog').css('width','auto');
            if ($.fn.DataTable.isDataTable('#2_example')) {
                $('#2_example').DataTable().destroy();
            }
            showTabContent('1');
            function showTabContent(type){
                if(type == '1'){   
                    // $('#dashboardModal_dialog').css('margin-top','175px');
                    $('#dashboardModalLabel').text('Today Reminders').css('color','black');
                }else if(type == '3'){  
                    // $('#dashboardModal_dialog').css('margin-top','100px');
                    $('#dashboardModalLabel').text('Yesterday Cancelled Appointments').css('color','black');                    
                }else if(type == '6'){   
                    // $('#dashboardModal_dialog').css('margin-top','100px');
                    $('#dashboardModalLabel').text('All Reminders').css('color','black');                    
                }else if(type == '5'){  
                    // $('#dashboardModal_dialog').css('margin-top','175px'); 
                    $('#dashboardModalLabel').text('Add Reminders').css('color','black');                    
                }else if(type == '7'){  
                    // $('#dashboardModal_dialog').css('margin-top','175px'); 
                    $('#dashboardModalLabel').text('Service Reminders').css('color','black');                    
                }
                // $('#dashboardModal_dialog').removeClass('modal-sm').addClass('modal-lg');
                $('.navtab').removeClass('active');
                $('#navtab_' + type).addClass('active');
                
                $('.navtab_content').removeClass('active');
                $('#' + type + '_content').addClass('active');
                $('#' + type + '_content').show();
            }      
        $("#add_reminder_form").validate({
            ignore: [],
            rules: {
                description: "required",
                reminder_date: "required",
            },
            messages: {
                description: "Please enter description!",
                reminder_date: "Please select reminder date!",
            },
            submitHandler: function(form) {
                if (confirm("Do you want to submit the form?")) {
                    form.submit();
                }
            }
        });
        </script>
        <?php
        }elseif($type == '7'){
            $inquiries = $this->get_all_inquiries(date('Y-m-d'),date('Y-m-d'));
        ?>  
        <div class="EnqBtns">
            <a id="inquiry_add_button" href="<?=base_url();?>add-enquiry-form" class="<?php if(empty(array_intersect(['add-enquiry-form'], $feature_slugs))) { echo 'blurred '; }?>btn btn-info">Add New</a>
            <a href="<?=base_url();?>all-enquiries" class="<?php if(empty(array_intersect(['all-enquiries'], $feature_slugs))) { echo 'blurred '; }?>btn btn-primary">View All</a>    
        </div>
        <div class="navtabs" style="display:none;">
            <div class="navtab" id="navtab_2" data-target="enquiry" onclick="showTabContent('2')">Today Enquiry</div>
            <!-- <div class="navtab" id="navtab_4" data-target="add_enquiry" onclick="showTabContent('4')">Add Enquiry</div> -->
        </div>
        <div class="content navtab_content new-content" style="max-height:400px; overflow:auto; max-width:100%; padding: 0px 0px 0px 0px;" id="2_content"> 
            <div style="margin-bottom:5px;">
            </div>
            <table id="2_example" class="content_table table" style="width:100%;">
                <thead>
                    <tr>
                        <th>Sr. No.</th>
                        <th>Name</th>
                        <th>Mobile</th>
                        <th>Employee</th>
                        <th>Service</th>
                        <th>Follow-Up On</th>
                        <th>Type</th>
                        <th>Mode</th>
                        <th>Enquiry Date</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    <?php
                        $i = 1;
                        if(!empty($inquiries)){
                            foreach($inquiries as $data){
                    ?>  
                    <tr>
                        <td><?=$i++;?></td>
                        <td><?=$data->customer_name;?></td>
                        <td><?=$data->mobile;?></td>
                        <td><?=$data->full_name;?></td>
                        <td><?=$data->enquiry_services != "" ? $data->enquiry_services : '-';?></td>
                        <td><?=date('d M, Y h:i A',strtotime($data->date.' '.$data->time));?></td>
                        <td><?=$data->type;?></td>
                        <td>
                            <?php
                                if($data->mode == '1'){
                                    echo 'Email';
                                }elseif($data->mode == '2'){
                                    echo 'Phone';
                                }elseif($data->mode == '3'){
                                    echo 'Whatsapp';
                                }else{
                                    echo '-';
                                }
                            ?>
                        </td>
                        <td><?=$data->enquiry_date != "" ? date('d M, Y',strtotime($data->enquiry_date)) : '-';?></td>
                        <td><?=$data->description;?></td>
                    </tr>
                    <?php }}else{ ?>
                        <tr>
                            <td colspan="10" style="text-align:center;">No Data Available</td>
                        </tr>
                    <?php } ?>
                </tbody>
            </table>
        </div>
        <!-- <div class="content navtab_content new-content" style="max-width:100%; padding: 0px 0px 0px 0px;" id="4_content"> 
            <form id="add_enquiry_form" class="add_enquiry_form" name="add_enquiry_form" method="post" action="<?=base_url();?>add-enquiry" enctype="multipart/form-data" data-parsley-validate>                                
                <div class="row"> 
                    <div class="col-xs-3 form-group">
                        <label for="fullname">Select Customer</label>
                        <select class="form-control choosen chosen-select" id="customer" name="customer">
                        <option value="">All Customers</option>
                        <?php 
		                $customer = $this->get_all_salon_customer();
                        if(!empty($customer)){
                            foreach($customer as $customer_result){
                        ?>
                        <option value="<?=$customer_result->id;?>"><?=$customer_result->full_name.' ('.$customer_result->customer_phone.')';?></option>
                        <?php }} ?>
                        </select>
                        <label for="customer" style="display:none;" generated="true" class="error">Please select customer!</label>
                    </div>   
                    <div class="col-xs-3 form-group">
                        <label for="fullname">Enquiry Service Category<b class="require">*</b></label>
                        <input type="text" class="form-control" placeholder="Enter Enquiry Service Category" name="enquiry_services" id="enquiry_services" value="">
                    </div> 
                    <div class="col-xs-2 form-group">
                        <label for="fullname">Enquiry Date<b class="require">*</b></label>
                        <input type="text" readonly class="form-control custom_date" placeholder="To Service Date" name="enquiry_date" id="enquiry_date" value="<?=date('d-m-Y');?>">
                    </div> 
                    <div class="col-xs-2 form-group">
                        <label for="fullname">Follow-Up Date<b class="require">*</b></label>
                        <input type="text" readonly class="form-control custom_date" placeholder="Select Follow-Up Date" name="date" id="date" value="">
                    </div>  
                    <div class="col-xs-2 form-group">
                        <label for="fullname">Follow-Up Time<b class="require">*</b></label>
                        <input type="text" readonly class="form-control custom_time timepicker" placeholder="Select Follow-Up Time" name="time" id="time" value="">
                    </div>    
                </div>     
                <div class="row">
                    <div class="col-xs-3 form-group">
                        <label for="fullname">Assigned To<b class="require">*</b></label>
                        <select class="form-control choosen chosen-select" id="employee" name="employee">
                        <option value="">Select Employee</option>
                        <?php 
                        $employees = $this->Salon_model->get_all_salon_employees();
                        if(!empty($employees)){
                            foreach($employees as $services_result){
                        ?>
                        <option value="<?=$services_result->id;?>"><?=$services_result->full_name;?></option>
                        <?php }} ?>
                        </select>
                        <label for="employee" style="display:none;" generated="true" class="error">Please select customer!</label>
                    </div>                
                    <div class="col-xs-5 form-group">
                        <div class="col-lg-12">
                            <label for="fullname" style="margin-bottom: 15px;">Enquiry Type<b class="require">*</b></label>
                        </div>
                        <div class="WrapRow">
                            <div class="list_radio">
                                <label for="fullname">Hot</label>
                                <input type="radio" style="height: 22px; width: 22px; margin: 0px;" class="form-control" name="type" id="hot" value="Hot">
                            </div>
                            <div class="list_radio">
                                <label for="fullname">Cold</label>
                                <input type="radio" style="height: 22px; width: 22px; margin: 0px;" class="form-control" name="type" id="cold" value="Cold">
                            </div>                        
                            <div class="list_radio">
                                <label for="fullname">Warm</label>
                                <input type="radio" style="height: 22px; width: 22px; margin: 0px;" class="form-control" name="type" id="warm" value="Warm">
                            </div>                        
                            <div class="list_radio">
                                <label for="fullname">Not Interested</label>
                                <input type="radio" style="height: 22px; width: 22px; margin: 0px;" class="form-control" name="type" id="not_interested" value="Not Interested">
                            </div>
                            <label for="type" style="display:none;" generated="true" class="error">Please select enquiry type!</label>
                        </div>
                    </div>    
                    <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 form-group">
                        <div class="col-lg-12">
                            <label for="fullname" style="margin-bottom: 15px;">Mode<b class="require">*</b></label>
                        </div>
                        <div class="WrapRow">   
                            <div class="list_radio">
                                <label for="fullname">Whastapp</label>
                                <input type="radio" checked style="height: 22px; width: 22px; margin: 0px;" class="form-control" name="mode" id="sms" value="3">
                            </div> 
                            <div class="list_radio">
                                <label for="fullname">Phone</label>
                                <input type="radio" style="height: 22px; width: 22px; margin: 0px;" class="form-control" name="mode" id="phone" value="2">
                            </div>  
                            <div class="list_radio">
                                <label for="fullname">Email</label>
                                <input type="radio" style="height: 22px; width: 22px; margin: 0px;" class="form-control" name="mode" id="email" value="1">
                            </div>  
                        </div>  
                        <label for="mode" style="display:none;" generated="true" class="error">Please select enquiry type!</label>                                                                         
                    </div>                                          
                </div>       
                <div class="row">                  
                    <div class="col-xs-8 form-group">
                        <label for="fullname">Description</label>
                        <textarea class="form-control" placeholder="Enter Description" name="description" id="description"></textarea>
                    </div>
                </div>                                        
                <div class="error" id="status_error_new_2"></div>                                       
                <div class="row">
                    <div class="col-md-2  col-sm-3 col-xs-12">
                        <button type="submit" id="submit_enquiry_button" class="btn btn-success" style="margin-top:25px;">Submit</button>
                    </div>	
                </div>	
                <div class="clearfix"></div>
            </form>
        </div> -->
        <script>
            $(".chosen-select").chosen();
            $(".custom_date").datepicker({
                dateFormat: "dd-mm-yy",
                changeMonth: true,
                changeYear: true,
                maxDate: "60",
                minDate: 0,
                yearRange: "-100:+0",
            });
            $('.timepicker').clockpicker({
                donetext: 'Done', 
                twelvehour: false
            });
            // $('#dashboardModal_dialog').css('width','auto');
            if ($.fn.DataTable.isDataTable('#2_example')) {
                $('#2_example').DataTable().destroy();
            }
            showTabContent('2');
            function showTabContent(type){
                if(type == '2'){  
                    // $('#dashboardModal_dialog').css('margin-top','175px');
                    $('#dashboardModalLabel').text('Today Enquiry').css('color','black');                    
                }else if(type == '4'){   
                    // $('#dashboardModal_dialog').css('margin-top','175px');
                    $('#dashboardModalLabel').text('Add Enquiry').css('color','black');                    
                }
                // $('#dashboardModal_dialog').removeClass('modal-sm').addClass('modal-lg');
                $('.navtab').removeClass('active');
                $('#navtab_' + type).addClass('active');
                
                $('.navtab_content').removeClass('active');
                $('#' + type + '_content').addClass('active');
                $('#' + type + '_content').show();
            }       
        $("#add_enquiry_form").validate({
            ignore: [],
            rules: {
                employee: "required",
                customer: "required",
                description: "required",
                type: "required",
                mode: "required",
                time: "required",
                date: "required",
                enquiry_date: "required",
                // service: "required",
                enquiry_services: "required",
            },
            messages: {
                employee: "Please select employee!",
                customer: "Please select customer!",
                description: "Please enter description!",
                type: "Please select enquiry type!",
                mode: "Please select mode!",
                time: "Please select follow-up time!",
                enquiry_date: "Please select enquiry date!",
                date: "Please select follow-up date!",
                // service: "Please select service!",
                enquiry_services: "Please enter services!",
            },
            submitHandler: function(form) {
                if (confirm("Do you want to submit the form?")) {
                    form.submit();
                }
            }
        });
        </script>
        <?php
        }elseif($type == '5'){
        ?>  
        <style type="text/css">
            .punch_details {
                background: #eee;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 15px 15px;
                margin: 0 0 20px;
            }
            .punch-info {
                margin: 0 0 20px;
            }
            .punch-btn-section {
                text-align: center;
                margin: 0 0 20px;
            }
            .statistics {
                height: auto;
            }
            .punch_details h3 {
                color: #727272;
                font-size: 14px;
                margin: 0;
            }
        
            .shift_name_heading {
                margin-top: 8px !important;
                color: #000 !important;
            }
            .punch-info .punch-hours {
                background-color: #f9f9f9;
                border: 5px solid #405189;
                font-size: 18px;
                height: 120px;
                width: 120px;
                margin: 0 auto;
                border-radius: 50%;
                padding: 40px 10px;
                text-align: center;
            }
        
            .punch-info .punch-hours {
                background-color: #f9f9f9;
                border: 5px solid var(--hover);
                font-size: 18px;
                height: 120px;
                width: 120px;
                margin: 0 auto;
                border-radius: 50%;
                padding: 40px 10px;
                text-align: center;
            }
            .spend_hours {
                color: #405189;
            }
            .punch-btn-section .punch-btn {
                font-size: 18px;
                font-weight: 600;
                max-width: 100%;
                padding: 8px 40px;
                border-radius: 50px;
            }
            .stats-box {
                background-color: #f9f9f9;
                border: 1px solid #e3e3e3;
                margin: 0 0 15px;
                padding: 5px;
                color: black;
            }
            
            .loader_div{
                display: none;
                position: fixed;
                width: 100%;
                height: 100% !important;
                background: #00000042;
                z-index: 999999;
                left: 0;
                top: 0;
            }
        
            .loader-new {
                position: fixed;
                top: 50%;
                left: 50%;
                z-index: 9999;
                --d:22px;
                width: 4px;
                height: 4px;
                border-radius: 50%;
                color: #0056d0;
                box-shadow: 
                    calc(1*var(--d))      calc(0*var(--d))     0 0,
                    calc(0.707*var(--d))  calc(0.707*var(--d)) 0 1px,
                    calc(0*var(--d))      calc(1*var(--d))     0 2px,
                    calc(-0.707*var(--d)) calc(0.707*var(--d)) 0 3px,
                    calc(-1*var(--d))     calc(0*var(--d))     0 4px,
                    calc(-0.707*var(--d)) calc(-0.707*var(--d))0 5px,
                    calc(0*var(--d))      calc(-1*var(--d))    0 6px;
                animation: l27 1s infinite steps(8);
                }
                @keyframes l27 {
                100% {transform: rotate(1turn)}
            }
        </style>
        <div class="x_panel">
            <form name="staff_form" id="staff_form" method="post" action="<?=base_url();?>set-attendance">
                <div class="container animated fadeInRight">
                    <div class="">
                        <div class="row top-section">
                            <div class="form-group col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <label>Select Employee <b class="require">*</b></label>
                                <select class="form-control chosen-option" name="staff_id" id="staff_id" onchange="getPunchInOutForm()">
                                    <option value="">Select Employee</option>
                                    <?php 
                                    $employee = $this->Salon_model->get_all_salon_employees();
                                    if(!empty($employee)){ 
                                        foreach($employee as $employee_result){?>
                                        <option value="<?=$employee_result->id?>"><?=$employee_result->full_name?></option>
                                    <?php }}?>
                                </select>
                                <label for="employee" style="display:none;" generated="true" class="error">Please select employee!</label>
                            </div>                     
                            <div class="form-group col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <label for="fullname">Date <b class="require">*</b></label>
                                <input type="text" readonly style="margin: 0px auto;" class="form-control custom_date" placeholder="Select Date" name="date" id="date" value="<?php echo date('d-m-Y'); ?>">
                            </div>
                        </div>
                        <input type="hidden" name="originated_from" id="originated_from" value="dashboard">
                        <div class="row">
                            <div class="col-lg-12" id="response">

                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
        <script>		
            $(document).ready(function() {
                $('#dashboardModalLabel').text('Mark Attendance').css('color','black');
                // $('#dashboardModal_dialog').removeClass('modal-sm').addClass('modal-lg');
                // $('#dashboardModal_dialog').css('width','650px');         
                $(".chosen-option").chosen();
                $( ".custom_date" ).datepicker({
                    changeMonth: true,
                    changeYear: true,
                    dateFormat: "dd-mm-yy",
                    minDate: 0,
                    maxDate: 0
                });
                $("#staff_form").validate({
                    ignore: [],
                    rules: {
                        staff_id: "required",
                        date: "required",
                    },
                    messages: {
                        staff_id: "Please select employee!",
                        date: "Please select date!",
                    },
                    submitHandler: function(form) {
                        if (confirm("Do you want to submit the form?")) {
                            form.submit();
                        }
                    }
                });
            }); 
            function getPunchInOutForm(){
                var emp = $('#staff_id').val();
                var date = $('#date').val();
                $('#response').html('');
                if(emp != "" && date != ""){
                    $('#loader_div').show();
                    $.ajax({
                        type: "POST",
                        url: "<?= base_url(); ?>salon/Ajax_controller/get_employee_attendance_form_ajx",
                        data: { 'staff_id': emp, 'date': date },
                        success: function (data) {        
                            // $('#dashboardModal_dialog').css('margin-top','180px');
                            $('#response').html(data);
                            $('#loader_div').hide();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.log(textStatus, errorThrown);
                        }
                    });
                }
            }
        </script>
        <?php
        }elseif($type == '6'){
            $salon_close_setup = $this->get_salon_close_setup();
        ?>  
        <style>            
			input[class="dashboardToggle"] {
				position: relative;
				appearance: none;
				width: 50px;
				height: 25px;
				background: red;
				border-radius: 50px;
				box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
				cursor: pointer;
				transition: 0.4s;
			}

			input:checked[class="dashboardToggle"] {
				background: #4caf5070;
			}

			input[class="dashboardToggle"]::after {
				position: absolute;
				content: "";
				width: 25px;
				height: 25px;
				top: 0;
				left: 0;
				background: #fff;
				border-radius: 50%;
				box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
				transform: scale(1.1);
				transition: 0.4s;
			}

			input:checked[class="dashboardToggle"]::after {
				left: 50%;
			}
        </style>
        <div class="x_panel">
            <form name="store_close_form" id="store_close_form" method="post" action="<?=base_url();?>set-store-close">
                <div class="container animated fadeInRight">
                    <div class="row top-section"> 
                        
                        <div class="col-lg-12 text-center">
                            <label style="display:block;"><?php if(!empty($salon_close_setup)){ if($salon_close_setup->is_close == '1'){ echo 'Remove'; }else{ echo 'Set'; }}else{ echo 'Set'; } ?> Emergency Closure</label>
                            <input type="hidden" name="is_salon_close" id="is_salon_close" value="<?php if(!empty($salon_close_setup)){ echo $salon_close_setup->is_close; } ?>">
                            <input style="height: 25px !important;" <?php if(!empty($salon_close_setup)){ if($salon_close_setup->is_close == '1'){ echo 'checked'; }} ?> type="checkbox" name="is_salon_close_checkbox" id="is_salon_close_checkbox" class="dashboardToggle">
                        </div>
                    </div>
                  
                    <div class="" id="dates_div" <?php if(!empty($salon_close_setup)){ if($salon_close_setup->is_close == '1'){ echo 'style="display:block;"'; }else{ echo 'style="display:none;"'; }}else{ echo 'style="display:none;"'; } ?>>                        
                    <hr>   
                    <div class="row top-section">                   
                            <div class="form-group col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <label for="fullname"> From Date <b class="require">*</b></label>
                                <input type="text" readonly style="margin: 0px auto;" class="form-control custom_date" placeholder="Select From Date" name="from_date" id="from_date" value="<?php if(!empty($salon_close_setup)){ if($salon_close_setup->is_close == '1' && $salon_close_setup->from_date != "" && $salon_close_setup->from_date != "0000-00-00" && $salon_close_setup->from_date != "1970-01-01" && $salon_close_setup->from_date != "" && $salon_close_setup->from_date != null){ echo date('d-m-Y',strtotime($salon_close_setup->from_date)); }} ?>">
                            </div>                 
                            <div class="form-group col-lg-4 col-md-4 col-sm-6 col-xs-12">
                                <label for="fullname">To Date <b class="require">*</b></label>
                                <input type="text" readonly style="margin: 0px auto;" class="form-control custom_date" placeholder="Select To Date" name="to_date" id="to_date" value="<?php if(!empty($salon_close_setup)){ if($salon_close_setup->is_close == '1' && $salon_close_setup->to_date != "" && $salon_close_setup->to_date != "0000-00-00" && $salon_close_setup->to_date != "1970-01-01" && $salon_close_setup->to_date != "" && $salon_close_setup->to_date != null){ echo date('d-m-Y',strtotime($salon_close_setup->to_date)); }} ?>">
                            </div> 
                        </div>
                        <div class="row top-section">                   
                            <div class="form-group col-md-12 col-sm-12 col-xs-12">
                                <label for="fullname"> Reason <b class="require">*</b></label>
                                <textarea tyle="margin: 0px auto;" class="form-control" placeholder="Enter Reason" name="reason" id="reason"><?php if(!empty($salon_close_setup)){ if($salon_close_setup->is_close == '1'){ echo $salon_close_setup->reason; }} ?></textarea>
                            </div>
                        </div>
                    </div>                                                                               
                    <div class="row">
                        <div class="col-md-12  col-sm-12 col-xs-12 text-center" id="submit_button_div" style="<?php if(!empty($salon_close_setup)){ if($salon_close_setup->is_close == '1'){ echo 'display:block;'; }else{ echo 'display:none;'; }}else{ echo 'display:none;'; } ?>">
                            <button type="submit" id="submit_reminder_button" class="btn btn-success" style="background-color:red;"><?php if(!empty($salon_close_setup)){ if($salon_close_setup->is_close == '1'){ if($salon_close_setup->from_date != "" && $salon_close_setup->from_date != "0000-00-00" && $salon_close_setup->from_date != "1970-01-01" && $salon_close_setup->from_date != "" && $salon_close_setup->from_date != null){ echo 'Update'; }else{ echo 'Submit'; } }else{ echo 'Submit'; }}else{ echo 'Submit'; } ?></button>
                            <label style="font-size:10px;color:red;display:block;">(Note: Bookings for selected period are automatically cancelled.)</label>
                        </div>	
                    </div>	
                </div>
            </form>
        </div>
        <script>		
			document.getElementById('is_salon_close_checkbox').addEventListener('change', function() {
                var checkbox = this;
                var isChecked = checkbox.checked;
                var isclose = isChecked ? '1' : '0';
                var message = isChecked ? 'Are you sure you want to close the salon?' : 'Are you sure you want to remove the salon closure?';
                if (confirm(message)) {
                    $('#loader_div').show();
                    $.ajax({
                        type: "POST",
                        url: "<?= base_url(); ?>salon/Ajax_controller/set_salon_close_ajx",
                        data: { 'isclose': isclose },
                        success: function(data) {   
                            closePopup('dashboardModal');
                            showDashboardDataPopup('<?php echo $type; ?>');  
                            $('#loader_div').hide();
                        },
                        error: function(jqXHR, textStatus, errorThrown) {
                            console.log(textStatus, errorThrown);
                        }
                    });
                } else {
                    checkbox.checked = !isChecked;
                }
            });
            $(document).ready(function() {
                $('#dashboardModalLabel').text('Emergency - Close Salon').css('color','red');
                // $('#dashboardModal_dialog').removeClass('modal-lg').addClass('modal-sm');
                // $('#dashboardModal_dialog').css('width','450px');         
                $(".chosen-option").chosen();
                var maxDate = '60';
                var minDate = '0';
                
                $("#from_date").datepicker({
                    dateFormat: 'dd-mm-yy',
                    maxDate: maxDate,
                    minDate: minDate,
                    onSelect: function (selectedDate) {
                        var minDate = $(this).datepicker('getDate');
                        $("#to_date").datepicker("option", "minDate", minDate);
                        $('.paid_date').change();
                    }
                });

                $("#to_date").datepicker({
                    dateFormat: 'dd-mm-yy',
                    maxDate: maxDate,
                    minDate: minDate,
                    onSelect: function (selectedDate) {
                        var toDate = $(this).datepicker('getDate');
                        $("#from_date").datepicker("option", "maxDate", toDate);
                        $('.paid_date').change();
                    }
                });
                $("#store_close_form").validate({
                    ignore: [],
                    rules: {
                        from_date: {
                            required: function(element) {
                                return $('#is_salon_close_checkbox').is(':checked');
                            },
                        },
                        to_date: {
                            required: function(element) {
                                return $('#is_salon_close_checkbox').is(':checked');
                            },
                        },
                        reason: {
                            required: function(element) {
                                return $('#is_salon_close_checkbox').is(':checked');
                            },
                        },
                    },
                    messages: {
                        from_date: "Please select from date",
                        to_date: "Please select to date",
                        reason: "Please enter reason",
                    },
                    submitHandler: function(form) {
                        if (confirm("Are you sure you want to close the salon as bookings will be automatically cancelled for these dates and this action can not be reverted?")) {
                            form.submit();
                        }
                    }
                });
            }); 
        </script>
        <?php
        }elseif($type == '8'){
            $profile = $this->Salon_model->get_user_profile();
        ?>
            <div class="x_panel">
                <table id="active_report_table" class="table table-striped responsive-utilities jambo_table">
                    <thead>
                        <tr>
                            <th style="text-align:center;">Name</th>
                            <th style="text-align:center;">Price</th>
                            <th style="text-align:center;">Validity</th>
                            <th style="text-align:center;">Purchased On</th>
                            <th style="text-align:center;">Expire On</th>
                            <th style="text-align:center;">Due Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <th style="text-align:center;"><?=!empty($profile) && $profile->subscription_name != "" ? $profile->subscription_name : '-';?></th>
                            <th style="text-align:center;"><?=!empty($profile) && $profile->subscription_name != "" ? 'Rs. ' . $profile->subscription_price : '-';?></th>
                            <th style="text-align:center;"><?=!empty($profile) && $profile->subscription_name != "" ? $profile->subscription_validity . ' Days' : '-';?></th>
                            <th style="text-align:center;"><?=!empty($profile) && $profile->subscription_name != "" ? date('d M, Y h:i A', strtotime($profile->subscription_start)) : '-';?></th>
                            <th style="text-align:center;"><?=!empty($profile) && $profile->subscription_name != "" ? date('d M, Y h:i A', strtotime($profile->subscription_end)) : '-';?></th>
                            <th style="text-align:center;"><?=!empty($profile) && $profile->subscription_name != "" ? ($profile->pending_due_amount != "" ? 'Rs. ' . $profile->pending_due_amount . '' : 'Rs. 0') : '-';?></th>
                        </tr>
                    </tbody>
                </table>
            </div>
            <script>
                $('#dashboardModalLabel').text('Active Subscription').css('color','black');
                // $('#dashboardModal_dialog').removeClass('modal-sm').addClass('modal-lg');
                // $('#dashboardModal_dialog').css('width','auto');
                // $('#dashboardModal_dialog').css('margin-top','150px');
                // if ($.fn.DataTable.isDataTable('#example')) {
                //     $('#example').DataTable().destroy();
                // }
                // $('#example').DataTable({ 
                //     dom: 'Blfrtip',
                //     responsive: true,
                //     scrollX:300,
                //     lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],                            
                //     buttons: [                                    
                //         {
                //             extend: 'excel',
                //             filename: 'Active Subscription',
                //             exportOptions: {
                //                 columns: [0,1,2,3,4,5] 
                //             }
                //         }
                //     ], 
                // });
            </script>
        <?php
        }elseif($type == '9'){
            $profile = $this->Salon_model->get_user_profile();
            $active_addons = $this->Salon_model->get_branch_active_addons($this->session->userdata('branch_id'),$this->session->userdata('salon_id'));
            $active_addon_request = $this->Salon_model->get_branch_active_addon_request($this->session->userdata('branch_id'),$this->session->userdata('salon_id'));
            $setup = $this->Master_model->get_backend_setups();
            $value = !empty($setup) ? (int)$setup->wp_low_qty_value : 25;
            $data['branch'] = $this->Admin_model->get_branch_details($this->session->userdata('branch_id'));
            if(!empty($data['branch']) && $data['branch']->include_wp == '1'){
                $wp_coins_qty = $data['branch']->wp_coins_qty != "" ? (int)$data['branch']->wp_coins_qty : 0;
                $value = ($value * $wp_coins_qty) / 100;
                $data['add_ons'] = $this->Admin_model->get_subscription_whatsapp_addon_plans($data['branch']->subscription_id);
                $data['payment_modes'] = $data['branch']->payment_options != "" ? explode(',', $data['branch']->payment_options) : [];
        ?>
            <div class="x_panel">
                <table id="active_report_table" class="table table-striped responsive-utilities jambo_table">
                    <tbody>
                        <tr>
                            <th style="text-align:center;"><strong>Coin Balance</strong></th>
                            <td style="text-align:left;"><?=!empty($profile) && $profile->current_wp_coins_balance != "" ? $profile->current_wp_coins_balance : '0';?></td>
                        </tr>
                        <?php if(!empty($active_addons)){ ?>
                        <tr>
                            <th style="text-align:center;"><strong>Add On Plan</strong></th>
                            <td style="text-align:left;">
                                <?=$active_addons->plan_name != "" ? $active_addons->plan_name . ' - Rs. ' . $active_addons->plan_price . ' (' . $active_addons->plan_qty . ' Coins)' : '-';?>
                                <br><?='Purchased On: ' . date('d-m-Y h:i A',strtotime($active_addons->created_on));?>
                            </td>
                        </tr>
                        <?php } ?>
                    </tbody>
                </table>
            </div>
            <?php if($data['branch']->current_wp_coins_balance <= $value){ ?>
                <!-- <h2><b>Purchase Add On</b></h2> -->
                <?php 
                // $this->load->view('purchase_wp_add_on', $data); 
                ?>
                <h2><b>Request Add On</b></h2>
                <?php if(!empty($active_addon_request)){ ?>
                    <label> Request Already raised on <?=date('d-m-Y h:i A',strtotime($active_addon_request->created_on)); ?></label>
                    <p><b>Plan</b>: <?=$active_addon_request->plan_name; ?></p>
                    <p><b>Coins</b>: <?=$active_addon_request->plan_qty; ?></p>
                    <p><b>Price</b>: <?=$active_addon_request->plan_price; ?></p>
                <?php }else{ ?>
                <form id="make_form" name="make_form" method="post" enctype="multipart/form-data" data-parsley-validate action="<?=base_url();?>request-add-on">
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group">
                            <label for="fullname">Select Plan*</label>
                            <select class="chosen-select form-control" id="add_on_plan" name="add_on_plan">
                                <option value="">Select Plan</option>
                                <?php if(!empty($data['add_ons'])){ foreach($data['add_ons'] as $row){?>
                                    <option value="<?=$row->id;?>"><?=$row->plan_name;?> [Rs. <?=$row->price;?>] [Qty. <?=$row->qty;?> Coins]</option>
                                <?php }} ?>
                            </select>
                            <input type="hidden" id="id" class="form-control" name="id" value="<?php if (!empty($data['branch'])) {
                                                                                                    echo $data['branch']->id;
                                                                                                } ?>" />
                            <label id="add_on_plan-error" style="display:none;" class="error" for="add_on_plan">Please select plan!</label>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 form-group">
                            <label for="fullname">Remark*</label>
                            <textarea class="form-control" name="addon_remark" id="addon_remark"></textarea>
                        </div>
                        <div class="form-group col-md-6 col-sm-6 col-xs-12" style="margin-top: 27px;">
                            <button type="submit" id="submit_button" class="btn btn-success">Submit</button>
                        </div>
                    </div>
                </form>            
                <script>
                    $(document).ready(function () {
                        $(".chosen-select").chosen();
                        $('#make_form').validate({
                            ignore:[],
                            rules: {
                                add_on_plan: 'required',
                                addon_remark: 'required'
                            },
                            messages: {
                                add_on_plan: {
                                        required: "Please select plan!",
                                    },
                                addon_remark: {
                                        required: "Please enter remark!",
                                    },
                            }
                        });
                    });
                </script>
                <?php } ?>
            <?php } ?>
            <script>
                $('#dashboardModalLabel').text('Whatsapp Coins Status').css('color','black');
                // $('#dashboardModal_dialog').removeClass('modal-sm').addClass('modal-lg');
                // if ($.fn.DataTable.isDataTable('#example')) {
                //     $('#example').DataTable().destroy();
                // }
                // $('#example').DataTable({ 
                //     dom: 'Blfrtip',
                //     responsive: true,
                //     scrollX:300,
                //     lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],                            
                //     buttons: [                                    
                //         {
                //             extend: 'excel',
                //             filename: 'Whatsapp Coin Status',
                //             exportOptions: {
                //                 columns: [0,1,2,3,4,5] 
                //             }
                //         }
                //     ], 
                // });
            </script>
            <?php
            }else{
            ?>
                <label class="error">Whatsapps not allowed</label>
            <?php
            }
        }
    }
    public function get_branch_active_addons($branch_id,$salon_id){
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('payment_type','1');
        $this->db->where('wp_addon_status','1');
        $this->db->where('branch_id',$branch_id);
        $this->db->where('salon_id',$salon_id);
        $this->db->order_by('id','desc');
        $this->db->limit(1);
        $row = $this->db->get('tbl_branch_payment_details')->row();
        return $row;
    }
    public function get_branch_active_addon_request($branch_id,$salon_id){
        $this->db->where('is_deleted','0');
        $this->db->where('status','1');
        $this->db->where('request_type','0');
        $this->db->where('wp_addon_request_status','1');
        $this->db->where('branch_id',$branch_id);
        $this->db->where('salon_id',$salon_id);
        $this->db->order_by('id','desc');
        $this->db->limit(1);
        $row = $this->db->get('tbl_wp_addon_requests')->row();
        return $row;
    }
    public function set_store_close(){
        $from = $this->input->post('from_date');
        $to = $this->input->post('to_date');
        $reason = $this->input->post('reason');

        $setup = $this->get_salon_close_setup();
        if(!empty($setup)){
            $old_from_date = $setup->from_date;
            $old_to_date = $setup->to_date;
            $data = array(
                'is_close'  =>  $this->input->post('is_salon_close'),
                'set_on'    =>  $this->input->post('is_salon_close') == '0' ? '' : date('Y-m-d H:i:s'),
                'from_date' =>  date('Y-m-d',strtotime($from)),
                'to_date'   =>  date('Y-m-d',strtotime($to)),
                'reason'    =>  $reason
            );
            $this->db->where('id',$setup->id);
            $this->db->update('tbl_salon_emergency_close',$data);

            if($this->input->post('is_salon_close') == '1'){
                if($old_from_date != "" && $old_to_date != "" && ($old_from_date != $from || $old_to_date != $to)){
                    $history_data = array(
                        'primary_table_id'  =>  $setup->id,
                        'type'              =>  '2',
                        'branch_id'         =>  $this->session->userdata('branch_id'),
                        'salon_id'          =>  $this->session->userdata('salon_id'),
                        'from_date'         =>  date('Y-m-d',strtotime($from)),
                        'to_date'           =>  date('Y-m-d',strtotime($to)),
                        'description'       =>  $reason,
                        'added_on'          =>  date('Y-m-d H:i:s'),
                        'created_on'        =>  date('Y-m-d H:i:s'),
                    );
                    $this->db->insert('tbl_salon_emergency_close_history',$history_data);
                    $history_id = $this->db->insert_id();
                }else{
                    $history_data = array(
                        'primary_table_id'  =>  $setup->id,
                        'type'              =>  '0',
                        'branch_id'         =>  $this->session->userdata('branch_id'),
                        'salon_id'          =>  $this->session->userdata('salon_id'),
                        'from_date'         =>  date('Y-m-d',strtotime($from)),
                        'to_date'           =>  date('Y-m-d',strtotime($to)),
                        'description'       =>  $reason,
                        'added_on'          =>  date('Y-m-d H:i:s'),
                        'created_on'        =>  date('Y-m-d H:i:s'),
                    );
                    $this->db->insert('tbl_salon_emergency_close_history',$history_data);
                    $history_id = $this->db->insert_id();
                }
                
                $this->db->where_in('tbl_booking_services_details.service_status', ['0', '1']);
                $this->db->where('tbl_booking_services_details.is_deleted', '0');
                $this->db->where('tbl_booking_services_details.payment_status', '0');
                $this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
                $this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
                $this->db->where('DATE(tbl_booking_services_details.service_date) >=', date('Y-m-d', strtotime($from)));
                $this->db->where('DATE(tbl_booking_services_details.service_date) <=', date('Y-m-d', strtotime($to)));
                $tobe_cancelled = $this->db->get('tbl_booking_services_details')->result();
                if(!empty($tobe_cancelled)){
                    foreach($tobe_cancelled as $tobe_cancelled_bookings){
                        $cancellation_data = array(
                            'service_status'                        =>  '2',
                            'cancelled_on'                          =>  date('Y-m-d H:i:s'),
                            'cancel_remark'                         =>  'Appointment cancelled because of emergency store closure',
                            'is_emergency_closure_cancellation'     =>  '1',
                            'emergency_closure_history_id'          =>  $history_id
                        );
                        $this->db->where('id',$tobe_cancelled_bookings->id);
                        $this->db->update('tbl_booking_services_details',$cancellation_data);

                        $this->db->where('id',$tobe_cancelled_bookings->customer_name);
                        $this->db->where('branch_id',$this->session->userdata('branch_id'));
                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                        $this->db->where('is_deleted','0');
                        $customer_details = $this->db->get('tbl_salon_customer')->row();
                        if(!empty($customer_details) && ($customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000')){
                            $services_text = '';
                            $this->db->where('id',$tobe_cancelled_bookings->booking_id);
                            $booking_details = $this->db->get('tbl_new_booking')->row();
                            if(!empty($booking_details)){
                                $services = explode(',',$booking_details->services);
                                if(count($services) > 0){
                                    for($i=0;$i<count($services);$i++){
                                        $this->db->where('id',$services[$i]);
                                        $this->db->where('branch_id',$this->session->userdata('branch_id'));
                                        $this->db->where('salon_id',$this->session->userdata('salon_id'));
                                        $this->db->where('is_deleted','0');
                                        $service_details = $this->db->get('tbl_salon_emp_service')->row();
                                        if (!empty($service_details)) {
                                            // $services_text .= $service_details->service_name . '|' . $service_details->service_name_marathi;
                                            $services_text .= $service_details->service_name;
                                            
                                            if ($i < count($services) - 1) {
                                                $services_text .= ', ';
                                            }
                                        }
                                    }
                                    $services_text = trim($services_text,',');
                                    $services_text = trim($services_text,' ');
                                    $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                                    $finalNumber = substr($cleanedNumber, -10);
                                    $finalNumber = '91' . $finalNumber;

                                    $this->db->where('is_deleted','0');
                                    $this->db->where('id',$this->session->userdata('branch_id'));
                                    $this->db->where('salon_id',$this->session->userdata('salon_id'));
                                    $branch = $this->db->get('tbl_branch')->row();
                                    $visit_text = '';
                                    if(!empty($branch)){
                                        if($branch->branch_name != ""){
                                            $visit_text .= $branch->branch_name;
                                        }
                                    }

                                    $type = '7';
                                    $message = "Hello, " . $customer_details->full_name . "!%0aWe have cancelled your appointment because of emergency.%0a%0a\u{1F5D3}" . date('d M, Y',strtotime($booking_details->service_start_date)) . " for%0a\u{1F488}" . $services_text . "%0a%0aSorry for the inconveniance.%0aThank you!%0a" . $visit_text . "";
                                    $app_message = "Hello, " . $customer_details->full_name . "!\nWe have cancelled your appointment because of emergency.\n\n📅 " . date('d M, Y', strtotime($booking_details->service_start_date)) . " for\n💇‍♀️ " . $services_text . "\n\nSorry for the inconvenience.\nThank you!\n" . $visit_text . "";
                                    $number = $finalNumber;
                                    $customer = $customer_details->id;
                                    $salon_id = $customer_details->salon_id;
                                    $branch_id = $customer_details->branch_id;
                                    $for_order_id = $tobe_cancelled_bookings->booking_id;
                                    $for_offer_id = '';
                                    $for_query_id = '';
                                    $consent_form_id = '';
                                    $title = 'Appointment Cancelled';
                                    $generated_from = '0';
                                    $notification_data = [
                                        "landing_page"  => 'order_details',
                                        "redirect_id"   => (string)$for_order_id
                                    ];
                    
                                    $message_send_on = '';
                                    $template_id = '';                                    
                                    $email_subject = '';
                                    $email_html = '';
                                    $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                                    if(!empty($booking_rules)){
                                        if($booking_rules->booking_reminder_type == '1'){
                                            $message_send_on = '0'; //SMS
                                            $template_id = '';
                                        }elseif($booking_rules->booking_reminder_type == '2'){
                                            $message_send_on = '2'; //EMAIL
                                            $email_html = '';
                                        }elseif($booking_rules->booking_reminder_type == '3'){
                                            $message_send_on = '1'; //WP
                                        }
                                    }
                                    $membership_history_id = '';
                                    $package_allocation_id = '';
                                    $giftcard_purchase_id = '';
                                    $trying_booking_id = '';
                                    $wp_template_data = [];
                                    $cron_id = '';

                                    $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                                }
                            }
                        }
                    }
                }
            }
            return true;
        }else{
            return false;
        }
    }
    public function set_salon_close_ajx(){
        $setup = $this->get_salon_close_setup();
        if(!empty($setup)){
            if($this->input->post('isclose') == '0'){
                $close_from = null;
            }else{
                if($setup->from_date != "" && $setup->from_date != "0000-00-00" && $setup->from_date != "1970-01-01" && $setup->from_date != "" && $setup->from_date != null ){
                    $close_from = $setup->from_date;
                }else{
                    $close_from = null;
                }
            }
            if($this->input->post('isclose') == '0'){
                $close_from = null;
            }else{
                if($setup->to_date != "" && $setup->to_date != "0000-00-00" && $setup->to_date != "1970-01-01" && $setup->to_date != "" && $setup->to_date != null ){
                    $close_to = $setup->to_date;
                }else{
                    $close_to = null;
                }
            }
            if($this->input->post('isclose') == '0'){
                $reason = null;
            }else{
                $reason = $setup->reason;
            }

            $data = array(
                'is_close'  =>  $this->input->post('isclose'),
                'set_on'    =>  $this->input->post('isclose') == '0' ? '' : date('Y-m-d H:i:s'),
                'from_date' =>  $close_from,
                'to_date'   =>  $close_to,
                'reason'    =>  $reason
            );
            $this->db->where('id',$setup->id);
            $this->db->update('tbl_salon_emergency_close',$data);

            if($this->input->post('isclose') == '0'){
                $history_data = array(
                    'primary_table_id'  =>  $setup->id,
                    'type'              =>  '1',
                    'branch_id'         =>  $this->session->userdata('branch_id'),
                    'salon_id'          =>  $this->session->userdata('salon_id'),
                    'description'       =>  'Salon opened',
                    'added_on'          =>  date('Y-m-d H:i:s'),
                    'created_on'        =>  date('Y-m-d H:i:s'),
                );
                $this->db->insert('tbl_salon_emergency_close_history',$history_data);
            }
        }else{
            $data = array(
                'is_close'  =>  $this->input->post('isclose'),
                'set_on'    =>  $this->input->post('isclose') == '0' ? '' : date('Y-m-d H:i:s'),
                'created_on'=>  date('Y-m-d H:i:s'),
                'branch_id' =>  $this->session->userdata('branch_id'),
                'salon_id'  =>  $this->session->userdata('salon_id')
            );
            $this->db->insert('tbl_salon_emergency_close',$data);
        }
        echo '1';
    }
    public function get_salon_close_setup(){
        $this->db->where('tbl_salon_emergency_close.is_deleted','0');
		$this->db->where('tbl_salon_emergency_close.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emergency_close.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_emergency_close')->row();
        return $result;
    }
    public function check_is_salon_close_for_period_setup_datewise_entry($date,$branch_id,$salon_id){
        $this->db->where('DATE(tbl_salon_emergency_close.from_date) <=', date('Y-m-d', strtotime($date)));
        $this->db->where('DATE(tbl_salon_emergency_close.to_date) >=', date('Y-m-d', strtotime($date)));
        $this->db->where('tbl_salon_emergency_close.is_close','1');
        // $this->db->where('tbl_salon_emergency_close.from_date !=','');
        $this->db->where('tbl_salon_emergency_close.from_date !=',null);
        $this->db->where('tbl_salon_emergency_close.from_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.from_date !=','0000-00-00');
        // $this->db->where('tbl_salon_emergency_close.to_date !=','');
        $this->db->where('tbl_salon_emergency_close.to_date !=',null);
        $this->db->where('tbl_salon_emergency_close.to_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.to_date !=','0000-00-00');
        $this->db->where('tbl_salon_emergency_close.is_deleted','0');
		$this->db->where('tbl_salon_emergency_close.branch_id', $branch_id);
		$this->db->where('tbl_salon_emergency_close.salon_id', $salon_id);
        $result = $this->db->get('tbl_salon_emergency_close')->row();
        return $result;
    }
    public function check_is_salon_close_for_period_setup_datewise_all($date,$branch_id,$salon_id){
        $this->db->where('DATE(tbl_salon_emergency_close.from_date) <=', date('Y-m-d', strtotime($date)));
        $this->db->where('DATE(tbl_salon_emergency_close.to_date) >=', date('Y-m-d', strtotime($date)));
        $this->db->where('tbl_salon_emergency_close.is_close','1');
        // $this->db->where('tbl_salon_emergency_close.from_date !=','');
        $this->db->where('tbl_salon_emergency_close.from_date !=',null);
        $this->db->where('tbl_salon_emergency_close.from_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.from_date !=','0000-00-00');
        // $this->db->where('tbl_salon_emergency_close.to_date !=','');
        $this->db->where('tbl_salon_emergency_close.to_date !=',null);
        $this->db->where('tbl_salon_emergency_close.to_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.to_date !=','0000-00-00');
        $this->db->where('tbl_salon_emergency_close.is_deleted','0');
		$this->db->where('tbl_salon_emergency_close.branch_id', $branch_id);
		$this->db->where('tbl_salon_emergency_close.salon_id', $salon_id);
        $result = $this->db->get('tbl_salon_emergency_close')->row();
        if(!empty($result)){
            return true;
        }else{
            return false;
        }
    }
    public function check_is_salon_close_for_period_setup_datewise($date){
        $this->db->where('DATE(tbl_salon_emergency_close.from_date) <=', date('Y-m-d', strtotime($date)));
        $this->db->where('DATE(tbl_salon_emergency_close.to_date) >=', date('Y-m-d', strtotime($date)));
        $this->db->where('tbl_salon_emergency_close.is_close','1');
        // $this->db->where('tbl_salon_emergency_close.from_date !=','');
        $this->db->where('tbl_salon_emergency_close.from_date !=',null);
        $this->db->where('tbl_salon_emergency_close.from_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.from_date !=','0000-00-00');
        // $this->db->where('tbl_salon_emergency_close.to_date !=','');
        $this->db->where('tbl_salon_emergency_close.to_date !=',null);
        $this->db->where('tbl_salon_emergency_close.to_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.to_date !=','0000-00-00');
        $this->db->where('tbl_salon_emergency_close.is_deleted','0');
		$this->db->where('tbl_salon_emergency_close.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emergency_close.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_emergency_close')->row();
        if(!empty($result)){
            return true;
        }else{
            return false;
        }
    }
    public function check_is_salon_close_for_period_setup_datewise_ajx(){
        $date = $this->input->post('booking_date');
        $this->db->where('DATE(tbl_salon_emergency_close.from_date) <=', date('Y-m-d', strtotime($date)));
        $this->db->where('DATE(tbl_salon_emergency_close.to_date) >=', date('Y-m-d', strtotime($date)));
        $this->db->where('tbl_salon_emergency_close.is_close','1');
        // $this->db->where('tbl_salon_emergency_close.from_date !=','');
        $this->db->where('tbl_salon_emergency_close.from_date !=',null);
        $this->db->where('tbl_salon_emergency_close.from_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.from_date !=','0000-00-00');
        // $this->db->where('tbl_salon_emergency_close.to_date !=','');
        $this->db->where('tbl_salon_emergency_close.to_date !=',null);
        $this->db->where('tbl_salon_emergency_close.to_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.to_date !=','0000-00-00');
        $this->db->where('tbl_salon_emergency_close.is_deleted','0');
		$this->db->where('tbl_salon_emergency_close.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emergency_close.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_emergency_close')->row();
        if(!empty($result)){
            echo '1';
        }else{
            echo '0';
        }
    }
    public function update_customer_note_ajx(){
        $customer = $this->input->post('customer');
        $customer_note = $this->input->post('customer_note');

        $this->db->where('id',$customer);
        $single = $this->db->get('tbl_salon_customer')->row();
        if(!empty($single)){
            $data = array(
                'custom_note'   =>  $customer_note
            );
            $this->db->where('id',$customer);
            $this->db->update('tbl_salon_customer',$data);
            echo '1';
        }else{
            echo '0';
        }
    }
    public function get_salon_close_for_period_setup(){
        $this->db->where('tbl_salon_emergency_close.is_close','1');
        // $this->db->where('tbl_salon_emergency_close.from_date !=','');
        $this->db->where('tbl_salon_emergency_close.from_date !=',null);
        $this->db->where('tbl_salon_emergency_close.from_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.from_date !=','0000-00-00');
        // $this->db->where('tbl_salon_emergency_close.to_date !=','');
        $this->db->where('tbl_salon_emergency_close.to_date !=',null);
        $this->db->where('tbl_salon_emergency_close.to_date !=','1970-00-00');
        $this->db->where('tbl_salon_emergency_close.to_date !=','0000-00-00');
        $this->db->where('tbl_salon_emergency_close.is_deleted','0');
		$this->db->where('tbl_salon_emergency_close.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_salon_emergency_close.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_emergency_close')->row();
        return $result;
    }
    public function add_enquiry(){
        // echo '<pre>'; print_r($_POST); exit();
        $customer_data = array(   
			'branch_id' 				=> $this->session->userdata('branch_id'),
			'salon_id'	 				=> $this->session->userdata('salon_id'),
			'full_name' 				=> $this->input->post('full_name'),
			'customer_phone' 			=> $this->input->post('customer_phone'),
			'email' 					=> $this->input->post('email'),
			'address' 					=> $this->input->post('address'),
			'dob' 						=> $this->input->post('dob'),
			'state' 					=> $this->input->post('state') != "" ? $this->input->post('state') : $this->input->post('selected_state'),
			'city' 						=> $this->input->post('city') != "" ? $this->input->post('city') : $this->input->post('selected_city'),
			'doa' 						=> $this->input->post('doa'),
			'married_status' 			=> $this->input->post('married_status') != "" ? $this->input->post('married_status') : $this->input->post('selected_married_status'), 
		); 

        $this->db->where('is_deleted','0');
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('customer_phone',$this->input->post('customer_phone'));
        $exist = $this->db->get('tbl_salon_customer');
        $exist = $exist->row();

        if($this->input->post('id') == ""){
            if(!empty($exist)){
                $customer_id = $exist->id;
                $this->db->where('id', $customer_id);
                $this->db->update('tbl_salon_customer', $customer_data);
            }else{
                $date = array(
                    'created_on'                => date("Y-m-d H:i:s"),
                    'gender' 					=> $this->input->post('gender')
                ); 
                $new_arr = array_merge($customer_data, $date);
                $this->db->insert('tbl_salon_customer', $new_arr);
                $customer_id = $this->db->insert_id();
            }
        }else{
            $customer_id = $this->input->post('id');
            $this->db->where('id', $customer_id);
            $this->db->update('tbl_salon_customer', $customer_data);
        }  
        $enquiry_data = array(
            'customer_name'     =>  $this->input->post('full_name'),
            'description'       =>  $this->input->post('description'),
            'enquiry_for'       =>  $this->input->post('employee'),
            'service'           =>  $this->input->post('service'),
            'enquiry_services'  =>  $this->input->post('enquiry_services'),
            'type'              =>  $this->input->post('type'),
            'mode'              =>  $this->input->post('mode'),
            'enquiry_date'      =>  date('Y-m-d',strtotime($this->input->post('enquiry_date'))),
            'date'              =>  date('Y-m-d',strtotime($this->input->post('date'))),
            'time'              =>  date('H:i:s',strtotime($this->input->post('time'))),
            'enquiry_from'      =>  '0',
            'salon_id'          =>  $this->session->userdata('salon_id'),
            'branch_id'         =>  $this->session->userdata('branch_id'),
            'mobile'            =>  $this->input->post('customer_phone'),
            'email'             =>  $this->input->post('email'),
            'address'           =>  $this->input->post('address'),
            'customer_id'       =>  $customer_id,
            'created_on'        =>  date("Y-m-d H:i:s")
        );
        $this->db->insert('tbl_enquiry',$enquiry_data);
        return true;
    }
    public function add_reminder(){
        $data = array(
            'reminder_date'     =>  date('Y-m-d',strtotime($this->input->post('reminder_date'))),
            'description'       =>  $this->input->post('description'),
            'salon_id'          =>  $this->session->userdata('salon_id'),
            'branch_id'         =>  $this->session->userdata('branch_id'),
            'created_on'        => date("Y-m-d H:i:s")
        );
        $this->db->insert('tbl_reminders',$data);
        return true;
    }
    public function get_yesterday_cancel_services(){
        $this->db->select('tbl_booking_services_details.*,tbl_salon_employee.full_name as stylist_name, tbl_salon_emp_service.service_name,tbl_salon_emp_service.service_name_marathi,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,tbl_salon_customer.email');
        $this->db->join('tbl_salon_customer','tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_salon_emp_service','tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_employee','tbl_salon_employee.id = tbl_booking_services_details.stylist_id');
        $this->db->where('tbl_booking_services_details.is_deleted','0');
        $this->db->where('tbl_booking_services_details.service_status','2');
		$this->db->where('tbl_booking_services_details.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_booking_services_details.salon_id', $this->session->userdata('salon_id'));
        $this->db->group_by('tbl_booking_services_details.customer_name');
        $this->db->order_by('tbl_booking_services_details.id','desc');
        // $this->db->where('DATE(tbl_booking_services_details.cancelled_on)',date('Y-m-d', strtotime('-1 day')));
        $this->db->where('DATE(tbl_booking_services_details.service_date)',date('Y-m-d', strtotime('-1 day')));
        $result = $this->db->get('tbl_booking_services_details')->result();
        return $result;
    }
    public function get_service_reminders($date){
        // Get branch_id and salon_id from session
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id');
    
        // Step 1: Fetch all relevant entries
        $this->db->select('tbl_booking_services_details.*, tbl_salon_emp_service.reminder_duration, tbl_salon_employee.full_name as stylist_name, tbl_salon_emp_service.service_name, tbl_salon_emp_service.service_name_marathi, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone, tbl_salon_customer.email');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_services_details.customer_name');
        $this->db->join('tbl_salon_emp_service', 'tbl_salon_emp_service.id = tbl_booking_services_details.service_id');
        $this->db->join('tbl_salon_employee', 'tbl_salon_employee.id = tbl_booking_services_details.stylist_id_after_bill');
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.service_status', '1');
        $this->db->where('tbl_booking_services_details.branch_id', $branch_id);
        $this->db->where('tbl_booking_services_details.salon_id', $salon_id);
        $this->db->order_by('tbl_booking_services_details.id', 'desc');
        $all_entries = $this->db->get('tbl_booking_services_details')->result_array();
    
        // Step 2: Group the entries by customer_name and service_id
        $grouped_entries = [];
        foreach ($all_entries as $entry) {
            $key = $entry['customer_name'] . '_' . $entry['service_id'];
            if (!isset($grouped_entries[$key])) {
                $grouped_entries[$key] = [];
            }
            $grouped_entries[$key][] = $entry;
        }
    
        // Step 3: Determine the most recent entry for each group
        $latest_entries = [];
        foreach ($grouped_entries as $entries) {
            $latest_entry = $entries[0]; // Entries are already ordered by id desc
            $latest_entries[] = $latest_entry;
        }
    
        // Step 4: Calculate the reminder date for each entry
        $dateObj = new DateTime($date);
        $reminders = [];
        foreach ($latest_entries as $entry) {
            $service_date = new DateTime($entry['service_date']);
            $service_date->modify("-1 days");
            $reminder_duration = $entry['reminder_duration'];
            if($reminder_duration != "" && $reminder_duration != null && $reminder_duration != "0"){
                $service_date->modify("+$reminder_duration days");
                if ($service_date == $dateObj) {
                    $reminders[] = $entry;
                }
            }
        }
    
        // Return the filtered entries
        return $reminders;
    }
    public function get_backend_setups(){
        $this->db->where('is_deleted', '0');
        $this->db->where('status', '1');
        $all_entries = $this->db->get('tbl_back_end_setups')->row();
        return $all_entries;
    }
    public function get_service_reminders_fixed($date){      
        $backend_setups = $this->get_backend_setups();
        $reminder_duration = !empty($backend_setups) && !empty($backend_setups->service_repeat) ? (int)$backend_setups->service_repeat : 30;
        $target_date = (new DateTime())->modify("-$reminder_duration days")->format('Y-m-d');

        $this->db->select('b1.*, tbl_branch.subscription_id, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone, tbl_salon_customer.email');
        $this->db->from('tbl_new_booking b1');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = b1.customer_name');
        $this->db->join('tbl_branch', 'tbl_branch.id = b1.branch_id');
        $this->db->where('b1.is_deleted', '0');
        $this->db->where_in('b1.booking_status', ['1','3','4','5']);
        $this->db->where('b1.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('b1.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('DATE(b1.service_start_date)', $target_date);

        // Manually write the NOT IN subquery as a string:
        $subquery = "SELECT customer_name FROM tbl_new_booking WHERE is_deleted = '0' AND DATE(service_start_date) > '{$target_date}'";

        // Use where NOT IN with manual subquery (note the third parameter false to avoid escaping)
        $this->db->where("b1.customer_name NOT IN ($subquery)", null, false);

        $this->db->order_by('b1.service_start_date', 'desc');
        $this->db->group_by('b1.customer_name');

        $lost_customers = $this->db->get()->result();

        return $lost_customers;

    
        // $this->db->select('tbl_new_booking.*, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone, tbl_salon_customer.email');
        // $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_new_booking.customer_name');
        // $this->db->where('tbl_new_booking.is_deleted', '0');
        // // $this->db->where('tbl_new_booking.payment_status', '1');
        // $this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
        // $this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
        // $this->db->order_by('tbl_new_booking.id', 'desc');
        // $all_entries = $this->db->get('tbl_new_booking')->result();

        // $dateObj = new DateTime($date);
        // $reminders = [];
        // if(!empty($all_entries)){
        //     foreach ($all_entries as $entry) {
        //         $booking_date = new DateTime($entry->service_start_date);
        //         $reminder_duration = !empty($backend_setups) ? $backend_setups->service_repeat : '30';
        //         if($reminder_duration != "" && $reminder_duration != null && $reminder_duration != "0"){
        //             $booking_date->modify("+$reminder_duration days");
        //             if ($booking_date == $dateObj) {
        //                 $reminders[] = $entry;
        //             }
        //         }
        //     }
        // }
    
        // return $reminders;
    }
    // public function get_service_reminders_fixed_all($date){
    //     $backend_setups = $this->get_backend_setups();
    
    //     $this->db->select('tbl_new_booking.*, tbl_branch.subscription_id, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone, tbl_salon_customer.email');
    //     $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_new_booking.customer_name');
    //     $this->db->join('tbl_branch', 'tbl_branch.id = tbl_new_booking.branch_id');
    //     $this->db->where('tbl_new_booking.is_deleted', '0');
    //     $this->db->where('tbl_new_booking.payment_status', '1');
    //     $this->db->order_by('tbl_new_booking.id', 'desc');
    //     // $this->db->limit(1);
    //     $all_entries = $this->db->get('tbl_new_booking')->result();

    //     $dateObj = new DateTime($date);
    //     $reminders = [];
    //     if(!empty($all_entries)){
    //         foreach ($all_entries as $entry) {
    //             $feature_slugs = $this->get_subscription_slugs($entry->subscription_id);
    //             if(!empty(array_intersect(['service_repeat_marketing'], $feature_slugs))){
    //                 $booking_date = new DateTime($entry->service_start_date);
    //                 $reminder_duration = !empty($backend_setups) ? $backend_setups->service_repeat : '30';
    //                 if($reminder_duration != "" && $reminder_duration != null && $reminder_duration != "0"){
    //                     $booking_date->modify("+$reminder_duration days");
    //                     if ($booking_date == $dateObj) {
    //                         $reminders[] = $entry->id;
    //                     }
    //                 }
    //             }
    //         }
    //     }
        
    //     if(!empty($reminders)){
    //         $this->db->select('tbl_new_booking.*, tbl_branch.subscription_id, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone, tbl_salon_customer.email');
    //         $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_new_booking.customer_name');
    //         $this->db->join('tbl_branch', 'tbl_branch.id = tbl_new_booking.branch_id');
    //         $this->db->where('tbl_new_booking.is_deleted', '0');
    //         $this->db->where('tbl_new_booking.payment_status', '1');
    //         $this->db->order_by('tbl_new_booking.id', 'desc');
    //         $this->db->where_in('tbl_new_booking.id',$reminders);
    //         $reminders = $this->db->get('tbl_new_booking')->result();
    //     }

    //     return $reminders;
    // }

    public function get_service_reminders_fixed_all($date){
        $this->db->where('include_wp', '1');
        $this->db->where('CAST(current_wp_coins_balance AS UNSIGNED) >', 0);
        $this->db->where('is_deleted', '0');
        $branches = $this->db->get('tbl_branch')->result();

        $valid_branch_ids = [];
        foreach ($branches as $branch) {
            $slugs = $this->Salon_model->get_subscription_slugs($branch->subscription_id);
            if (in_array('lost_customer_marketing', $slugs)) {
                $valid_branch_ids[] = $branch->id;
            }
        }

        if (empty($valid_branch_ids)) return [];

        $backend_setups = $this->get_backend_setups();
        $reminder_duration = !empty($backend_setups) && !empty($backend_setups->service_repeat) ? (int)$backend_setups->service_repeat : 30;
        $target_date = (new DateTime())->modify("-$reminder_duration days")->format('Y-m-d');

        $this->db->select('b1.*, tbl_branch.subscription_id, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone, tbl_salon_customer.email');
        $this->db->from('tbl_new_booking b1');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = b1.customer_name');
        $this->db->join('tbl_branch', 'tbl_branch.id = b1.branch_id');
        $this->db->where('b1.is_deleted', '0');
        $this->db->where_in('b1.booking_status', ['1','3','4','5']);
        $this->db->where_in('b1.branch_id', $valid_branch_ids);
        $this->db->where('DATE(b1.service_start_date)', $target_date);

        // Manually write the NOT IN subquery as a string:
        $subquery = "SELECT customer_name FROM tbl_new_booking WHERE is_deleted = '0' AND DATE(service_start_date) > '{$target_date}'";

        // Use where NOT IN with manual subquery (note the third parameter false to avoid escaping)
        $this->db->where("b1.customer_name NOT IN ($subquery)", null, false);

        $this->db->order_by('b1.service_start_date', 'desc');
        $this->db->group_by('b1.customer_name');

        $lost_customers = $this->db->get()->result();

        return $lost_customers;
    }

    
    public function set_lost_customers_ajx(){
        $this->db->where('is_deleted', '0');
        $this->db->where('is_lost_customer', '0');
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_customer');
        $result = $result->result();
        if(!empty($result)){
            foreach($result as $row){
                $criteria = $this->get_customer_criteria($row->id);
                if($criteria == '2'){
                    $data = array(
                        'is_lost_customer'  =>  '1'
                    );
                    $this->db->where('id',$row->id);
                    $this->db->update('tbl_salon_customer',$data);

                    if($row->lost_customer_msg_sent != '0'){
                        $data = array(
                            'lost_customer_msg_sent'  =>  '0'
                        );
                        $this->db->where('id',$row->id);
                        $this->db->update('tbl_salon_customer',$data);
                    }
                }
            }
            echo '1';
        }else{
            echo '0';
        }
    }

    
    public function get_lost_customers_all($date) {
        $this->db->where('include_wp', '1');
        $this->db->where('CAST(current_wp_coins_balance AS UNSIGNED) >', 0);
        $this->db->where('is_deleted', '0');
        $branches = $this->db->get('tbl_branch')->result();
        $valid_branch_ids = [];

        foreach ($branches as $branch) {
            $slugs = $this->Salon_model->get_subscription_slugs($branch->subscription_id);
            if (in_array('lost_customer_marketing', $slugs)) {
                $valid_branch_ids[] = $branch->id;
            }
        }

        if (empty($valid_branch_ids)) return [];

        $backend_setups = $this->get_backend_setups();
        $lost_days = !empty($backend_setups) ? $backend_setups->lost_customer_criteria : 120;
        $cutoff_date = date('Y-m-d', strtotime("-$lost_days days"));
        $stop_date = date('Y-m-d', strtotime("-" . ($lost_days + 30) . " days"));

        $this->db->select('c.*, b.subscription_id, b.branch_name');
        $this->db->from('tbl_salon_customer c');
        $this->db->join('tbl_branch b', 'b.id = c.branch_id');
        $this->db->join('tbl_new_booking nb', 'nb.customer_name = c.id');
        $this->db->where('c.is_deleted', '0');
        $this->db->where('nb.is_deleted', '0');
        $this->db->where_in('c.branch_id', $valid_branch_ids);
        // $this->db->group_by('c.id');
        $this->db->group_by(['c.customer_phone', 'c.branch_id', 'c.ssalon_id']);
        $this->db->having('MAX(nb.service_start_date) <=', $cutoff_date);
        $this->db->having('MAX(nb.service_start_date) >', $stop_date);
        
        $lost_customers = $this->db->get()->result();

        return $lost_customers;
    }

    public function get_all_reminders($from,$to){
        $this->db->where('tbl_reminders.is_deleted','0');
        if($from != ""){
            $this->db->where('DATE(tbl_reminders.reminder_date) >=',date('Y-m-d',strtotime($from)));
        }
        if($to != ""){
            $this->db->where('DATE(tbl_reminders.reminder_date) <=',date('Y-m-d',strtotime($to)));
        }
		$this->db->where('tbl_reminders.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_reminders.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_reminders.reminder_date','desc');
        $result = $this->db->get('tbl_reminders')->result();
        return $result;
    }
    public function get_all_inquiries($from,$to){
        $this->db->select('tbl_enquiry.*,tbl_salon_employee.full_name');
        $this->db->join('tbl_salon_customer','tbl_enquiry.customer_id = tbl_salon_customer.id');
        $this->db->join('tbl_salon_employee','tbl_enquiry.enquiry_for = tbl_salon_employee.id');
        if($from != ""){
            $this->db->where('DATE(tbl_enquiry.date) >=',date('Y-m-d',strtotime($from)));
        }
        if($to != ""){
            $this->db->where('DATE(tbl_enquiry.date) <=',date('Y-m-d',strtotime($to)));
        }
        $this->db->where('tbl_enquiry.is_deleted','0');
		$this->db->where('tbl_enquiry.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_enquiry.salon_id', $this->session->userdata('salon_id'));
        $this->db->order_by('tbl_enquiry.date','desc');
        $result = $this->db->get('tbl_enquiry')->result();
        return $result;
    }
    public function is_customer_visited_after_message($customer,$date){
        $this->db->select('tbl_new_booking.*,tbl_salon_customer.full_name');
        $this->db->join('tbl_salon_customer','tbl_new_booking.customer_name = tbl_salon_customer.id');
        if($date != ""){
            $this->db->where('DATE(tbl_new_booking.service_start_date) >=',date('Y-m-d',strtotime($date)));
        }
        $this->db->where('tbl_new_booking.is_deleted','0');
        $this->db->where('tbl_new_booking.customer_name',$customer);
        $this->db->where('tbl_new_booking.payment_status','1');
		$this->db->where('tbl_new_booking.branch_id', $this->session->userdata('branch_id'));
		$this->db->where('tbl_new_booking.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_new_booking')->num_rows();
        if($result > 0){
            return true;
        }else{
            return false;
        }
    }
    public function get_service_delete_allowed($id){
        $this->db->where('is_deleted','0');
        $this->db->where('find_in_set("'.$id.'", service_name) <> 0');
        $result = $this->db->get('tbl_package')->num_rows();
        if($result > 0){
            return false;
        }else{
            $this->db->where('is_deleted','0');
            $this->db->where('find_in_set("'.$id.'", service_name) <> 0');
            $result = $this->db->get('tbl_offers')->num_rows();
            if($result > 0){
                return false;
            }else{
                return true;
            }
        }
    }
    public function send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id){
        // echo '<pre>'; print_r($cron_id); exit;
        $this->db->where('id',$customer);
        $this->db->where('salon_id',$salon_id);
        $this->db->where('branch_id',$branch_id);
		$single = $this->db->get('tbl_salon_customer')->row();
        if(!empty($single)){
            if($single->fcm_token != ""){
                $notification_response = $this->Common_model->send_app_notification($single->fcm_token,$title,$app_message,$notification_data);		
                if($type == '14'){
                    $data = array(
                        'generated_from'=>  $generated_from,
                        'type'		    =>	$type,
                        'send_to'		=>	$number,
                        'send_customer' =>	$customer,
                        'title'		    =>	$title,
                        'content'		=>	$app_message,
                        'notification_data'		=>	$notification_data != "" && is_array($notification_data) && !empty($notification_data) ? json_encode($notification_data) : '',
                        'api_response_status'	=>	'',
                        'api_response'	=>	$notification_response,
                        'salon_id'		=>	$salon_id,
                        'branch_id'	    =>	$branch_id,
                        'for_query_id'	=>	$for_query_id,
                        'for_order_id'	=>	$for_order_id,
                        'for_coupon_id'	=>	$for_offer_id,
                        'membership_history_id'	=>	$membership_history_id,
                        'giftcard_purchase_id'	=>	$giftcard_purchase_id,
                        'package_allocation_id'	=>	$package_allocation_id,
                        'cron_id'               =>  is_array($cron_id) && !empty($cron_id) ? implode(',',$cron_id) : $cron_id,
                        'created_on'	=>	date('Y-m-d H:i:s'),
                    );
                }elseif($type == '15'){
                    $data = array(
                        'generated_from'=>  $generated_from,
                        'type'		    =>	$type,
                        'send_to'		=>	$number,
                        'send_customer' =>	$customer,
                        'title'		    =>	$title,
                        'content'		=>	$app_message,
                        'notification_data'		=>	$notification_data != "" && is_array($notification_data) && !empty($notification_data) ? json_encode($notification_data) : '',
                        'api_response_status'	=>	'',
                        'api_response'	=>	$notification_response,
                        'salon_id'		=>	$salon_id,
                        'branch_id'	    =>	$branch_id,
                        'for_query_id'	=>	$for_query_id,
                        'for_order_id'	=>	$for_order_id,
                        'for_giftcard_id'=>	$for_offer_id,
                        'membership_history_id'	=>	$membership_history_id,
                        'giftcard_purchase_id'	=>	$giftcard_purchase_id,
                        'package_allocation_id'	=>	$package_allocation_id,
                        'cron_id'               =>  is_array($cron_id) && !empty($cron_id) ? implode(',',$cron_id) : $cron_id,
                        'created_on'	=>	date('Y-m-d H:i:s'),
                    );
                }else{
                    $data = array(
                        'generated_from'=>  $generated_from,
                        'type'		    =>	$type,
                        'send_to'		=>	$number,
                        'send_customer' =>	$customer,
                        'title'		    =>	$title,
                        'content'		=>	$app_message,
                        'notification_data'		=>	$notification_data != "" && is_array($notification_data) && !empty($notification_data) ? json_encode($notification_data) : '',
                        'api_response_status'	=>	'',
                        'api_response'	=>	$notification_response,
                        'salon_id'		=>	$salon_id,
                        'branch_id'	    =>	$branch_id,
                        'for_query_id'	=>	$for_query_id,
                        'for_order_id'	=>	$for_order_id,
                        'for_offer_id'	=>	$for_offer_id,
                        'membership_history_id'	=>	$membership_history_id,
                        'giftcard_purchase_id'	=>	$giftcard_purchase_id,
                        'package_allocation_id'	=>	$package_allocation_id,
                        'cron_id'               =>  is_array($cron_id) && !empty($cron_id) ? implode(',',$cron_id) : $cron_id,
                        'created_on'	=>	date('Y-m-d H:i:s'),
                    );
                }
                $this->db->insert('tbl_customer_notifications',$data);
            }
        
            if($message_send_on == '0'){
                $this->send_sms($message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$for_query_id,$template_id,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$cron_id);
            }elseif($message_send_on == '1'){
                // $this->send_whatsapp_message($message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$for_query_id,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$cron_id);
                $this->send_whatsapp_message_new($message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$for_query_id,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
            }elseif($message_send_on == '2'){
                if($single->email != "" && $email_html != ""){
                    $this->send_email($email_html,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$for_query_id,$single->email,$email_subject,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$cron_id);
                }
            }
		}

		return true;
    }
    public function send_sms($message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$for_query_id,$template_id,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$cron_id){
		// $curl = curl_init();
        // $campaign_name = "testing";
        // $authKey = SMSKEY;
        // $mobileNumber = $number; 
        // $sender = SENDERID; 
        // $message = $message;
        // $route = ROUTE; 
        // $template_id = $template_id; 
        // $scheduleTime = ""; 
        // $coding = "1"; 
        
        // $postData = array(
        //     "campaign_name"     => $campaign_name, 
        //     "auth_key"          => $authKey, 
        //     "receivers"         => $mobileNumber, 
        //     "sender"            => $sender, 
        //     "route"             => $route, 
        //     "scheduleTime"      => $scheduleTime,
        //     "message"           => [
        //                                 'msgdata'       => $message,
        //                                 'Template_ID'   => $template_id,
        //                                 'coding'        => $coding
        //                             ]
        // );
        
        // curl_setopt_array($curl, array(
        //     CURLOPT_URL                 => 'http://sms.bulksmsserviceproviders.com/api/send/sms',
        //     CURLOPT_RETURNTRANSFER      => true,
        //     CURLOPT_ENCODING            => '',
        //     CURLOPT_MAXREDIRS           => 10,
        //     CURLOPT_TIMEOUT             => 0,
        //     CURLOPT_FOLLOWLOCATION      => true,
        //     CURLOPT_HTTP_VERSION        => CURL_HTTP_VERSION_1_1,
        //     CURLOPT_CUSTOMREQUEST       => 'POST',
        //     CURLOPT_POSTFIELDS          => json_encode($postData),
        //     CURLOPT_HTTPHEADER          => array(
        //                                             'Content-Type: application/json'
        //                                     ),
        // ));
        
        // $response = curl_exec($curl);
        // $data = json_decode($response, true);
        // if($data['status'] == 'Success'){
        //     $this->Salon_model->set_message_log($customer,'0',$type,$number,'',$message,$data['status'],$salon_id,$branch_id,$response,$for_order_id,$for_offer_id,$for_query_id,$template_id,'',$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,[],$cron_id);
        //     return true;
        // }else{
        //     return false;
        // }

        return true;
	}
    public function send_whatsapp_message($message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$for_query_id,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$cron_id){			
        $username = WP_USERNAME;

        $mobile_nos = $number;
        
        $token = WP_API_KEY;		// company realme (added on 18-07-2024)
        // $mobile_nos = '919766869071';
        
        $data = 'username='.$username.'&number='.$mobile_nos.'&message='.$message.'&token='.$token.'';

        $url = 'https://int.chatway.in/api/send-msg?'.$data;
        
        $url = preg_replace("/ /", "%20", $url);
        $api_response = file_get_contents($url);
        
        $response = json_decode($api_response);

        $wp_data['wp_gateway'] = '0';

        if (is_array($response) && isset($response[0])) {
            $sending_status	= $response[0]->status;
            $this->set_message_log($customer,'1',$type,$number,'',$message,$sending_status,$salon_id,$branch_id,$api_response,$for_order_id,$for_offer_id,$for_query_id,'','',$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_data,$cron_id);
        }else{
            $this->set_message_log($customer,'1',$type,$number,'',$message,'failed',$salon_id,$branch_id,$api_response,$for_order_id,$for_offer_id,$for_query_id,'','',$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_data,$cron_id);
            return false;
        }

        return $sending_status;
    }
    public function send_whatsapp_message_new($message,$mobile_nos,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$for_query_id,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id){		
        if(!empty($wp_template_data)){
            $wp_data = [];
            $this->db->where('is_deleted','0');
            $this->db->where('salon_id',$salon_id);
            $this->db->where('id',$branch_id);
            $row = $this->db->get('tbl_branch')->row();
            // if($customer == '248'){
            //     echo '<pre>'; print_r($mobile_nos); exit();
            // }
            if(!empty($row) && $row->include_wp == '1'){
                if((int)$row->current_wp_coins_balance > 0){
                    $template_name = $wp_template_data['template_name'];
                    $pay_load_components = $wp_template_data['pay_load_components'];
                    if(!empty($wp_template_data) && $template_name != "" && !empty($pay_load_components)){	
                        $response = $this->send_whatsapp_messages_newgateway($mobile_nos,$template_name,$pay_load_components);
                        $sending_status = $response['sending_status'];
                        $api_response = $response['api_response'];

                        $wp_data['wp_gateway'] = '1'; 
                        $wp_data['template_name'] = $template_name; 
                        $wp_data['wp_coins_opening_balance'] = (int)$row->current_wp_coins_balance; 
                        $wp_data['wp_coins_used'] = 1; 
                        $wp_data['wp_coins_closing_balance'] = (int)$row->current_wp_coins_balance - 1; 
                    }else{
                        $sending_status = 'failed';
                        $api_response = json_encode(
                            array(
                                'status'       =>  'failed',
                                'statusDesc'    =>  'Template data not available'
                            )
                        );
                    }
                }else{
                    $sending_status = 'failed';
                    $api_response = json_encode(
                        array(
                            'status'       =>  'failed',
                            'statusDesc'    =>  'Insufficient coin balance'
                        )
                    );
                }
            }else{
                $sending_status = 'failed';
                $api_response = json_encode(
                    array(
                        'status'       =>  'failed',
                        'statusDesc'    =>  'Whatsapp notifications not allowed'
                    )
                );
            }

            $this->set_message_log($customer,'1',$type,$mobile_nos,'',$message,$sending_status,$salon_id,$branch_id,$api_response,$for_order_id,$for_offer_id,$for_query_id,'','',$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_data,$cron_id);
            
            return $sending_status;
        }else{
            return false;
        }
    }
    public function send_cron_confirmation($wp_template_data){
        $template_name = !empty($wp_template_data) && isset($wp_template_data['template_name']) ? $wp_template_data['template_name'] : '';
        $pay_load_components = !empty($wp_template_data) && isset($wp_template_data['pay_load_components']) ? $wp_template_data['pay_load_components'] : [];
        if($template_name != "" && !empty($pay_load_components)){	
            $mobile_nos = '91808727903,918999459806';
            $response = $this->send_whatsapp_messages_newgateway($mobile_nos,$template_name,$pay_load_components);
        }
        return true;
    }
    public function send_whatsapp_messages_newgateway($mobile_nos,$template_name,$pay_load_components){
        $url = "https://cloudapi.wbbox.in/api/v1.0/messages/send-template/" . NEW_WP_USERNAME;

        $postData = [
            "messaging_product" => "whatsapp",
            "recipient_type"    => "individual",
            "to"                => $mobile_nos,
            "type"              => "template",
            "template"          => [
                                        "name"          => $template_name,
                                        "language"      => [
                                                                "code" => "en"
                                                            ],
                                        "components"    => $pay_load_components
                                    ]
        ];
        // if($mobile_nos == '911591591591'){
        //     echo '<pre>'; print_r($postData); exit();
        // }

        $jsonData = json_encode($postData);

        $headers = [
                        "Content-Type: application/json",
                        "Authorization: Bearer " . NEW_WP_API_KEY
                    ];

        $ch = curl_init($url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);

        $response = curl_exec($ch);
        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

        if (curl_errno($ch)) {
            $error_msg = curl_error($ch);
            curl_close($ch);
            $api_response = $response;
            $sending_status = 'failed';
        }else{
            curl_close($ch);
            $api_response = $response;
            $decoded_response = json_decode($response, true);
            if (isset($decoded_response['success']) && $decoded_response['success'] === true) {
                $sending_status = 'success';
            } elseif (isset($decoded_response['statusCode']) && $decoded_response['statusCode'] === 0) {
                $sending_status = 'success';
            } else {
                $sending_status = 'failed';
            }                        
        }
        
        return array(
                        'sending_status'  =>  $sending_status,
                        'api_response'    =>  $api_response
                    );
    }
    
    public function send_email($email_html,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$for_query_id,$to_email,$email_subject,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$cron_id){
		$config['protocol'] = 'smtp';
		$config['smtp_host'] = smtp_host;
		$config['smtp_port'] = 587;
		$config['smtp_user'] = smtp_user;
		$config['smtp_pass'] = smtp_pass;
		$config['newline'] = "\r\n";		
		$this->load->library('email');
			
		$this->email->initialize($config);
		$this->email->from(EMAIL_COMPANY_EMAIL,EMAIL_COMPANY_NAME);
		$this->email->to($to_email); 
		// $this->email->to('hmanshu.kolhe@gmail.com'); 
		$this->email->subject($email_subject);
		$this->email->message($email_html);
		$this->email->set_mailtype('html');  

        $sending_status = 'failed';
        if ($this->email->send()) {
            $sending_status = 'success';
            $api_response = json_encode(['status' => 'success', 'message' => 'Email sent successfully']);
            $this->set_message_log($customer, '2', $type, $number, $to_email, $email_html, $sending_status, $salon_id, $branch_id, $api_response, $for_order_id, $for_offer_id, $for_query_id, '', $email_subject,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,[],$cron_id);
        } else {
            return false;
        }

        return $sending_status;
	}
    // public function get_yesterday_cancelled_bookings(){
    //     $this->db->select('tbl_new_booking.*, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone');
    //     $this->db->join('tbl_booking_services_details', 'tbl_booking_services_details.booking_id = tbl_new_booking.id');
    //     $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_new_booking.customer_name');
    //     $this->db->where('tbl_new_booking.is_deleted','0');
    //     $this->db->where('tbl_booking_services_details.is_deleted','0');
    //     $this->db->where('tbl_booking_services_details.service_status','2');
    //     $this->db->where('DATE(tbl_booking_services_details.service_from)',date('Y-m-d', strtotime('-1 day')));
    //     $this->db->group_by('tbl_new_booking.id');
    //     $this->db->group_by('tbl_new_booking.customer_name');
    //     $this->db->order_by('tbl_booking_services_details.service_from','desc');
    //     $result = $this->db->get('tbl_new_booking')->result();
    //     return $result;
    // }
    public function get_yesterday_cancelled_bookings() {
        $yesterday = date('Y-m-d', strtotime('-1 day'));
        $now = date('Y-m-d H:i:s');

        // Subquery: get customer IDs who have future (non-cancelled) bookings
        $this->db->select('DISTINCT tbl_new_booking.customer_name', false); // 👈 false disables backticks
        $this->db->from('tbl_new_booking');
        $this->db->join('tbl_booking_services_details', 'tbl_booking_services_details.booking_id = tbl_new_booking.id');
        $this->db->where('tbl_new_booking.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.service_status !=', '2'); // Not cancelled
        $this->db->where('tbl_booking_services_details.service_from >', $now);
        $future_customers_subquery = $this->db->get_compiled_select();
        $this->db->reset_query();

        // Main query: yesterday cancelled bookings whose customers have NO future bookings
        $this->db->select('tbl_new_booking.*, tbl_salon_customer.full_name, tbl_salon_customer.customer_phone');
        $this->db->from('tbl_new_booking');
        $this->db->join('tbl_booking_services_details', 'tbl_booking_services_details.booking_id = tbl_new_booking.id');
        $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_new_booking.customer_name');
        $this->db->where('tbl_new_booking.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.is_deleted', '0');
        $this->db->where('tbl_booking_services_details.service_status', '2'); // Cancelled
        $this->db->where('DATE(tbl_booking_services_details.service_from)', $yesterday);
        $this->db->where("tbl_new_booking.customer_name NOT IN ($future_customers_subquery)", null, false); // Raw subquery
        $this->db->group_by(['tbl_new_booking.id', 'tbl_new_booking.customer_name']);
        // $this->db->order_by('tbl_booking_services_details.service_from', 'desc');

        return $this->db->get()->result();
    }
	public function generate_qrcode_data($data) {
		// Load the library
		$this->load->library('ciqrcode');
		
		// QR Configuration
		$config['cacheable'] = true;
		$config['quality'] = true;
		$config['size'] = '150';
		$config['black'] = array(255, 255, 255);
		$config['white'] = array(0, 0, 0);
		$this->ciqrcode->initialize($config);
		
		// QR Data
		$params['data'] = $data;
		$params['level'] = 'L';
		$params['size'] = 10;
		
		// Generate QR Code and return data URI
		ob_start();
		$this->ciqrcode->generate($params);
		$image_data = ob_get_contents();
		ob_end_clean();
		
		$final_image_data = "data:image/png;base64," . base64_encode($image_data);
		
		return $final_image_data;
	}

    public function set_message_log($customer,$sent_on,$type,$number,$email,$message,$sending_status,$salon_id,$branch_id,$api_response,$for_order_id,$for_offer_id,$for_query_id,$template_id,$email_subject,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_data = [],$cron_id = ''){
        if($type == '14'){
            $data = array(
                'send_on'		=>	$sent_on,
                'type'		    =>	$type,
                'send_to'		=>	$number,
                'send_customer' =>	$customer,
                'send_to_email' =>	$email,
                'content'		=>	$message,
                'api_response_status'	=>	$sending_status,
                'api_response'	=>	$api_response,
                'salon_id'		=>	$salon_id,
                'branch_id'	    =>	$branch_id,
                'for_order_id'	=>	$for_order_id,
                'for_coupon_id'	=>	$for_offer_id,
                'for_query_id'	=>	$for_query_id,
                'template_id'	=>	$template_id,
                'email_subject'	=>	$email_subject,
                'consent_form_id'	=>	$consent_form_id,
                'membership_history_id'	=>	$membership_history_id,
                'giftcard_purchase_id'	=>	$giftcard_purchase_id,
                'package_allocation_id'	=>	$package_allocation_id,
                'trying_for_booking_id' =>  $trying_booking_id,
                'cron_id'               =>  $cron_id,
                'created_on'	=>	date('Y-m-d H:i:s'),
            );
        }elseif($type == '15'){
            $data = array(
                'send_on'		=>	$sent_on,
                'type'		    =>	$type,
                'send_to'		=>	$number,
                'send_customer' =>	$customer,
                'send_to_email' =>	$email,
                'content'		=>	$message,
                'api_response_status'	=>	$sending_status,
                'api_response'	=>	$api_response,
                'salon_id'		=>	$salon_id,
                'branch_id'	    =>	$branch_id,
                'for_order_id'	=>	$for_order_id,
                'for_giftcard_id'=>	$for_offer_id,
                'for_query_id'	=>	$for_query_id,
                'template_id'	=>	$template_id,
                'email_subject'	=>	$email_subject,
                'consent_form_id'	=>	$consent_form_id,
                'membership_history_id'	=>	$membership_history_id,
                'giftcard_purchase_id'	=>	$giftcard_purchase_id,
                'package_allocation_id'	=>	$package_allocation_id,
                'trying_for_booking_id' =>  $trying_booking_id,
                'cron_id'               =>  $cron_id,
                'created_on'	=>	date('Y-m-d H:i:s'),
            );
        }else{
            $data = array(
                'send_on'		=>	$sent_on,
                'type'		    =>	$type,
                'send_to'		=>	$number,
                'send_customer' =>	$customer,
                'send_to_email' =>	$email,
                'content'		=>	$message,
                'api_response_status'	=>	$sending_status,
                'api_response'	=>	$api_response,
                'salon_id'		=>	$salon_id,
                'branch_id'	    =>	$branch_id,
                'for_order_id'	=>	$for_order_id,
                'for_offer_id'	=>	$for_offer_id,
                'for_query_id'	=>	$for_query_id,
                'template_id'	=>	$template_id,
                'email_subject'	=>	$email_subject,
                'consent_form_id'	=>	$consent_form_id,
                'membership_history_id'	=>	$membership_history_id,
                'giftcard_purchase_id'	=>	$giftcard_purchase_id,
                'package_allocation_id'	=>	$package_allocation_id,
                'trying_for_booking_id' =>  $trying_booking_id,
                'cron_id'               =>  $cron_id,
                'created_on'	=>	date('Y-m-d H:i:s'),
            );
        }

        if(!empty($wp_data)){
            $this->db->where('id',$branch_id);
            $this->db->update('tbl_branch',array('current_wp_coins_balance'=>$wp_data['wp_coins_closing_balance']));
            $data = array_merge($data,$wp_data);
        }

        $this->db->insert('tbl_messages_history',$data);
        $message_id = $this->db->insert_id();

        if($cron_id != ""){
            $this->db->where('id',$cron_id);
            $exist_cron = $this->db->get('tbl_cron_reports')->row();
            if(!empty($exist_cron)){
                $messages_ids = $exist_cron->messages_id != "" ? explode(',',$exist_cron->messages_id) : [];
                $messages_ids[] = $message_id;
                // $messages_ids = array_unique($messages_ids);
                rsort($messages_ids);
                $this->db->where('id',$exist_cron->id);
                $this->db->update('tbl_cron_reports',array('messages_id'=>!empty($messages_id) ? implode(',',$messages_id) : null));
            }
        }

        return true;
    }

    public function change_rotational_shift(){
        $today = strtolower(date('l'));  
        if ($today === 'monday') {   // if this value need to change, then also update the code from get_stylist_shifts_all() and get_stylist_shifts() functions (make changes as to fetch next week start and end dates)
            $this->db->where('is_deleted','0');
            $this->db->where('shift_type','1');
            $emps = $this->db->get('tbl_salon_employee')->result();
            if(!empty($emps)){
                foreach($emps as $emps_result){
                    $this->db->where('id',$emps_result->shift);
                    $single_shift = $this->db->get('tbl_shift_master')->row();
                    if(!empty($single_shift)){
                        if (!empty($single_shift->order)) {
                            $this->db->where('order >', $single_shift->order);
                            $this->db->where('salon_id',$emps_result->salon_id);
                            $this->db->where('branch_id',$emps_result->branch_id);
                            $this->db->where('shift_type','1');
                            $this->db->order_by('order', 'ASC');
                            $this->db->limit(1);
                            $next_shift = $this->db->get('tbl_shift_master')->row();
                        
                            if (empty($next_shift)) {
                                $this->db->where('shift_type','1');
                                $this->db->where('salon_id',$emps_result->salon_id);
                                $this->db->where('branch_id',$emps_result->branch_id);
                                $this->db->order_by('order', 'ASC');
                                $this->db->limit(1);
                                $next_shift = $this->db->get('tbl_shift_master')->row();
                            }
                        
                            if (!empty($next_shift)) {
                                $new_shift = $next_shift->id;
                                $pre_shift = $emps_result->shift;
                                $pre_shift_type = $emps_result->shift_type;
                                $new_shift_type = $next_shift->shift_type;

                                $this->db->where('id', $pre_shift);
                                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                                $this->db->where('branch_id',$this->session->userdata('branch_id'));
                                $pre_shift_details = $this->db->get('tbl_shift_master')->row();

                                $this->db->where('order >', $next_shift->order);
                                $this->db->where('salon_id',$emps_result->salon_id);
                                $this->db->where('branch_id',$emps_result->branch_id);
                                $this->db->where('shift_type','1');
                                $this->db->order_by('order', 'ASC');
                                $this->db->limit(1);
                                $upcoming_shift = $this->db->get('tbl_shift_master')->row();

                                if (empty($upcoming_shift)) {
                                    $this->db->where('shift_type','1');
                                    $this->db->where('salon_id',$emps_result->salon_id);
                                    $this->db->where('branch_id',$emps_result->branch_id);
                                    $this->db->order_by('order', 'ASC');
                                    $this->db->limit(1);
                                    $upcoming_shift = $this->db->get('tbl_shift_master')->row();
                                }

                                $data = array(
                                    'shift_type'=> '1',
                                    'shift'     => $new_shift,
                                    'upcoming_shift_type' => (!empty($upcoming_shift)) ? $upcoming_shift->shift_type : null,
                                    'upcoming_shift_id'   => (!empty($upcoming_shift)) ? $upcoming_shift->id : null,
                                );
                                $this->db->where('id',$emps_result->id);
                                $this->db->update('tbl_salon_employee',$data);

                                $history_data = array(
                                    'salon_id'		        =>	$emps_result->salon_id,
                                    'branch_id'	            =>	$emps_result->branch_id,
                                    'emp_id'		        =>	$emps_result->id,                            
                                    'assigned_shift_type'	=>	$new_shift_type,
                                    'pre_shift_type'	    =>	$pre_shift_type,
                                    'assign_type'	        =>	'1',
                                    'is_shift_applied'	    =>	'1',
                                    'pre_shift_id'          =>  $pre_shift,
                                    'previous_shift_name'   =>  !empty($pre_shift_details) ? $pre_shift_details->shift_name : null,
                                    'assigned_shift_id'     =>  $new_shift,
                                    'created_on'	        =>	date('Y-m-d H:i:s'),
                                    'shift_applied_on'	    =>	date('Y-m-d H:i:s'),
                                );
                                $this->db->insert('tbl_shift_update_history',$history_data);
                            }
                        }
                    }
                }
                echo json_encode(array('status'=>'true','message'=>'Shifts updated successfully'));
            }else{
                echo json_encode(array('status'=>'false','message'=>'Rotational shift employees not available'));
            }
        }else{
            echo json_encode(array('status'=>'false','message'=>'Shift update not allowed for today'));
        }
    }

    public function update_emergency_closure(){
		$close_setup = $this->get_salon_close_for_period_setup();
        if(!empty($close_setup)){
            if(date('Y-m-d',strtotime($close_setup->to_date)) < date('Y-m-d')){ 
                
            }
        }
    }
	public function submit_booking_rule_change_request(){
        $change_to = $this->input->post('change_to') != "" && is_array($this->input->post('change_to')) && !empty($this->input->post('change_to')) ? implode('@@@',$this->input->post('change_to')) : '';
        $change_from = $this->input->post('change_from') != "" && is_array($this->input->post('change_from')) && !empty($this->input->post('change_from')) ? implode('@@@',$this->input->post('change_from')) : '';
        // echo '<pre>change_to: ';
        // echo $change_to;
        // echo '<pre>change_from: ';
        // echo $change_from; exit;
        if($change_to != $change_from){
            $data = array( 
                'branch_id' 			=> $this->session->userdata('branch_id'),
                'salon_id' 				=> $this->session->userdata('salon_id'),
                'booking_rule_id'       => $this->input->post('rule_id'),
                'change_to' 	        => $change_to,      
                'change_from' 	        => $change_from,  
                'change_to_label' 	    => $this->input->post('change_to_label') != "" && is_array($this->input->post('change_to_label')) && !empty($this->input->post('change_to_label')) ? implode('@@@',$this->input->post('change_to_label')) : '',      
                'change_from_label' 	=> $this->input->post('change_from_label') != "" && is_array($this->input->post('change_from_label')) && !empty($this->input->post('change_from_label')) ? implode('@@@',$this->input->post('change_from_label')) : '',      
                'tbl_booking_rule_column'   => $this->input->post('db_column') != "" && is_array($this->input->post('db_column')) && !empty($this->input->post('db_column')) ? implode('@@@',$this->input->post('db_column')) : '',
                'booking_rule_field'    => $this->input->post('booking_rule_field') != "" && is_array($this->input->post('booking_rule_field')) && !empty($this->input->post('booking_rule_field')) ? implode('@@@',$this->input->post('booking_rule_field')) : '',
                'store_type' 		    => $this->input->post('store_type'),  
                'field_main_label' 		=> $this->input->post('field_main_label'),  
                'remark'                => '',
                'created_on'   	 		=> date("Y-m-d H:i:s"),
                'submitted_on'   	 	=> date("Y-m-d H:i:s")
            );  
            $this->db->insert('tbl_booking_rule_update_requests', $data); 
            echo '1';
        }else{
            echo '0';
        }
	}
    public function get_salon_booking_rule_request($branch_id,$salon_id,$db_column){
		$this->db->where('tbl_booking_rule_column',implode('@@@',$db_column));
		$this->db->where('branch_id',$branch_id);
		$this->db->where('salon_id',$salon_id);
		$this->db->where('is_deleted','0');
		$this->db->where('approval_status','0');
		$this->db->order_by('id','DESC');
		$request = $this->db->get('tbl_booking_rule_update_requests')->row();
        return $request;
    }
    public function add_banner($tips_photo){
        $tips_photo = array_filter($tips_photo);
        for($i=0;$i<count($tips_photo);$i++){
            $data = array(
                'branch_id' 	=> $this->session->userdata('branch_id'),
                'salon_id' 		=> $this->session->userdata('salon_id'),
                'show_till'     => date('Y-m-d',strtotime($this->input->post('show_till'))),
                'banner'        => $tips_photo[$i], 
                'created_on'    => date("Y-m-d H:i:s")
            );
            $this->db->insert('tbl_salon_mobile_banner',$data);
        }
        return '0';
    } 
    public function get_all_banner(){
        $this->db->where('is_deleted','0');
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $this->db->order_by('show_till','DESC');
        $result = $this->db->get('tbl_salon_mobile_banner');
        return $result->result();
    } 
    public function get_single_banner(){
        $this->db->where('is_deleted','0');
        $this->db->where('salon_id',$this->session->userdata('salon_id'));
        $this->db->where('branch_id',$this->session->userdata('branch_id'));
        $result = $this->db->get('tbl_salon_mobile_banner');
        $result = $result->result();
        $single = [];
        if(!empty($result)){
            foreach($result as $data){
                $single[] = $data->banner;
            }
        }
        return implode(',',$single);
    }

	public function insert_salon_coin_entry($data){
        if($data['entry_type'] == '1' || $data['entry_type'] == '0'){
            $this->db->where('id',$data['branch_id']);
            $this->db->where('salon_id',$data['salon_id']);
            $this->db->where('is_deleted','0');
            if($data['entry_type'] == '1'){
                $this->db->where('earn_coins_flag','1');
            }
            $branch = $this->db->get('tbl_branch')->row();
            if(!empty($branch)){
                $opening_balance = $branch->coin_balance != "" ? (float)$branch->coin_balance : 0.00;

                if($data['entry_type'] == '1'){
                    $closing_balance = $opening_balance + $data['coin_amount'];
                }elseif($data['entry_type'] == '0'){
                    $closing_balance = $opening_balance - $data['coin_amount'];
                }else{
                    $closing_balance = $opening_balance;
                }           
                
                $branch_data = array(
                    'coin_balance'  =>  $closing_balance,
                );
                $this->db->where('id',$branch->id);
                $this->db->update('tbl_branch',$branch_data);

                $extra_data = array(
                    'opening_balance'   =>  $opening_balance,
                    'closing_balance'   =>  $closing_balance,
                    'created_on'        =>  date("Y-m-d H:i:s")
                );
                $data = array_merge($data,$extra_data);
                $this->db->insert('tbl_salon_coin_history',$data);
                
                return true;
            }else{
                return false;
            }
        }else{
            return false;
        }
	}

    public function insert_new_customer_coin_entry($customer_id,$branch_id,$salon_id){
        $this->db->where('is_deleted','0');
        $this->db->where('id',$customer_id);
        $exist_customer = $this->db->get('tbl_salon_customer')->row();
        
        $this->db->where('is_deleted','0');
        $this->db->where('salon_id',$salon_id);
        $this->db->where('id',$branch_id);
        $branch = $this->db->get('tbl_branch')->row();

        if(!empty($exist_customer) && !empty($branch)){
            $this->db->where('entry_type','1');
            $this->db->where('credit_type','0');
            $this->db->where('is_deleted','0');
            $this->db->where('salon_id', $salon_id);
            $this->db->where('customer_id', $exist_customer->id);
            $this->db->where('branch_id', $branch_id);
            $coin_entry_exist = $this->db->get('tbl_salon_coin_history');
            $coin_entry_exist = $coin_entry_exist->row();
            if(empty($coin_entry_exist)){
                $coin_amount = coin_earn_on_every_download;
                $coin_insert_data = array(
                    'branch_id'     =>  $branch_id,
                    'salon_id'      =>  $salon_id,
                    'entry_type'    =>  '1',
                    'credit_type'   =>  '0',
                    'customer_id'   =>  $exist_customer->id,
                    'coin_amount'   =>  $coin_amount,
                );
                $this->Salon_model->insert_salon_coin_entry($coin_insert_data);
            }
        
            // if($exist_customer->is_registered_coins_generated != "1"){
            //     $coin_amount = coin_earn_on_every_download;
            //     $coin_insert_data = array(
            //         'branch_id'     =>  $branch_id,
            //         'salon_id'      =>  $salon_id,
            //         'entry_type'    =>  '0',
            //         'debit_type'    =>  '1',    // Deduct due amount balance
            //         'customer_id'   =>  $exist_customer->id,
            //         'coin_amount'   =>  $coin_amount,
            //     );
            //     $this->Salon_model->deduct_due_amount_from_salon_coin_entry($coin_insert_data);
            // }
            
            return true;
        }else{
            return false;
        }
    }
    public function deduct_due_amount_from_salon_coin_entry($data){
        $this->db->where('id',$data['branch_id']);
        $this->db->where('salon_id',$data['salon_id']);
        $this->db->where('is_deleted','0');
        $this->db->where('earn_coins_flag','1');
        $branch = $this->db->get('tbl_branch')->row();
        if(!empty($branch)){
            $currnet_coin_used_in_due_amount = $branch->coin_used_in_due_amount != "" ? $branch->coin_used_in_due_amount : 0;
            $coin_used_in_due_amount = $currnet_coin_used_in_due_amount + $data['coin_amount'];

            $currnet_pending_due_amount = $branch->pending_due_amount != "" ? $branch->pending_due_amount : 0;
            $amount_deducted_from_due = $data['coin_amount'] * per_coin_in_rs;

            if($currnet_pending_due_amount < $amount_deducted_from_due){
                $amount_deducted_from_due = $amount_deducted_from_due - $currnet_pending_due_amount;
            }

            $pending_due_amount = $currnet_pending_due_amount - $amount_deducted_from_due;
            if($pending_due_amount >= 0){
                $pending_due_amount = $pending_due_amount;
            }else{
                $pending_due_amount = 0;
            }

            $branch_data = array(
                'pending_due_amount'            =>  $pending_due_amount,
                'coin_used_in_due_amount'       =>  $coin_used_in_due_amount
            );
            if($data['customer_id'] == '1'){
                // echo '<pre>'; print_r($branch);
                // echo '<pre>'; print_r($branch_data); exit;
            }
            $this->db->where('id',$branch->id);
            $this->db->update('tbl_branch',$branch_data);

            $this->db->where('is_deleted', '0');
            $this->db->where('id', $data['customer_id']);
            $this->db->where('branch_id',$data['branch_id']);
            $this->db->where('salon_id',$data['salon_id']);
            $this->db->update('tbl_salon_customer', array('is_registered_coins_generated'=>'1'));

            $this->Salon_model->insert_salon_coin_entry($data);
            return true;
        }else{
            return false;
        }
    }
    public function get_single_employee_loan($id){
        $this->db->select('tbl_employee_loan.*,tbl_salon_employee.full_name,tbl_emp_designation.designation as designation_name, tbl_salon_employee.whatsapp_number');
        $this->db->join('tbl_salon_employee','tbl_employee_loan.employee_id = tbl_salon_employee.id');
        $this->db->join('tbl_emp_designation','tbl_salon_employee.designation = tbl_emp_designation.id');
        $this->db->where('tbl_employee_loan.is_deleted','0');
        $this->db->where('tbl_employee_loan.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_employee_loan.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_employee_loan.id',$id);
        $result = $this->db->get('tbl_employee_loan')->row();
        return $result;
    }
    public function get_employee_loan_payments($id){
        $this->db->select('tbl_employee_loan_payments.*,tbl_salon_employee.full_name,tbl_emp_designation.designation as designation_name, tbl_salon_employee.whatsapp_number');
        $this->db->join('tbl_salon_employee','tbl_employee_loan_payments.employee_id = tbl_salon_employee.id');
        $this->db->join('tbl_emp_designation','tbl_salon_employee.designation = tbl_emp_designation.id');
        $this->db->where('tbl_employee_loan_payments.is_deleted','0');
        $this->db->where('tbl_employee_loan_payments.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_employee_loan_payments.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_employee_loan_payments.loan_id',$id);
        $this->db->order_by('tbl_employee_loan_payments.created_on','desc');
        $result = $this->db->get('tbl_employee_loan_payments')->result();
        return $result;
    }
    public function get_all_employee_loan(){
        $this->db->select('tbl_employee_loan.*,tbl_salon_employee.full_name,tbl_emp_designation.designation as designation_name, tbl_salon_employee.whatsapp_number');
        $this->db->join('tbl_salon_employee','tbl_employee_loan.employee_id = tbl_salon_employee.id');
        $this->db->join('tbl_emp_designation','tbl_salon_employee.designation = tbl_emp_designation.id');
        $this->db->where('tbl_employee_loan.branch_id',$this->session->userdata('branch_id'));
        $this->db->where('tbl_employee_loan.salon_id',$this->session->userdata('salon_id'));
        $this->db->where('tbl_employee_loan.is_deleted','0');
        $this->db->order_by('tbl_employee_loan.created_on','desc');
        $result = $this->db->get('tbl_employee_loan')->result();
        return $result;
    }
    public function set_employee_loan(){
        $branch_id = $this->session->userdata('branch_id');
        $salon_id = $this->session->userdata('salon_id'); 
        $data = array(
            'branch_id' 			=> $branch_id,
            'salon_id' 				=> $salon_id,
            'employee_id' 		    => $this->input->post('emp'),
            'amount' 			    => $this->input->post('amount'),
            'start_deduction_from' 	=> date('Y-m-d',strtotime($this->input->post('start_deduction_from'))),
            'is_deduct_from_salary' => $this->input->post('is_deduct_from_salary') == 'on' ? '1' : '0',
            'loan_paid_amount' 		=> '0.00',
            'loan_remaning_amount' 	=> $this->input->post('amount'),
        );        
        if($this->input->post('hidden_id') == ""){
            $date = array('created_on' => date("Y-m-d H:i:s"));
            $new_arr = array_merge($data, $date);
            $this->db->insert('tbl_employee_loan', $new_arr);
            return 0;
        }else{
            $this->db->where('id', $this->input->post('hidden_id'));
            $this->db->update('tbl_employee_loan', $data);
            return 1;
        }
    } 

    
    
    public function get_settle_loan_form_ajx(){
        $loan_id = $this->input->post('loan_id');

        $single = $this->get_single_employee_loan($loan_id);
        if(!empty($single)){
        ?>
        <form id="settle_loan" class="add_enquiry_form" name="settle_loan" method="post" enctype="multipart/form-data" data-parsley-validate>                                
            <div class="row">
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 form-group">
                    <label>Loan Paid Amount <b class="require">*</b></label>
                    <input value="<?php if(!empty($single)){ echo $single->id; } ?>" type="hidden" name="settle_loan_id" id="settle_loan_id">
                    <input value="<?php if(!empty($single)){ echo $single->employee_id; } ?>" type="hidden" name="emp" id="">
                    <input readonly value="<?php if(!empty($single)){ echo $single->loan_paid_amount; } ?>" autocomplete="off" type="text" class="form-control" name="paid_amount" id="paid_amount" placeholder="Enter Loan Paid Amount">
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 form-group">
                    <label>Loan Amount <b class="require">*</b></label>
                    <input readonly value="<?php if(!empty($single)){ echo $single->amount; } ?>" autocomplete="off" type="text" class="form-control" name="loan_amount" id="loan_amount" placeholder="Enter Loan Amount">
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 form-group">
                    <label>Loan Remaining Amount <b class="require">*</b></label>
                    <input readonly value="<?php if(!empty($single)){ echo $single->loan_remaning_amount; } ?>" autocomplete="off" type="text" class="form-control" name="remaning_amount" id="remaning_amount" placeholder="Enter Loan Remaining Amount">
                </div>
            </div> 
            <div class="row">
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 form-group">
                    <label>Settle Amount <b class="require">*</b></label>
                    <input value="<?php if(!empty($single)){ echo $single->loan_remaning_amount; } ?>" onkeyup="calculateNewPending()" max="<?php if(!empty($single)){ echo $single->loan_remaning_amount; } ?>" autocomplete="off" type="text" class="form-control" name="now_paid_amount" id="now_paid_amount" placeholder="Enter Settle Amount">
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 form-group">
                    <label>New Pending Amount <b class="require">*</b></label>
                    <input readonly value="" type="text" class="form-control" name="new_pending_amount" id="new_pending_amount" placeholder="Enter New Pending Amount">
                </div>
                <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 form-group">
                    <label>Date <b class="require">*</b></label>
                    <input value="" autocomplete="off" type="text" class="form-control" name="now_payment_date" id="now_payment_date" placeholder="Select Payment Date">
                </div>
            </div> 
            <div class="row">
                <div class="col-md-2  col-sm-3 col-xs-12">
                    <button type="submit" id="submit_settle_button" name="submit_settle_button" value="submit_settle_button" class="btn btn-success" style="margin-top:25px;">Submit</button>
                </div>	
            </div>  
            <div class="clearfix"></div>
        </form>        
        <script>		
            $(document).ready(function() {
                $("#now_payment_date").datepicker({
                    dateFormat: 'dd-mm-yy',
                    changeMonth: true,
                    changeYear: true,
                    maxDate: "+0", 
                    minDate: "-1Y", 
                    yearRange: "-1:+0", 
                }); 
                $("#settle_loan").validate({
                    rules: {
                        now_payment_date: "required",
                        now_paid_amount: {
                            required: true,
                            number: true,
                            min: 1,
                        },
                    },
                    messages: {
                        now_payment_date: "Please select payment date!",
                        now_paid_amount: {
                            required: "Please enter settle amount!",
                            number: "Only numbers allowed",
                            min: "Minimum 1 value allowed",
                        },
                    },
                    submitHandler: function(form) {
                        if (confirm("Do you want to submit the form?")) {
                            form.submit();
                        }
                    }
                });
                calculateNewPending();
            }); 
            function calculateNewPending(){
                var remaning_amount = $('#remaning_amount').val();
                var now_paid_amount = $('#now_paid_amount').val();

                new_pending = remaning_amount - now_paid_amount;
                $('#new_pending_amount').val(parseFloat(new_pending).toFixed(2));
            }
        </script>
        <?php }else{ ?>
            <label class="error">Loan Details Not Found.</label>
        <?php }
    }
    public function get_loan_payment_ajx(){
        $loan_id = $this->input->post('loan_id');

        $single = $this->get_single_employee_loan($loan_id);
        if(!empty($single)){
            $payments = $this->get_employee_loan_payments($loan_id);
        ?>
        <table id="example_settle_<?=$single->id;?>" class="table table-striped responsive-utilities jambo_table" style="width: 100%;">
            <thead>
                <tr>
                    <th>Sr. No.</th>
                    <th>Settle On</th>
                    <th>Settle Source</th>
                    <th>Opening Due</th> 
                    <th>Payment Amount</th>
                    <th>Closing Due</th> 
                    <th>Payment Date</th> 
                </tr>
            </thead>

            <tbody>
            <?php 
                $total_paid = 0;
            if(!empty($payments)){
                $i=1;
                foreach($payments as $payments_result){
                    $total_paid += (float)$payments_result->paid_amount;
            ?>
                <tr>
                    <td><?=$i++?></td>
                    <td><?= date('d M Y h:i A',strtotime($payments_result->created_on))?></td>
                    <td>
                        <?php
                            if($payments_result->payment_source == '0'){
                                echo 'Manual';
                            }elseif($payments_result->payment_source == '1'){
                                echo 'From Salary';
                            }else{
                                echo '-';
                            }
                        ?>
                    </td>
                    <td><?=$payments_result->opening_due?></td>
                    <td><?=$payments_result->paid_amount?></td>
                    <td><?=$payments_result->closing_due?></td>
                    <td><?= date('d-m-Y',strtotime($payments_result->payment_date))?></td>
                </tr>
            <?php }}?>
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="4" style="text-align:center;">Total Paid</th>
                    <th><?=$total_paid;?></th>
                    <th colspan="2"></th>
                </tr>
            </tfoot>
        </table>     
        <script>		
            $(document).ready(function() {
                $('#example_settle_<?=$single->id;?>').DataTable({ 
                    dom: 'Blfrtip',
                    responsive: true,
                    lengthMenu: [ [10, 25, 50, -1], [10, 25, 50, "All"] ],
                            
                    buttons: [
                                    
                        {
                            extend: 'excel',
                            filename: 'Employee Loan Payments',
                            exportOptions: {
                                columns: [0,1,2,3,4,5,6] 
                            },
                            customize: function (xlsx) {
                                var sheet = xlsx.xl.worksheets['sheet1.xml'];
                                $('row c[r^="K"]', sheet).attr('s', '2');
                            }
                        }
                    ], 
                });
            }); 
        </script>
        <?php }else{ ?>
            <label class="error">Loan Details Not Found.</label>
        <?php }
    }
    public function set_employee_loan_payment(){
        $settle_loan_id = $this->input->post('settle_loan_id');
        $this->db->where('id', $settle_loan_id);
        $this->db->where('is_deleted', '0');
        $exist = $this->db->get('tbl_employee_loan')->row();
        if(!empty($exist)){
            $pre_payment_ids = $exist->loan_payment_ids != "" ? explode(',',$exist->loan_payment_ids) : [];

            $pre_paid = $exist->loan_paid_amount != "" ? (float)$exist->loan_paid_amount : 0.00;
            $pre_remaining = $exist->loan_remaning_amount != "" ? (float)$exist->loan_remaning_amount : 0.00;
            $now_paid_amount = $this->input->post('now_paid_amount') != "" ? (float)$this->input->post('now_paid_amount') : 0.00;
            $closing_due = $pre_remaining - $now_paid_amount;
            $new_loan_paid_amount = $pre_paid + $now_paid_amount;
            $data = array(
                'branch_id' 		=> $this->session->userdata('branch_id'),
                'salon_id' 	        => $this->session->userdata('salon_id'),
                'employee_id' 		=> $exist->employee_id,
                'loan_amount' 		=> $exist->amount,
                'loan_id' 		    => $exist->id,
                'payment_source'    => '0',
                'opening_due'       => $pre_remaining,
                'closing_due'       => $closing_due,
                'paid_amount'       => $now_paid_amount,
                'payment_date'      => date('Y-m-d',strtotime($this->input->post('now_payment_date'))),
                'created_on'        => date("Y-m-d H:i:s")
            );            
            $this->db->insert('tbl_employee_loan_payments', $data);
            $payment_id = $this->db->insert_id();

            $pre_payment_ids[] = $payment_id;
            $loan_update_data = array(
                'loan_paid_amount'      =>  $new_loan_paid_amount,
                'loan_remaning_amount'  =>  $closing_due,
                'loan_payment_ids'      =>  !empty($pre_payment_ids) ? implode(',',$pre_payment_ids) : null
            );
            if($closing_due <= 0){
                $loan_update_data['loan_status'] = '2';
                $loan_update_data['completely_paid_on'] = date("Y-m-d H:i:s");
            }
            $this->db->where('is_deleted','0');
            $this->db->where('id', $exist->id);
            $this->db->update('tbl_employee_loan',$loan_update_data);
            
            return true;
        }else{
            return false;
        }    
    }
    public function set_consent_form(){
        $consent_form_id = $this->input->post('consent_form_id');
        if($consent_form_id == ''){
            $customer = $this->input->post('customer');
            $this->db->where('id',$customer);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('is_deleted','0');
            $customer_details = $this->db->get('tbl_salon_customer')->row();
            if(!empty($customer_details) && $customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
                $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                $finalNumber = substr($cleanedNumber, -10);
                $finalNumber = '91' . $finalNumber;

                $type = '12';
                $number = $finalNumber;
                $customer = $customer_details->id;
                $salon_id = $customer_details->salon_id;
                $branch_id = $customer_details->branch_id;
                $for_order_id = '';
                $for_query_id = '';
                $for_offer_id = '';
                $title = 'Consent Form Received!';
                $generated_from = '0';
                $notification_data = [
                    "landing_page"  => '',
                    "redirect_id"   => (string)''
                ];
                $message_send_on = '';
                $template_id = '';                    
                $email_subject = '';
                $email_html = '';
                
                $data = array(
                    'branch_id' 		    => $this->session->userdata('branch_id'),
                    'salon_id' 	            => $this->session->userdata('salon_id'),
                    'customer_id' 		    => $this->input->post('customer'),
                    'requirement' 		    => $this->input->post('requirement'),
                    'purpose' 		        => $this->input->post('purpose'),
                    'condition' 		    => $this->input->post('condition'),
                    'stylist_suggest' 		=> $this->input->post('stylist_suggest'),
                    'stylist_decide_result' => $this->input->post('stylist_decide_result'),
                    'stylist_name' 		    => $this->input->post('stylist_name'),
                    'customer_decision' 	=> $this->input->post('customer_decision'),
                    'decision_result' 		=> $this->input->post('decision_result'),
                    'consent_for_booking' 	=> $this->input->post('consent_for_booking'),
                    'service_consent_agree_text' 	=> $this->input->post('service_consent_agree_text'),
                    'product_consent_agree_text' 	=> $this->input->post('product_consent_agree_text'),
                    'consent_link_sent_on'  =>  $message_send_on,
                    'created_on'            => date("Y-m-d H:i:s")
                );            
                $this->db->insert('tbl_salon_consent_form', $data);
                $consent_form_id = $this->db->insert_id();
                
                $consent_form_link = base_url().'client_consent_form?consent='.base64_encode($consent_form_id);
                $message = 'Follow the following link and approve the consent form. Link:-'.$consent_form_link;
                $app_message = $message;
                
                $message_type = $this->input->post('message_type');
                if($message_type != ""){
                    if($message_type == '1'){
                        $message_send_on = '0'; //SMS
                        $template_id = '';
                    }elseif($message_type == '2'){
                        $message_send_on = '2'; //EMAIL
                    }elseif($message_type == '3'){
                        $message_send_on = '1'; //WP
                    }
                }else{
                    $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                    if(!empty($booking_rules)){
                        if($booking_rules->booking_reminder_type == '1'){
                            $message_send_on = '0'; //SMS
                            $template_id = '';
                        }elseif($booking_rules->booking_reminder_type == '2'){
                            $message_send_on = '2'; //EMAIL
                        }elseif($booking_rules->booking_reminder_type == '3'){
                            $message_send_on = '1'; //WP
                        }
                    }
                }
                
                $email_html = '
                <!DOCTYPE html>
                    <html>
                        <head>
                            <title></title>
                            <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
                            <meta name="viewport" content="width=device-width, initial-scale=1">
                            <meta http-equiv="X-UA-Compatible" content="IE=edge" />
                            <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open%20Sans">
                            <style>
                                body {
                                }
                            </style>
                        </head>
                        <body style="background-color: #f4f4f4; margin: 0 !important; padding: 0 !important;">
                            <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; max-width: 0px; opacity: 0; overflow: hidden;"> 
                            </div>
                            <table border="0" cellpadding="0" cellspacing="0" width="100%">
                                <tr>
                                    <td bgcolor="#f4f4f4" align="center" style="padding: 30px 10px 0px 10px;">
                                        <table border="0" cellpadding="0" cellspacing="0" width="100%" style="max-width: 600px; background: #fff;">
                                            <tr>
                                                <td align="start" style=" border-radius: 4px 4px 4px 4px; color: #666666;  font-size: 18px; font-weight: 400; line-height: 25px;">
                                                    
                                                    <div style="text-align:center;"> 
                                                        <div style="display:flex; justify-content: space-between; padding: 5px; align-items: center; background-color: #181f2f;">
                                                            <div>
                                                                <img style="width:150px;" src="https://napito.in/assets/images/napito_logo.jpg">
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div style="font-family: Gill Sans, Gill Sans MT, Calibri, Trebuchet MS, sans-serif; width: 600px; border: 2px solid black; margin: auto; padding: 25px;">
                                                        <div style="height: 550px; padding: 10px 15px;">
                                                            <p style="color: black;">Dear ' . $customer_details->full_name . ',</p>
                                                            <p style="color: black;">We have sent you a consent form. Please review and provide your approval by following the link below:</p>
                                                            <p style="color: black;"><a href="' . $consent_form_link . '" style="color: blue; text-decoration: underline;">Click here</a></p>
                                                            <p style="line-height: 0.8; color: black; margin-top: 50px;"><strong>Thanks & Regards,</strong></p>
                                                            <p style="color: black;">The Napito Team</p>
                                                            <p style="color: black;"><?= EMAIL_COMPANY_EMAIL ?></p>
                                                        </div>
                                                    </div> 
                                                </td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr> 
                            </table>
                        </body> 
                    </html>';
                // echo $email_html; exit;
                $membership_history_id = '';
                $package_allocation_id = '';
                $giftcard_purchase_id = '';
                $trying_booking_id = '';
                $wp_template_data = [];
                $cron_id = '';

                $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                
                return true;
            }else{
                return false;
            }
        }else{
            $this->db->where('id',$consent_form_id);
            $this->db->where('branch_id',$this->session->userdata('branch_id'));
            $this->db->where('salon_id',$this->session->userdata('salon_id'));
            $this->db->where('is_deleted','0');
            $consent_details = $this->db->get('tbl_salon_consent_form')->row();
            if(!empty($consent_details)){
                $this->db->where('id',$consent_details->customer_id);
                $this->db->where('branch_id',$this->session->userdata('branch_id'));
                $this->db->where('salon_id',$this->session->userdata('salon_id'));
                $this->db->where('is_deleted','0');
                $customer_details = $this->db->get('tbl_salon_customer')->row();
                if(!empty($customer_details) && $customer_details->customer_phone != "" && $customer_details->customer_phone != null && $customer_details->customer_phone != '0000000000'){
                    $cleanedNumber = preg_replace('/[^0-9]/', '', $customer_details->customer_phone);
                    $finalNumber = substr($cleanedNumber, -10);
                    $finalNumber = '91' . $finalNumber;
    
                    $type = '12';
                    $number = $finalNumber;
                    $customer = $customer_details->id;
                    $salon_id = $customer_details->salon_id;
                    $branch_id = $customer_details->branch_id;
                    $for_order_id = '';
                    $for_query_id = '';
                    $for_offer_id = '';
                    $title = 'Consent Form Received!';
                    $generated_from = '0';
                    $notification_data = [
                        "landing_page"  => '',
                        "redirect_id"   => (string)''
                    ];
                    $message_send_on = '';
                    $template_id = '';                    
                    $email_subject = 'Action Required: Please Approve the Consent Form';
                    $email_html = '';
                    
                    $message_type = $this->input->post('message_type');
                    if($message_type != ""){
                        if($message_type == '1'){
                            $message_send_on = '0'; //SMS
                            $template_id = '';
                        }elseif($message_type == '2'){
                            $message_send_on = '2'; //EMAIL
                            $email_html = '';
                        }elseif($message_type == '3'){
                            $message_send_on = '1'; //WP
                        }
                    }else{
                        $booking_rules = $this->Salon_model->get_booking_rules_all($branch_id,$salon_id);
                        if(!empty($booking_rules)){
                            if($booking_rules->booking_reminder_type == '1'){
                                $message_send_on = '0'; //SMS
                                $template_id = '';
                            }elseif($booking_rules->booking_reminder_type == '2'){
                                $message_send_on = '2'; //EMAIL
                                $email_html = '';
                            }elseif($booking_rules->booking_reminder_type == '3'){
                                $message_send_on = '1'; //WP
                            }
                        }
                    }

                    $data = array(
                        'requirement' 		    => $this->input->post('requirement'),
                        'purpose' 		        => $this->input->post('purpose'),
                        'condition' 		    => $this->input->post('condition'),
                        'stylist_suggest' 		=> $this->input->post('stylist_suggest'),
                        'stylist_decide_result' => $this->input->post('stylist_decide_result'),
                        'stylist_name' 		    => $this->input->post('stylist_name'),
                        'customer_decision' 	=> $this->input->post('customer_decision'),
                        'decision_result' 		=> $this->input->post('decision_result'),
                        'consent_for_booking' 	=> $this->input->post('consent_for_booking'),
                        'service_consent_agree_text' 	=> $this->input->post('service_consent_agree_text'),
                        'product_consent_agree_text' 	=> $this->input->post('product_consent_agree_text'),
                        'updated_on'            => date("Y-m-d H:i:s")
                    );
                    $this->db->where('is_deleted', '0');
                    $this->db->where('id', $consent_form_id);
                    $this->db->update('tbl_salon_consent_form', $data);
                    
                    $consent_form_link = base_url().'client_consent_form?consent='.base64_encode($consent_form_id);
                    $message = 'Follow the following link and approve the consent form. Link:-'.$consent_form_link;
                    $app_message = $message;
                    $membership_history_id = '';
                    $package_allocation_id = '';
                    $giftcard_purchase_id = '';
                    $trying_booking_id = '';
                    $wp_template_data = [];
                    $cron_id = '';

                    $this->send_notification($app_message,$title,$notification_data,$message,$number,$type,$customer,$salon_id,$branch_id,$for_order_id,$for_offer_id,$generated_from,$for_query_id,$message_send_on,$template_id,$email_subject,$email_html,$consent_form_id,$membership_history_id,$giftcard_purchase_id,$package_allocation_id,$trying_booking_id,$wp_template_data,$cron_id);
                    
                    return true;
                }else{
                    return false;
                }
            }else{
                return false;
            }
        }
    }
    public function get_customer_consent_form($id){
        $this->db->select('tbl_salon_consent_form.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_salon_customer.email');
        $this->db->join('tbl_salon_customer','tbl_salon_consent_form.customer_id = tbl_salon_customer.id');
        $this->db->where('tbl_salon_consent_form.is_deleted', '0');
        $this->db->where('tbl_salon_consent_form.id', $id);
        $this->db->order_by('tbl_salon_consent_form.updated_on', 'DESC');
        $result = $this->db->get('tbl_salon_consent_form')->row();
        return $result;
    }
    public function get_consent_form_details_ajx(){
        $this->db->select('tbl_salon_consent_form.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_salon_customer.email');
        $this->db->join('tbl_salon_customer','tbl_salon_consent_form.customer_id = tbl_salon_customer.id');
        $this->db->where('tbl_salon_consent_form.is_deleted', '0');
        $this->db->where('tbl_salon_consent_form.id', $this->input->post('id'));
        $this->db->where('tbl_salon_consent_form.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_consent_form.branch_id', $this->session->userdata('branch_id'));
        $this->db->order_by('tbl_salon_consent_form.updated_on', 'DESC');
        $result = $this->db->get('tbl_salon_consent_form')->row();
        echo json_encode($result);
    }
    public function get_all_salon_consent_forms(){
        $this->db->select('tbl_salon_consent_form.*,tbl_salon_customer.full_name,tbl_salon_customer.customer_phone, tbl_salon_customer.email');
        $this->db->join('tbl_salon_customer','tbl_salon_consent_form.customer_id = tbl_salon_customer.id');
        $this->db->where('tbl_salon_consent_form.is_deleted', '0');
        $this->db->where('tbl_salon_consent_form.salon_id', $this->session->userdata('salon_id'));
        $this->db->where('tbl_salon_consent_form.branch_id', $this->session->userdata('branch_id'));
        $this->db->order_by('tbl_salon_consent_form.updated_on', 'DESC');
        return $this->db->get('tbl_salon_consent_form')->result();
    }
    public function submit_client_consent_form(){
        $consent_form_id = $this->input->post('consent_form_id');
        $this->db->where('id',$consent_form_id);
        $this->db->where('is_deleted','0');
        $consent_details = $this->db->get('tbl_salon_consent_form')->row();
        if(!empty($consent_details)){
            $data = array(
                'customer_consent_status' 		 => '1',
                'customer_consent_received_on'   => date("Y-m-d H:i:s")
            );
            $this->db->where('id', $consent_details->id);
            $this->db->update('tbl_salon_consent_form', $data);
            return true;
        }else{
            return false;
        }
    }

    public function add_facility($icon){
        $data=array(
            'facility_name' => $this->input->post('facility_name'), 
            'branch_id'     => $this->session->userdata('branch_id'),
            'salon_id' 	    => $this->session->userdata('salon_id'),
            'icon'          => $icon, 
        );
        $this->set_onboarding_status('5');
        if($this->input->post('id') == ""){
            $date=array( 
                'created_on'    => date("Y-m-d H:i:s")
            );
            $new_arr = array_merge($data,$date);
            $this->db->insert('tbl_salon_facility_master',$new_arr);
            return 0;
        }else{
            $this->db->where('id',$this->input->post('id'));
            $this->db->update('tbl_salon_facility_master',$data);
            return 1;
        }
    } 
    public function get_all_facility(){ 
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->order_by('id','DESC');
        $result = $this->db->get('tbl_salon_facility_master');
        return $result->result();
    } 
    public function get_single_facility(){ 
        $this->db->where('id',$this->uri->segment(2));
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $result = $this->db->get('tbl_salon_facility_master');
        return $result->row();
    }
    public function get_unique_facility_name(){ 
        $this->db->where('facility_name',$this->input->post('facility_name'));
        if($this->input->post('id') != "0"){
            $this->db->where('id !=',$this->input->post('id'));
        }
        $this->db->where('is_deleted','0');
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $result = $this->db->get('tbl_salon_facility_master');
        echo $result->num_rows();
    } 
    
    public function update_product_order() {
        $order = $this->input->post('order');    
        $category = $this->input->post('category');    
        if (!empty($order)) {
            foreach ($order as $item) {
                if (isset($item['id']) && isset($item['order'])) {
                    $this->db->where('id', $item['id']);
                    $this->db->where('product_category', $category);
                    $this->db->where('is_deleted', '0');
                    $this->db->where('salon_id', $this->session->userdata('salon_id'));
                    $this->db->where('branch_id', $this->session->userdata('branch_id'));
                    $this->db->update('tbl_product', ['order' => $item['order']]);
                }
            }
            echo json_encode(['status' => 'success']);
        } else {
            echo json_encode(['status' => 'error', 'message' => 'No data received']);
        }
    }
    public function update_service_order() {
        $order = $this->input->post('order');    
        $category = $this->input->post('category');    
        if (!empty($order)) {
            foreach ($order as $item) {
                if (isset($item['id']) && isset($item['order'])) {
                    $this->db->where('id', $item['id']);
                    $this->db->where('gender', $item['gender']);
                    $this->db->where('is_deleted', '0');
                    $this->db->where('category', $category);
                    $this->db->where('salon_id', $this->session->userdata('salon_id'));
                    $this->db->where('branch_id', $this->session->userdata('branch_id'));
                    $this->db->update('tbl_salon_emp_service', ['order' => $item['order']]);
                }
            }
            echo json_encode(['status' => 'success']);
        } else {
            echo json_encode(['status' => 'error', 'message' => 'No data received']);
        }
    }

    public function set_automated_marketing($marketing_type) {
        if($marketing_type == '5'){ // for Product Marketing
            $selected_product = $this->input->post('selected_service_' . $marketing_type);      
            if (is_array($selected_product)) {
                $selected_products = implode(',', $selected_product); 
            } else {
                $selected_products = ''; 
            }

            $for_product = $this->input->post('service_option_' . $marketing_type) == '1' ? '1' : '0';
        
            $data = array(
                'salon_id'          => $this->session->userdata('salon_id'),
                'branch_id'         => $this->session->userdata('branch_id'),
                'marketing_type'    => $marketing_type,
                'discount_status'   => '1',
                'for_product'       => $for_product,
                'selected_product'  => $for_product == '1' ? $selected_products : null,
                'employee_product_incentive'  => $this->input->post('employee_product_incentive_' . $marketing_type),
                'discount_in'       => $this->input->post('discount_in_' . $marketing_type),
                'discount_type'     => $this->input->post('discount_type_' . $marketing_type),
                'discount_amount'   => $this->input->post('discount_amount_' . $marketing_type) != "" ? $this->input->post('discount_amount_' . $marketing_type) : null,
                'flexible_max'      => $this->input->post('discount_type_' . $marketing_type) == '1' ? $this->input->post('flexible_max_' . $marketing_type) : null,
                'flexible_min'      => $this->input->post('discount_type_' . $marketing_type) == '1' ? $this->input->post('flexible_min_' . $marketing_type) : null,
                'created_on'        => date('Y-m-d H:i:s')
            );
        }else{ // for Other Marketing
            $selected_service = $this->input->post('selected_service_' . $marketing_type);      
            if (is_array($selected_service)) {
                $selected_services = implode(',', $selected_service); 
            } else {
                $selected_services = ''; 
            }

            $for_service = $this->input->post('service_option_' . $marketing_type) == '1' ? '1' : '0';
        
            $data = array(
                'salon_id'          => $this->session->userdata('salon_id'),
                'branch_id'         => $this->session->userdata('branch_id'),
                'marketing_type'    => $marketing_type,
                'discount_status'   => '1',
                'for_service'       => $for_service,
                'selected_service'  => $for_service == '1' ? $selected_services : null,
                'discount_in'       => $this->input->post('discount_in_' . $marketing_type),
                'discount_type'     => $this->input->post('discount_type_' . $marketing_type),
                'discount_amount'   => $this->input->post('discount_amount_' . $marketing_type) != "" ? $this->input->post('discount_amount_' . $marketing_type) : null,
                'flexible_max'      => $this->input->post('discount_type_' . $marketing_type) == '1' ? $this->input->post('flexible_max_' . $marketing_type) : null,
                'flexible_min'      => $this->input->post('discount_type_' . $marketing_type) == '1' ? $this->input->post('flexible_min_' . $marketing_type) : null,
                'created_on'        => date('Y-m-d H:i:s')
            );
        }

        // echo '<pre>'; print_r($data); exit;
    
        $this->db->where('marketing_type', $marketing_type);
        $this->db->where('is_deleted', '0');
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $exist = $this->db->get('tbl_automated_marketing')->row();
        
        $this->set_onboarding_status('15');

        if(!empty($exist)){
            $this->db->where('id', $exist->id);
            $this->db->update('tbl_automated_marketing', $data);
            return 1; 
        }else{
            $this->db->insert('tbl_automated_marketing', $data);
            return 1; 
        }
    } 

    public function all_products($salon_id,$branch_id)
{
    $this->db->select('tbl_product.*, tbl_product_sub_category.product_sub_category as product_sub_category_name, tbl_product_category.product_category as productcategory');
    $this->db->join('tbl_product_category', 'tbl_product.product_category = tbl_product_category.id', 'left');
    $this->db->join('tbl_product_sub_category', 'tbl_product.product_subcategory = tbl_product_sub_category.id', 'left');
    $this->db->where('tbl_product.is_deleted', '0');
    $this->db->where('tbl_product.salon_id', $salon_id);
    $this->db->where('tbl_product.branch_id', $branch_id);    
    $this->db->order_by('CAST(tbl_product.order AS UNSIGNED)', 'asc');
    $result = $this->db->get('tbl_product');
    return $result->result();
}
    public function all_servics($salon_id,$branch_id)
{
    $this->db->select('tbl_salon_emp_service.*,tbl_admin_sub_category.sub_category_marathi,tbl_admin_sub_category.sub_category as sub_category_name,tbl_admin_service_category.sup_category, tbl_admin_service_category.sup_category_marathi');
    $this->db->join('tbl_admin_sub_category', 'tbl_salon_emp_service.sub_category = tbl_admin_sub_category.id');
    $this->db->join('tbl_admin_service_category', 'tbl_salon_emp_service.category = tbl_admin_service_category.id');
    $this->db->order_by('CAST(tbl_salon_emp_service.order AS UNSIGNED)', 'asc');
    $this->db->where('tbl_salon_emp_service.is_deleted', '0');
    $this->db->where('tbl_salon_emp_service.salon_id', $salon_id);
    $this->db->where('tbl_salon_emp_service.branch_id', $branch_id);
    $result = $this->db->get('tbl_salon_emp_service');
    return $result->result();
}

public function get_single_for_new() {
    $this->db->where('is_deleted', '0');
    $this->db->where('salon_id', $this->session->userdata('salon_id'));
    $this->db->where('branch_id', $this->session->userdata('branch_id'));
    $this->db->where('marketing_type', '0');
    $result = $this->db->get('tbl_automated_marketing');
    return $result->row();
}
public function get_single_for_lost($salon_id = '',$branch_id = '') { 
    if($salon_id == ''){
        $salon_id = $this->session->userdata('salon_id');
    }
    if($branch_id == ''){
        $branch_id = $this->session->userdata('branch_id');
    }

    $this->db->where('is_deleted', '0');
    $this->db->where('salon_id', $salon_id);
    $this->db->where('branch_id', $branch_id);
    $this->db->where('marketing_type', '2');
    $result = $this->db->get('tbl_automated_marketing');
    return $result->row();
}

public function get_single_for_regular() { 
    $this->db->where('is_deleted', '0');
    $this->db->where('salon_id', $this->session->userdata('salon_id'));
    $this->db->where('branch_id', $this->session->userdata('branch_id'));
    $this->db->where('marketing_type', '1');
    $result = $this->db->get('tbl_automated_marketing');
    return $result->row();
}

public function get_single_for_birthday ($salon_id = '',$branch_id = '') { 
    if($salon_id == ''){
        $salon_id = $this->session->userdata('salon_id');
    }
    if($branch_id == ''){
        $branch_id = $this->session->userdata('branch_id');
    }

    $this->db->where('is_deleted', '0');
    $this->db->where('salon_id', $salon_id);
    $this->db->where('branch_id', $branch_id);
    $this->db->where('marketing_type', '3');
    $result = $this->db->get('tbl_automated_marketing');
    return $result->row();
}
public function get_single_for_anniversary ($salon_id = '',$branch_id = '') { 
    if($salon_id == ''){
        $salon_id = $this->session->userdata('salon_id');
    }
    if($branch_id == ''){
        $branch_id = $this->session->userdata('branch_id');
    }

    $this->db->where('is_deleted', '0');
    $this->db->where('salon_id', $salon_id);
    $this->db->where('branch_id', $branch_id);
    $this->db->where('marketing_type', '4');
    $result = $this->db->get('tbl_automated_marketing');
    return $result->row();
}
public function get_single_for_product_marketing () { 
    $this->db->where('is_deleted', '0');
    $this->db->where('salon_id', $this->session->userdata('salon_id'));
    $this->db->where('branch_id', $this->session->userdata('branch_id'));
    $this->db->where('marketing_type', '5');
    $result = $this->db->get('tbl_automated_marketing');
    return $result->row();
}
public function set_marketing_discount($marketing_type,$discount_status){    
    $this->db->where('marketing_type', $marketing_type);
    $this->db->where('is_deleted', '0');
    $this->db->where('salon_id', $this->session->userdata('salon_id'));
    $this->db->where('branch_id', $this->session->userdata('branch_id'));
    $exist = $this->db->get('tbl_automated_marketing')->row();
    if(!empty($exist)){
        $this->db->where('id', $exist->id);
        $this->db->update('tbl_automated_marketing', array('discount_status'=>$discount_status));
        return '1';
    }else{
        return '0';
    }
}
public function get_level_incentive_setup(){
    $level = $this->input->post('level');
    $this->db->where('level',$level);
    $this->db->where('salon_id', $this->session->userdata('salon_id'));
    $this->db->where('branch_id', $this->session->userdata('branch_id'));
    $this->db->where('is_deleted', '0');
    $row = $this->db->get('tbl_salon_employee_incentive')->row();
    echo json_encode($row);
}
public function cancel_membership(){
    $this->db->where('id',$this->uri->segment(2));
    $this->db->where('salon_id', $this->session->userdata('salon_id'));
    $this->db->where('branch_id', $this->session->userdata('branch_id'));
    $single = $this->db->get('tbl_customer_membership_history')->row();
    if(!empty($single)){
        $update_data = array(
            'cancel_remark'     =>  $this->input->post('cancel_remark_' . $single->id),
            'cancelled_on'      =>  date('Y-m-d H:i:s'),
            'membership_status' =>  '2',
        );
        $this->db->where('id',$single->id);
        $this->db->update('tbl_customer_membership_history',$update_data);
        
        $customer_update_data = array(
            'membership_pkey'   =>  null,
            'membership_id'     =>  null,
            'membership_mode'   =>  null,
            'membership_price'  =>  null,
        );
        $this->db->where('id',$single->customer_id);
        $this->db->where('salon_id', $this->session->userdata('salon_id'));
        $this->db->where('branch_id', $this->session->userdata('branch_id'));
        $this->db->update('tbl_salon_customer',$customer_update_data);
        return true;
    }else{
        return false;
    }
}



public function get_all_assigned_payments(){
    $this->db->select('tbl_booking_payment_entry.*,
    tbl_salon_customer.full_name,tbl_salon_customer.customer_phone,
    tbl_customer_membership_history.employee_id as mem_sold_employee_id,tbl_customer_membership_history.membership_start,tbl_customer_membership_history.membership_end,tbl_customer_membership_history.membership_id,tbl_customer_membership_history.membership_price,tbl_customer_membership_history.is_gst_applicable as is_mem_gst_applicable,tbl_customer_membership_history.gst_amount as mem_gst_amount,tbl_customer_membership_history.salon_gst_rate as mem_salon_gst_rate,tbl_customer_membership_history.membership_status,tbl_customer_membership_history.payment_status as mem_payment_status,tbl_customer_membership_history.cancelled_on as mem_cancelled_on,
    tbl_customer_package_allocations.allocated_by as package_sold_employee_id,tbl_customer_package_allocations.package_start_date,tbl_customer_package_allocations.package_id,tbl_customer_package_allocations.package_end_date,tbl_customer_package_allocations.is_gst_applicable as is_package_gst_applicable,tbl_customer_package_allocations.gst_amount as package_gst_amount,tbl_customer_package_allocations.salon_gst_rate as package_salon_gst_rate,tbl_customer_package_allocations.is_booking_done as package_payment_status,tbl_customer_package_allocations.package_amount,tbl_customer_package_allocations.is_lapsed as package_status,
    tbl_memebership.membership_name, tbl_memebership.bg_color_input as mem_bg_color_input, tbl_memebership.bg_color as mem_bg_color, tbl_memebership.text_color_input as mem_text_color_input, tbl_memebership.text_color as mem_text_color,
    tbl_gift_card.gift_card_code,tbl_gift_card.gift_name, tbl_gift_card.bg_color_input as gc_bg_color_input, tbl_gift_card.bg_color as gc_bg_color, tbl_gift_card.text_color_input as gc_text_color_input, tbl_gift_card.text_color as gc_text_color,
    tbl_package.package_name, tbl_package.bg_color_input as package_bg_color_input, tbl_package.bg_color as package_bg_color, tbl_package.text_color_input as package_text_color_input, tbl_package.text_color as package_text_color');
    $this->db->join('tbl_salon_customer', 'tbl_salon_customer.id = tbl_booking_payment_entry.customer_id','left');
    $this->db->join('tbl_customer_membership_history', 'tbl_booking_payment_entry.id = tbl_customer_membership_history.payment_id','left');
    $this->db->join('tbl_customer_package_allocations', 'tbl_booking_payment_entry.id = tbl_customer_package_allocations.payment_id','left');
    $this->db->join('tbl_memebership', 'tbl_customer_membership_history.membership_id = tbl_memebership.id','left');
    $this->db->join('tbl_package', 'tbl_customer_package_allocations.package_id = tbl_package.id','left');
    $this->db->join('tbl_gift_card', 'tbl_booking_payment_entry.giftcard_id = tbl_gift_card.id','left');
    $this->db->where('tbl_booking_payment_entry.is_deleted', '0');
    $this->db->where_in('tbl_booking_payment_entry.type', ['1','4','3']);
    if(isset($_GET['type']) && $_GET['type'] != ""){
        $this->db->where('tbl_booking_payment_entry.type', $_GET['type']);
    }
    $this->db->order_by('tbl_booking_payment_entry.id', 'desc');
    $payments = $this->db->get('tbl_booking_payment_entry')->result();
    return $payments;
}

public function get_product_purchase_ajx(){
    $id = $this->input->post('id');
    $selected_id = $this->input->post('selectedProducts');
    $selected_product_stylist = $this->input->post('selected_product_stylist');
    $selected_id = !empty($selected_id) && $selected_id != "" ? array_values(array_unique($selected_id)) : [];
    $category = $this->input->post('category');
    $sub_category = $this->input->post('sub_category');
    $products = $this->get_all_products($category,$sub_category);
    $stylists = $this->get_salon_all_stylists();
    // echo '<pre>hiii: '; print_r($selected_id);
    ?>
        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12 form-group">
                <label>Select Stylist</label>
                <select class="form-control chosen-select" name="selected_product_stylist_<?=$id;?>" id="selected_product_stylist_<?=$id;?>">
                    <?php if(!empty($stylists)){ foreach($stylists as $data){ ?>
                    <option value="<?=$data->id;?>" <?php if($selected_product_stylist == $data->id){ echo 'selected'; } ?>><?=$data->full_name;?></option>
                    <?php }} ?>
                </select>
            </div>
            <div class="col-md-12 col-sm-12 col-xs-12 form-group">
                <label>Select Product</label>
                <select class="form-control chosen-select" name="selected_products_<?=$id;?>[]" id="selected_products_<?=$id;?>" multiple>
                    <?php if(!empty($products)){ foreach($products as $data){ ?>
                    <option value="<?=$data->id;?>" <?php if(in_array($data->id,$selected_id)){ echo 'selected'; }?>>[<?=$data->productcategory;?> -> <?=$data->product_sub_category_name;?>] <?=$data->product_name;?></option>
                    <?php }} ?>
                </select>
            </div>
            <div class="col-md-12 col-sm-12 col-xs-12 form-group">
                <button type="button" class="btn btn-primary" id="add_products_button_<?=$id;?>" onclick="setSelectedProducts(<?=$id;?>)">Save</button>
            </div>
        </div>
        <script>
            $(document).ready(function () {                        
                $(".chosen-select").chosen();
            });
        </script>
    <?php
}

public function get_product_purchase_rows_ajx(){
    $id = $this->input->post('id');
    $customer_id = $this->input->post('customer');
    $selected_id = $this->input->post('selectedProducts');
    $selected_product_stylist = $this->input->post('selected_product_stylist');
    $selected_id = !empty($selected_id) && $selected_id != "" ? array_values(array_unique($selected_id)) : [];
    if(!empty($selected_id)){
        $products = $this->get_all_products_array($selected_id);
        if(!empty($products)){
            $i = 1;
            $this->db->where('id',$selected_product_stylist);
            $stylist= $this->db->get('tbl_salon_employee')->row();
            foreach($products as $data){
                $product_stock = $this->get_product_stock_items($data->id);
                $selling_price = $data->selling_price;

                $product_discount_in = '';
                $product_discount_type = '';
                $product_discount_amount_value = '';
                $product_discount_row_id = '';
                $is_product_discount_applied = '0';

                $product_discount_text = '';
                $product_discount_amount = 0;
                $product_slab_increment = '5';
                $product_slab_consider = '';
                $product_min_slab = '';
                $product_max_slab = '';
                $employee_product_incentive = '';

                $product_applied_discount = $this->Salon_model->get_customer_product_applied_discount($customer_id,$data->id);
                if($product_applied_discount['is_discount_applied'] == '1'){
                    $is_product_discount_applied = '1';
                    $product_discount_row_id = $product_applied_discount['discount_row_id'];
                    $product_discount_type = $product_applied_discount['discount_type'];
                    $product_discount_in = $product_applied_discount['discount_in'];
                    $product_discount_amount_value = (float)$product_applied_discount['discount_amount'];
                    $product_min_slab = $product_applied_discount['min_flexible'];
                    $product_max_slab = $product_applied_discount['max_flexible'];
                    $employee_product_incentive = $product_applied_discount['employee_product_incentive'];
                    if($product_discount_type == '1'){    //Flexible
                        $customer_last_service_product_booking = $this->Salon_model->get_customer_last_product_booking($customer_id,$data->id);
                        if(!empty($customer_last_service_product_booking)){      
                            $prev_Applied_product_slab = $customer_last_service_product_booking->product_applied_flexible_slab;

                            if($prev_Applied_product_slab != ""){
                                $next_product_slab = $prev_Applied_product_slab + $product_slab_increment;
                            }else{
                                $next_product_slab = $product_min_slab + $product_slab_increment;
                            }

                            if($next_product_slab > $product_max_slab){
                                $product_slab_consider = $product_min_slab;
                            }else{
                                $product_slab_consider = $next_product_slab;
                            }
                        }else{
                            $product_slab_consider = $product_min_slab;
                        }

                        if($product_discount_in == '0'){  //percentage
                            $product_discount_amount = ((float)$product_slab_consider * (float)$selling_price) / 100;
                            $product_discount_text = '<br><p style="color:#01a900;font-size:10px;">Product Marketing Benefit Applied: ' . $product_slab_consider . '% Off</p>';
                        }elseif($product_discount_in == '1'){ //flat
                            $product_discount_amount = (float)$product_slab_consider;
                            $product_discount_text = '<br><p style="color:#01a900;font-size:10px;">Product Marketing Benefit Applied: Flat Rs. ' . $product_slab_consider . ' Off</p>';
                        }
                    }elseif($product_discount_type == '0'){   //Fixed
                        if($product_discount_in == '0'){  //percentage
                            $product_discount_amount = ((float)$product_discount_amount_value * (float)$selling_price) / 100;
                            $product_discount_text = '<br><p style="color:#01a900;font-size:10px;">Product Marketing Benefit Applied: ' . $product_discount_amount_value . '% Off</p>';
                        }elseif($product_discount_in == '1'){ //flat
                            $product_discount_amount = (float)$product_discount_amount_value;
                            $product_discount_text = '<br><p style="color:#01a900;font-size:10px;">Product Marketing Benefit Applied: Flat Rs. ' . $product_discount_amount_value . ' Off</p>';
                        }
                    }
                }

                $service_product_price_consider = $selling_price - $product_discount_amount;
                $original_product_price = $selling_price;
        ?>
                <tr>
                    <input type="hidden" name="is_discount_applied_<?=$data->id;?>" id="is_discount_applied_<?=$data->id;?>" value="<?=$is_product_discount_applied;?>">
                    <input type="hidden" name="product_original_price_<?=$data->id;?>" id="product_original_price_<?=$data->id;?>" value="<?=$original_product_price;?>">
                        
                    <input type="hidden" name="product_discount_in_<?=$data->id;?>" id="product_discount_in_<?=$data->id;?>" value="<?=$product_discount_in;?>">
                    <input type="hidden" name="product_discount_type_<?=$data->id;?>" id="product_discount_type_<?=$data->id;?>" value="<?=$product_discount_type;?>">
                    <input type="hidden" name="product_discount_value_<?=$data->id;?>" id="product_discount_value_<?=$data->id;?>" value="<?=$product_discount_amount_value;?>">

                    <input type="hidden" name="is_product_discount_applied_<?=$data->id;?>" id="is_product_discount_applied_<?=$data->id;?>" value="<?=$is_product_discount_applied;?>">
                    <input type="hidden" name="product_discount_row_id_<?=$data->id;?>" id="product_discount_row_id_<?=$data->id;?>" value="<?=$product_discount_row_id;?>">

                    <input type="hidden" name="product_discount_slab_min_<?=$data->id;?>" id="product_discount_slab_min_<?=$data->id;?>" value="<?=$product_min_slab;?>">
                    <input type="hidden" name="product_discount_slab_max_<?=$data->id;?>" id="product_discount_slab_max_<?=$data->id;?>" value="<?=$product_max_slab;?>">
                    <input type="hidden" name="product_slab_increment_<?=$data->id;?>" id="product_slab_increment_<?=$data->id;?>" value="<?=$product_slab_increment;?>">
                    <input type="hidden" name="product_applied_flexible_slab_<?=$data->id;?>" id="product_applied_flexible_slab_<?=$data->id;?>" value="<?=$product_slab_consider;?>">
                    <input type="hidden" name="product_received_discount_<?=$data->id;?>" id="product_received_discount_<?=$data->id;?>" value="<?=$product_discount_amount;?>">
                    <input type="hidden" name="employee_product_incentive_<?=$data->id;?>" id="employee_product_incentive_<?=$data->id;?>" value="<?=$employee_product_incentive;?>">                
                    <td><?=$i++;?></td>
                    <td><?=$data->product_name;?><br><small>(<?=$data->productcategory;?> -> <?=$data->product_sub_category_name;?>)</small><?=$product_discount_text;?></td>
                    <td>
                        <?php if($original_product_price != $service_product_price_consider){ ?>
                            <div class="service_price_title"  title="Offer Price"><b>Rs. <s><?=$original_product_price;?></s> <?=$service_product_price_consider;?></b></div>
                        <?php }else{ ?>
                            <div class="service_price_title" ><b>Rs. <?=$service_product_price_consider;?></b></div>
                        <?php } ?>
                    </td>
                    <td>
                        <div class="input-group plus_min" style="width: 10%;">
                            <span class="input-group-btn ">
                                <button style="background-color: #ff000029;border: none;margin-right: 2px !important;padding: 3px;margin: 0px;height: 30px;" type="button" class="btn btn-default btn-number" data-type="minus" onclick="decrementQuantity(<?=$data->id;?>,<?=$id;?>)" data-field="product_quantity_<?=$data->id;?>">
                                    <span style="line-height:0px;color: red;" class="glyphicon glyphicon-minus"></span>
                                </button>
                            </span>
                            <input type="number" class="" style="width: 50px;padding: 3px;line-height: 4px;height: 35px;text-align: center;" min='1' max="<?=$data->current_stock;?>" id="product_quantity_<?=$data->id;?>" name="product_quantity_<?=$data->id;?>" value="1">
                            <span class="input-group-btn">
                                <button style="background-color: #0080004a;border: none;margin-left: 2px !important; padding: 3px;margin: 0px;height: 30px;" type="button" class="btn btn-default btn-number" data-type="plus" onclick="incrementQuantity(<?=$data->id;?>,<?=$id;?>)" data-field="product_quantity_<?=$data->id;?>">
                                    <span style="line-height:0px;color: green;" class="glyphicon glyphicon-plus"></span>
                                </button>
                            </span>
                        </div>
                    </td>
                    <td id="single_product_total_amount_<?=$data->id;?>"></td>                                                                                     
                    <td><?=!empty($stylist) ? $stylist->full_name : '-'; ?></td>                                                                                     
                    <td>
                        <div class="single_booking_product_barcodes_div_<?=$data->id;?>">    
                            <select data-product-details="<?=$data->id;?>" class="form-control chosen-select all_selected_add_product_stocks_<?=$id;?> single_booking_product_barcodes_<?=$data->id;?>" id="used_product_barcodes_<?=$data->id;?>"  name="used_product_barcodes_<?=$data->id;?>[]" multiple onchange="validateBarcodeSelection(<?=$data->id;?>)">
                                <?php if(!empty($product_stock)){ foreach($product_stock as $product_stock_result){ ?>
                                <option value="<?=$product_stock_result->id;?>">
                                    <?=$product_stock_result->barcode_id; ?>
                                </option>
                                <?php }} ?>
                            </select>  
                            <?php if(empty($product_stock)){ ?>    
                            <label class="error" style="font-size: 10px;" id="stock_error_<?=$data->id;?>_<?=$id;?>">Stock not available</label>                                                  
                            <?php } ?>
                            <label class="error stock_selection_single_error" style="display:none;font-size: 10px;" id="stock_selection_single_error_<?=$data->id;?>_<?=$id;?>">Please enter payment amount!</label>
                            <label class="error" style="font-size: 10px;" id="stock_error_<?=$data->id;?>_<?=$id;?>"></label>
                        </div>
                    </td>                                                                                
                    <td><a title="Remove Product" onclick="RemoveProduct(<?=$data->id;?>,<?=$id;?>)"><i style="margin-bottom: 20px; color:red;" class="fas fa-times"></i></a></td>  
                </tr>
                <input type="hidden" name="single_product_total_amount_hidden_<?=$data->id;?>" id="single_product_total_amount_hidden_<?=$data->id;?>" value="0.00">
                <input type="hidden" name="single_product_id_<?=$data->id;?>" id="single_product_id_<?=$data->id;?>" value="<?=$data->id;?>">
                <input type="hidden" name="single_product_price_<?=$data->id;?>" id="single_product_price_<?=$data->id;?>" value="<?=$original_product_price;?>">
                <input type="hidden" name="single_product_stock_<?=$data->id;?>" id="single_product_stock_<?=$data->id;?>" value="<?=$data->current_stock;?>">
        <?php
            }
        ?>
        <script>
            $(document).ready(function () {                        
                $(".chosen-select").chosen();
            });
        </script>
        <?php
        }else{
        ?>            
            <tr><td colspan="7" class="error"><label class="error" style="font-size:10px;">Products not selected</label></td></tr>
            <tr><td colspan="7">
                <div style="text-align:center;">
                    <button type="button" title="Add Products" onclick="showProductPurchaseDiv(<?=$id;?>)" data-toggle="modal" data-target="#ProductPurchaseModal_<?=$id;?>" class="btn btn-primary">Add Products</button>
                </div>
            </td></tr>
        <?php
        }
    }else{
        ?>            
            <tr><td colspan="7" class="error"><label class="error" style="font-size:10px;">Products not selected</label></td></tr>
            <tr><td colspan="7">
                <div style="text-align:center;">
                    <button type="button" title="Add Products" onclick="showProductPurchaseDiv(<?=$id;?>)" data-toggle="modal" data-target="#ProductPurchaseModal_<?=$id;?>" class="btn btn-primary">Add Products</button>
                </div>
            </td></tr>
        <?php
    }
}


public function get_late_hr_div_ajx(){
    $date = date('Y-m-d',strtotime($this->input->post('booking_date')));
    if($date == date('Y-m-d')){
        if($this->input->post('booking_start') == ""){
            if($this->input->post('selected_slot_start_time') != ""){
                $booking_start = date('H:i:s',strtotime($this->input->post('selected_slot_start_time')));
            }else{
                $booking_start = '';
            }
        }else{
            $booking_start = date('H:i:s',strtotime($this->input->post('booking_start')));
        }
        $booking_rules = $this->get_booking_rules(); 
        if(!empty($booking_rules)){
            $is_emergency = $this->Salon_model->check_is_salon_close_for_period_setup_datewise($date);   
            if(!$is_emergency){
                $user_selected_service = $this->input->post('user_selected_service');
                if(!empty($user_selected_service)){
                    $working_hrs = $this->get_saloon_working_hrs($date);
                    $duration = $booking_rules->slot_time;

                    if($working_hrs['is_allowed'] == 1){
                        $minutes_early_booking = !empty($booking_rules->booking_time_range) ? $booking_rules->booking_time_range : 0;
                        if($this->input->post('source') == 'vendor_panel'){
                            $minutes_early_booking = 0;
                        }

                        $store_start = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['start']));
                        $store_end = date('Y-m-d H:i:s',strtotime($date.' '.$working_hrs['end']));
                        $one_hour_prior = date('Y-m-d H:i:s', strtotime($store_end . ' -1 hour'));
                        $current_time = date('Y-m-d H:i:s');
                        if($current_time <= $one_hour_prior){
                            $slots = $this->generateCommonTimePairs($date,$one_hour_prior,'23:59:59',$duration);
        ?>
                            <div class="row">
                                <div class="row timeslot_row" style="align-items: self-start;margin: 0px !important; height: auto !important; max-height: 100px; overflow: hidden; overflow-y: auto;">
                                <?php
                                    $allowed_slots = 0;
                                    if(!empty($slots)){
                                        $stylists = $this->get_salon_all_stylists();
                                        foreach ($slots as $slot) {
                                            $allowed_booking_datetime = date('Y-m-d H:i:s', strtotime($slot['from'] . ' - ' . $minutes_early_booking . ' minutes'));
                                            $current_date = date('Y-m-d H:i:s');
                                            if ($current_date <= $allowed_booking_datetime) {
                                                $selected_start = $this->input->post('selected_start') != "" ? date('Y-m-d H:i:s', strtotime($this->input->post('selected_start'))) : date('Y-m-d H:i:s', strtotime($slot['from']));
                                                if (date('Y-m-d H:i:s', strtotime($slot['from'])) >= $selected_start) {
                                                    $late_flag = false;
                                                    if(date('Y-m-d H:i:s', strtotime($slot['from'])) >= $store_end){
                                                        $late_flag = true;
                                                    }
                                                    $is_vacent = $this->check_slot_vacent_for_selected_services_late_hrs($slot['from'], $user_selected_service,$late_flag);
                                                    if($is_vacent){
                                                        $allowed_slots++;
                                                        $style = $is_vacent ? "#00800045" : "#ff000061";
                                ?>
                                                        <div class="single_timeslot" style="cursor:pointer;background-color:<?= $style ?>; ">
                                                            <input type="radio" style="cursor:pointer;" class="booking_start_time_slot" name="late_booking_start_time_slot" id="late_booking_start_time_slot_<?= str_replace([' ', '-', ':'], '_', $slot['from']); ?>" value="<?= date('h:i A', strtotime($slot['from'])); ?>">
                                                            <label style="cursor:pointer;font-size: 11px;"><?= date('h:i A', strtotime($slot['from'])); ?></label>
                                                        </div>
                                <?php               }
                                                }
                                            }
                                        }
                                    }
                                    if($allowed_slots == 0){
                                ?>
                                    <div style="width:100%;">
                                        <label style="font-size: 11px;color: red;margin-top: 40px;"> Slots not available </label>
                                    </div>
                                <?php
                                    }
                                ?>
                                </div>
                                <label for="late_booking_start_time_slot" id="late_booking_start_time_slot_error" style="display:none;" generated="true" class="error">Please select stylist!</label> 
                                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">               
                                    <label>Select Stylist <b class="required">*<b></label>
                                    <select class="form-control chosen-select" id="late_employee" name="late_employee">  
                                        <?php if(!empty($stylists)){ foreach($stylists as $employee_result){ ?>
                                            <option value="<?=$employee_result->id;?>" data-img-src="<?=base_url();?>admin_assets/images/employee_profile/<?=$employee_result->profile_photo;?>"><?=$employee_result->full_name;?></option>
                                        <?php }} ?>
                                    </select>
                                    <label for="late_employee" style="display:none;" generated="true" class="error">Please select stylist!</label> 
                                </div>
                            </div>  
                            <div class="row">  
                                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">  
                                    <button type="button" id="save_late_hr_stylist" class="btn btn-primary" onclick="saveLateHrStylist()">Save</button>
                                </div>  
                            </div>  
                            <script>
                                $(document).ready(function() {
                                    $(".chosen-select").chosen();
                                });
                            </script>
        <?php           }else{
                            echo '<div style="width:100%;text-align: center;">
                                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Late Hour Booking not available now. </label>
                                </div>';
                        }
                    }else{
                        echo '<div style="width:100%;text-align: center;">
                                <label style="font-size: 11px;color: red;margin-top: 40px;"> Salon is closed on selected date. </label>
                            </div>';
                    }
                }else{
                    echo '<div style="width:100%;text-align: center;">
                            <label style="font-size: 11px;color: red;margin-top: 40px;"> Please select services first. </label>
                        </div>';
                }
            }else{
                echo '<div style="width:100%;text-align: center;">
                        <label style="font-size: 11px;color: red;margin-top: 40px;"> Salon is closed on selected date because of some emergency. </label>
                    </div>';
            }
        }else{
            echo '<div style="width:100%;text-align: center;">
                    <label style="font-size: 11px;color: red;margin-top: 40px;"> Booking Rules not set. </label>
                </div>';
        }
    }else{
        echo '<div style="width:100%;text-align: center;">
                <label style="font-size: 11px;color: red;margin-top: 40px;"> Late Hour Bookings is not allowed for future dates. </label>
            </div>';
    }
}

public function get_salon_services_ajx(){
    $this->db->select('tbl_salon_emp_service.*,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_cat_name,tbl_admin_sub_category.sub_category_marathi');
    $this->db->where('tbl_salon_emp_service.is_deleted', '0');
    $this->db->where('tbl_salon_emp_service.status', '1');
    $this->db->where('tbl_salon_emp_service.gender', $this->input->post('gender'));
    $this->db->where('tbl_salon_emp_service.branch_id',$this->session->userdata('branch_id'));
    $this->db->where('tbl_salon_emp_service.salon_id',$this->session->userdata('salon_id'));
    $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
    $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
    $this->db->order_by('CAST(tbl_admin_service_category.order AS UNSIGNED)', 'asc');
    $this->db->order_by('CAST(tbl_salon_emp_service.order AS UNSIGNED)', 'asc');
    $result = $this->db->get('tbl_salon_emp_service');
    $result = $result->result(); 
    echo json_encode($result);
}
public function get_salon_products_ajx(){
    $this->db->select('tbl_product.*,tbl_product_category.product_category as product_category_name,tbl_product_category.product_category_marathi,tbl_product_sub_category.product_sub_category as product_sub_category_name');
    $this->db->join('tbl_product_sub_category','tbl_product_sub_category.id = tbl_product.product_subcategory');
    $this->db->join('tbl_product_category','tbl_product_category.id = tbl_product.product_category');
    $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
    $product_result = $this->db->get('tbl_product')->result();
    echo json_encode($product_result);
}
public function get_services_info_ajax(){
    $services_id = $this->input->post('services_id');
    $selected_products = $this->input->post('selected_products');
    $selected_stylists = $this->input->post('selected_stylists');
    $total = 0;
    $services_details = '';
    
    $this->db->select('tbl_salon_employee.*,tbl_emp_designation.designation as designation_name');
    $this->db->join('tbl_emp_designation','tbl_emp_designation.id = tbl_salon_employee.designation');
    $this->db->where('tbl_emp_designation.designation', 'Stylist');
    $this->db->where('tbl_salon_employee.is_deleted','0');
    $this->db->where('tbl_salon_employee.branch_id', $this->session->userdata('branch_id'));
    $this->db->where('tbl_salon_employee.salon_id', $this->session->userdata('salon_id'));
    $emps = $this->db->get('tbl_salon_employee')->result();
    
    if(!empty($services_id)){
        $this->db->select('tbl_salon_emp_service.*,tbl_admin_service_category.sup_category,tbl_admin_service_category.sup_category_marathi,tbl_admin_sub_category.sub_category as sub_cat_name,tbl_admin_sub_category.sub_category_marathi');
        $this->db->join('tbl_admin_service_category','tbl_admin_service_category.id = tbl_salon_emp_service.category');
        $this->db->join('tbl_admin_sub_category','tbl_admin_sub_category.id = tbl_salon_emp_service.sub_category');
        $this->db->where_in('tbl_salon_emp_service.id', $services_id);
        $this->db->where('tbl_salon_emp_service.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_salon_emp_service.salon_id', $this->session->userdata('salon_id'));
        $result = $this->db->get('tbl_salon_emp_service')->result();

        if (!empty($result)) {
            foreach($result as $row){
                $total += !empty($row->final_price) ? (float)$row->final_price : 0.00;
                $product = !empty($row->product) ? explode(',', $row->product) : [];
                
                $stylist_options = '';
                if(!empty($emps)){
                    $stylist_options .= '<div class="col-lg-11">
                        <label>Select Stylist<b class="require">*</b></label>
                        <select class="form-control service_stylists chosen-select" name="service_stylists_id_'.$row->id.'" id="service_stylists_id_'.$row->id.'" onchange="setStylistsSelections('.$row->id.')">';

                    foreach($emps as $emps_row){
                        $isSelected = isset($selected_stylists[$row->id]) && $emps_row->id == $selected_stylists[$row->id] ? 'selected' : '';
                        $stylist_options .= '<option value="'.$emps_row->id.'" '.$isSelected.'>' . $emps_row->full_name . '</option>';
                    }

                    $stylist_options .= '</select>
                    </div>';
                }

                $product_options = '';
                if(!empty($product)){
                    $this->db->select('tbl_product.*,tbl_product_category.product_category as product_category_name,tbl_product_category.product_category_marathi,tbl_product_sub_category.product_sub_category as product_sub_category_name');
                    $this->db->join('tbl_product_sub_category','tbl_product_sub_category.id = tbl_product.product_subcategory');
                    $this->db->join('tbl_product_category','tbl_product_category.id = tbl_product.product_category');
                    $this->db->where_in('tbl_product.id', $product);
                    $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
                    $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
                    $product_result = $this->db->get('tbl_product')->result();

                    if (!empty($product_result)) {
                        $product_options .= '
                        <div class="row">
                            <div class="col-md-12 col-sm-12 col-xs-12">
                                <div class="span-row">
                                    <div class="col-lg-11">
                                        <label>Select Service Products</label>
                                        <select class="form-control service_products chosen-select" name="service_products_id_'.$row->id.'[]" id="service_products_id_'.$row->id.'" multiple data-service-id="'.$row->id.'" onchange="setProductsSelections('.$row->id.')">';

                        foreach($product_result as $product_result_row){
                            $isSelected = isset($selected_products[$row->id]) && in_array($product_result_row->id, $selected_products[$row->id]) ? 'selected' : '';
                            $product_options .= '<option value="'.$product_result_row->id.'" '.$isSelected.'>'.$product_result_row->product_sub_category_name.' -> '.$product_result_row->product_name.' Rs. ' . $product_result_row->selling_price . '</option>';
                        }

                        $product_options .= '</select>
                                    </div>
                                </div>
                            </div>
                        </div>  ';
                    }
                    
                    if (!empty($product_result)) {
                        foreach($product_result as $product_result_row){
                            $product_options .= '<input type="hidden" value="'.$product_result_row->selling_price.'" id="service_product_price_'.$row->id.'_'.$product_result_row->id.'">';
                        }
                    }
                }

                $services_details .= 
                '<div class="row" id="selected_service_details_'.$row->id.'">
                    <div class="selected-servicesbox">
                        <div class="row">
                            <div class="col-md-2 col-sm-2 col-xs-2">
                                <span class="bottom-span ms-23">'.$row->sub_cat_name. ' | '.$row->sub_category_marathi. '</span><br>
                                <span class="left-span" style="font-size: 13px !important;"><b>' . $row->service_name.' | '. $row->service_name_marathi . '</b><br><small>'.$row->service_duration. ' Mins</small><br><b>Rs. '.$row->final_price. '</b></span>
                            </div>
                            <div class="col-md-10 col-sm-10 col-xs-10">
                                <div class="span-row">
                                    '.$stylist_options.'
                                </div>
                            </div>
                        </div>
                        '.$product_options.'   
                    </div>   
                </div>';
            }
        }
    }

    $response = array(
        'service_price'     => $total,
        'product_price'     => 0,
        'services_details'  => $services_details
    );

    header('Content-Type: application/json');
    echo json_encode($response);
}

public function get_products_info_ajax(){
    $selected_product_id = $this->input->post('selected_product_id');
    $total = 0;
    if(!empty($selected_product_id)){
        $this->db->select('tbl_product.*,tbl_product_category.product_category as product_category_name,tbl_product_category.product_category_marathi,tbl_product_sub_category.product_sub_category as product_sub_category_name');
        $this->db->join('tbl_product_sub_category','tbl_product_sub_category.id = tbl_product.product_subcategory');
        $this->db->join('tbl_product_category','tbl_product_category.id = tbl_product.product_category');
        $this->db->where_in('tbl_product.id', $selected_product_id);
        $this->db->where('tbl_product.branch_id', $this->session->userdata('branch_id'));
        $this->db->where('tbl_product.salon_id', $this->session->userdata('salon_id'));
        $product_result = $this->db->get('tbl_product')->result();

        if (!empty($product_result)) {
            foreach($product_result as $row){
                $total += !empty($row->selling_price) ? (float)$row->selling_price : 0.00;
            }
        }
    }
    echo $total;
}

public function counter_bill_generation(){
    // echo '<pre>'; print_r($_POST); exit();
    $is_counter = $this->input->post('is_counter');
    $all_payment_mode = $this->input->post('payment_mode');
    $all_transaction_id = $this->input->post('transaction_id');
    $all_mode_amount = $this->input->post('mode_amount');

    $payment_mode_multiple = !empty($all_payment_mode) ? implode(',',$all_payment_mode) : null;
    $payment_transaction_id_multiple = !empty($all_transaction_id) ? implode(',',$all_transaction_id) : null;
    $payment_amount_multiple = !empty($all_mode_amount) ? implode(',',$all_mode_amount) : null;
    
    $payment_mode = !empty($all_payment_mode) && count($all_payment_mode) == 1 ? $all_payment_mode[0] : null;
    $transaction_id = !empty($all_transaction_id) && count($all_transaction_id) == 1 ? $all_transaction_id[0] : null;

    $adjust_amount = $this->input->post('adjust_amount');
    $adjust_amount_remark = $this->input->post('adjust_amount_remark');
    $amount_round_type = $this->input->post('amount_round_type');
    $rounded_bill_amount = $this->input->post('rounded_bill_amount');

    $services = !empty($this->input->post('services_id')) ? $this->input->post('services_id') : [];
    $selected_product_id = !empty($this->input->post('selected_product_id')) ? $this->input->post('selected_product_id') : [];
    $all_products = [];
    for($i=0;$i<count($services);$i++){
        $products = !empty($this->input->post('service_products_id_' . $services[$i])) ? $this->input->post('service_products_id_' . $services[$i]) : [];
        for($j=0;$j<count($products);$j++){
            $all_products[] = $products[$j];
        }
    }
    $all_products = array_merge($all_products,$selected_product_id);

    $discount_in_per = $this->input->post('discount_in_per');
    $discount_in_rs = $this->input->post('discount_in_rs');

    $service_price = $this->input->post('service_price');
    $product_price = $this->input->post('product_price');
    $is_gst_applicable = $this->input->post('is_gst_applicable');
    $gst_amount = $this->input->post('gst_amount') != "" ? $this->input->post('gst_amount') : 0.00;
    $total_service_price = $service_price;
    $service_payable_amount = $total_service_price;
    $total_product_amount = $product_price;
    $product_payable_amount = $total_product_amount;

    $payable_amount = $service_payable_amount + $product_payable_amount;
    $booking_amount = $payable_amount - $discount_in_rs;
    $grand_total_amount = $booking_amount + $gst_amount;
    
    $this->db->where('id',$this->input->post('customer_name'));
    $single_customer = $this->db->get('tbl_salon_customer')->row();

    $booking_data = array(
        'branch_id' 			=> $this->session->userdata('branch_id'),
        'salon_id' 				=> $this->session->userdata('salon_id'),
        'stylist_id' 	        => $this->input->post('employee'),
        'customer_name' 		=> $this->input->post('customer_name'),
        'is_direct_billing'     => '1',
        'is_guest_booking' 		=> !empty($single_customer) ? $single_customer->is_guest : '0',
        'booking_type' 		    => '0',
        'is_membership_booking' => '0',
        'original_services'     => !empty($services) ? implode(',',$services) : null,
        'original_products' 	=> !empty($all_products) ? implode(',',$all_products) : null,
        'services' 		        => !empty($services) ? implode(',',$services) : null,
        'products' 		        => !empty($all_products) ? implode(',',$all_products) : null,
        'is_package_included'	=> '0',
        'is_membership_payment_included' 	=> '0',
        'total_service_price'   => $total_service_price,
        'total_product_price'   => $total_product_amount,
        'service_price'         => $service_payable_amount,
        'product_price'         => $product_payable_amount,
        'payble_price'          => $payable_amount,
        'coupon_discount_amount'=> '0',
        'reward_discount_amount'=> '0',
        'total_discount_amount' => $discount_in_rs,
        'used_rewards'          => '0',
        'booking_amount'        => $booking_amount,
        'gst_amount'            => $gst_amount,
        
        'is_gst_applicable'     => $this->input->post('is_gst_applicable') == '1' ? $this->input->post('is_gst_applicable') : '0',
        'salon_gst_no'          => $this->input->post('salon_gst_no'),
        'salon_gst_rate'        => $this->input->post('gst_rate'),

        'amount_to_paid'        => $grand_total_amount,
        'reminder' 				=> '3',
        'payment_method' 		=> '0',

        'note'   				=> null,
        'booking_date'          => date("Y-m-d",strtotime($this->input->post('service_date'))),
        'service_start_date'    => date("Y-m-d",strtotime($this->input->post('service_date'))),
        'service_start_time'    => null,
        'created_on'            => date("Y-m-d H:i:s"),
        'booking_status'        => '5',
        'is_counter'            => $this->input->post('employee') == "" ? $is_counter : null
    );
    // echo '<pre>'; print_r($booking_data); exit();

    $this->db->insert('tbl_new_booking', $booking_data);
    $booking_id = $this->db->insert_id();

    $order_counts = $this->get_saloon_branch_total_orders($this->session->userdata('salon_id'),$this->session->userdata('branch_id'));
    $branch_formatted = sprintf('%03d', $this->session->userdata('branch_id'));
    $salon_formatted = sprintf('%03d', $this->session->userdata('salon_id'));
    $count_formatted = sprintf('%04d', ($order_counts + 1));
    $invoice_no = $branch_formatted.$salon_formatted.$count_formatted;

    $update_data = array(
        'receipt_no'    =>  $invoice_no,
    );
    $this->db->where('id',$booking_id);
    $this->db->update('tbl_new_booking',$update_data);

    $this->db->where('id',$booking_id);
    $single = $this->db->get('tbl_new_booking')->row();
    $booking_data = array(
        'is_products_added'                 => !empty($selected_product_id) ? '1' : '0',
        'branch_id' 			            => $this->session->userdata('branch_id'),
        'salon_id' 				            => $this->session->userdata('salon_id'),
        'booking_id' 		                => $booking_id,
        'booking_date'                      => date('Y-m-d',strtotime($single->booking_date)),
        'customer_name' 		            => $this->input->post('customer_name'),
        'is_membership_booking'             => '0',        
        'membership_id' 		            => null,
        'is_membership_payment_included'    => '0',
        'membership_payment_amount'         =>  '0.00',
        'membership_history_id'             =>  null,
        'membership_discount_type'	        => null,
        'm_service_discount'	            => null,
        'm_product_discount' 	            => null,
        'm_service_discount_amount'	        => null,
        'm_product_discount_amount' 	    => null,

        'services' 		                    => !empty($services) ? implode(',',$services) : null,
        'products' 		                    => !empty($all_products) ? implode(',',$all_products) : null,

        'pacakge_id' 			            => null,
        'package_amount' 		            => '0.00',
        'used_package_type'                 => null,
        'package_rewards' 		            => null,
        'package_allocation_id'             => null,
        'is_package_included' 	            => '0',
        'selected_coupon_id'                =>  null,

        'total_service_price'               => $total_service_price,
        'total_product_price'               => $total_product_amount,
        'service_price'                     => $service_payable_amount,
        'product_price'                     => $product_payable_amount,
        'payble_price'                      => $payable_amount,
        'coupon_discount_amount'            => '0',        
        'marketing_service_discount_amount' => '0.00',
        'marketing_product_discount_amount' => '0.00',
        'reward_discount_amount'            => '0',
        'extra_discount_amount'             =>  $discount_in_rs,
        'extra_discount_in_per'             =>  $discount_in_per,
        'total_discount_amount'             => $discount_in_rs,
        'used_rewards'                      => '0',
        'booking_amount'                    => $booking_amount,
        'gst_amount'                        => $gst_amount,
        
        'is_gst_applicable'                 => $this->input->post('is_gst_applicable') == '1' ? $this->input->post('is_gst_applicable') : '0',
        'salon_gst_no'                      => $this->input->post('salon_gst_no'),
        'salon_gst_rate'                    => $this->input->post('gst_rate'),

        'amount_to_paid'                    => $grand_total_amount,
        'adjust_amount'                     => $adjust_amount,
        'adjust_amount_remark'              => $adjust_amount_remark,
        'amount_round_type'                 => $amount_round_type,
        'rounded_bill_amount'               => $rounded_bill_amount,
        'total_due_while_bill'              => $rounded_bill_amount + $this->input->post('previous_due_amount'),
        'actual_paid_amount'                => $this->input->post('actual_paid_amount'),
        'customer_pending_amount'           => $this->input->post('new_due_amount'),

        'is_giftcard_applied' 	            => '0',
        'applied_giftcard_id'               => null,
        'applied_giftcard_owner_id'         => null,
        'gift_discount'                     => '',
        'is_new_giftcard_applied'           => '',
        'giftcard_redemption_id'            =>  '',
        'payment_date'                      => date("Y-m-d",strtotime($this->input->post('service_date'))),

        'payment_mode'                      => $payment_mode,
        'transaction_id'                    => $transaction_id,
        
        'payment_mode_multiple'             => $payment_mode_multiple,
        'payment_amount_multiple'           => $payment_amount_multiple,
        'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
        
        'is_offer_applied' 	                => '0',
        'applied_offer_id'                  =>  '',
        'offer_discount_amount'             =>  '0.00',
        'payment_status'                    => '1',
        'created_on'                        => date("Y-m-d H:i:s"),
        'is_counter'                        => $this->input->post('employee') == "" ? $is_counter : null
    );
    $this->db->insert('tbl_service_payment', $booking_data);
    $booking_payment_id = $this->db->insert_id();

    $receipt_data = array(
        'receipt_no'   => $single->receipt_no.'-'.$booking_payment_id,
    );
    $this->db->where('id',$booking_payment_id);
    $this->db->update('tbl_service_payment',$receipt_data);

    if($services != "" && is_array($services) && !empty($services)){
        for($i=0;$i<count($services);$i++){
            $service_id = $services[$i];
            $this->db->where('tbl_salon_emp_service.branch_id',$this->session->userdata('branch_id'));
            $this->db->where('tbl_salon_emp_service.salon_id',$this->session->userdata('salon_id'));
            $this->db->where('tbl_salon_emp_service.id',$service_id);
            $this->db->where('tbl_salon_emp_service.is_deleted','0');
            $single_service = $this->db->get('tbl_salon_emp_service');
            $single_service = $single_service->row();
            if(!empty($single_service)){
                $service_stylist_id = $this->input->post('employee');
                $service_stylist_id = $this->input->post('service_stylists_id_' . $services[$i]) != "" ? $this->input->post('service_stylists_id_' . $services[$i]) : $service_stylist_id;

                $products_single = !empty($this->input->post('service_products_id_' . $services[$i])) ? $this->input->post('service_products_id_' . $services[$i]) : [];
                $service_price = $single_service->final_price != "" ? (float)$single_service->final_price : 0.00;

                $original_service_price = $single_service->final_price != "" ? (float)$single_service->final_price : 0.00;
                $is_service_offer_applied = '0';
                $is_service_discount_applied = '0';
                $this->db->where('tbl_salon_employee.branch_id',$this->session->userdata('branch_id'));
                $this->db->where('tbl_salon_employee.salon_id',$this->session->userdata('salon_id'));
                $this->db->where('tbl_salon_employee.id',$service_stylist_id);
                $this->db->where('tbl_salon_employee.is_deleted','0');
                $single_stylist = $this->db->get('tbl_salon_employee');
                $single_stylist = $single_stylist->row();
                $stylist_shift = !empty($single_stylist) ? $single_stylist->shift : '';
                $stylist_shift_type = !empty($single_stylist) ? $single_stylist->shift_type : '';

                $service_from = isset(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[0]) ? explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[0] : '';
                $service_to = isset(explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[1]) ? explode('@@@',$this->input->post('service_stylist_timeslot_hidden_' . $services[$i]))[1] : '';
                
                $discount_share_membership_amount = 0;
                $discount_share_giftcard_amount = 0 ;
                $discount_share_offer_amount = 0;
                $calculated_discount_share_offer_amount = 0;                

                $discount_share_coupon_amount = 0;
                $discount_share_reward_amount = 0;
                $discount_share_extra_amount = 0;
                $received_total = $total_product_amount + $total_service_price;
                if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                    $price_share_in_total = (float)(($service_price/$received_total) * 100);
                    $discount_share_extra_amount = (float)(($discount_in_rs * $price_share_in_total) / 100);
                }

                $total_single_service_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_offer_amount + $discount_share_reward_amount + $discount_share_giftcard_amount + $discount_share_extra_amount;
                $single_service_discounted_amount = $service_price - $total_single_service_discount;

                $stylist_data = array(
                    'booking_id' 		    => $booking_id,
                    'branch_id' 			=> $this->session->userdata('branch_id'),
                    'salon_id' 				=> $this->session->userdata('salon_id'),
                    'customer_name' 		=> $this->input->post('customer_name'),
                    'service_added_from'	=> '0',
                    'service_id'     		=> $services[$i],
                    'service_price'     	=> $service_price,
                    'original_service_price'=> $original_service_price,
                    'product_ids'     		=> !empty($products_single) ? implode(',',$products_single) : null,
                    'product_ids_after_bill'=> !empty($products_single) ? implode(',',$products_single) : null,
                    'stylist_id'      		=> $service_stylist_id,  
                    'stylist_id_after_bill' => $service_stylist_id,    
                    'booking_shift_id'      => $stylist_shift,
                    'booking_shift_type'    => $stylist_shift_type,
                    'service_date'     		=> date("Y-m-d",strtotime($this->input->post('service_date'))),
                    'service_from'    	    => null,
                    'service_to'      	    => null,
                    'created_on'            => date("Y-m-d H:i:s"),
                    'is_service_offer_applied'     	                => $is_service_offer_applied,
                    'is_service_discount_applied'                   => $is_service_discount_applied,
                    'payment_status'        => '1',
                    'payment_date'          => date("Y-m-d",strtotime($this->input->post('service_date'))),
                    'payment_mode'          => $payment_mode,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                    'service_status'        => '1',
                    'booking_payment_id'    => $booking_payment_id,   
                    'completed_on'          => date("Y-m-d",strtotime($this->input->post('service_date'))),

                    'received_coupon_discount_while_booking'    =>  $discount_share_coupon_amount,
                    'received_reward_discount_while_booking'    =>  $discount_share_reward_amount,
                    'received_extra_discount_while_booking'     =>  $discount_share_extra_amount,
                    'received_membership_discount_while_booking'=>  $discount_share_membership_amount,
                    'received_giftcard_discount_while_booking'  =>  $discount_share_giftcard_amount,
                    'received_discount_amount_while_booking'    =>  $total_single_service_discount,
                    'service_discounted_price_while_booking'    =>  $single_service_discounted_amount,
        
                    'received_discount_amount_while_bill'     	=> $total_single_service_discount,
                    'received_coupon_discount_while_bill'     	=> $discount_share_coupon_amount,
                    'received_reward_discount_while_bill'     	=> $discount_share_reward_amount,
                    'received_extra_discount_while_bill'     	=> $discount_share_extra_amount,
                    'received_membership_discount_while_bill'   => $discount_share_membership_amount,
                    'received_giftcard_discount_while_bill'     => $discount_share_giftcard_amount,
                    'service_discounted_price_while_bill'     	=> $single_service_discounted_amount,

                    'applied_offer_id'                          => null,
                    'service_offer_discount'                    => '',
                    'service_offer_discount_type'               => '',
                    'service_offer_discount_amount_while_bill'  => $discount_share_offer_amount,
                );
                $this->db->insert('tbl_booking_services_details', $stylist_data);
                $booking_service_details_id = $this->db->insert_id();

                if($products_single != "" && is_array($products_single) && !empty($products_single)){
                    for($j=0;$j<count($products_single);$j++){
                        $product_id = $products_single[$j];
                        $this->db->where('tbl_product.branch_id',$this->session->userdata('branch_id'));
                        $this->db->where('tbl_product.salon_id',$this->session->userdata('salon_id'));
                        $this->db->where('tbl_product.id',$product_id);
                        $this->db->where('tbl_product.is_deleted','0');
                        $single_product = $this->db->get('tbl_product');
                        $single_product = $single_product->row();
                        if(!empty($single_product)){
                            $single_incentive_amt = 0;
                            $product_price = $single_product->selling_price;        
                            $product_original_price = $single_product->selling_price;

                            $product_quantity = 1; 
                            $total_single_product_price = $product_price * $product_quantity; 

                            //calculate single product incentive
                            $product_discount_row_id = '';
                            $is_product_discount_applied = '0';
                            $employee_product_incentive = '';

                            $product_applied_discount = $this->Salon_model->get_customer_product_applied_discount($this->input->post('id'),$single_product->id);
                            if($product_applied_discount['is_discount_applied'] == '1'){
                                $product_discount_row_id = $product_applied_discount['discount_row_id'];
                                $employee_product_incentive = $product_applied_discount['employee_product_incentive'];
                            }

                            $single_incentive_rate = $employee_product_incentive != "" ? (float)$employee_product_incentive : 0.00;
                            $single_incentive_amt = $product_quantity * $single_incentive_rate;
                            
                            
                            $discount_share_coupon_amount = 0;
                            $discount_share_reward_amount = 0;
                            $discount_share_extra_amount = 0;
                            $discount_share_membership_amount = 0;
                            $discount_share_giftcard_amount = 0 ;
                            $received_total = $total_product_amount + $total_service_price;
                            if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                                $price_share_in_total = (float)(($product_price/$received_total) * 100);
                                $discount_share_extra_amount = (float)(($discount_in_rs * $price_share_in_total) / 100);
                            }                            

                            $total_single_product_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_reward_amount + $discount_share_giftcard_amount + $discount_share_extra_amount;
                            $single_product_discounted_amount = $product_price - $total_single_product_discount;

                            $service_product_data = array(
                                'booking_service_details_id'  => $booking_service_details_id,
                                'booking_id' 		    => $booking_id,
                                'branch_id' 			=> $this->session->userdata('branch_id'),
                                'salon_id' 				=> $this->session->userdata('salon_id'),
                                'customer_name' 		=> $this->input->post('customer_name'),
                                'product_added_from'	=> '0',
                                'service_id'     		=> $services[$i],
                                'product_id'     		=> $products_single[$j],
                                'product_price'     	=> $product_price,
                                'product_original_price'=> $product_original_price,
                                'created_on'            => date("Y-m-d H:i:s"),                      
                                'is_product_discount_applied'                   => $is_product_discount_applied,
                                'payment_date'          => date("Y-m-d",strtotime($this->input->post('service_date'))),
                                
                                'payment_mode'          => $payment_mode,
                                
                                'payment_mode_multiple'             => $payment_mode_multiple,
                                'payment_amount_multiple'           => $payment_amount_multiple,
                                'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                                'payment_status'        => '1',
                                'booking_payment_id'    => $booking_payment_id,                                
                            
                                'product_discount_row_id'               => $product_discount_row_id,
                                'stylist_incentive_for_single_product'  => $employee_product_incentive,
                                'stylist_incentive_amount'              => $single_incentive_amt,
                                'used_barcode_id'                       => null,
        
                                'received_discount_amount_while_bill'     	=> $total_single_product_discount,
                                'received_coupon_discount_while_bill'     	=> $discount_share_coupon_amount,
                                'received_reward_discount_while_bill'     	=> $discount_share_reward_amount,
                                'received_extra_discount_while_bill'     	=> $discount_share_extra_amount,
                                'received_membership_discount_while_bill'   => $discount_share_membership_amount,
                                'product_discounted_price_while_bill'     	=> $single_product_discounted_amount,
                                'received_giftcard_discount_while_bill'     => $discount_share_giftcard_amount,

                                'received_coupon_discount_while_booking'    =>  $discount_share_coupon_amount,
                                'received_reward_discount_while_booking'    =>  $discount_share_reward_amount,
                                'received_extra_discount_while_booking'     =>  $discount_share_extra_amount,
                                'received_membership_discount_while_booking'=>  $discount_share_membership_amount,
                                'received_giftcard_discount_while_booking'  =>  $discount_share_giftcard_amount,
                                'received_discount_amount_while_booking'    =>  $total_single_product_discount,
                                'product_discounted_price_while_booking'    =>  $single_product_discounted_amount,
                            );
                            $this->db->insert('tbl_booking_services_products_details', $service_product_data);
                            $booking_product_details_id = $this->db->insert_id();

                            $product_single_details = $this->get_product_details($products_single[$j]);
                            if(!empty($product_single_details)){         
                                $opening = $product_single_details->current_stock;                              
                                $quantity = 1;                             
                                $closing = $opening - $quantity;                         
                                $outward_data = array(
                                    'branch_id'         => $this->session->userdata('branch_id'),
                                    'salon_id'          => $this->session->userdata('salon_id'),
                                    'booking_id'        => $booking_id,
                                    'booking_type'      => '0',
                                    'booking_service_details_id'=> $booking_service_details_id,
                                    'booking_product_details_id'=> $booking_product_details_id,
                                    'booking_service_id'        => $services[$i],
                                    'booking_product_id'        => $product_single_details->id,
                                    'opening_stock'     => $opening,
                                    'closing_stock'     => $closing,
                                    'quantity'          => $quantity,
                                    'purchase_price'    => $product_price,
                                    'entry_by'          => $this->session->userdata('branch_id'),
                                    'created_on'        => date("Y-m-d H:i:s")
                                );
                                $this->db->insert('tbl_product_outward_while_booking_details', $outward_data);
                                $stock_outward_id = $this->db->insert_id();

                                $this->db->where('id', $product_single_details->id);
                                $this->db->where('branch_id', $this->session->userdata('branch_id'));
                                $this->db->where('salon_id', $this->session->userdata('salon_id'));
                                $this->db->update('tbl_product', array('current_stock'=>(int)$closing));

                                if($used_barcode != ""){
                                    $barcode_entry = array(
                                        'used_on'           => date('Y-m-d H:i:s',strtotime($this->input->post('service_date'))),
                                        'used_in_booking_id'=> $booking_id,
                                        'product_status'    => '1',
                                        'booking_type'      => '0',
                                        'stock_outward_while_booking_id'      => $stock_outward_id,
                                    );
                                    $this->db->where('id', $used_barcode);
                                    $this->db->where('product_name', $product_single_details->id);
                                    $this->db->update('tbl_product_barcode', $barcode_entry);      
                                }                                            
                            }
                            
                            if($single_incentive_amt > 0){
                                $incentive_data = array(
                                    'incentive_type'  => '1',
                                    'employee_id'     =>  $service_stylist_id,
                                    'branch_id'       =>  $this->session->userdata('branch_id'),
                                    'salon_id'        =>  $this->session->userdata('salon_id'),
                                    'booking_id'      =>  $booking_id,
                                    'booking_payment_id'    =>  $booking_payment_id,
                                    'booking_type'    =>  '0',
                                    'products' 		  =>  $products_single[$j],
                                    'incentive_amount'=>  $single_incentive_amt,
                                    'incentive_added_on'    => date("Y-m-d H:i:s"),
                                    'created_on'            => date("Y-m-d H:i:s")
                                );
                                $this->db->insert('tbl_employee_incentive_entry',$incentive_data);
                            }
                        }
                    }
                }
            }
        }
    }

    //new product added billing start        
    $incentive_amount = 0;        
    if($selected_product_id != "" && is_array($selected_product_id) && !empty($selected_product_id)){
        for($i=0;$i<count($selected_product_id);$i++){
            $this->db->where('id',$selected_product_id[$i]);
            $single_product = $this->db->get('tbl_product')->row();
            if(!empty($single_product)){
                $categoryID = $single_product->product_category;
                $productID = $single_product->id;
                $product_price = $single_product->selling_price;
                $product_original_price = $single_product->selling_price;
                $product_quantity = 1; 
                $total_single_product_price = $product_price * $product_quantity; 

                //calculate single product incentive
                $product_discount_row_id = '';
                $is_product_discount_applied = '0';
                $employee_product_incentive = '';

                $product_applied_discount = $this->Salon_model->get_customer_product_applied_discount($this->input->post('customer_name'),$single_product->id);
                if($product_applied_discount['is_discount_applied'] == '1'){
                    $product_discount_row_id = $product_applied_discount['discount_row_id'];
                    $employee_product_incentive = $product_applied_discount['employee_product_incentive'];
                }

                $single_incentive_rate = $employee_product_incentive != "" ? (float)$employee_product_incentive : 0.00;
                $single_incentive_amt = $product_quantity * $single_incentive_rate;
                
                $discount_share_coupon_amount = 0;
                $discount_share_reward_amount = 0;
                $discount_share_extra_amount = 0;
                $discount_share_giftcard_amount = 0 ;
                $discount_share_membership_amount = 0;
                $received_total = $total_product_amount + $total_service_price;
                if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                    $price_share_in_total = (float)(($total_single_product_price/$received_total) * 100);
                    $discount_share_extra_amount = (float)(($discount_in_rs * $price_share_in_total) / 100);
                }

                $discount_share_membership_amount_per_product = $discount_share_membership_amount/$product_quantity;
                $discount_share_coupon_amount_per_product = $discount_share_coupon_amount/$product_quantity;
                $discount_share_reward_amount_per_product = $discount_share_reward_amount/$product_quantity;
                $discount_share_extra_amount_per_product = $discount_share_extra_amount/$product_quantity;
                $discount_share_giftcard_amount_per_product = $discount_share_giftcard_amount/$product_quantity;

                $received_discount_amount_per_product_while_booking = $discount_share_membership_amount_per_product + $discount_share_coupon_amount_per_product + $discount_share_reward_amount_per_product + $discount_share_extra_amount_per_product + $discount_share_giftcard_amount_per_product;
                
                $total_single_product_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_reward_amount + $discount_share_giftcard_amount + $discount_share_extra_amount;
                $single_product_discounted_amount = $total_single_product_price - $total_single_product_discount;

                $stylist_data = array(
                    'booking_id' 		    => $booking_id,
                    'branch_id' 			=> $this->session->userdata('branch_id'),
                    'salon_id' 				=> $this->session->userdata('salon_id'),
                    'customer_name' 		=> $this->input->post('customer_name'),
                    'stylist_id' 		    => $this->input->post('employee'),
                    'category_id'     		=> $categoryID,
                    'product_id'     		=> $productID,
                    'single_product_price'  => $product_price,
                    'original_single_product_price' => $product_original_price,
                    'quantity'              => $product_quantity,
                    'created_on'            => date("Y-m-d H:i:s"),
                    'booking_date'          => date("Y-m-d",strtotime($this->input->post('service_date'))),
                    'is_discount_applied'                           => $is_product_discount_applied,
                    'product_received_discount'     	            => '0',       

                    'payment_date'          => date('Y-m-d',strtotime($single->booking_date)),                    

                    'payment_mode'          => $payment_mode,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                    'payment_status'        => '1',
                    'booking_payment_id'    => $booking_payment_id,                         
                    'quantity_after_bill'   => $product_quantity,                            
                    'used_barcodes'         => null,       
                            
                    'stylist_after_bill'    => $this->input->post('employee'),           
                            
                    'product_discount_row_id'               => $product_discount_row_id,
                    'stylist_incentive_for_single_product'  => $employee_product_incentive,
                    'stylist_incentive_amount'              => $single_incentive_amt,   
                    
                    'total_product_price'           => $total_single_product_price,
                    'total_product_price_after_bill'=> $total_single_product_price,
                    
                    'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                    'received_discount_amount_per_product_while_booking' => $received_discount_amount_per_product_while_booking,
                    'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                    'received_coupon_discount_while_booking'        => $discount_share_coupon_amount,
                    'received_reward_discount_while_booking'        => $discount_share_reward_amount_per_product,
                    'received_giftcard_discount_while_booking'      => $discount_share_giftcard_amount,
                    'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,
                    
                    'received_discount_amount_while_bill'     	    => $total_single_product_discount,
                    'received_discount_amount_per_product_while_bill'    => $received_discount_amount_per_product_while_booking,
                    'received_membership_discount_while_bill'       => $discount_share_membership_amount,
                    'received_coupon_discount_while_bill'           => $discount_share_coupon_amount,
                    'received_reward_discount_while_bill'           => $discount_share_reward_amount_per_product,
                    'received_giftcard_discount_while_bill'         => $discount_share_giftcard_amount,
                    'product_discounted_price_while_bill'     	    => $single_product_discounted_amount, 
                );
                $this->db->insert('tbl_only_product_booking_details', $stylist_data);
                $only_product_details_id = $this->db->insert_id();  
                
                $product_single_details = $this->get_product_details($productID);
                if(!empty($product_single_details)){         
                    $opening = $product_single_details->current_stock;                              
                    $quantity = $product_quantity;                             
                    $closing = $opening - $quantity;                         
                    $outward_data = array(
                        'branch_id'         => $this->session->userdata('branch_id'),
                        'salon_id'          => $this->session->userdata('salon_id'),
                        'booking_id'        => $booking_id,
                        'booking_type'      => '0',
                        'booking_service_details_id'=> null,
                        'booking_product_details_id'=> $only_product_details_id,
                        'booking_service_id'        => null,
                        'booking_product_id'        => $product_single_details->id,
                        'opening_stock'     => $opening,
                        'closing_stock'     => $closing,
                        'quantity'          => $quantity,
                        'purchase_price'    => $product_price,
                        'entry_by'          => $this->session->userdata('branch_id'),
                        'created_on'        => date("Y-m-d H:i:s")
                    );
                    $this->db->insert('tbl_product_outward_while_booking_details', $outward_data);
                    $stock_outward_id = $this->db->insert_id();

                    $this->db->where('id', $product_single_details->id);
                    $this->db->where('branch_id', $this->session->userdata('branch_id'));
                    $this->db->where('salon_id', $this->session->userdata('salon_id'));
                    $this->db->update('tbl_product', array('current_stock'=>(int)$closing));

                    if($used_barcode != ""){
                        $barcode_entry = array(
                            'used_on'           => date('Y-m-d H:i:s',strtotime($this->input->post('service_date'))),
                            'used_in_booking_id'=> $booking_id,
                            'product_status'    => '1',
                            'booking_type'      => '0',
                            'stock_outward_while_booking_id'      => $stock_outward_id,
                        );
                        $this->db->where('id', $used_barcode);
                        $this->db->where('product_name', $product_single_details->id);
                        $this->db->update('tbl_product_barcode', $barcode_entry);      
                    }                                            
                }
                
                $incentive_amount = (float)$incentive_amount + (float)$single_incentive_amt;
            }
        }
    }

    // stylist_incentive_setup
    if($incentive_amount > 0 && $this->input->post('employee') != ""){
        $incentive_data = array(
            'incentive_type'  => '1',
            'employee_id'     =>  $this->input->post('employee'),
            'branch_id'       =>  $this->session->userdata('branch_id'),
            'salon_id'        =>  $this->session->userdata('salon_id'),
            'booking_id'      =>  $booking_id,
            'booking_payment_id'    =>  $booking_payment_id,
            'booking_type'    => '0',
            'products' 		  => !empty($selected_product_id) ? implode(',',$selected_product_id) : '',
            'incentive_amount'=>  $incentive_amount,
            'incentive_added_on'    => date("Y-m-d H:i:s"),
            'created_on'            => date("Y-m-d H:i:s")
        );
        $this->db->insert('tbl_employee_incentive_entry',$incentive_data);
    }
    //new product added billing end    

    $this->db->where('id',$this->input->post('customer_name'));
    $customer = $this->db->get('tbl_salon_customer')->row();
    $pre_total_bill_amount = (float)$customer->total_bill_amount;
    $pre_total_paid_amount = (float)$customer->total_paid_amount;
    $pre_current_pending_amount = (float)$customer->current_pending_amount;
    
    $actual_paid_amount = $this->input->post('actual_paid_amount');

    $new_total_bill_amount = $pre_total_bill_amount + (float)$rounded_bill_amount;
    $new_total_paid_amount = $pre_total_paid_amount + (float)$actual_paid_amount;

    $new_current_pending_amount = ((float)$rounded_bill_amount + (float)$pre_current_pending_amount) - (float)$actual_paid_amount;

    $payment_entry_data = array(
        'customer_id'     =>  $this->input->post('customer_name'),
        'branch_id'       =>  $this->session->userdata('branch_id'),
        'salon_id'        =>  $this->session->userdata('salon_id'),
        'booking_id'      =>  $booking_id,
        'paid_amount'     =>  $actual_paid_amount,
        'type' 		                 => '0',
        'remark' 	                 => 'Payment for counter bill generation',
        'opening_pending_amount'     =>  $pre_current_pending_amount,
        'closing_pending_amount'     =>  $new_current_pending_amount,                    
        'total_bill_amount'          =>  $pre_total_bill_amount,
        'total_paid_amount'          =>  $pre_total_paid_amount,
        'booking_payment_amount'     =>  $rounded_bill_amount,
        'booking_payment_id'         =>  $booking_payment_id,
        'payment_date'    => date("Y-m-d",strtotime($this->input->post('service_date'))),
        
        'payment_mode'          => $payment_mode,
        'transaction_id'        => $transaction_id,
        
        'payment_mode_multiple'             => $payment_mode_multiple,
        'payment_amount_multiple'           => $payment_amount_multiple,
        'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
        'is_counter'            => $this->input->post('employee') == "" ? $is_counter : null,

        'created_on'      =>  date("Y-m-d H:i:s")
    );
    $this->db->insert('tbl_booking_payment_entry',$payment_entry_data);
    
    $payment_data = array(
        'total_bill_amount'         =>  $new_total_bill_amount,
        'total_paid_amount'         =>  $new_total_paid_amount,
        'current_pending_amount'    =>  number_format((float)($new_current_pending_amount), 2, '.', ''),
    );
    $this->db->where('id',$this->input->post('customer_name'));
    $this->db->update('tbl_salon_customer',$payment_data);     
                
    $update_data = array(
        'payment_date'          => date("Y-m-d",strtotime($this->input->post('service_date'))),
        
        'payment_mode'          => $payment_mode,
        
        'payment_mode_multiple'             => $payment_mode_multiple,
        'payment_amount_multiple'           => $payment_amount_multiple,
        'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

        'payment_status'        => '1',
        'booking_payment_id'    => $booking_payment_id,
    );
    $this->db->where('id',$booking_id);
    $this->db->update('tbl_new_booking',$update_data);

    return true;
}

public function counter_product_bill_generation(){
    // echo '<pre>'; print_r($_POST); exit();
    $is_counter = $this->input->post('is_counter');
    $all_payment_mode = $this->input->post('payment_mode');
    $all_transaction_id = $this->input->post('transaction_id');
    $all_mode_amount = $this->input->post('mode_amount');

    $payment_mode_multiple = !empty($all_payment_mode) ? implode(',',$all_payment_mode) : null;
    $payment_transaction_id_multiple = !empty($all_transaction_id) ? implode(',',$all_transaction_id) : null;
    $payment_amount_multiple = !empty($all_mode_amount) ? implode(',',$all_mode_amount) : null;
    
    $payment_mode = !empty($all_payment_mode) && count($all_payment_mode) == 1 ? $all_payment_mode[0] : null;
    $transaction_id = !empty($all_transaction_id) && count($all_transaction_id) == 1 ? $all_transaction_id[0] : null;

    $adjust_amount = $this->input->post('adjust_amount');
    $adjust_amount_remark = $this->input->post('adjust_amount_remark');
    $amount_round_type = $this->input->post('amount_round_type');
    $rounded_bill_amount = $this->input->post('rounded_bill_amount');
                
    $discount_in_per = $this->input->post('discount_in_per');
    $discount_in_rs = $this->input->post('discount_in_rs');

    $selected_product_id = !empty($this->input->post('selected_product_id')) ? $this->input->post('selected_product_id') : [];
    $customer_id = $this->input->post('customer_name');
    $product_price = $this->input->post('price');
    $is_gst_applicable = $this->input->post('is_gst_applicable');
    $gst_amount = $this->input->post('gst_amount') != "" ? $this->input->post('gst_amount') : 0.00;
    $total_product_amount = $product_price;
    $product_payable_amount = $total_product_amount;

    $payable_amount = $product_payable_amount;
    $booking_amount = $payable_amount - $discount_in_rs;
    $grand_total_amount = $booking_amount + $gst_amount;
    
    $this->db->where('id',$customer_id);
    $single_customer = $this->db->get('tbl_salon_customer')->row();

    $booking_data = array(
        'branch_id' 			=> $this->session->userdata('branch_id'),
        'salon_id' 				=> $this->session->userdata('salon_id'),
        'booking_type' 		    => '1',
        'is_guest_booking' 		=> !empty($single_customer) ? $single_customer->is_guest : '0',
        'is_direct_billing'     => '1',
        'customer_name' 		=> $customer_id,
        'is_membership_booking' => '0',
        'products' 		        => !empty($selected_product_id) ? implode(',',$selected_product_id) : '',
        'total_product_price'   => $total_product_amount,
        'product_price'         => $product_payable_amount,
        'payble_price'          => $payable_amount,
        'total_discount_amount' => $discount_in_rs,
        'booking_amount'        => $booking_amount,
        'gst_amount'            => $gst_amount,
        
        'is_gst_applicable'     => $this->input->post('is_gst_applicable') == '1' ? $this->input->post('is_gst_applicable') : '0',
        'salon_gst_no'          => $this->input->post('salon_gst_no'),
        'salon_gst_rate'        => $this->input->post('gst_rate'),

        'amount_to_paid'        => $grand_total_amount,
        'stylist_id'			=> $this->input->post('employee'),
        'booking_date'          => date("Y-m-d",strtotime($this->input->post('service_date'))),
        'created_on'            => date("Y-m-d H:i:s"),
        'is_counter'            => $this->input->post('employee') == "" ? $is_counter : null
    );
    // echo '<pre>'; print_r($booking_data); e  xit();
    $this->db->insert('tbl_new_booking', $booking_data);
    $booking_id = $this->db->insert_id();

    $order_counts = $this->get_saloon_branch_total_orders($this->session->userdata('salon_id'),$this->session->userdata('branch_id'));
    $branch_formatted = sprintf('%03d', $this->session->userdata('branch_id'));
    $salon_formatted = sprintf('%03d', $this->session->userdata('salon_id'));
    $count_formatted = sprintf('%04d', ($order_counts + 1));
    $invoice_no = $branch_formatted.$salon_formatted.$count_formatted;

    $update_data = array(
        'receipt_no'    =>  $invoice_no,
    );
    $this->db->where('id',$booking_id);
    $this->db->update('tbl_new_booking',$update_data);

    $this->db->where('id',$booking_id);
    $single = $this->db->get('tbl_new_booking')->row();
    $booking_data = array(
        'branch_id' 			=> $this->session->userdata('branch_id'),
        'salon_id' 				=> $this->session->userdata('salon_id'),
        'booking_type' 		    => '1',
        'stylist_id' 		    => $this->input->post('employee'),
        'booking_id' 		    => $booking_id,
        'booking_date'          => date('Y-m-d',strtotime($single->booking_date)),
        'customer_name' 		=> $customer_id,
        'is_membership_booking' => '0',
        'products' 		        => !empty($selected_product_id) ? implode(',',$selected_product_id) : '',
        'total_product_price'   => $total_product_amount,
        'product_price'         => $product_payable_amount,
        'payble_price'          => $payable_amount,
        'reward_discount_amount'=> '0',
        'extra_discount_amount'             =>  $discount_in_rs,
        'extra_discount_in_per'             =>  $discount_in_per,
        'total_discount_amount'             => $discount_in_rs,
        'used_rewards'          => '0',
        'booking_amount'        => $booking_amount,
        'gst_amount'            => $gst_amount,
        'amount_to_paid'        => $grand_total_amount,
        'payment_date'          => date('Y-m-d',strtotime($single->booking_date)),

        'payment_mode'          => $payment_mode,
        'transaction_id'        => $transaction_id,
        
        'payment_mode_multiple'             => $payment_mode_multiple,
        'payment_amount_multiple'           => $payment_amount_multiple,
        'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,
        
        'is_gst_applicable'     => $this->input->post('is_gst_applicable') == '1' ? $this->input->post('is_gst_applicable') : '0',
        'salon_gst_no'          => $this->input->post('salon_gst_no'),
        'salon_gst_rate'        => $this->input->post('gst_rate'),

        'send_appointment_details'          => null,

        'payment_status'        => '1',
        'created_on'            => date("Y-m-d H:i:s"),
        'is_counter'                        => $this->input->post('employee') == "" ? $is_counter : null,
        
        'adjust_amount'                     => $adjust_amount,
        'adjust_amount_remark'              => $adjust_amount_remark,
        'amount_round_type'                 => $amount_round_type,
        'rounded_bill_amount'               => $rounded_bill_amount,
        'total_due_while_bill'              => $rounded_bill_amount + $this->input->post('previous_due_amount'),
        'actual_paid_amount'                => $this->input->post('actual_paid_amount'),
        'customer_pending_amount'           => $this->input->post('new_due_amount'),
    );
    // echo '<pre>'; print_r($not_included_product_details_ids); exit();
    $this->db->insert('tbl_service_payment', $booking_data);
    $booking_payment_id = $this->db->insert_id();

    $receipt_data = array(
        'receipt_no'   => $single->receipt_no.'-'.$booking_payment_id,
    );
    $this->db->where('id',$booking_payment_id);
    $this->db->update('tbl_service_payment',$receipt_data);


    $incentive_amount = 0;        
    if($selected_product_id != "" && is_array($selected_product_id) && !empty($selected_product_id)){
        for($i=0;$i<count($selected_product_id);$i++){
            $product_id = $selected_product_id[$i];
            $this->db->where('tbl_product.branch_id',$this->session->userdata('branch_id'));
            $this->db->where('tbl_product.salon_id',$this->session->userdata('salon_id'));
            $this->db->where('tbl_product.id',$product_id);
            $this->db->where('tbl_product.is_deleted','0');
            $single_product = $this->db->get('tbl_product');
            $single_product = $single_product->row();
            if(!empty($single_product)){
                // echo '<pre>'; print_r($single_product);
                $categoryID = $single_product->product_category;
                $productID = $single_product->id;
                $product_price = $single_product->selling_price;
                $product_original_price = $single_product->selling_price;
                $is_discount_applied = '0'; 
                $product_quantity = 1; 
                $total_single_product_price = $product_price * $product_quantity; 

                //calculate single product incentive
                $product_discount_row_id = '';
                $is_product_discount_applied = '0';
                $employee_product_incentive = '';

                $product_applied_discount = $this->Salon_model->get_customer_product_applied_discount($customer_id,$single_product->id);
                if($product_applied_discount['is_discount_applied'] == '1'){
                    $product_discount_row_id = $product_applied_discount['discount_row_id'];
                    $employee_product_incentive = $product_applied_discount['employee_product_incentive'];
                }

                $single_incentive_rate = $employee_product_incentive != "" ? (float)$employee_product_incentive : 0.00;
                $single_incentive_amt = $product_quantity * $single_incentive_rate;

                $discount_share_coupon_amount = 0;
                $discount_share_reward_amount = 0;
                $discount_share_extra_amount = 0;
                $discount_share_giftcard_amount = 0 ;
                $discount_share_membership_amount = 0;
                $received_total = $total_product_amount;
                if($received_total != "" && $received_total != "0.00" && $received_total != null && $received_total != 0){
                    $price_share_in_total = (float)(($total_single_product_price/$received_total) * 100);
                    $discount_share_extra_amount = (float)(($discount_in_rs * $price_share_in_total) / 100);
                }

                $discount_share_membership_amount_per_product = $discount_share_membership_amount/$product_quantity;
                $discount_share_coupon_amount_per_product = $discount_share_coupon_amount/$product_quantity;
                $discount_share_reward_amount_per_product = $discount_share_reward_amount/$product_quantity;
                $discount_share_extra_amount_per_product = $discount_share_extra_amount/$product_quantity;
                $discount_share_giftcard_amount_per_product = $discount_share_giftcard_amount/$product_quantity;

                $received_discount_amount_per_product_while_booking = $discount_share_membership_amount_per_product + $discount_share_coupon_amount_per_product + $discount_share_reward_amount_per_product + $discount_share_extra_amount_per_product + $discount_share_giftcard_amount_per_product;
                
                $total_single_product_discount = $discount_share_membership_amount + $discount_share_coupon_amount + $discount_share_reward_amount + $discount_share_giftcard_amount + $discount_share_extra_amount;
                $single_product_discounted_amount = $total_single_product_price - $total_single_product_discount;

                $stylist_data = array(
                    'booking_id' 		    => $booking_id,
                    'branch_id' 			=> $this->session->userdata('branch_id'),
                    'salon_id' 				=> $this->session->userdata('salon_id'),
                    'customer_name' 		=> $customer_id,
                    'stylist_id' 		    => $this->input->post('employee'),
                    'category_id'     		=> $categoryID,
                    'product_id'     		=> $productID,
                    'single_product_price'  => $product_price,
                    'original_single_product_price' => $product_original_price,
                    'quantity'              => $product_quantity,
                    'created_on'            => date("Y-m-d H:i:s"),
                    'booking_date'          => date("Y-m-d",strtotime($this->input->post('service_date'))),
                    'is_discount_applied'                           => $is_product_discount_applied,

                    'payment_date'          => date('Y-m-d',strtotime($single->booking_date)),                    

                    'payment_mode'          => $payment_mode,
                    
                    'payment_mode_multiple'             => $payment_mode_multiple,
                    'payment_amount_multiple'           => $payment_amount_multiple,
                    'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

                    'payment_status'        => '1',
                    'booking_payment_id'    => $booking_payment_id,                         
                    'quantity_after_bill'   => $product_quantity,                            
                    'used_barcodes'         => null,       
                            
                    'stylist_after_bill'    => $this->input->post('employee'),           
                            
                    'product_discount_row_id'               => $product_discount_row_id,
                    'stylist_incentive_for_single_product'  => $employee_product_incentive,
                    'stylist_incentive_amount'              => $single_incentive_amt,                    
                    'product_received_discount'     	            => '0',     
                    
                    'total_product_price'           => $total_single_product_price,
                    'total_product_price_after_bill'=> $total_single_product_price,
                    
                    'received_discount_amount_while_booking'     	=> $total_single_product_discount,
                    'received_discount_amount_per_product_while_booking' => $received_discount_amount_per_product_while_booking,
                    'received_membership_discount_while_booking'    => $discount_share_membership_amount,
                    'received_coupon_discount_while_booking'        => $discount_share_coupon_amount,
                    'received_reward_discount_while_booking'        => $discount_share_reward_amount_per_product,
                    'received_giftcard_discount_while_booking'      => $discount_share_giftcard_amount,
                    'product_discounted_price_while_booking'     	=> $single_product_discounted_amount,
                    
                    'received_discount_amount_while_bill'     	    => $total_single_product_discount,
                    'received_discount_amount_per_product_while_bill'    => $received_discount_amount_per_product_while_booking,
                    'received_membership_discount_while_bill'       => $discount_share_membership_amount,
                    'received_coupon_discount_while_bill'           => $discount_share_coupon_amount,
                    'received_reward_discount_while_bill'           => $discount_share_reward_amount_per_product,
                    'received_giftcard_discount_while_bill'         => $discount_share_giftcard_amount,
                    'product_discounted_price_while_bill'     	    => $single_product_discounted_amount,
                );
                $this->db->insert('tbl_only_product_booking_details', $stylist_data);
                $only_product_details_id = $this->db->insert_id();  
                
                $product_single_details = $this->get_product_details($productID);
                if(!empty($product_single_details)){         
                    $opening = $product_single_details->current_stock;                              
                    $quantity = $product_quantity;                             
                    $closing = $opening - $quantity;                         
                    $outward_data = array(
                        'branch_id'         => $this->session->userdata('branch_id'),
                        'salon_id'          => $this->session->userdata('salon_id'),
                        'booking_id'        => $booking_id,
                        'booking_type'      => '0',
                        'booking_service_details_id'=> null,
                        'booking_product_details_id'=> $only_product_details_id,
                        'booking_service_id'        => null,
                        'booking_product_id'        => $product_single_details->id,
                        'opening_stock'     => $opening,
                        'closing_stock'     => $closing,
                        'quantity'          => $quantity,
                        'purchase_price'    => $product_price,
                        'entry_by'          => $this->session->userdata('branch_id'),
                        'created_on'        => date("Y-m-d H:i:s")
                    );
                    $this->db->insert('tbl_product_outward_while_booking_details', $outward_data);
                    $stock_outward_id = $this->db->insert_id();

                    $this->db->where('id', $product_single_details->id);
                    $this->db->where('branch_id', $this->session->userdata('branch_id'));
                    $this->db->where('salon_id', $this->session->userdata('salon_id'));
                    $this->db->update('tbl_product', array('current_stock'=>(int)$closing));

                    if($used_barcode != ""){
                        $barcode_entry = array(
                            'used_on'           => date('Y-m-d H:i:s',strtotime($this->input->post('service_date'))),
                            'used_in_booking_id'=> $booking_id,
                            'product_status'    => '1',
                            'booking_type'      => '0',
                            'stock_outward_while_booking_id'      => $stock_outward_id,
                        );
                        $this->db->where('id', $used_barcode);
                        $this->db->where('product_name', $product_single_details->id);
                        $this->db->update('tbl_product_barcode', $barcode_entry);      
                    }                                            
                }
                
                $incentive_amount = (float)$incentive_amount + (float)$single_incentive_amt;
            }
        }
    }

    // stylist_incentive_setup
    if($incentive_amount > 0 && $this->input->post('employee') != ""){
        $incentive_data = array(
            'incentive_type'  => '1',
            'employee_id'     =>  $this->input->post('employee'),
            'branch_id'       =>  $this->session->userdata('branch_id'),
            'salon_id'        =>  $this->session->userdata('salon_id'),
            'booking_id'      =>  $booking_id,
            'booking_payment_id'    =>  $booking_payment_id,
            'booking_type'    => '0',
            'products' 		  => !empty($selected_product_id) ? implode(',',$selected_product_id) : '',
            'incentive_amount'=>  $incentive_amount,
            'incentive_added_on'    => date("Y-m-d H:i:s"),
            'created_on'            => date("Y-m-d H:i:s")
        );
        $this->db->insert('tbl_employee_incentive_entry',$incentive_data);
    }
    //new product added billing end

    
    $this->db->where('id',$customer_id);
    $customer = $this->db->get('tbl_salon_customer')->row();
    $pre_total_bill_amount = (float)$customer->total_bill_amount;
    $pre_total_paid_amount = (float)$customer->total_paid_amount;
    $pre_current_pending_amount = (float)$customer->current_pending_amount;

    $actual_paid_amount = $this->input->post('actual_paid_amount');

    $new_total_bill_amount = $pre_total_bill_amount + (float)$rounded_bill_amount;
    $new_total_paid_amount = $pre_total_paid_amount + (float)$actual_paid_amount;

    $new_current_pending_amount = ((float)$rounded_bill_amount + (float)$pre_current_pending_amount) - (float)$actual_paid_amount;

    $payment_entry_data = array(
        'customer_id'     =>  $customer_id,
        'branch_id'       =>  $this->session->userdata('branch_id'),
        'salon_id'        =>  $this->session->userdata('salon_id'),
        'booking_id'      =>  $booking_id,
        'booking_type'    => '1',
        'paid_amount'     =>  $paid_amount,
        'type' 		                 => '0',
        'remark' 	                 => 'Payment for product counter bill generation',
        'opening_pending_amount'     =>  $pre_current_pending_amount,
        'closing_pending_amount'     =>  $new_current_pending_amount,                    
        'total_bill_amount'          =>  $pre_total_bill_amount,
        'total_paid_amount'          =>  $pre_total_paid_amount,
        'booking_payment_amount'     =>  $rounded_bill_amount,
        'booking_payment_id'         =>  $booking_payment_id,
        'payment_date'    =>    date('Y-m-d',strtotime($single->booking_date)),                 

        'payment_mode'          => $payment_mode,
        'transaction_id'        => $transaction_id,
        
        'payment_mode_multiple'             => $payment_mode_multiple,
        'payment_amount_multiple'           => $payment_amount_multiple,
        'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

        'created_on'      =>    date("Y-m-d H:i:s")
    );
    $this->db->insert('tbl_booking_payment_entry',$payment_entry_data);

    $payment_data = array(
        'total_bill_amount'         =>  $new_total_bill_amount,
        'total_paid_amount'         =>  $new_total_paid_amount,
        'current_pending_amount'    =>  $new_current_pending_amount,
    );
    $this->db->where('id',$customer_id);
    $this->db->update('tbl_salon_customer',$payment_data);   
    
    $update_data = array(
        'payment_date'          => date('Y-m-d',strtotime($single->booking_date)),              

        'payment_mode'          => $payment_mode,
        
        'payment_mode_multiple'             => $payment_mode_multiple,
        'payment_amount_multiple'           => $payment_amount_multiple,
        'payment_transaction_id_multiple'   => $payment_transaction_id_multiple,

        'payment_status'        => '1',
        'booking_payment_id'    => $booking_payment_id,
    );
    $this->db->where('id',$booking_id);
    $this->db->update('tbl_new_booking',$update_data);

    return true;
}

public function get_current_total_emergency_bills(){
    $this->db->where('branch_id',$this->session->userdata('branch_id'));
    $this->db->where('salon_id',$this->session->userdata('salon_id'));
    $this->db->where('is_direct_billing','1');
    $this->db->where('booking_type','0');
    $this->db->where('is_deleted','0');
    $this->db->where('DATE(payment_date)',date('Y-m-d'));
    $result = $this->db->get('tbl_new_booking');
    $result = $result->num_rows();
    return $result;
}

public function upload_customers(){
    $branch_id = $this->session->userdata('branch_id') != "" ? $this->session->userdata('branch_id') : $this->input->post('branch_id');
    $this->db->where('id',$branch_id);
    $this->db->where('is_deleted','0');
    $exist = $this->db->get('tbl_branch')->row();
    if(!empty($exist)){
        $salon_id = $exist->salon_id;
        $branch_id = $exist->id;

        $this->load->library('upload');
        $this->load->helper('url');

        $config['upload_path'] = './admin_assets/';
        $config['allowed_types'] = 'xlsx|xls|csv';
        $config['max_size'] = 1024;
        $config['file_name'] = 'customers_data';
        
        $duplicate_records = [];
        $total_records = 0;
        $valid = 0;

        $this->upload->initialize($config);
        if ($this->upload->do_upload('file')) {
            $fileData = $this->upload->data();
            $filePath = './admin_assets/' . $fileData['file_name'];
            if (pathinfo($filePath, PATHINFO_EXTENSION) == 'csv') {
                if (($handle = fopen($filePath, 'r')) !== FALSE) {
                    $isHeaderRow = true;
                    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
                        if ($isHeaderRow) {
                            $isHeaderRow = false;
                            continue;
                        }

                        $mobile = trim($data[1]);
                        $mobile = $mobile != "" ? substr($mobile, -10) : '';
                        if($mobile != ""){
                            $gender = strtolower(trim($data[2]));
                            $gender = $gender == 'male' ? '0' : ($gender == 'female' ? '1' : '');                            
                            $this->db->where('gender',$gender);
                            $this->db->where('customer_phone',$mobile);
                            $this->db->where('is_deleted','0');
                            $this->db->where('branch_id',$branch_id);
                            $this->db->where('salon_id',$salon_id);
                            $this->db->limit(1);
                            $exist = $this->db->get('tbl_salon_customer')->row();
                            if(empty($exist)){ 
                                $name = trim($data[0]);
                                $user_data = array(
                                    'full_name'         =>  $name,
                                    'customer_phone'    =>  $mobile,
                                    'salon_id'          =>  $salon_id,
                                    'branch_id'         =>  $branch_id,
                                    'gender'            =>  $gender,
                                    'registered_from'   =>  '2',
                                    'created_on'        =>  date('Y-m-d H:i:s')
                                );
                                $this->db->insert('tbl_salon_customer',$user_data);
                                $valid += 1;
                            }else{
                                $duplicate_records[] = $exist->id;
                            }
                            $total_records += 1;
                        }
                    } 
                    fclose($handle);
                }
				$this->session->unset_userdata('ids');
				$session = array(
					'ids' 	=> $duplicate_records
				);	
				$this->session->set_userdata($session);
                redirect('upload_customers?uploaded&valid=' . base64_encode($valid) . '&total=' . base64_encode($total_records));
                return true;
            } else {
                echo '<p style="color: red;">Invalid file format. Please upload a CSV file.</p>';exit;
                return false;
            }
        } else {
            echo '<p style="color: red;">' . $this->upload->display_errors() . '</p>';exit;
            return false;
        }
    }else{
        return false;
    }
}
public function check_stylist_available_slot_reservation_statuswise($branch_id,$salon_id,$stylist_id,$slot){     
    $this->db->where('slot', $slot);
    $this->db->where('stylist_id', $stylist_id);
    $this->db->where('branch_id', $branch_id);
    $this->db->where('salon_id', $salon_id);
    $this->db->where('status', '0');
    $this->db->where('expire_on >', date('Y-m-d H:i:s'));
    $existing = $this->db->get('tbl_stylist_slot_reservations')->row();
    if(!empty($existing)){
        return false; // Reserved so stylist not available
    }else{
        return true; // Not Reserved so stylist available
    }
}

public function setDashboardCalendar(){
    $selected_date = $this->input->post('date') != "" ? date('Y-m-d',strtotime($this->input->post('date'))) : '';
	$salon_employee_list = $this->Salon_model->get_all_salon_stylists_bookingwise();
    $working_hrs = $this->get_salon_working_hr_times($selected_date,$this->session->userdata('salon_id'),$this->session->userdata('branch_id'));
    if(!empty($working_hrs) && !empty($salon_employee_list)){        
        $booking_rules = $this->Salon_model->get_booking_rules();
        if (!empty($booking_rules)) {
            $rules_employee_selection = $booking_rules->employee_selection;
            $slot = $booking_rules->slot_time;
            $days_early_booking = $booking_rules->max_booking_range_day;
            $minutes_early_booking = $booking_rules->booking_time_range;
            if ($days_early_booking != "") {
                $max_date = date('Y-m-d', strtotime('+' . $days_early_booking . ' day'));
            } else {
                $max_date = date('Y-m-d', strtotime('+0 day'));
            }
        } else {
            $rules_employee_selection = '1';
            $slot = 5;
            // $minutes_early_booking = $booking_rules->buffering_time;
            $minutes_early_booking = 0;
            $max_date = date('Y-m-d', strtotime('+0 day'));
        }
        $today = date('Y-m-d');
        $hours = floor($slot / 60);
        $minutes = $slot % 60;
        $hoursFormatted = str_pad($hours, 2, '0', STR_PAD_LEFT);
        $minutesFormatted = str_pad($minutes, 2, '0', STR_PAD_LEFT);
        
        $slotDuration = "'{$hoursFormatted}:{$minutesFormatted}:00'";

        $start = strtotime($working_hrs['from']);
        $end = strtotime($working_hrs['to']);
        list($h, $m, $s) = explode(':', str_replace("'", "", $slotDuration));
        $interval = ($h * 3600) + ($m * 60) + $s;
        ?>
        <style>
            #calendar {
                display: grid;
                grid-template-columns: 120px repeat(<?= count($salon_employee_list) ?>, 1fr);
            }
            .header {
                background: #f0f0f0;
                font-weight: bold;
                padding: 5px;
                border: 1px solid #ccc;
                text-align: center;
            }
            .time-slot {
                background: #f9f9f9;
                font-weight: bold;
                padding: 5px;
                border: 1px solid #ccc;
            }
            .cell {
                border: 1px solid #ddd;
                height: 35px;
                cursor: pointer;
            }
            .cell.selected {
                background-color: #b2f7b2;
            }
            .cell.booked {
                background-color: #f77;
                cursor: not-allowed;
                pointer-events: none;
            }
        </style>
        <div class="header">Time</div>
        <?php foreach ($salon_employee_list as $stylist){ ?>
            <div class="header"><?= htmlspecialchars($stylist->full_name) ?></div>
        <?php } ?>
        <?php
        for ($t = $start; $t < $end; $t += $interval){
            $timeStr = date('H:i', $t);
        ?>
            <div class="time-slot"><?= date('h:i A',strtotime($timeStr)); ?></div>
            <?php 
            foreach ($salon_employee_list as $stylist){ 
                $calendar_data = $this->get_stylistwise_calender_data($selected_date, $stylist->id)['bookings'];
                $shift_details = $this->get_stylist_shifts($selected_date,$stylist->id);
                $isBooked = false;
                $bookingInfo = null;
                
                if(!empty($calendar_data)){
                    foreach ($calendar_data as $booking){
                        $startTime = strtotime($booking['service_start_time']);
                        $endTime = strtotime($booking['service_end_time']);
            
                        if ($t >= $startTime && $t < $endTime){
                            $isBooked = true;
                            $bookingInfo = $booking;
                            break;
                        }
                    }
                }

                if ($isBooked){
                    ?>
                    <div class="cell booked" title="Booking: <?= $bookingInfo['customer_full_name'] ?> - <?= $bookingInfo['booking_description'] ?>">
                        <?= htmlspecialchars($bookingInfo['customer_full_name']) ?><br>
                        <small><?= date('h:i A', strtotime($bookingInfo['service_start_time'])) ?> - <?= date('h:i A', strtotime($bookingInfo['service_end_time'])) ?></small>
                    </div>
                <?php } else { ?>
                    <div class="cell" data-time="<?= $timeStr ?>" data-stylist="<?= $stylist->id ?>"></div>
                <?php } ?>
            <?php } ?>
        <?php } ?>
    <?php
    }else{
    ?>
    <div>
        <label>Salon is closed for selected date.</label>
    </div>
    <?php
    }
}
}